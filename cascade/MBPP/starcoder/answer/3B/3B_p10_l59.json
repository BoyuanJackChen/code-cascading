[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    for element in test_tup1:\n        if element in test_tup2:\n            return element\n    return None"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two sets to store the unique elements of each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets and convert it to a list\n    shared_elements = list(set1.intersection(set2))\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n\n    # Iterate through the first list\n    for element in list1:\n        # If the element exists in the second list\n        if element in list2:\n            # Add the element to the set\n            shared_set.add(element)\n\n    # Convert the set back to a tuple\n    return tuple(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    # Iterate over each element in the first list\n    for item1 in test_tup1:\n        # Check if it exists in the second list\n        if item1 in test_tup2:\n            shared_list.append(item1)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1 & set2\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # creating an empty dictionary to store the elements in test_tup1\n    dict1 = {}\n    # iterating through test_tup1 and adding elements to the dictionary\n    for element in test_tup1:\n        if element in dict1:\n            dict1[element] += 1\n        else:\n            dict1[element] = 1\n    # creating an empty dictionary to store the elements in test_tup2\n    dict2 = {}\n    # iterating through test_tup2 and adding elements to the dictionary\n    for element in test_tup2:\n        if element in dict2:\n            dict2[element] += 1\n        else:\n            dict2[element] = 1\n    # iterating through the dictionary of test_tup2 to find the shared elements\n    for element in dict2:\n        if element in dict1 and dict1[element] == dict2[element]:\n            print(element)\n    # returning the shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sieve_of_eratosthenes(limit):\n    \"\"\"\n    Generate a list of all prime numbers up to the given limit using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i**2, limit + 1, i):\n                primes[j] = False\n    return [i for i in range(2, limit + 1) if primes[i]]\n\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers up to the given limit using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    limit = n * (n + 1) // 2\n    primes = sieve_of_eratosthenes(limit)\n    if n in primes:\n        primes.remove(n)\n    return primes\n\n\nif __name__ == '__main__':\n    limit = int(input(\"Enter a limit (integer): \"))\n    non_primes = is_not_prime(limit)\n    print(\"Non-prime numbers up to\", limit, \"are:\", non_primes)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns a boolean value.\n    True if n is not a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\ndef main():\n    print(is_not_prime(15)) # Output: True\n    print(is_not_prime(2)) # Output: False\n    print(is_not_prime(4)) # Output: True\n    print(is_not_prime(7)) # Output: True\n    print(is_not_prime(11)) # Output: False\n    print(is_not_prime(14)) # Output: True\n    print(is_not_prime(17)) # Output: False\n    print(is_not_prime(20)) # Output: True\n    print(is_not_prime(25)) # Output: False\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\nprint(is_not_prime(20))\nprint(is_not_prime(5))\nprint(is_not_prime(7))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n to store the n largest integers\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        # If the size of the heap becomes greater than n, remove the smallest integer from the heap\n        if len(heap) > n:\n            hq.heappop(heap)\n    # Return the n largest integers in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > hq.heappop(heap):\n                hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a max heap of size n\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    # Extract the n largest integers from the heap and return them in descending order\n    result = [hq.heappop(max_heap) for _ in range(n)]\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(nums))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a max heap with the first n elements of the list\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Remove the first element and add the next element to the max heap\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            # If the next element is greater than the maximum element in the heap, replace it\n            max_heap[0] = nums[i]\n            # Update the heap property\n            hq.heapify(max_heap)\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns the n largest numbers in descending order.\n    '''\n    # Use a min heap to store the largest n numbers\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap, num)\n    # Return the heap as the result\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers into a min heap\n    heap = hq.nsmallest(n, nums)\n\n    # convert the min heap back into a list of integers and return it\n    return [x for x in heap]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize a variable to store the difference between the two numbers\n    diff = 0\n    # Convert the first number to binary string and convert the second number to binary string\n    bin_x = bin(x)[2:]\n    bin_y = bin(y)[2:]\n    # Calculate the difference between the binary strings\n    for i in range(len(bin_x)):\n        if bin_x[i]!= bin_y[i]:\n            diff = i\n            break\n    # If the difference is 1, then the two numbers differ at one bit position only\n    if diff == 1:\n        print(\"The two numbers differ at one bit position only.\")\n    else:\n        print(\"The two numbers do not differ at one bit position only.\")"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the binary representation of x to an integer\n    x = int(bin(x)[2:], 2)\n    \n    # Convert the binary representation of y to an integer\n    y = int(bin(y)[2:], 2)\n    \n    # Check if the binary representation of x and y are equal after the bit position where the difference is\n    if x ^ y == (x ^ x & y):\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:  # Check if x is a power of 2 using bitwise AND with its complement and comparing it with 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = (3*x) + 1\n        count += 1\n    if count == 1:\n        print(\"The two numbers differ at one bit position only.\")\n    else:\n        print(\"The two numbers differ in more than one bit position.\")"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the input number to binary string\n    num = bin(x)[2:]\n    \n    # Check whether the difference between the binary strings of two numbers has only one bit set or not\n    if len(set(num)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x % 2 == 1:\n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Return False if x is 0 or 1\n    if x == 0 or x == 1:\n        return False\n    \n    # Find the last set bit position of x\n    last_set_bit_pos = len(bin(x)[2:]) - 1\n    \n    # Iterate from the last set bit position and check if x is a power of 2\n    for i in range(last_set_bit_pos):\n        if ((x >> i) & 1)!= ((x >> i+1) & 1):\n            return False\n    \n    # If all the bits of x are same for all the positions, then it is a power of 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:  # Check if x has only one bit set\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words with length less than 4\n    long_words = [word for word in words if len(word) >= 4]\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # Find all words in the text\n    long_words = [word for word in words if len(word) >= 4] # Filter words that are at least 4 characters long\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-word characters and split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    matches = pattern.findall(text)\n    long_words = [word for word in matches if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n\n    # iterate over the list of numbers and square each element\n    squared_nums = [num**2 for num in nums]\n\n    # return the squared list\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j] == str[j:i]: \n                count += 1 \n    return count "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    # store the length of the input string\n    n = len(str)\n\n    # initialize an empty list to store the rotations\n    rotations = []\n\n    # loop through all possible rotations of the input string\n    for i in range(n): \n        for j in range(i+1, n): \n            # check if the substrings are equal after rotation\n            if str[i:j+1] == str[j:i+1][::-1]: \n                # if they are, add the number of rotations to the list\n                rotations.append(j-i+1)\n\n    # return the minimum number of rotations required to get the same string\n    return min(rotations)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Base case: if the string is already the sorted form\n    if str == ''.join(sorted(str)):\n        return 0\n    # If the string is already in reverse order, we don't need any rotations\n    elif str == str[::-1]:\n        return 0\n    # If the string is already in random order, we can try different rotations\n    else:\n        # Initialize variables to keep track of the minimum and maximum rotations required\n        min_rotations = float('inf')\n        max_rotations = 0\n        # Try different rotations and keep track of the minimum and maximum\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    # Check if the sorted form of the string after rotations is equal to the original string\n                    if ''.join(sorted(str[i:j+1])) == str:\n                        min_rotations = min(min_rotations, j-i)\n                    # Check if the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:k+1])) == str:\n                        min_rotations = min(min_rotations, k-i)\n                    # Check if the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[j:k+1])) == str:\n                        min_rotations = min(min_rotations, k-j)\n                    # Check if the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:j+1])) == str[::-1]:\n                        min_rotations = min(min_rotations, j-i)\n                    # Check if the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:k+1])) == str[::-1]:\n                        min_rotations = min(min_rotations, k-i)\n                    # Check if the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[j:k+1])) == str[::-1]:\n                        min_rotations = min(min_rotations, k-j)\n                    # Check if the reverse of the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:j+1], reverse=True)) == str:\n                        min_rotations = min(min_rotations, j-i)\n                    # Check if the reverse of the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:k+1], reverse=True)) == str:\n                        min_rotations = min(min_rotations, k-i)\n                    # Check if the reverse of the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[j:k+1], reverse=True)) == str:\n                        min_rotations = min(min_rotations, k-j)\n                    # Check if the reverse of the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:j+1], reverse=True)) == str[::-1]:\n                        min_rotations = min(min_rotations, j-i)\n                    # Check if the reverse of the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[i:k+1], reverse=True)) == str[::-1]:\n                        min_rotations = min(min_rotations, k-i)\n                    # Check if the reverse of the sorted form of the string after rotations is equal to the original string\n                    elif ''.join(sorted(str[j:k+1], reverse=True)) == str[::-1]:\n                        min_rotations = min(min_rotations, k-j)\n                    # Check if the original string after rotations is equal to the sorted form of the string after rotations\n                    elif str == ''.join(sorted(str[i:j+1])):\n                        min_rotations = min(min_rotations, j-i)\n                    # Check if the original string after rotations is equal to the sorted form of the string after rotations\n                    elif str == ''.join(sorted(str[i:k+1])):\n                        min_rotations = min(min_rotations, k-i)\n                    # Check if the original string after rotations is equal to the"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # initialize the minimum number of rotations to be infinity\n    min_rotations = float('inf')\n    \n    # loop through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # create a new string by swapping the characters at positions i and j\n            new_str = str[:i] + str[j] + str[i:j] + str[j:i] + str[i+1:j]\n            # update the frequency dictionary for the new string\n            freq_new = {}\n            for char in new_str:\n                freq_new[char] = freq_new.get(char, 0) + 1\n            \n            # check if the frequency dictionary of the new string is the same as the frequency dictionary of the original string\n            if freq_new == freq:\n                # if it is, update the minimum number of rotations if the new string has a smaller minimum number of rotations\n                if len(new_str) < len(str):\n                    min_rotations = min(min_rotations, len(str) - len(new_str))\n    \n    # return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if str[i:j+1] == str[j:k+1] == str[k:l+1] == str[l:]:\n                        return l-1-j"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    for i in range(1, n):\n        # check if first i characters and last n-i characters are same\n        if str[:i] == str[-n+i:]:\n            # if same, check for minimum number of rotations required\n            if i < min_rotations:\n                min_rotations = i\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n\n    # count the number of occurrences of each character in the string\n    for i in range(n):\n        char = str[i]\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # find the minimum number of rotations required to get the same string\n    for i in range(1, 26):\n        if count_dict[chr(i+97)] == count_dict[str]:\n            count += 1\n            break\n\n    # return the minimum number of rotations required to get the same string\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # sort the characters by frequency in descending order\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # initialize the minimum number of rotations to be equal to the length of the string\n    min_rotations = len(str)\n\n    # iterate through the sorted characters and check if any character appears more than once\n    for char, count in sorted_chars:\n        if count > 1:\n            # find the last occurrence of the character in the string\n            last_occurrence = str.rfind(char)\n\n            # calculate the number of rotations required to get the same string\n            rotations = (last_occurrence - str.find(char)) // len(char)\n\n            # update the minimum number of rotations\n            min_rotations = min(min_rotations, rotations)\n\n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n\n    for i in range(n-1, 0, -1):\n        if str[:i] == str[i:]:\n            min_rotations = min(min_rotations, i)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the frequency dictionary with the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Create a list of characters based on the frequency dictionary\n    char_list = list(freq.keys())\n\n    # Sort the list of characters in ascending order based on the frequency\n    char_list.sort(key=lambda x: freq[x])\n\n    # Initialize the minimum number of rotations required to get the same string\n    min_rotations = 0\n\n    # Iterate over the characters in the list and check if they are equal to the previous character\n    for i in range(len(char_list)):\n        if char_list[i] == char_list[i-1]:\n            min_rotations += 1\n        else:\n            break\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    # check if the string is empty\n    if not s:\n        return s\n    \n    # initialize the first and last pointers\n    first = 0\n    last = len(s) - 1\n    \n    # find the first occurrence of the character\n    while s[first]!= ch:\n        first += 1\n        if first == last:\n            return \"\"\n    \n    # find the last occurrence of the character\n    while s[last]!= ch:\n        last -= 1\n        if first == last:\n            return \"\"\n    \n    # remove the first and last occurrence of the character\n    return s[:first] + s[first+1:last] + s[last+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    # Check if the character to be removed is the first or last character of the string\n    if s[0] == ch:\n        s = s[1:]\n    elif s[-1] == ch:\n        s = s[:-1]\n    else:\n        # Remove all occurrences of the character in the string\n        s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Removing last occurrence of character\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    # Returning the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s[:s.find(ch)] + s[s.find(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s[:s.find(ch)] + s[s.find(ch)+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch).lstrip(ch).rstrip(ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch): \n    # Remove first occurrence of the character\n    s = s.replace(ch, '', 1)\n    # Remove last occurrence of the character\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments - a string and a character to be removed from the string.\n    It removes the first and last occurrence of the character from the string and returns the result.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    s = s.strip() # remove leading and trailing whitespaces\n    index = s.find(ch) # find the index of the first occurrence of ch\n    if index!= -1: # if the character is found\n        s = s[:index] + s[index+1:] # remove the first occurrence of ch and return the modified string\n    index = s.rfind(ch) # find the index of the last occurrence of ch\n    if index!= -1: # if the character is found\n        s = s[:index] + s[index+1:] # remove the last occurrence of ch and return the modified string\n    return s # return the modified string"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sorted matrix and the sum of its rows\n    sorted_M = []\n    row_sum = 0\n    \n    # Iterate through each row in the matrix\n    for row in M:\n        # Calculate the sum of the row\n        for num in row:\n            row_sum += num\n        \n        # Add the row to the sorted matrix\n        sorted_M.append(row)\n        \n        # Reset the sum of the row\n        row_sum = 0\n    \n    # Sort the sorted matrix in ascending order of row sums\n    sorted_M.sort(key=lambda x: sum(x))\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables\n    n = len(M)\n    count = 0\n    # sort each row of the matrix\n    for i in range(n):\n        M[i].sort()\n    # merge all the sorted rows\n    for i in range(n):\n        for j in range(1, len(M[i])):\n            M[i][j] += M[i][j-1]\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the dimensions of the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Initialize the sum of each row\n    sum_rows = [[0 for j in range(m)] for i in range(n)]\n\n    # Calculate the sum of each row\n    for i in range(n):\n        for j in range(m):\n            sum_rows[i][j] = M[i][j] + sum_rows[i-1][j]\n\n    # Initialize the list to store the sorted matrix\n    sorted_matrix = [[0 for j in range(m)] for i in range(n)]\n\n    # Sort the matrix based on the sum of each row\n    for i in range(n):\n        for j in range(m):\n            index = sum_rows[i][j]\n            sorted_matrix[i][j] = M[i][j]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # Initialize an empty matrix to store the sorted matrix\n    sorted_M = [[0 for i in range(len(M))] for j in range(len(M[0]))]\n    # Initialize two variables to keep track of the row and column indices for the minimum value\n    min_row = 0\n    min_col = 0\n    # Iterate over each element in the matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            # If the current element is less than the minimum value, update the minimum value and its row and column indices\n            if M[i][j] < M[min_row][min_col]:\n                min_row = i\n                min_col = j\n            # If the current element is equal to the minimum value, compare its sum with the sum of the row below it\n            elif M[i][j] == M[min_row][min_col]:\n                if sum(M[i:]) < sum(sorted_M[min_row]):\n                    min_row = i\n                    min_col = j\n    # Iterate over the matrix again and add the minimum value to the sorted matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if i == min_row:\n                sorted_M[j][min_col] = M[i][j]\n            else:\n                sorted_M[j][min_col] = sorted_M[i][j]\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables for keeping track of the current minimum sum and its index\n    current_min = float('inf')\n    min_index = 0\n    \n    # iterate over each element of the matrix\n    for i in range(len(M)):\n        # iterate over each element of the current row\n        for j in range(len(M[i])):\n            # calculate the sum of the current element and the previous minimum sum\n            current_sum = M[i][j] + current_min\n            \n            # if the current sum is smaller than the current minimum sum, update the minimum sum and its index\n            if current_sum < current_min:\n                current_min = current_sum\n                min_index = i\n    \n    # swap the minimum element with the first element of each row\n    for i in range(len(M)):\n        for j in range(1, len(M[i])):\n            M[i][j-1], M[i][j] = M[i][j], M[i][j-1]\n    \n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # Sort the matrix in ascending order of the sum of its rows\n    for i in range(n):\n        for j in range(n - i - 1):\n            if M[j][i] > M[j + 1][i]:\n                M[j][i], M[j + 1][i] = M[j + 1][i], M[j][i]\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    for i in range(n):\n        for j in range(n-i-1):\n            for k in range(i+1):\n                if M[j][k] > M[j][k+1]:\n                    M[j][k], M[j][k+1] = M[j][k+1], M[j][k]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the current row\n        for j in range(i+1, len(M[0])):\n            # find the sum of the current row and element\n            sum_current = sum(M[i]) + M[j][i]\n            # find the sum of the next row and element\n            sum_next = sum(M[i+1]) + M[j+1][i+1]\n            # if the sum of the current row is less than the sum of the next row, swap them\n            if sum_current < sum_next:\n                # swap rows i and i+1\n                M[i], M[i+1] = M[i+1], M[i]\n                # swap elements j and j+1\n                for k in range(len(M[0])):\n                    M[i][k], M[i+1][k] = M[i+1][k], M[i][k]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3.0\n    print(\"The Volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in the length, breadth, and height of a triangular prism as input and returns the volume of the prism.\n    \"\"\"\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h  # Formula to find the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, width and height of a triangular prism and returns its volume.\n    '''\n    area = l * b * h\n    volume = area / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of the sides of a triangular prism as input,\n    and returns the volume of the prism.\n    '''\n    # Calculate the area of the prism\n    area = 0.5 * l * b * h\n\n    # Calculate the volume of the prism\n    volume = area * h\n\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    # Calculate the volume\n    volume = l * b * h\n    # Return the volume\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # Use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, text)\n    # Return True if the pattern is found, else False\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r'([a-z])_([a-z])'\n    \n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z](?=[A-Z])|_(?=[a-z])|[A-Z](?=[A-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'^[a-z]*_[a-z]*$', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)[a-z]+(?=\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z][a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<=\\b)([a-z]+)([a-z]+)(?=_)([a-z]+)_\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z]+(_[a-z]+)*'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to be removed from the first string\n    char_set = set(string.lower())\n    \n    # Loop through the characters in the second string and remove those that are present in the set\n    new_string = ''\n    for char in string:\n        if char not in char_set:\n            new_string += char\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    \n    # Convert the string to a list of characters\n    string_list = list(string)\n    \n    # Remove characters from the list which are present in the second string\n    for char in string_list:\n        if char in list(string):\n            string_list.remove(char)\n    \n    # Convert the list of characters back to a string\n    result = ''.join(string_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    for char in string_list:\n        if char in string:\n            string_list.remove(char)\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char not in string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_list):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char not in remove_list:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert string to list of characters\n    chars = list(string)\n\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through the characters in the string\n    for char in chars:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string1, string2):\n    # Create an empty list to store the characters that need to be removed\n    char_list = []\n    # Convert the first string to a list of characters\n    char_list1 = list(string1)\n    # Convert the second string to a list of characters\n    char_list2 = list(string2)\n    # Loop through each character in the second string and check if it is present in the first string\n    for char in char_list2:\n        if char in char_list1:\n            # If the character is present in the first string, add it to the character list\n            char_list.append(char)\n    # Convert the character list to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    set1 = set(string)\n    set2 = set(string.replace(\" \", \"\"))\n    set1.difference_update(set2)\n    return [chr(x) for x in set1]"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_elements = set()\n    # loop through the array and add unique elements to the set\n    for num in arraynums:\n        unique_elements.add(num)\n    # check if the set has any elements (i.e. if there are duplicates)\n    if len(unique_elements) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the indices of elements\n    indices = {}\n    # Loop through the array and add the indices to the dictionary\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    # Loop through the array and check if any duplicate elements are found\n    for num in arraynums:\n        if num in indices and len(indices[num]) > 1:\n            return True\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # check if the set has any elements\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if the set has any elements\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n    \n    # If the length of the set is less than or equal to the length of the array, there is a duplicate element in the array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_nums = set()\n    \n    # Iterate through the array and add unique elements to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n        else:\n            return True\n    \n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 32 and x <= 60:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x in [1, 3, 7, 12, 18]:\n        return True\n    elif x in [2, 4, 8, 13, 19]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        if x > 1:\n            for i in range(3, int(x**0.5) + 1, 2):\n                if x % i == 0:\n                    return False\n            return True\n        else:\n            return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [2,3,5,7,11,13,17,19]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is divisible by 7 or not\n    if x % 7 == 0:\n        return \"Yes, it's a woodball.\"\n    else:\n        return \"No, it's not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num < int(str(num)[::-1]) * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the number\n    rev_num = str(num)[::-1]\n\n    # Convert the reversed number to an integer\n    rev_num = int(rev_num)\n\n    # Check if the reversed number is one less than twice its original number\n    if rev_num < num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    if num == reverse + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num - num * 10\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    if rev_num < 2*(rev_num//2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is one less than twice its reverse,\n    False otherwise.\n    \"\"\"\n    # convert the input number to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n    # check if the original number is one less than twice its reverse\n    if num < 2 * reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num + 1 == num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n    \n    if reverse == (num - 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to a number\n    rev_num = int(rev_str)\n    # check if the original number is one less than twice its reverse\n    if num == rev_num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sorting the list in ascending order\n    arr.sort()\n\n    # Finding the length of the list\n    n = len(arr)\n\n    # Initialize variables\n    max_num = 0\n    cur_num = 0\n    i = 0\n\n    # Loop through the list\n    while i < n:\n        # Calculate the current number\n        cur_num = cur_num * 10 + arr[i]\n\n        # If the current number is greater than the maximum number\n        if cur_num > max_num:\n            # Update the maximum number\n            max_num = cur_num\n\n        # Increment the counter\n        i += 1\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(1, 10):\n        num = i\n        for digit in arr:\n            num *= digit\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the maximum number that can be formed with the digits.\n\n    Args:\n    arr (list): A list of digits\n\n    Returns:\n    int: The maximum number that can be formed with the given list of digits.\n\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Initialize the maximum number to be formed with the digits of the first number\n    max_num = int(\"\".join(map(str, arr[0])))\n\n    # Iterate over the rest of the numbers\n    for num in arr[1:]:\n        # Initialize a variable to store the largest number formed with the current number\n        curr_max = num\n\n        # Iterate over each digit of the current number and compare it with the largest number formed with any previous number\n        for digit in str(num):\n            new_max = int(str(digit) + str(curr_max))\n\n            if new_max > curr_max:\n                curr_max = new_max\n\n        # Update the maximum number to be formed with the current number\n        max_num = curr_max\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a Python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Initialize a variable max_num to hold the maximum number that can be formed from the given list of digits\n    max_num = 0\n    \n    # Loop through each digit in the given list\n    for digit in arr:\n        # Multiply the current digit by the maximum number that can be formed with all previous digits\n        max_num = max_num * 10 + digit\n    \n    # Return the maximum number that can be formed from the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    max_arr = []\n    \n    for num in arr:\n        for i in range(1,num+1):\n            max_num += i\n        max_arr.append(max_num)\n        max_num = 0\n    \n    return max(max_arr)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y<0) or (x>0 and y>0):\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return \"True\" \n    else: \n        return \"False\" "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the two integers have opposite signs, else False.\n    \"\"\"\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return False\n    elif x < 0 and y < 0: \n        return False\n    elif x < 0 and y > 0: \n        return True\n    else: \n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return \"The two integers have opposite sign\"\n    else:\n        return \"The two integers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Initialize variables\n    count = 1\n    octagonal_num = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the number is an octagonal number\n        if count >= i:\n            if count % 2 == 0:\n                octagonal_num += i * i + count\n            else:\n                octagonal_num += i * i - count\n\n        # Increment count\n        count += 1\n\n    # Return the octagonal number\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize counter variable\n    count = 1\n    \n    # Loop through numbers from 1 to n\n    while count <= n:\n        \n        # Check if the number is an octagonal number\n        if count ** 2 == (8 * count - 1):\n            \n            # If the number is an octagonal number, return True\n            return True\n        \n        # Increment the counter variable\n        count += 1\n        \n    # If the loop completes without finding an octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. n should be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return \"Invalid input. n should be odd.\"\n    else:\n        base = 2**(1/2)\n        return int((n/base + 1)**2 * base * base)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))//2\n\nn = int(input(\"Enter a number: \"))\nprint(is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the first and last octagonal numbers\n    a = 1\n    b = 1\n    # Define a loop to iterate through the range of n\n    for i in range(2, n+1):\n        # Calculate the next octagonal number\n        c = a + b\n        # If the current octagonal number is greater than n, exit the loop\n        if c > n:\n            break\n        # If the current octagonal number is equal to n, return True\n        elif c == n:\n            return True\n        # If the current octagonal number is less than n, add it to the loop variable b\n        else:\n            b = c\n    # If the loop completes without finding the nth octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Convert n to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Check if the first two digits are equal\n    if digits[0] == digits[1]:\n        return False\n    \n    # Check if the sum of the first two digits is equal to the third digit\n    if digits[0] + digits[1] == digits[2]:\n        return True\n    \n    # Check if the sum of the first two digits is equal to the fourth digit\n    if digits[0] + digits[1] == digits[3]:\n        return True\n    \n    # Check if the sum of the first two digits is equal to the fifth digit\n    if digits[0] + digits[1] == digits[4]:\n        return True\n    \n    # Otherwise, n is not an octagonal number\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i * (3*i-1) // 2)\n    return octagonal_numbers\n\nn = int(input(\"Enter a number: \"))\noctagonal_numbers = is_octagonal(n)\nprint(f\"The {n}th octagonal number is {octagonal_numbers[n-1]}\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Check if n is a multiple of 12\n    if n % 12!= 0:\n        raise ValueError(\"Input must be a multiple of 12.\")\n    \n    # Initialize the sum variable\n    sum_of_squares = 0\n    \n    # Iterate over the range of n and calculate the sum of squares of each number\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    \n    # Calculate the sum of the squares of the first n numbers of the sequence\n    sequence_sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    \n    # Return the octagonal number if the sum of squares equals the sequence sum of squares\n    if sum_of_squares == sequence_sum_of_squares:\n        return n\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 1) ** 2\n\ndef nth_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return is_octagonal(n - 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is an octagonal number and False otherwise.\n    A number is considered to be an octagonal number if its square has the form 8^i, where i is an integer.\n    \"\"\"\n    if n < 1:\n        return False\n    elif n < 4:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\nn = int(input(\"Enter a number: \"))\nif is_octagonal(n):\n    print(f\"{n} is an octagonal number.\")\nelse:\n    print(f\"{n} is not an octagonal number.\")"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if sum(int(d) for d in substr) == len(substr):\n                count[substr] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n\n    count = defaultdict(int)\n\n    # Traverse the string to calculate the sum of digits for each substring\n    for i in range(len(s)):\n        count[sum(int(digit) for digit in s[i:])] += 1\n\n    # Calculate the count of substrings with the sum of digits equal to their length\n    count_of_substrings = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count_of_substrings += count[sum(int(digit) for digit in s[i:j+1])]\n\n    return count_of_substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings\n    substrings = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Get the length of the substring\n        substring_length = len(s[i:])\n\n        # Check if the substring sum of digits is equal to its length\n        substring_sum_digits = sum([int(d) for d in s[i:]])\n\n        # Update the count of substrings\n        substrings[substring_sum_digits] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return substrings[substring_sum_digits]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    # loop through the string and calculate the sum of digits of each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # calculate the sum of digits in the substring\n            substring = int(s[i:j+1])\n            # add 1 to the count of the substring if its sum of digits is equal to its length\n            count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = defaultdict(int)\n    for char in s:\n        digit_freq[char] += 1\n\n    # Calculate the sum of digits for each substring\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substrings.append(substring)\n\n    # Return the number of substrings with the sum of digits equal to their length\n    return len(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substr)\n            if digit_sum == len(substr):\n                count[digit_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    char_count = defaultdict(int)\n    for i in range(len(s)):\n        char_count[s[i]] += 1\n\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                num_substrings += 1\n\n    return num_substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Initialize a variable to store the current substring\n        current_substring = \"\"\n        \n        # Loop through each character to the end of the current substring\n        for j in range(i, len(s)):\n            # Add the current character to the current substring\n            current_substring += s[j]\n            \n            # Calculate the sum of digits in the current substring\n            substring_sum = sum(map(int, current_substring))\n            \n            # If the substring sum is equal to its length, increment the count for this substring\n            if substring_sum == len(current_substring):\n                count[current_substring] += 1\n    \n    # Return the count of substrings with sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with a given sum\n    substrings_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of length n\n    for i in range(len(s)):\n        # Iterate through all possible substrings of length n-1\n        for j in range(i+1, len(s)+1):\n            # Extract the substring and calculate its sum of digits\n            substring = s[i:j]\n            sum_digits = sum(int(digit) for digit in substring)\n\n            # If the sum of digits is equal to the length of the substring, increment the count in the dictionary\n            if sum_digits == len(substring):\n                substrings_dict[substring] += 1\n\n    # Return the count of substrings with a given sum\n    return substrings_dict"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"List is empty\")\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    def find_smallest(xs):\n        if len(xs) == 1:\n            return xs[0]\n        elif xs[0] < xs[1]:\n            return xs[0]\n        else:\n            return xs[1]\n    \n    return find_smallest(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest\n    else:\n        raise ValueError(\"List cannot be empty\")"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables\n    max_diff = 0\n    prev_val = None\n    \n    # iterate through the list\n    for val in test_list:\n        # check if the value has changed\n        if val!= prev_val:\n            # check if the previous value is not None\n            if prev_val is not None:\n                # calculate the difference\n                diff = val - prev_val\n                # update the maximum difference\n                if diff > max_diff:\n                    max_diff = diff\n            # update the previous value\n            prev_val = val\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[i][0] - pairs[j][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given tuple list\n    test_list.sort()\n\n    # Initialize variables for the maximum difference and the previous element\n    max_diff = 0\n    prev_element = None\n\n    # Iterate through the list and compare each element with the previous one\n    for element in test_list:\n        if prev_element is not None:\n            # Calculate the difference between the current element and the previous one\n            diff = element - prev_element\n\n            # Update the maximum difference if the current difference is greater than the previous one\n            max_diff = max(max_diff, diff)\n\n        # Update the previous element\n        prev_element = element\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the minimum and maximum values\n    min_val = float('inf')\n    max_diff = 0\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Get the current values and compare them with the minimum value\n        current_min = min(test_list[i])\n        if current_min < min_val:\n            min_val = current_min\n        \n        # Calculate the difference between the current value and the minimum value\n        current_diff = abs(test_list[i][0] - min_val)\n        \n        # Update the maximum difference if necessary\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = {}\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs[(test_list[i], test_list[j])] = 1\n    \n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0]-pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = float('-inf')\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # Update the max_diff variable if the current difference is greater than the current max_diff\n            if diff > max_diff:\n                max_diff = diff\n    # Return the max_diff value\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    pairs_diff = [(test_list[i][0] - test_list[i][1], test_list[i][0] + test_list[i][1]) for i in range(len(test_list)-1)]\n    pairs_diff.sort()\n    return pairs_diff[-1]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a list of tuples of subject and marks\n    subjects = [(subject, marks) for subject, marks in subjectmarks]\n    \n    # Sort the list of tuples based on the marks\n    subjects.sort(key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return subjects"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Use a lambda function to sort the list based on the second element of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subject_marks_list = []\n    for subject, mark in subjectmarks:\n        subject_marks_list.append((subject, mark))\n    subject_marks_list.sort(key=lambda x: x[1])\n    return subject_marks_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list += recursive_list_sum(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        flattened_list = [x for sublist in data_list for x in sublist]\n        return recursive_list_sum(flattened_list) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: concatenate the first element to the result of recursively calling the function with the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten_list(item)\n        else:\n            yield data_list\n    \n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        if isinstance(lst, list):\n            return flatten_list(lst[0]) + flatten_list(lst[1:])\n        else:\n            return lst\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            return [x for y in lst for x in flatten(y)]\n        else:\n            return [lst]\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: empty list\n    if not data_list:\n        return 0\n    \n    # Recursive case: append first element to list and call function with remaining elements\n    else:\n        flat_list = [data_list[0]] + recursive_list_sum(data_list[1:])\n        return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            yield lst\n    \n    total = 0\n    for item in flatten(data_list):\n        total += item\n        \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    pos = 0\n    for num in lst:\n        if num > 0:\n            pos += 1\n    return pos"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for x in lst:\n        if x > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    bell_numbers = set()\n    ways = 0\n    \n    # Generate Bell numbers\n    for i in range(n+1):\n        bell_numbers.add(bell_number_helper(i, n))\n    \n    # Calculate number of ways to partition Bell numbers\n    for i in range(2, n+1):\n        if i in bell_numbers:\n            ways += 1\n    \n    return ways\n\ndef bell_number_helper(i, n):\n    '''\n    Helper function to generate the Bell numbers.\n    '''\n    if i <= n:\n        return i + 1\n    else:\n        return 0"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # If i is a power of 2, then it is a Bell number\n        if i & (i-1) == 0:\n            # Increment the count variable\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for i in range(n+1):\n        bell_numbers.append(bell(i))\n    ways = [0]*(n+1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, n+1):\n        ways[i] = 0\n        for j in range(i):\n            if i % 2 == 0:\n                if bell_numbers[j] + i in bell_numbers:\n                    ways[i] += ways[j]\n            else:\n                if bell_numbers[j] - i in bell_numbers:\n                    ways[i] += ways[j]\n    return ways[n]\n\ndef bell(n):\n    '''\n    A recursive function to generate the Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell(n-1) + bell(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    def helper(n, curr):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            count = 0\n            for i in range(2, n+1):\n                count += helper(i-1, curr+1)\n            return count\n\n    return helper(n, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    ways = 1\n    count = 0\n\n    # Iterate through all possible partitions of the set of Bell numbers\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            count += 1\n            ways *= (j-i+1)\n            ways //= i\n    \n    # Return the count of partitions\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers to 0\n    ways = 0\n\n    # Iterate from 0 to n\n    for i in range(n+1):\n        # Count the number of ways to partition the set of Bell numbers using the i-th Bell number\n        ways += 2**i\n\n    # Return the final count of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return (n * (n - 1)) // 2"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n\n    if A[0] >= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: #base case for empty array\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]: #check for ascending order\n            return False\n        elif A[i] < A[i+1]: #check for descending order\n            if i == 0 or A[i] < A[i-1]: #if this is the first element or if the element is smaller than the previous element, then it is monotonic\n                return True\n            else:\n                return False\n            \n    return True #if no elements are less than the next element, then the array is monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0: \n        return True\n\n    # Initialize a variable to store the first element of the array\n    first = A[0]\n\n    # Loop through the array and check if the current element is greater than the previous element\n    for i in range(1, len(A)): \n        if A[i] > first: \n            return False\n        elif A[i] < first: \n            first = A[i]\n\n    # If we reach here, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2: \n        return True\n    \n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    if n < 2: \n        return True\n    \n    if A[0] <= A[1]: # check for monotonic increasing\n        for i in range(1, n): \n            if A[i] <= A[i-1]: \n                return False\n    else: # check for monotonic decreasing\n        for i in range(1, n): \n            if A[i] >= A[i-1]: \n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Sort the array in ascending order\n    sorted_A = sorted(A)\n\n    # Check whether the array is monotonic or not\n    if sorted_A == A: \n        return True\n    elif sorted_A == A[::-1]: \n        return True\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # check if the array is monotonic\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n        elif A[i] < A[i + 1]:\n            return True\n    \n    # if the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Check whether the given array is monotonic or not.\n    Returns True if the array is monotonic, False otherwise.\n    '''\n\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Compare the first and last elements\n    if A[0] < A[-1]:\n        # If the first element is smaller than the last element,\n        # check if the array is monotonic\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    elif A[0] > A[-1]:\n        # If the first element is greater than the last element,\n        # check if the array is monotonic\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    else:\n        # If the first and last elements are equal, return True\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes a list A and returns True if it is monotonic or False otherwise.\n    A is a list of integers.\n    '''\n    \n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n    \n    for i in range(len(A)-1): \n        if A[i] >= A[i+1]: \n            return False \n    \n    return True "
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:  # base case\n        return True\n    return l[0] in s and is_sublist(l[1:], s[1:])  # recursive case"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # If the sublist is empty, return True\n    if not s:\n        return True\n\n    # Check if the first element of the sublist is present in the list\n    if l[0] in s:\n        # If it is, check if the rest of the sublist is present in the list\n        return is_sublist(l[1:], s[1:])\n    else:\n        # If it's not, return False\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the length of the sublist is 0\n    if len(s) == 0:\n        return True\n    # check if the length of the list is less than the length of the sublist\n    if len(l) < len(s):\n        return False\n    # check if the first element of the sublist matches any element of the list\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    # if none of the above conditions are met, the sublist is not present in the list\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)):\n        if l[i:] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    if not l:\n        return False\n\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return any(is_sublist(sub, s[1:]) for sub in l)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        count += len(i)\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = True\n    for t in Input:\n        if len(t)!= len(Input[0]):\n            equal_length = False\n            break\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize variables to keep track of the length of each tuple\n    length = []\n\n    # Loop through each tuple in the input list\n    for i in Input:\n        # Add the length of the tuple to the list of lengths\n        length.append(len(i))\n\n    # Return True if all tuples have the same length, False otherwise\n    return len(set(length)) == 1"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if all the tuples have equal length or not\n    all_equal = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n\n    # Main loop\n    while gap > 1:\n        # Calculate the new gap size\n        gap = int(gap / 1.3)\n\n        # Move the gap\n        for i in range(gap, n):\n            j = i - gap\n            while j >= 0 and nums[j] > nums[j + gap]:\n                # Swap the elements\n                temp = nums[j]\n                nums[j] = nums[j + gap]\n                nums[j + gap] = temp\n\n            # If we don't swap anything in this gap, the array is already sorted\n            if j + gap == i:\n                break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    i = 0\n    min_idx = 0\n    while swapped:\n        swapped = False\n        for j in range(i, n-i):\n            if nums[j] > nums[j+i]:\n                nums[j], nums[j+i] = nums[j+i], nums[j]\n                swapped = True\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n        nums (list): List of elements to be sorted.\n\n    Returns:\n        Sorted list of elements.\n    '''\n\n    # Initialize parameters\n    n = len(nums)\n    gap = n // 2\n\n    # Iterate until the gap is 1\n    while gap > 1:\n        # Set the gap to half of the previous gap\n        gap = gap // 2\n\n        # Iterate through the list\n        for i in range(gap, n):\n            # Compare the current element with its neighboring elements\n            if nums[i] < nums[i - gap]:\n                # Swap the elements if they are not in the correct order\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    gap = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap //= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = n // gap\n        for i in range(gap, n):\n            key = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > key:\n                nums[j + gap] = nums[j]\n                j -= gap\n            nums[j + gap] = key\n        n = gap\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    max_iter = 1000  # The maximum number of iterations\n\n    # The Comb Sort algorithm\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if swapped:\n            gap = 1\n            swapped = False\n        else:\n            gap = int(gap / 1.3)\n\n        for i in range(max_iter):\n            swapped = False\n            for j in range(n - gap):\n                if nums[j] > nums[j + gap]:\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                    swapped = True\n            if not swapped:\n                break\n        if swapped:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            gap = int(gap/1.3)\n            if gap < 1:\n                gap = 1\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0 and i**2 == n:\n            return True\n        if n%i == 0 and n/i**2 == i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Number cannot be represented as difference of two squares\"\n    elif n == 0:\n        return \"0 cannot be represented as difference of two squares\"\n    else:\n        i = 1\n        while i * i < n:\n            i += 1\n        j = 1\n        while j * j <= n - i * i:\n            j += 1\n        if j * j == n - i * i:\n            return f\"{n} can be represented as difference of two squares as {i} and {j}\"\n        else:\n            return f\"{n} cannot be represented as difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n < 0: \n        return \"The given number must be a positive integer.\"\n    \n    # Check if the given number can be expressed as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i*i + j*j == n:\n                return True\n    \n    # If the given number cannot be expressed as the difference of two squares, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_square(n):\n    '''\n    A helper function to check whether a number is a square or not.\n    '''\n    return n*n == n\n\ndef diff_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a square number\n    if not is_square(n):\n        return \"n is not a square number.\"\n    \n    # Calculate the difference of two squares\n    a = int(n**0.5)\n    b = n - a*a\n    \n    # Check if the difference is also a square\n    if not is_square(b):\n        return \"The difference of n and the square of n is not a square number.\"\n    \n    # If both conditions are met, return True\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n * n\n    b = (n - a) * (n - a)\n    c = a - b\n    \n    if c > 0:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number can be represented as the difference of two squares or not\n    # take the square root of the number and check if the square of the root is an integer\n    root = int(n**(1/2))\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n is a power of 2, then it can be represented as the difference of two squares\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    if n < 1:\n        print(\"The input number must be greater than or equal to 1.\")\n    elif n == 1:\n        return True\n    else:\n        i = 1\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0:\n        return True\n    elif n % 6 == 0:\n        return True\n    elif n % 8 == 0:\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # check if the number is greater than or equal to 0\n    if n < 0:\n        return \"The number must be a non-negative integer.\"\n    \n    # find the square of the number\n    square = n ** 2\n    \n    # find the difference between the square and the square of its square\n    diff_square = square - (square ** 2)\n    \n    # check if the difference is between the square and its square\n    if diff_square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns) - 1):\n        if colors[i]!= colors[i + 1] and colors[i] == patterns[i][0]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of the colors array is equal to the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to store the current color in the sequence\n    current_color = colors[0]\n\n    # Iterate through the patterns array\n    for pattern in patterns:\n        # Check if the current color matches the color in the pattern\n        if current_color!= pattern:\n            return False\n\n        # Otherwise, update the current color to the next one in the sequence\n        current_color = colors[colors.index(pattern) + 1]\n\n    # If we reach this point, it means the sequence is complete, and the function should return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # initialize a dictionary to store the count of each color\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    # loop through the patterns array and check if it follows the sequence\n    for pattern in patterns:\n        # initialize a count variable to 0\n        count = 0\n        # loop through the color sequence in the pattern\n        for color in pattern:\n            # check if the color is in the color_count dictionary\n            if color in color_count:\n                # decrement the count if the color is in the dictionary\n                color_count[color] -= 1\n                # increment the count if the color is in the pattern but not in the dictionary\n                if color in pattern and color not in color_count:\n                    count += 1\n            # if the color is not in the color_count dictionary, it's a new color that needs to be added\n            else:\n                # increment the count if the color is in the pattern\n                if color in pattern:\n                    count += 1\n        # check if the count is equal to the length of the pattern\n        if count == len(pattern):\n            return True\n    \n    # if the function reaches this point, it means the patterns array does not follow the sequence\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize variables\n    pattern_count = 0\n    color_count = 0\n    current_pattern = patterns[0]\n    current_color = colors[0]\n\n    # Loop through the colors and patterns\n    for i in range(1, len(colors) + 1):\n        if colors[i-1] == current_color:\n            color_count += 1\n        else:\n            if pattern_count == 0:\n                return False\n            elif current_pattern == \"R\":\n                if color_count == 4:\n                    current_pattern = patterns[i]\n                    color_count = 0\n                else:\n                    return False\n            elif current_pattern == \"G\":\n                if color_count == 4:\n                    current_pattern = patterns[i]\n                    color_count = 0\n                else:\n                    return False\n            elif current_pattern == \"B\":\n                if color_count == 4:\n                    current_pattern = patterns[i]\n                    color_count = 0\n                else:\n                    return False\n            elif current_pattern == \"Y\":\n                if color_count == 4:\n                    current_pattern = patterns[i]\n                    color_count = 0\n                else:\n                    return False\n            else:\n                return False\n            pattern_count += 1\n            color_count = 1\n            current_pattern = patterns[i]\n            current_color = colors[i]\n\n    if pattern_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[pattern]:\n            pattern += 1\n            if pattern == len(patterns):\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a list to store the matched patterns\n    matched_patterns = []\n    # Initialize a variable to keep track of the current pattern index\n    current_pattern_index = 0\n    # Loop through the colors and patterns lists\n    for color, pattern in zip(colors, patterns):\n        # If the current pattern is the same as the next color in the sequence, add it to the matched_patterns list\n        if color == patterns[current_pattern_index]:\n            matched_patterns.append(pattern)\n            # Increment the current pattern index\n            current_pattern_index += 1\n    # Check if all the patterns in the patterns list have been matched\n    if current_pattern_index == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    sequence = colors.copy()  # make a copy of the colors list\n    for pattern in patterns:\n        if pattern == 'R':\n            sequence.remove('R')\n        elif pattern == 'G':\n            sequence.remove('G')\n        elif pattern == 'B':\n            sequence.remove('B')\n        elif pattern == 'Y':\n            sequence.remove('Y')\n        elif pattern == 'M':\n            sequence.remove('M')\n        elif pattern == 'C':\n            sequence.remove('C')\n        elif pattern == 'W':\n            sequence.remove('W')\n        elif pattern == 'O':\n            sequence.remove('O')\n        else:\n            print(\"Invalid pattern. Allowed patterns are 'R', 'G', 'B', 'Y', 'M', 'C', 'W', 'O'.\")\n            return False\n    return sequence == []  # check if the sequence is empty"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the length of patterns array is same as length of colors array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # check if the first color of the colors array is same as the first pattern in patterns array\n    if colors[0]!= patterns[0]:\n        return False\n    \n    # check if the length of patterns array is greater than 1\n    if len(patterns) > 1:\n        # check if the second color of the colors array is same as the second pattern in patterns array\n        if colors[1]!= patterns[1]:\n            return False\n        \n        # check if the length of patterns array is greater than 2\n        if len(patterns) > 2:\n            # check if the third color of the colors array is same as the third pattern in patterns array\n            if colors[2]!= patterns[2]:\n                return False\n    \n    # if all checks pass, it follows the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize a variable to keep track of the pattern index\n    pattern_index = 0\n    # loop through the colors list\n    for i in range(len(colors)):\n        # check if the current color matches the color in the current pattern\n        if colors[i] == patterns[pattern_index]:\n            # if it does, increment the pattern index\n            pattern_index += 1\n            # check if we have reached the end of the pattern\n            if pattern_index == len(patterns):\n                # if we have, we have found a sequence that matches the patterns\n                return True\n    # if we make it through the loop without finding a matching pattern, we have a sequence that does not match\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input.\n    It returns a list of tuples containing the tuples that have all elements divisible by K from the list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty list to store the result tuples\n    result = []\n\n    # loop through the given list of tuples\n    for tup in test_list:\n        # initialize a set to store the elements in the tuple\n        set_tup = set(tup)\n\n        # loop through the elements in the tuple and check if all of them are divisible by k\n        flag = True\n        for elem in set_tup:\n            if elem % K!= 0:\n                flag = False\n                break\n\n        # if all elements in the tuple are divisible by k, add the tuple to the result list\n        if flag:\n            result.append(tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        all_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_found = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] % K == 0 and test_list[i][j] % K == 0:\n                tuples_found.append((test_list[i][j], test_list[j][i]))\n    return tuples_found"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a list to store the tuples\n    result_list = []\n\n    # Loop through each tuple in the test_list\n    for i in range(len(test_list)):\n        # Initialize a set to store the elements of the current tuple\n        tuple_set = set()\n\n        # Loop through each element in the tuple\n        for j in test_list[i]:\n            # Check if the element is divisible by K\n            if j % K == 0:\n                # Add the element to the set\n                tuple_set.add(j)\n\n        # Check if all elements in the current tuple are divisible by K\n        if len(tuple_set) == len(test_list[i]) and len(tuple_set) > 0:\n            # Add the tuple to the result list\n            result_list.append(tuple_set)\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input and returns a list of tuples\n    which have all elements divisible by K from the given list of tuples.\n\n    :param test_list: a list of tuples\n    :param K: an integer\n    :return: a list of tuples\n    \"\"\"\n    result = []\n    for tuple1 in test_list:\n        flag = True\n        for element in tuple1:\n            if element % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tuple in test_list:\n        divisible = all(num % K == 0 for num in tuple)\n        if divisible:\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11) == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:  # check if the length of the word is even\n            print(word, 'is even.')\n        else:\n            print(word, 'is odd.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    # splitting the string into words\n    words = s.split()\n    # iterating over the words and finding the length of each word\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word + \" is an even length word.\")\n        else:\n            print(word + \" is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Loop through the words and check their length\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n\n    # If no odd length words are found, return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even\")\n        else:\n            print(f\"{word} is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2!= 0:\n            print(word + \" is not an odd length.\")\n        else:\n            print(word + \" is an odd length.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} is odd length.\")\n        else:\n            print(f\"{word} is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    words = s.split() # split the sentence into individual words\n    for word in words: # iterate over each word\n        if len(word) % 2 == 0: # if the length of the word is even\n            return False # return False because all words are odd\n    return True # if no word is even, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length.\")\n        else:\n            print(f\"{word} is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # iterate through each word\n    for word in words:\n        # get the length of the word\n        length = len(word)\n        # if the length is odd, print a message\n        if length % 2 == 1:\n            print(f\"{word} is an odd word.\")\n        # if the length is even, print a message\n        else:\n            print(f\"{word} is an even word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first two tetrahedral numbers\n    t1 = 0\n    t2 = 1\n    \n    # Loop until we have found the nth tetrahedral number\n    for i in range(3, n+1):\n        # Calculate the next tetrahedral number as the sum of the previous two\n        t3 = t1 + t2\n        # Update the values of t1 and t2\n        t1 = t2\n        t2 = t3\n    \n    # Return the nth tetrahedral number\n    return t3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number = 0\n    for i in range(1, n+1):\n        for j in range(1, i):\n            for k in range(1, j):\n                if i+j+k == n:\n                    tetrahedral_number += 1\n    return tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the number of rows and the number of columns\n    rows = 4\n    columns = 4\n    \n    # Initialize the base number\n    base = 1\n    \n    # Initialize the variable to store the tetrahedral number\n    tetrahedral_num = 0\n    \n    # Loop through the number of rows and columns\n    for row in range(rows):\n        for col in range(columns):\n            # Check if the current row and column forms a pyramid\n            if row == 0 and col == 0:\n                continue\n            elif row == 0 and col == 1:\n                tetrahedral_num += base\n            elif row == 0 and col == 2:\n                tetrahedral_num += base * 2\n            elif row == 0 and col == 3:\n                tetrahedral_num += base * 3\n            elif row == 1 and col == 0:\n                tetrahedral_num += base * 4\n            elif row == 1 and col == 1:\n                tetrahedral_num += base * 5\n            elif row == 1 and col == 2:\n                tetrahedral_num += base * 6\n            elif row == 1 and col == 3:\n                tetrahedral_num += base * 7\n            elif row == 2 and col == 0:\n                tetrahedral_num += base * 8\n            elif row == 2 and col == 1:\n                tetrahedral_num += base * 9\n            elif row == 2 and col == 2:\n                tetrahedral_num += base * 10\n            elif row == 2 and col == 3:\n                tetrahedral_num += base * 11\n            elif row == 3 and col == 0:\n                tetrahedral_num += base * 12\n            elif row == 3 and col == 1:\n                tetrahedral_num += base * 13\n            elif row == 3 and col == 2:\n                tetrahedral_num += base * 14\n            elif row == 3 and col == 3:\n                tetrahedral_num += base * 15\n            \n            # Update the base number\n            base += 1\n    \n    # Return the tetrahedral number\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n - 1) * (n - 2) * (n - 3)) / 4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number using the formula:\n    T(n) = n * (2*n - 1) / 6\n\n    Args:\n    n: integer, the value of n for which you want to find the tetrahedral number\n\n    Returns:\n    The nth tetrahedral number\n    \"\"\"\n    return n * (2 * n - 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) * (n - 2) * (n - 3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    triangular_numbers = [0] * (n+1)\n    triangular_numbers[0] = 0\n    triangular_numbers[1] = 1\n    for i in range(2, n+1):\n        triangular_numbers[i] = triangular_numbers[i-1] + triangular_numbers[i-2]\n    return triangular_numbers[n-1] + triangular_numbers[n-2]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    count = 1\n    for i in range(1, n+1):\n        a, b, c = c, a+b+c, b\n        count += 1\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initializing the variable to store the result\n    result = 0\n\n    # Iterating from 1 to n (excluding n)\n    for i in range(1, n): \n        # Finding the number of edges in a regular polygon with n sides\n        edges = 4 * i - 2\n\n        # Adding the result of the formula for the nth tetrahedral number\n        result += edges * (edges + 1) * (edges + 2) / 6\n\n    # Returning the result\n    return result"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume of the sphere\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with a given radius.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere using its radius r.\n    '''\n    # calculate the volume\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the given string into a list of characters\n    str_list = list(strr)\n\n    # Initialize the character variable to an empty string\n    char = ''\n\n    # Loop through each character of the string and add its ASCII value to the character variable\n    for i in range(len(str_list)):\n        char += str_list[i] + str(ord(str_list[i]))\n\n    # Return the final character variable\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = sum(ord(char) for char in strr)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr(((ascii_val * 26) % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    char = 0\n\n    for i in strr:\n        char += ord(i)\n\n    char = char % 26\n\n    if char == 0:\n        return \"Z\"\n    else:\n        return chr(ord('A') + char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    # loop through the string\n    for char in strr:\n        # add the ASCII value of the current character to the result variable\n        result += ord(char)\n    # return the result as a character\n    return chr(result % 26)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    return chr(((total_ascii % 26) + 65) % 91 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    # Initialize a string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in strr:\n        # Calculate the ASCII value of the character\n        ascii_val = ord(char)\n        \n        # Add the ASCII value modulo 26 to the result string\n        result += chr((ascii_val + 13) % 26 + 65)\n        \n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the sequence\n    sequence = [1]\n    sequence.extend([4*x - 2 for x in sequence])\n\n    # Find the nth number in the sequence\n    for i in range(n):\n        sequence.append(sequence[-1] + sequence[-2])\n\n    return sequence[-n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize a list of the sequence\n    sequence = [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # initialize the sequence with the first 10 numbers of the sequence\n    sequence = [1]\n    sequence.extend([3 if i % 2 == 0 else 1 for i in range(1, 10)])\n\n    # iterate n-1 times to get the nth number\n    for _ in range(n-1):\n        # calculate the next number in the sequence\n        next_num = sequence[0] + sequence[-1] + sequence[-2]\n\n        # add the next number to the sequence\n        sequence.append(next_num)\n\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (2 * n)\n    sequence[1] = 1\n    sequence[2] = 1\n    for i in range(3, 2 * n + 1):\n        sequence[i] = (sequence[i - 1] + sequence[i - 2]) % 2\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    \n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    \n    return c"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]  # initialize the sequence with the first two numbers\n    for i in range(2, n):\n        # calculate the next number in the sequence\n        next_number = (sequence[-1] + sequence[-2]) % 2\n        sequence.append(next_number)\n    return sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    \n    Args:\n    r (float): radius of the sphere\n    \n    Returns:\n    float: surface area of the sphere\n    '''\n    \n    # convert radius to radians\n    phi = math.pi/2.0\n    \n    # compute the surface area using the formula:\n    # A = 4 * pi * r^2\n    A = 4 * math.pi * r**2\n    \n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # pi is a mathematical constant equal to approximately 3.14159\n    pi = 3.14159\n    # the surface area of a sphere is \u03c0r\u00b2\n    surface_area = (4.0/3.0) * pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function calculates the surface area of a sphere using the formula:\n    A = 4 * pi * r^2\n\n    Args:\n    r (float): the radius of the sphere\n\n    Returns:\n    area (float): the surface area of the sphere\n    \"\"\"\n\n    # Calculate the surface area of a sphere using the formula\n    area = 4 * math.pi * r**2\n\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2 # Formula for surface area of a sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a, b, c = 1, 3, 1\n    \n    # Calculate nth centered hexagonal number\n    for i in range(n):\n        a, b, c = b, c, 4*b - 3*a\n    \n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = []\n    for i in range(1, n+1):\n        hexagonal_numbers.append(i * (2 * i - 1))\n    return hexagonal_numbers[n-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n, a, b):\n        if n == 1:\n            return a\n        elif n == 0:\n            return b\n        else:\n            return centered_hexagonal_helper(n-1, b, (a+b)/2)\n    \n    return centered_hexagonal_helper(n, 1, 0)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        else:\n            return centered_hexagonal(n-1) + centered_hexagonal(n-2) + centered_hexagonal(n-3)\n\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n * (1 + 3 * sqrt(5)) / 2  # Calculate the base of the centered hexagonal number\n    return int(a)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        i = 1\n        j = 1\n        while j <= 2 * n - 1:\n            if j == 1 or j == 2 * n:\n                print(i, end=\" \")\n                i += 1\n            elif j == 3 or j == 2 * n - 1:\n                print(2 * n - i, end=\" \")\n                i += 1\n            else:\n                print(2 * n - i, end=\" \")\n                print(2 * n - j, end=\" \")\n                i += 1\n                j += 1\n            print()"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Args:\n    n: an integer\n\n    Returns:\n    an integer\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n\n    return 4 * n**2 - n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 1\n    i = 1\n\n    # Initialize sum of centered hexagonal numbers\n    sum_centered_hex = 0\n\n    # Iterate n times\n    for _ in range(n):\n        # Calculate the value of the centered hexagonal number and add to sum\n        sum_centered_hex += centered_hexagonal(i)\n        # Increment i\n        i += 1\n\n    # Return the sum of centered hexagonal numbers\n    return sum_centered_hex\n\n\ndef centered_hexagonal(n):\n    '''\n    Write a function to calculate the value of the nth centered hexagonal number.\n    '''\n    # Initialize the value of the centered hexagonal number\n    hexagonal_num = 0\n\n    # Check if n is odd\n    if n % 2 == 1:\n        # n is odd, add n-1 centered hexagonal numbers\n        for _ in range(n - 1):\n            hexagonal_num += centered_hexagonal(n - 1)\n    else:\n        # n is even, add (n/2) centered hexagonal numbers and then subtract the last centered hexagonal number\n        for _ in range(n // 2):\n            hexagonal_num += centered_hexagonal(n // 2)\n        hexagonal_num -= centered_hexagonal(n // 2)\n\n    # Return the value of the centered hexagonal number\n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the variables for the centered hexagonal number\n    A = 0\n    B = 1\n    C = 1\n    D = 2\n    E = 1\n    F = 0\n\n    # Calculate the centered hexagonal number by adding the squares of adjacent numbers\n    for i in range(n):\n        A += A**2\n        B += B**2\n        C += C**2\n        D += D**2\n        E += E**2\n        F += F**2\n\n    # Return the centered hexagonal number\n    return A"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return \"n must be a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2.keys() and key not in dict3.keys():\n            merged_dict[key] = (dict1[key], dict2[key])\n        elif key in dict3.keys() and key not in dict2.keys():\n            merged_dict[key] = (dict1[key], dict3[key])\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    -----------\n    dict1: dict\n        Dictionary with keys and values.\n    dict2: dict\n        Dictionary with keys and values.\n    dict3: dict\n        Dictionary with keys and values.\n\n    Returns:\n    --------\n    merged_dict: dict\n        Dictionary with all the keys and values from dict1, dict2 and dict3.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n\n    Returns:\n    The merged dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): First dictionary.\n    dict2 (dict): Second dictionary.\n    dict3 (dict): Third dictionary.\n\n    Returns:\n    dict: Merged dictionary.\n    '''\n\n    # Combine all three dictionaries into one\n    merged_dict = {**dict1, **dict2, **dict3}\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict2:\n            merged_dict[key] = [dict1[key], dict2[key]]\n        elif key in dict3:\n            merged_dict[key] = [dict1[key], dict3[key]]\n        else:\n            merged_dict[key] = [dict1[key]]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1: First dictionary to merge.\n    - dict2: Second dictionary to merge.\n    - dict3: Third dictionary to merge.\n\n    Returns:\n    - A single dictionary containing all the key-value pairs from all three dictionaries.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Use collections.Counter to count the frequency of each element in the list\n    freq = collections.Counter(list1)\n\n    # Convert the Counter object to a dictionary\n    freq_dict = freq.to_dict()\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if elem not in freq:\n            freq[elem] = 1\n\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[elem] += 1\n\n    # Return the dictionary containing the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    def min_diff(N):\n        min_diff = float('inf')\n        for i in range(1, N+1):\n            diff = abs(i - N)\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff\n\n    def closest_smaller_number(N):\n        smallest = float('inf')\n        for i in range(N, 0, -1):\n            diff = abs(i - N)\n            if diff < smallest:\n                smallest = diff\n        return smallest\n\n    min_diff_N = min_diff(N)\n    return closest_smaller_number(N) + min_diff_N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    num_list.sort()\n    closest = num_list[0]\n    for i in range(1, len(num_list)):\n        if abs(num_list[i] - N) < abs(num_list[i-1] - N):\n            closest = num_list[i]\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for num in range(1, N):\n        diff = num - N\n        if diff < 0:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = list(map(int, input().split()))\n    n, n_list = n_list[0], n_list[1:]\n\n    min_diff = float('inf')\n    closest_num = n + 1\n\n    for num in n_list:\n        diff = abs(num - n)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = float('inf')\n    for i in range(1, N+1):\n        if i < N:\n            smaller_num = min(smaller_num, i)\n        else:\n            smaller_num = i\n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # convert the input number to a set to remove duplicates\n    nums = set(map(int, str(N)))\n\n    # find the smallest number in the set\n    min_num = min(nums)\n\n    # calculate the difference between the input number and the smallest number\n    diff = abs(N - min_num)\n\n    # find the smallest number that is greater than the input number\n    greater_num = min_num + 1\n\n    # calculate the difference between the greater number and the input number\n    greater_diff = abs(greater_num - N)\n\n    # return the smaller number (input number)\n    return min_num if diff < greater_diff else greater_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for num in range(1, N):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # Convert the input integer N to a string and reverse it\n    N_str = str(N)[::-1]\n\n    # Initialize variables to keep track of the smallest and largest digits\n    smallest_digit = 9\n    largest_digit = 0\n\n    # Loop through each digit in the string\n    for digit in N_str:\n        # If the digit is smaller than the current smallest digit, update it\n        if int(digit) < smallest_digit:\n            smallest_digit = int(digit)\n\n        # If the digit is larger than the current largest digit, update it\n        elif int(digit) > largest_digit:\n            largest_digit = int(digit)\n\n    # Calculate the difference between the smallest and largest digits\n    diff = abs(smallest_digit - largest_digit)\n\n    # If the difference is even, return the smallest digit\n    if diff % 2 == 0:\n        return smallest_digit\n    else:\n        # If the difference is odd, return the average of the smallest and largest digits\n        return (smallest_digit + largest_digit) / 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = N\n    while True:\n        if n == 1:\n            return n\n        if n == 0:\n            return 10**9\n        n -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_diff = float('inf')\n    closest_num = float('inf')\n\n    for num in range(1, N):\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize a variable to keep track of the length of the longest word\n    longest = 0\n    \n    # loop through the list of words\n    for word in list1:\n        # check if the current word is longer than the current longest word\n        if len(word) > longest:\n            # update the longest variable to the length of the current word\n            longest = len(word)\n            \n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of sentences.\n    '''\n    max_len = 0\n    for i in list1:\n        words = i.split()\n        for j in words:\n            if len(j) > max_len:\n                max_len = len(j)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert the list of strings to a set to remove duplicates\n    str_set = set(str1)\n    # loop through the set to check if the substring is present in the string\n    for s in str_set:\n        if s in sub_str:\n            return True\n    # if the substring is not present in the string, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # initialize a list to store the results of the search\n    results = []\n    # iterate through the list of strings\n    for s in str1:\n        # check if the substring is present in the current string\n        if sub_str in s:\n            # if the substring is present, add the index of the current string to the results list\n            results.append(str1.index(s))\n    # return the results list\n    return results"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n    \"\"\"\n\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return False\n    else:\n        # Check if the number is divisible by 3 or not\n        if n % 3 == 0:\n            return True\n        else:\n            # Check if the number is divisible by 5 or not\n            if n % 5 == 0:\n                return True\n            else:\n                # Check if the number is divisible by 7 or not\n                if n % 7 == 0:\n                    return True\n                else:\n                    # If none of the above conditions are true, return False\n                    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Undulating\"\n    else:\n        return \"Not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check whether the given number is odd or even\n    if n % 2 == 0: \n        # if it's even, it's not undulating\n        return False\n    else: \n        # if it's odd, it's undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n\n    Args:\n        n (int): the number to be checked\n\n    Returns:\n        bool: whether the number is undulating or not.\n\n    \"\"\"\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return \"The given number is negative.\"\n    elif n == 0:\n        return \"The given number is zero.\"\n    else:\n        for i in range(2, n//2+1):\n            if n % i == 0:\n                return \"The given number is not undulating.\"\n        return \"The given number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1 or n == -1:\n        return False\n    else:\n        if n < 0:\n            n = -n\n        i = 1\n        while i < n:\n            i += 1\n            if i * i == n:\n                return True\n            elif i * i > n:\n                return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2, 3))"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list with the smallest second value\n    return sorted_list.index(sorted_list[0])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = None\n\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value or (test_list[i][1] == min_value and i < min_index):\n            min_index = i\n            min_value = test_list[i][1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Use the built-in `min` function to find the index of the smallest second value\n    min_index = min(range(len(test_list)), key=lambda i: test_list[i][1])\n\n    # Return the first value of the tuple at the minimum index\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list based on the second value\n    test_list.sort(key=itemgetter(1))\n    # return the first value of the tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(0, 1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf')  \n    for i in range(len(lst)):  \n        if len(lst[i]) < min_length:  \n            min_length = len(lst[i])  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # find the smallest list in the list of lists\n    smallest = min(lst, key=lambda x: len(x))\n    \n    # find the length of the smallest list\n    length = len(smallest)\n    \n    # return the length of the smallest list\n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = 1000000000 #initialize the minimum length to a very large number\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize min_len to the length of the first list in lst\n    min_len = len(lst[0])\n    # Loop through all the lists in lst\n    for i in lst:\n        # Update min_len if the length of the current list is smaller\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    This function calculates the number of divisors of a given integer.\n    \"\"\"\n    if n < 2:\n        return 0\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # initializing the divisor count to 1\n    count = 1\n\n    # loop through all numbers from 1 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # if n is divisible by i, then n is not a prime number and the count must be incremented\n        if n % i == 0:\n            count += 1\n            # if i is a factor, then n must also be a factor\n            if i!= n//i:\n                count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [x for sublist in list1 for x in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop over the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for elem in item:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store frequency of each element\n    freq = {}\n    # loop through each element in the flattened list of lists\n    for element in list1:\n        # if the element is not already in the dictionary, add it with frequency 1\n        if element not in freq:\n            freq[element] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[element] += 1\n    # return the final dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each element in the flattened list\n    for elem in list1:\n        # check if the element is already in the dictionary\n        if elem in freq_dict:\n            # if it is, increment its count by 1\n            freq_dict[elem] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            freq_dict[elem] = 1\n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Calculate the product of all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0] * len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function converts a decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    :param n: The decimal number to be converted to binary.\n    :return: The binary equivalent of the given decimal number as a string.\n    \"\"\"\n    # initialize the string to store the binary equivalent\n    binary = \"\"\n    # loop through each bit of the decimal number\n    while n > 0:\n        # get the last digit of the decimal number\n        digit = n % 2\n        # convert the digit to a string and add it to the binary string\n        binary = str(digit) + binary\n        # divide the decimal number by 2 and round down to the next integer\n        n = n // 2\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary using bitwise operations\n    binary_num = bin(n)[2:]\n    # Pad the binary number with leading zeros if necessary\n    binary_num = binary_num.zfill(8)\n    # Convert the binary string to an integer and return it\n    return int(binary_num, 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize the result variable to an empty string\n    result = ''\n\n    # While n is greater than 0, append the remainder of n divided by 2 to the result variable\n    while n > 0:\n        remainder = n % 2\n        result = str(remainder) + result\n        n = n // 2\n\n    # Return the binary representation of n\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = str()\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables for smallest and largest palindrome numbers\n    smallest = 10**(len(str(num))+1)\n    largest = int(10**(len(str(num)))*10) - 1\n    # Initialize variables for midpoint and direction\n    midpoint = 0\n    direction = 1\n    \n    # Iterate until the smallest palindrome is found\n    while True:\n        # Calculate the next palindrome number\n        next_num = midpoint + direction\n        # Check if the next palindrome is within the specified range\n        if next_num >= smallest and next_num <= largest:\n            # Check if the next palindrome is a palindrome\n            if str(next_num) == str(next_num)[::-1]:\n                return next_num\n        # If the next palindrome is outside the range, change direction\n        else:\n            direction *= -1\n            midpoint += direction\n            \n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    '''\n    Checks whether a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        # If the number is already a palindrome, simply return the next smaller palindrome\n        return num + 1\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Create a list of all possible palindromes of length <= len(num_str)\n    palindromes = []\n    for i in range(1, len(num_str)+1):\n        palindromes.append(int(num_str[:i]))\n\n    # Find the smallest number in the list that is greater than the given number\n    next_palindrome = min(palindromes, key=lambda x: x if x > num else None)\n\n    # Add 1 to the next palindrome to get the next smallest palindrome\n    return next_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input integer is even\n    if num % 2 == 0:\n        # If even, add 1 to make it odd\n        num += 1\n    \n    # Initialize variables for the loop\n    i, j = 10**(num-1), 10**(num-1) - 1\n    palindrome = False\n    \n    # Loop until we find a palindrome\n    while not palindrome:\n        # Check if the current number is a palindrome\n        if i == j:\n            # If so, we have found a palindrome\n            palindrome = True\n        else:\n            # If not, we need to check if the sum of the digits is a palindrome\n            i, j = j, 0\n            while i >= 10:\n                j += i%10\n                i //= 10\n            \n            if i == j:\n                palindrome = True\n            \n        # Move to the next number to check\n        i += 1\n    \n    # Return the next smallest palindrome\n    return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string\n    str_num = str(num)\n    # reverse the string and add '1' to it\n    reversed_str = str_num[::-1] + '1'\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # if the reversed number is odd, add one to it to make it even\n    if reversed_num % 2!= 0:\n        reversed_num += 1\n    # return the reversed number\n    return reversed_num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the smallest palindrome that is greater than num\n    for i in range(num+1, sys.maxsize, -1):\n        if is_palindrome(i):\n            return i\n    # If no palindrome is found, return -1\n    return -1\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    string_num = str(num)[::-1]\n    # Compare the original and reversed strings\n    return string_num == string_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Create a string version of the number\n    num_str = str(num)\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    # Create a list of digits of the reversed string\n    reversed_num_list = list(reversed_num_str)\n    # Reverse the list\n    reversed_num_list.reverse()\n    # Convert the list back to a string\n    reversed_num_str = ''.join(reversed_num_list)\n    # Convert the string back to an integer\n    reversed_num = int(reversed_num_str)\n    # Find the sum of the original number and the reversed number\n    sum_of_original_num_and_reversed_num = num + reversed_num\n    # Find the largest palindrome that is less than the sum of the original number and the reversed number\n    while True:\n        palindrome = sum_of_original_num_and_reversed_num\n        if palindrome < 10:\n            break\n        palindrome_str = str(palindrome)\n        palindrome_list = list(palindrome_str)\n        palindrome_list.reverse()\n        palindrome_str = ''.join(palindrome_list)\n        palindrome = int(palindrome_str)\n        sum_of_original_num_and_reversed_num += palindrome\n    # Return the largest palindrome that is less than the sum of the original number and the reversed number\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    result = 0\n    palindrome = True\n    \n    # Check if the number is a palindrome\n    while num > 0:\n        digit = num % 10\n        if digit == 0 or digit == 1:\n            palindrome = False\n        else:\n            result = 10 * result + digit\n            num //= 10\n    \n    # If the number is not a palindrome, increment the last digit\n    if palindrome:\n        result += 1\n    \n    # Return the next smallest palindrome\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # remove any leading zeros from the input number\n    num = str(num)\n    \n    # find the length of the input number\n    num_len = len(num)\n    \n    # initialize the smallest palindrome found so far\n    smallest_palindrome = 0\n    \n    # loop through all possible palindromes of odd length\n    for i in range(1, num_len):\n        \n        # construct the current palindrome\n        palindrome = str(num)[::-1][:i] + str(num)[::-1][i:]\n        \n        # check if the palindrome is a palindrome\n        if palindrome == palindrome[::-1]:\n            \n            # check if the palindrome is smaller than the smallest palindrome found so far\n            if int(palindrome) < smallest_palindrome:\n                smallest_palindrome = int(palindrome)\n    \n    # return the smallest palindrome found\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the largest palindrome less than or equal to num\n    largest_palindrome = 0\n    while largest_palindrome <= num:\n        largest_palindrome = largest_palindrome * 10 + 9\n    \n    # Find the smallest palindrome greater than num\n    smallest_palindrome = num + 1\n    \n    # Find the next smallest palindrome greater than num\n    while smallest_palindrome <= largest_palindrome:\n        if is_palindrome(smallest_palindrome):\n            return smallest_palindrome\n        smallest_palindrome += 1\n    \n    # If no palindrome is found, return None\n    return None\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a specified integer is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    str_num = str(num)[::-1]\n    \n    # Check if the string is equal to the original number\n    return str_num == str(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Reverse the integer\n    num_str = str(num)\n    reversed_num = int(num_str[::-1])\n\n    # Convert the reversed integer to a string\n    reversed_num_str = str(reversed_num)\n\n    # Check if the reversed integer is a palindrome\n    if reversed_num_str == reversed_num_str[::-1]:\n        # If it is, check if it is smaller than the original integer\n        if reversed_num < num:\n            # If it is, return the reversed integer\n            return reversed_num\n        else:\n            # If not, return the original integer\n            return num\n    else:\n        # If not, increment the reversed integer and check if it is a palindrome\n        reversed_num += 1\n        reversed_num_str = str(reversed_num)\n        if reversed_num_str == reversed_num_str[::-1]:\n            # If it is, return the reversed integer\n            return reversed_num\n        else:\n            # If not, return the original integer\n            return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the length of the array is less than k\n    if len(arr) < k:\n        return None\n    \n    # Initialize two pointers - i and j - to the beginning of the array\n    i = 0\n    j = len(arr) - 1\n    \n    # If k is odd, then we need to find the (k/2)th element\n    if k % 2 == 1:\n        # Move the i pointer to the (k/2)th position from the end of the array\n        i = len(arr) - k\n    \n    # Initialize a variable to store the kth element\n    kth_element = None\n    \n    # Loop while i is less than j\n    while i < j:\n        # Calculate the midpoint of the current subarray\n        mid = (i + j) // 2\n        \n        # If the element at the midpoint is equal to k, then we have found the kth element\n        if arr[mid] == k:\n            kth_element = arr[mid]\n            j = mid\n        # If the element at the midpoint is greater than k, then we need to search in the left half of the subarray\n        elif arr[mid] > k:\n            j = mid\n        # If the element at the midpoint is less than k, then we need to search in the right half of the subarray\n        else:\n            i = mid + 1\n    \n    # If the kth element is not found, return None\n    return kth_element"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # convert k to 0-based indexing\n    k -= 1\n    # initialize index of first element to k\n    i = k\n    # initialize index of second element to k\n    j = len(arr) - 1\n    # initialize count of elements in the array\n    count = len(arr)\n    # initialize variable to keep track of the position of the kth element\n    kth = None\n    # while the count is greater than 0\n    while count > 0:\n        # if the count is odd, the middle element is the kth element\n        if count % 2!= 0:\n            # if the count is odd and the kth element is not found yet\n            if kth is None:\n                kth = arr[k]\n            # move the kth element to the end of the array\n            arr[k], arr[i] = arr[i], arr[k]\n            # decrement count and i\n            count -= 1\n        # if the count is even, the middle two elements are the kth element\n        else:\n            # if the count is even and the kth element is not found yet\n            if kth is None:\n                kth = arr[k]\n                kth2 = arr[j]\n            # move the kth element to the end of the array\n            arr[k], arr[i] = arr[i], arr[k]\n            # move the second kth element to the end of the array\n            arr[k], arr[j] = arr[j], arr[k]\n            # decrement count, i, and j\n            count -= 2\n            j -= 1\n        # if the count is odd again, move the first kth element to the end of the array\n        i += 1\n    # return the kth element\n    return kth"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Check if the index is valid\n    if k > n or k < 1:\n        return \"Invalid index!\"\n\n    # Check if the array is empty\n    if n == 0:\n        return \"Array is empty!\"\n\n    # Find the index of the last element\n    last_index = n - 1\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    i = 0\n    j = last_index\n\n    # Traverse the array and find the kth element\n    while i <= j:\n        # Find the middle index of the current subarray\n        mid_index = (i + j) // 2\n\n        # If the kth element is in the middle subarray, return it\n        if arr[mid_index] == k:\n            return arr[mid_index]\n\n        # If the kth element is less than the middle element, search in the right subarray\n        elif arr[mid_index] < k:\n            i = mid_index + 1\n\n        # If the kth element is greater than the middle element, search in the left subarray\n        else:\n            j = mid_index - 1\n\n    return \"Element not found!\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    else:\n        i = 0\n        j = n-1\n        while i < j:\n            while arr[i] < arr[j] and i < j:\n                i += 1\n            while arr[i] > arr[j] and i < j:\n                j -= 1\n            if i < j:\n                arr[i], arr[j] = arr[j], arr[i]\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n:\n        raise ValueError(\"k is greater than the length of the array\")\n    for i in range(1, n+1):\n        if i == k:\n            return arr[i-1]\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return \"Invalid input. k must be a positive integer and k must be less than or equal to the length of the array.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is greater than the length of the array\")\n    elif k < 1:\n        raise ValueError(\"k is less than 1\")\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert 1-based indexing to 0-based indexing\n    k -= 1\n    \n    # If the array has only one element, return it\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Divide the array into two halves until we have only one element left\n    while len(arr) > 1:\n        mid = len(arr) // 2\n        if k < mid:\n            arr = arr[:mid]\n        else:\n            k -= mid\n            arr = arr[mid:]\n    \n    return arr[0]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = ''\n    for i, word in enumerate(words):\n        if i > 0:\n            camel_word += word.capitalize()\n        else:\n            camel_word += word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    result = components[0]\n    for i in range(1, len(components)):\n        result += components[i].capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return \"\".join(word.title().split(\"_\"))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i-1] == '_':\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif letter.isupper():\n            camel_case += '_' + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    capitalize_next = True\n    for i, char in enumerate(word):\n        if char.isupper() and capitalize_next:\n            camel_case += char.lower()\n            capitalize_next = False\n        elif char.isupper():\n            camel_case += char\n            capitalize_next = True\n        elif i == len(word) - 1:\n            camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper() and i < len(word)-1:\n            camel_case += word[i].lower()\n        elif i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    b = 0\n    \n    # Find the smallest prime factor of n\n    while n % 2 == 0:\n        a = 2\n        b += 1\n        n = n // 2\n    \n    # Find the largest prime factor of m\n    while m % 2 == 0:\n        a = 2\n        b += 1\n        m = m // 2\n        \n    # Find the gcd of n and m\n    while m > 1:\n        n, m = m, n % m\n    \n    return a**b * n // m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize an empty matrix\n    A = [[0 for j in range(n)] for i in range(m)]\n\n    # Fill the matrix with the integers from 1 to n*m\n    for i in range(m):\n        for j in range(n):\n            A[i][j] = i*n+j+1\n\n    # Initialize an empty matrix for the permutation matrix\n    P = [[0 for j in range(m)] for i in range(n)]\n\n    # Create the permutation matrix\n    for i in range(n):\n        for j in range(m):\n            P[i][j] = i*m+j+1\n\n    # Find the permutation matrix inverse\n    P_inv = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            P_inv[i][j] = P[j][i]\n\n    # Calculate the Eulerian number a(n, m)\n    a = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = P_inv[i][j]*A[i][j]\n\n    # Return the Eulerian number a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize variables\n    a = 0\n    b = 1\n    # Iterate n-1 times\n    for i in range(n-1):\n        # Calculate new values for a and b\n        a = b + a\n        b = 2*b - m\n    # Return final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return 2 * m\n    elif m == 0:\n        return 2 * n\n    else:\n        return 4 * (n**2 - m**2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Find the maximum and minimum values of n and m\n    max_n = max(n, m)\n    min_n = min(n, m)\n    max_m = max(n, m)\n    min_m = min(n, m)\n    \n    # Initialize the Eulerian number a(n, m) to 1\n    eulerian_num = 1\n    \n    # Initialize the value of the sum of all numbers between 1 and n\n    sum_of_numbers = 1\n    \n    # Loop through all numbers between 1 and n\n    for num in range(1, max_n+1):\n        # Check if the current number is a power of 2 between min_n and max_n\n        if num >= min_n and num <= max_n and (num & (num - 1)) == 0:\n            # If it is, add the number to the sum of numbers\n            sum_of_numbers += num\n            \n            # If the sum of numbers is greater than the product of n and m, update the Eulerian number\n            if sum_of_numbers > n * m:\n                eulerian_num = num\n                \n    # Return the Eulerian number\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Computes the Eulerian number a(n, m) using the formula:\n    a(n, m) = n^m + m.\n\n    Parameters:\n    n (int): the first term of the Fibonacci sequence.\n    m (int): the second term of the Fibonacci sequence.\n\n    Returns:\n    The Eulerian number a(n, m).\n    \"\"\"\n    fib = [1, 1]\n    while len(fib) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n    return fib[n-1] * fib[m-1] + m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the list to store the prime numbers \n    primes = [True] * (n + 1) \n    primes[0] = primes[1] = False \n\n    # To handle the case when n is even \n    if n % 2 == 0: \n        primes[0] = primes[1] = False\n\n    # Check for all primes up to the square root of n \n    for i in range(2, int(n**0.5) + 1): \n        if primes[i]: \n            for j in range(i*i, n + 1, i): \n                primes[j] = False \n\n    # Find the Eulerian number using the prime numbers \n    eulerian = 0\n    for i in range(n): \n        if primes[i]: \n            eulerian += 1 \n        else: \n            eulerian *= (m - i)\n\n    return eulerian "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the number of partitions of n\n    partitions = [0] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            partitions[i] += partitions[j]\n            partitions[i] %= m\n\n    # Calculate the number of partitions of m\n    partitions = [0] * (m + 1)\n    for i in range(2, m + 1):\n        for j in range(1, i):\n            partitions[i] += partitions[j]\n            partitions[i] %= n\n\n    # Calculate the Eulerian number\n    eulerian = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            eulerian *= (partitions[i] * partitions[j]) % n\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the array\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize the base case\n    a[1][1] = 1\n\n    # Fill the array using the recurrence relation\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            if i % 2 == 0:\n                if j % 2 == 0:\n                    a[i][j] = (a[i - 1][j] + a[i - 1][j - 1]) % 1000000007\n                else:\n                    a[i][j] = (a[i - 1][j] + a[i - 1][j - 1] - a[i - 1][j - 2]) % 1000000007\n            else:\n                if j % 2 == 0:\n                    a[i][j] = (a[i - 1][j] + a[i - 1][j - 1]) % 1000000007\n                else:\n                    a[i][j] = (a[i - 1][j] + a[i - 1][j - 1] - a[i - 1][j - 2]) % 1000000007\n\n    # Return the value of a(n, m)\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the product of n and m\n    product = n * m\n    \n    # Calculate the sum of the product and the factorial of n and m\n    sum_ = product + (factorial(n) * factorial(m))\n    \n    # Return the result\n    return sum_\n\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Convert the sublist to a list of strings\n        sublist_strings = list(map(str, sublist))\n        \n        # Sort the list of strings in place\n        sublist_strings.sort()\n        \n        # Convert the sorted list of strings back to a list of integers\n        sublist_integers = list(map(int, sublist_strings))\n        \n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sublist_integers)\n        \n    # Return the sorted list of sublists\n    return sorted_sublists"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Use a nested list comprehension to iterate through each sublist of the input list\n    sorted_sublists = [[x.upper() for x in sublist] for sublist in input_list]\n    # Use the sorted() function to sort the sublists in alphabetical order\n    sorted_sublists.sort()\n    # Return the sorted list of lists\n    return sorted_sublists"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Converting the lists to tuples\n    test_list_tuple = tuple(test_list)\n    test_tup_tuple = tuple(test_tup)\n    \n    # Append the lists to the tuples\n    new_tup_list = test_tup_tuple + test_list_tuple\n    \n    # Converting the new tuple list back to a list\n    new_tup = list(new_tup_list)\n    \n    # Return the new list\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuples\n    new_list = test_list + tuple(test_tup)\n    # Print the updated list\n    print(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # concatenate the tuples\n    new_list = test_list + test_tup\n    # convert the new list back to a list and return it\n    return list(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the lists and tuples and store the result in a new list\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)  # Convert the list to a list to allow for mutable elements\n    test_tup = list(test_tup)  # Convert the tuple to a list to allow for mutable elements\n    test_tup.extend(test_list)  # Extend the tuple with the list elements\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three input lists into a single list.\n    merged = num1 + num2 + num3\n    \n    # Convert the merged list into a min-heap.\n    min_heap = []\n    for num in merged:\n        heapq.heappush(min_heap, num)\n    \n    # Convert the min-heap back into a sorted list.\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n\n    # Merge the three input lists into a single sorted list\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            num1 = num1[1:]\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            num2 = num2[1:]\n        else:\n            merged_list.append(num3[0])\n            num3 = num3[1:]\n\n    # Add any remaining elements from the input lists to the merged list\n    if len(num1) > 0:\n        merged_list += num1\n    if len(num2) > 0:\n        merged_list += num2\n    if len(num3) > 0:\n        merged_list += num3\n\n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(merged_list) < len(num1) + len(num2) + len(num3):\n        if not heapq.heappushpop(merged_list, heapq.heappop(num1)):\n            heapq.heappushpop(merged_list, heapq.heappop(num2))\n        if not heapq.heappushpop(merged_list, heapq.heappop(num3)):\n            heapq.heappushpop(merged_list, heapq.heappop(num1))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a min heap to store the merged list\n    heap = []\n    # add all the three lists to the heap\n    heapq.heapify(heap + num1)\n    heapq.heapify(heap + num2)\n    heapq.heapify(heap + num3)\n    # merge the lists and add them to the heap\n    while heap:\n        heapq.heappush(heap, heapq.heappop(heap) + heapq.heappop(heap) + heapq.heappop(heap))\n    # return the sorted list\n    return heap"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = merge_two_sorted_lists(num1, num2)\n\n    # Merge the merged list and the third sorted list\n    merged_and_sorted_list = merge_and_sort(merged_list, num3)\n\n    return merged_and_sorted_list\n\n\ndef merge_two_sorted_lists(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n\n    return merged_list\n\n\ndef merge_and_sort(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list and sort it.\n    \"\"\"\n    merged_list = merge_two_sorted_lists(list1, list2)\n    sorted_list = merge_sorted_lists(merged_list)\n    return sorted_list\n\n\ndef merge_sorted_lists(list1):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    n = len(list1)\n    result = []\n\n    # Use binary merge sort to merge the sorted lists\n    def merge(left, right):\n        nonlocal result\n        i, j, k = 0, 0, 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        while i < len(left):\n            result.append(left[i])\n            i += 1\n\n        while j < len(right):\n            result.append(right[j])\n            j += 1\n\n    merge(list1, list1)\n\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n\n    # Merge the first two lists\n    result = num1 + num2\n    heapq.heapify(result)\n\n    # Merge the third list with the result\n    for num in num3:\n        if num > heapq.heappop(result):\n            heapq.heappush(result, num)\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = sorted(num1 + num2)\n\n    # Merge the three lists into a single sorted list\n    sorted_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j]:\n            if num1[i] <= num3[k]:\n                sorted_list.append(num1[i])\n                i += 1\n            else:\n                sorted_list.append(num3[k])\n                k += 1\n        else:\n            if num2[j] <= num3[k]:\n                sorted_list.append(num2[j])\n                j += 1\n            else:\n                sorted_list.append(num3[k])\n                k += 1\n\n    # Add any remaining elements from the three lists to the sorted list\n    sorted_list += num1[i:]\n    sorted_list += num2[j:]\n    sorted_list += num3[k:]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1, num2, and num3\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge num1 and num2 into a single list\n    merged_list = num1 + num2\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n    # merge num3 and sorted_list into a single list\n    merged_list = num3 + sorted_list\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    # Merge all three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to remove duplicates from the merged list\n    min_heap = []\n    for num in merged_list:\n        if not min_heap or num >= min_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappop(min_heap)\n\n    # Convert the min heap back into a list and return it\n    return list(min_heap)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_str = bin(int(s))[2:] # convert the given string to binary and remove the '0b' prefix\n    binary_len = len(binary_str)\n    \n    # rotate the binary string n times to the left\n    for i in range(n):\n        temp = []\n        for j in range(binary_len):\n            if j < binary_len-1:\n                temp.append(binary_str[j])\n            else:\n                temp.append(binary_str[0])\n        binary_str = temp\n        \n    # count the number of odd numbers in the rotated binary string\n    odd_count = 0\n    for i in binary_str:\n        if int(i) % 2 == 1:\n            odd_count += 1\n            \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def reverse(s):\n        return s[::-1]\n    \n    def rotate(s, n):\n        return s[n:] + s[:n]\n    \n    # Reverse the binary string and rotate it n times\n    s = rotate(reverse(s), n)\n    \n    # Count the number of odd numbers in the rotated binary string\n    count = sum(1 for c in s if c == '1')\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    # Rotate the number n times\n    for i in range(n):\n        num = (num << 1) | (num >> 1)\n    # Find all the odd numbers in the rotated number\n    while num!= 0:\n        if num & 1 == 1:\n            odd_count += 1\n        num >>= 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Convert the binary string s to a list of characters\n    s_list = list(s)\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # Initialize two pointers to the beginning and end of the list\n        i = 0\n        j = len(s_list) - 1\n        \n        # Swap the values at the two pointers until they meet in the middle\n        while i < j:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        \n        # If there was an odd number of 1s in the original string, the count variable will be incremented by 1\n        if s_list.count('1') % 2!= 0:\n            count += 1\n    \n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and an integer n as input and returns the count of odd numbers when rotating the binary string the given number of times.\n\n    Args:\n    s (str): A binary string.\n    n (int): An integer value.\n\n    Returns:\n    int: The count of odd numbers when rotating the binary string the given number of times.\n\n    Example:\n    >>> odd_Equivalent(\"1101\", 3)\n    2\n\n    >>> odd_Equivalent(\"1101\", 1)\n    1\n\n    >>> odd_Equivalent(\"1101\", 2)\n    1\n\n    >>> odd_Equivalent(\"1101\", 0)\n    0\n\n    >>> odd_Equivalent(\"0000\", 1)\n    0\n    \"\"\"\n    if len(s) == 0:\n        return 0\n\n    if n == 0:\n        return 1\n\n    if s[0] == '1':\n        return odd_Equivalent(s[1:], n - 1) + odd_Equivalent(s[0], n)\n    else:\n        return odd_Equivalent(s[1:], n) + odd_Equivalent(s[0], n)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): The binary string to rotate.\n    n (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The number of odd numbers in the rotated binary string.\n    \"\"\"\n\n    # Convert the binary string to a list of characters\n    binary_list = list(s)\n\n    # Rotate the binary list n times\n    for _ in range(n):\n        binary_list.append(binary_list.pop(0))\n\n    # Initialize a counter for odd numbers\n    odd_count = 0\n\n    # Iterate through the rotated list of characters\n    for char in binary_list:\n        if char == '1':\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert the string to binary\n    binary = bin(int(s, 2))[2:]\n\n    # rotate the binary string n times\n    rotated_binary = binary[::-1]\n\n    # count the number of odd numbers in the rotated binary string\n    count = 0\n    for digit in rotated_binary:\n        if digit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    rotations = {}\n    # Create a dictionary to store the rotated binary strings and their frequency\n    for i in range(2 ** n):\n        # Convert the binary string to an integer\n        num = int(s, 2)\n        # Rotate the binary string\n        num = num >> 1\n        num |= num << (n - 1)\n        # Convert the rotated binary string back to a string\n        num = bin(num)[2:]\n        # Add the rotated binary string to the dictionary\n        rotations[num] = rotations.get(num, 0) + 1\n\n    # Count the number of odd values in the dictionary\n    count = 0\n    for value, frequency in rotations.items():\n        if int(value, 2) % 2 == 1:\n            count += frequency\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two arguments, the binary string's' and the number of times to rotate's' by. \n    It returns the number of odd numbers in the rotated binary string.\n    \n    Example: odd_Equivalent('1011', 1)\n    Output: 1\n    '''\n    odd_count = 0\n    for i in range(n):\n        # iterate through the binary string s n times\n        # each time, rotate the binary string s by one position\n        s = s[1:] + s[0]\n        # add 1 to the count of odd numbers in the rotated binary string\n        if s[0] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    continue\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set to store the unique elements in the first level of the nested list\n    unique_elements = set(nestedlist[0])\n    \n    # loop through the nested list and add the unique elements to the set\n    for level in nestedlist[1:]:\n        for element in level:\n            unique_elements.add(element)\n    \n    # return the common elements in the first level\n    return list(unique_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i!= j:\n                for k in j:\n                    if k in i:\n                        common.append(k)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty dictionary to store common elements\n    common = {}\n\n    # Loop through each element in the nested list\n    for item in nestedlist:\n        # Check if the element is already in the dictionary\n        if item in common:\n            # Increment the count of the element\n            common[item] += 1\n        else:\n            # Add the element to the dictionary with a count of 1\n            common[item] = 1\n\n    # Create a new list to store the common elements with their counts\n    result = []\n\n    # Loop through each element in the dictionary\n    for item, count in common.items():\n        # Check if the count is greater than 1 (i.e. the element is common)\n        if count > 1:\n            # Add the element to the result list with its count\n            result.append((item, count))\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Find all the unique elements in the nested lists\n    unique_elements = set()\n    for sublist in nestedlist:\n        unique_elements |= set(sublist)\n    # Find the common elements in the unique elements set\n    common_elements = unique_elements & set(nestedlist[0])\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find the length of the first nested list\n    first_len = len(nestedlist[0])\n\n    # Find the common elements for each nested list\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(first_len):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] not in common:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j < len(nestedlist[i]) - 1:\n                if nestedlist[i][j] in nestedlist[i][j+1:]:\n                    common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # loop through each nested list\n    for lst in nestedlist:\n        # loop through each element in the list\n        for element in lst:\n            # if the element is not already in the dictionary, add it\n            if element not in common_dict:\n                common_dict[element] = 1\n\n    # return the dictionary containing common elements\n    return common_dict"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common = set()\n    # iterate through each sublist of the nestedlist\n    for sublist in nestedlist:\n        # iterate through each element of the sublist\n        for element in sublist:\n            # add the element to the common set if it is not already there\n            if element not in common:\n                common.add(element)\n    # return the common set as a list\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(x, dict) and not x for x in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for dic in list1:\n            if len(dic)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for d in list1:\n        if d:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Using a list comprehension to iterate over all dictionaries in the list\n    empty_list = [dict1 for dict1 in list1 if len(dict1)!= 0]\n    # If empty_list is not empty, then return False\n    if empty_list:\n        return False\n    # If empty_list is empty, then return True\n    else:\n        return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums = list(nums)\n    # Initialize a variable to store the sum of the elements in the list\n    sum_of_nums = 0\n    # Loop through the list and add each element to the sum\n    for num in nums:\n        sum_of_nums += num\n    # Return the sum of the elements\n    return sum_of_nums"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize a variable to store the sum of all the numbers in the tuple\n    total = 0\n    # Loop through each number in the tuple\n    for num in nums:\n        # Add the number to the total\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize a variable to store the sum of the numbers in the tuple\n    total = 0\n    # Iterate through each number in the tuple\n    for num in nums:\n        # Add the number to the total\n        total += num\n    # Return the final sum\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        elif isinstance(item, (int, float)):\n            result.append(item)\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for element in test_list:\n        # Check if the element is convertible to a float\n        try:\n            float(element)\n        except ValueError:\n            # If it's not, convert it to a string first\n            element = str(element)\n            # Convert the string back to a float\n            element = float(element)\n            # Convert the float back to a string and remove any trailing zeros\n            element = str(element).rstrip('0')\n            # Convert the string back to a float\n            element = float(element)\n        # Convert the element back to a list (if it was originally a list)\n        if isinstance(element, list):\n            element = list_to_float(element)\n        # Convert the element back to a tuple (if it was originally a tuple)\n        if isinstance(element, tuple):\n            element = tuple(list_to_float(list(element)))\n        # Convert the element back to a set (if it was originally a set)\n        if isinstance(element, set):\n            element = set(list_to_float(list(element)))\n        # Convert the element back to a dictionary (if it was originally a dictionary)\n        if isinstance(element, dict):\n            element = {key: list_to_float(value) for key, value in element.items()}\n        # Set the element back in the list\n        test_list[test_list.index(element)] = element\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row[row.index(item)] = float(item)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                if isinstance(item, str):\n                    try:\n                        float(item.replace(',', '.'))\n                    except ValueError:\n                        try:\n                            float(item.replace('.', ','))\n                        except ValueError:\n                            pass\n                elif isinstance(item, int):\n                    float(item)\n                elif isinstance(item, float):\n                    pass\n                else:\n                    print(f\"Failed to convert '{item}' to float\")"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    # Convert the string to a list of strings\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and convert each element to a string\n    return [str(x) for x in string.split()]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        raise ValueError('Array must have at least two elements')\n    \n    # Initialize a boolean array to keep track of the elements that have been seen before\n    seen = [False] * n\n    \n    # Iterate through the array and mark the elements that have been seen\n    for i in range(n):\n        if not seen[arr[i]-1]:\n            seen[arr[i]-1] = True\n    \n    # Iterate through the array again and find the element that appears only once\n    for i in range(n):\n        if seen[arr[i]-1] and arr[i]-1!= arr[arr[i]-1]-1:\n            return arr[i]\n    \n    # If we reach this point, it means that the element that appears only once is not present in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize two variables to store the count and the element that appears only once\n    count = 0\n    element = None\n    # Traverse the array and check if the element appears only once\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] and element is None:\n            element = arr[i]\n            count += 1\n        elif arr[i]!= arr[i-1] and element is not None:\n            element = None\n            count = 0\n    # If the element appears only once, return it\n    if count == 1:\n        return element\n    # If the element appears multiple times, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    # Find the first and last indices of the first and last occurrences of the element\n    left = 0\n    right = len(arr) - 1\n    first_occurrence_left = -1\n    first_occurrence_right = -1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            first_occurrence_left = mid\n            left = mid + 1\n        else:\n            right = mid\n    if arr[left] == arr[right]:\n        first_occurrence_right = left\n    else:\n        first_occurrence_right = right\n\n    # Find the first and last indices of the second and second-to-last occurrences of the element\n    second_occurrence_left = -1\n    second_occurrence_right = -1\n    left = right = 0\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            second_occurrence_left = mid\n            right = mid\n        else:\n            left = mid + 1\n    if arr[left] == arr[right]:\n        second_occurrence_right = left\n    else:\n        second_occurrence_right = right\n\n    # Return the element that appears only once\n    if first_occurrence_left == -1 or second_occurrence_left == -1:\n        return None\n    if first_occurrence_right == -1 or second_occurrence_right == -1:\n        return None\n    if first_occurrence_left == second_occurrence_left:\n        return arr[first_occurrence_left]\n    else:\n        return arr[second_occurrence_left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize two pointers, one starting from the beginning of the array and the other starting from the end\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize two variables to keep track of the current element and the count of occurrences of the element\n    current_element = arr[left]\n    count = 1\n\n    # Move the left pointer to the right until we find the element that appears only once\n    while left < right:\n        while left < right and arr[right] == current_element:\n            right -= 1\n        count += 1\n\n        while left < right and arr[left] == current_element:\n            left += 1\n        count -= 1\n\n        # If the count is 1, return the current element\n        if count == 1:\n            return current_element\n\n    # If we reach here, we didn't find the element that appears only once in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    \n    # Loop through the array and update the count of each element\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n        \n    # Loop through the array again and find the element that appears only once\n    for num in arr:\n        if count[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Traverse the array and increment the frequency of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Traverse the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = [0] * 101\n    \n    for i in range(n):\n        count[arr[i]] += 1\n        \n    for i in range(1, 101):\n        if count[i] == 1:\n            return i\n            \n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    # create a dictionary to store the frequency of elements in the array\n    freq = {}\n\n    # iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # iterate through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n    # Iterate through the array\n    for num in arr:\n        # Check if the current number is already in the count dictionary\n        if num in count_dict:\n            # If it is, increment its count\n            count_dict[num] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[num] = 1\n    # Initialize a variable to hold the element that appears only once\n    unique_element = None\n    # Iterate through the count dictionary\n    for num, count in count_dict.items():\n        # If the count is 1, this is the element that appears only once\n        if count == 1:\n            unique_element = num\n            break\n    # Return the unique element\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize count and position variables\n    count = 0\n    position = -1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If we encounter an element that is already at the correct position and count, increment count\n        if arr[i] == arr[position] and i!= position:\n            count += 1\n        # If we encounter an element that is at a different position, reset count and position\n        elif i!= position:\n            count = 1\n            position = i\n\n    # If we have counted all elements once, return the element\n    if count == len(arr):\n        return arr[position]\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples\n    list1.sort()\n\n    # Initialize the maximum product and the minimum product\n    max_product = min_product = list1[0][0] * list1[0][1]\n\n    # Loop through the list of tuples\n    for i in range(len(list1) - 1):\n        # Calculate the maximum and minimum products\n        max_product = max(max_product, abs(list1[i][0] * list1[i][1]), abs(list1[i][1] * list1[i + 1][0]), abs(list1[i + 1][0] * list1[i + 1][1]))\n        min_product = min(min_product, abs(list1[i][0] * list1[i][1]), abs(list1[i][1] * list1[i + 1][0]), abs(list1[i + 1][0] * list1[i + 1][1]))\n\n        # Update the maximum product if necessary\n        if max_product > max_product_tuple:\n            max_product_tuple = max_product\n\n        # Update the minimum product if necessary\n        if min_product < min_product_tuple:\n            min_product_tuple = min_product\n\n    return max_product_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    current_product = 1\n    \n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n        current_product *= product\n        \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize variables to keep track of the maximum absolute product of tuples and the corresponding indices\n    max_product = float('-inf')\n    max_product_index = None\n    max_product_tuple = None\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list again to find the maximum absolute product of pairs of tuples\n        for j in range(i + 1, len(list1)):\n            # Calculate the absolute product of the two tuples and add it to the maximum product if it's greater than the current maximum product\n            current_product = abs(list1[i][0] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n                max_product_index = (i, j)\n                max_product_tuple = list1[i], list1[j]\n\n    return max_product, max_product_index, max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # initialize variables for storing maximum absolute product and the index of the maximum product\n    max_product = float('-inf')\n    max_index = 0\n    \n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # loop through the remaining tuples starting from index i+1 to get all possible pairs of numbers\n        for j in range(i+1, len(list1)):\n            # calculate the absolute difference between the two numbers in the pair\n            abs_diff = abs(list1[i][1] - list1[j][0])\n            \n            # check if the absolute difference is greater than the current maximum absolute product\n            if abs_diff > max_product:\n                # update the maximum absolute product and its index\n                max_product = abs_diff\n                max_index = (i,j)\n    \n    # return the tuple of indices of the maximum absolute product\n    return max_index"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function calculates the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Function to check if a number is amicable or not\n    def is_amicable(num):\n        \"\"\"\n        This function checks if a number is amicable or not.\n        \"\"\"\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0 and num / i!= int(num/i):\n                return False\n        return True\n    \n    # Calculating sum of amicable numbers\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable(num) and num not in amicable_numbers:\n            amicable_numbers.append(num)\n    \n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    a, b = 0, 0\n    for i in range(1, num):\n        if num % i == 0:\n            a = i\n            b = num // i\n            break\n    return a, b\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit):\n        if i in amicable_numbers(i):\n            sum += i\n    return sum\n\ndef amicable_numbers(num):\n    \"\"\"\n    Find all the amicable numbers from 1 to a specified number.\n    \"\"\"\n    a, b = 0, 0\n    result = []\n    for i in range(1, num):\n        if num % i == 0:\n            a = i\n            b = num // i\n            if b == a:\n                continue\n            result.append(a)\n            result.append(b)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num!= sum_of_divisors(num):\n            continue\n        amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for i in range(1, limit):\n        if i == sum_of_divisors(i):\n            total_sum += i\n    return total_sum\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to find the sum of all divisors of a number.\n    '''\n    divisors_sum = 1\n    for i in range(1, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if i > 1:\n            j = 1\n            while j < i:\n                if i % j == 0:\n                    break\n                else:\n                    j += 1\n            else:\n                if i!= j:\n                    amicable_sum += i\n                else:\n                    continue\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    \n    for i in range(2, limit):\n        if i in range(2, limit):\n            if i == sum(range(1, int(i**0.5)+1)):\n                if i == sum(range(1, int(limit**0.5)+1)):\n                    sum_of_amicable += i\n                    \n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(sum_of_primes(i)):\n            amicable_sum += i\n    return amicable_sum\n\ndef sum_of_primes(n):\n    '''\n    Returns the sum of all prime numbers up to n.\n    '''\n    sum_of_primes = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum_of_primes += i\n    return sum_of_primes\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize a set to store the sum of amicable numbers\n    amicable_sum = set()\n    \n    # Loop through numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the current number is amicable\n        if is_amicable(i):\n            # If it is, add its sum to the set of amicable sums\n            amicable_sum.add(sum_amicable(i))\n    \n    # Return the sum of all amicable numbers in the set\n    return sum(amicable_sum)\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable to any other number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Loop through numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        # If the number is divisible by either i or the number minus i, it's not amicable\n        if num % i == 0 or num % (num - i) == 0:\n            return False\n    \n    # If the number is not divisible by any number other than 1 and itself, it's amicable\n    return True\n\n\ndef sum_amicable(num):\n    \"\"\"\n    Sum all amicable numbers to the specified number.\n    \"\"\"\n    # Initialize a set to store all amicable numbers\n    amicable_nums = set()\n    \n    # Loop through numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        # If the number is divisible by either i or the number minus i, add it to the set\n        if num % i == 0 or num % (num - i) == 0:\n            amicable_nums.add(i)\n            amicable_nums.add(num // i)\n    \n    # Return the sum of all amicable numbers in the set\n    return sum(amicable_nums)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable_number(n):\n    \"\"\"\n    A function to check if a given number is amicable or not.\n    \"\"\"\n    # check if n is prime or not\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    A function to sum all the amicable numbers from 1 to a specified number.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i) and is_amicable_number(limit - i):\n            total_sum += i + limit - i\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        '''\n        Function to check if a number is amicable or not.\n        '''\n        if n < 10:\n            return False\n        sum_of_proper_divisors = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                sum_of_proper_divisors += i + n // i\n        return sum_of_proper_divisors == n\n\n    sum_of_amicable = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum_of_amicable += i\n\n    return sum_of_amicable"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(complex(a,b))\n    return angle_rad.real"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the angle of the complex number in radians\n    angle_rad = cmath.phase(a+b*1j)\n\n    # Convert the angle to degrees and return it\n    return angle_rad*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # get the conjugate of the complex number\n    conj = a.conjugate()\n    # calculate the angle in radians\n    angle = cmath.phase(conj)\n    # convert the angle to degrees\n    angle = angle * 180 / cmath.pi\n    # return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle, 6)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables for counting 0s and 1s in the binary string\n    zero_count = 0\n    one_count = 0\n    \n    # Initialize maximum difference between 0s and 1s\n    max_difference = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        \n        # If the character is 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n            \n        # If the character is 1, increment the one count\n        else:\n            one_count += 1\n            \n        # Calculate the difference between the number of 0s and 1s\n        difference = abs(zero_count - one_count)\n        \n        # Update the maximum difference if the current difference is greater\n        if difference > max_difference:\n            max_difference = difference\n            \n    # Return the maximum difference between 0s and 1s in the binary string\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the count of 0s and 1s in each substring\n    count_0s = [0] * len(string)\n    count_1s = [0] * len(string)\n\n    # Iterate through each substring of the given binary string\n    for i in range(len(string)):\n        # If the current character is 0, increment the count of 0s\n        if string[i] == '0':\n            count_0s[i] += 1\n        # If the current character is 1, increment the count of 1s\n        else:\n            count_1s[i] += 1\n\n        # Update the count of 0s and 1s for the previous substring by subtracting the current count from the corresponding count in the current substring\n        count_0s[i - 1] -= count_0s[i]\n        count_1s[i - 1] -= count_1s[i]\n\n    # Initialize variables to store the maximum difference between the number of 0s and 1s in any sub-string\n    max_diff = 0\n\n    # Iterate through each substring of the given binary string\n    for i in range(len(string)):\n        # Calculate the maximum difference between the number of 0s and 1s in the current substring and the maximum difference found so far\n        diff = abs(count_0s[i] - count_1s[i])\n        max_diff = max(max_diff, diff)\n\n    # Return the maximum difference between the number of 0s and 1s in any sub-string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n\n    for i in range(length):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n        diff = abs(count_zero - count_one)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # initialize variables to keep track of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # loop through the string and update the count of 0s and 1s\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n    # initialize variables to store the maximum and minimum count of 0s and 1s\n    max_diff = 0\n    min_diff = abs(zero_count - one_count)\n\n    # loop through the string again and update the maximum and minimum count of 0s and 1s\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # calculate the count of 0s and 1s in the sub-string\n            sub_zero_count = zero_count\n            sub_one_count = one_count\n            for k in range(i, j):\n                if string[k] == '0':\n                    sub_zero_count += 1\n                else:\n                    sub_one_count += 1\n\n            # calculate the difference between the count of 0s and 1s and update the max and min variables\n            diff = abs(sub_zero_count - sub_one_count)\n            if diff > max_diff:\n                max_diff = diff\n            if diff < min_diff:\n                min_diff = diff\n\n    # return the maximum difference between the count of 0s and 1s in any sub-string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of the number of 0s and 1s in each substring\n    count_0 = count_1 = 0\n    \n    # Initialize variables to keep track of the maximum difference and the current substring\n    max_diff = 0\n    curr_sub = ''\n    \n    # Loop through each character in the binary string\n    for char in string:\n        # If the current character is a 0, update the count of 0s and check for the maximum difference\n        if char == '0':\n            count_0 += 1\n            if count_0 - count_1 > max_diff:\n                max_diff = count_0 - count_1\n        # If the current character is a 1, update the count of 1s and check for the maximum difference\n        elif char == '1':\n            count_1 += 1\n            if count_1 - count_0 > max_diff:\n                max_diff = count_1 - count_0\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    \n    # Loop through each character of the string\n    for char in string:\n        # If the character is a 0, increment the count_0 and count_1\n        if char == '0':\n            count_0 += 1\n            count_1 += 1\n        # If the character is a 1, decrement the count_0 and increment the count_1\n        else:\n            count_0 -= 1\n            count_1 += 1\n        \n        # Update the max_diff if the difference between count_0 and count_1 is greater than max_diff\n        length = count_0 + count_1\n        if length > max_length:\n            max_diff = max(max_diff, length - max_length)\n            max_length = length\n            \n    # Return the maximum difference between count_0 and count_1\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n        else:\n            raise ValueError(\"Input string should only contain '0' and '1' characters\")\n\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize the maximum difference and count the number of 0s and 1s in the first character of the string\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n\n    for char in string:\n        if char == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n        # Update the maximum difference if the difference between the counts is greater than the current maximum\n        if count_0s - count_1s > max_diff:\n            max_diff = count_0s - count_1s\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    n = len(string)\n\n    # Iterate through the string and count the number of 0s and 1s\n    for i in range(n):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n    # Calculate the maximum difference between the number of 0s and number of 1s in any sub-string\n    for i in range(n-1):\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n\n    # Get all common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    This function calculates the common divisor of two given numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a > b:\n        return common_divisor(a % b, b)\n    else:\n        return common_divisor(a, b % a)\n\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \"\"\"\n    cd1 = common_divisor(a, b)\n    cd2 = common_divisor(b, a)\n    return cd1 + cd2\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find common divisors of a and b\n    def common_divisor(num1, num2):\n        while num2 > 0:\n            quotient = num1 // num2\n            num1 = num2\n            num2 = quotient\n        return num1\n    \n    # calculating the sum of common divisors of a and b\n    c = common_divisor(a, b)\n    d = common_divisor(b, c)\n    sum_cd = c + d\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # sum up the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    i = 1\n    j = 1\n\n    while True:\n        if a % i == 0 and b % i == 0:\n            sum = i + j\n            return sum\n        if a % j == 0 and b % j == 0:\n            sum = i + j\n            return sum\n        if i > b:\n            return sum\n        i += 1\n        j += 1"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = 0\n    divisor_a = 1\n    divisor_b = 1\n\n    # Iterate through each number from a to b\n    for i in range(a, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors += i\n            divisor_a = i\n\n    return common_divisors, divisor_a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of the common divisors of two given numbers.\n    \"\"\"\n    # Compute the set of common divisors of a and b\n    common_divisors = set(divisors(a) & divisors(b))\n    # Compute the sum of the common divisors\n    return sum(common_divisors)\n\ndef divisors(n):\n    \"\"\"\n    Compute the set of common divisors of a given number.\n    \"\"\"\n    divisors = set()\n    d = 2\n    while d*d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            divisors.add(d)\n    if n > 1:\n        divisors.add(n)\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the set of common divisors of num1 and num2\n    common_divisors = set(set(num1).intersection(set(num2)))\n    \n    # Adding 1 to the sum of common divisors to handle the case where num1 and num2 have common factors\n    return sum(common_divisors) + 1"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum.\n    \"\"\"\n    # Find the greatest common divisor of the two numbers using Euclid's algorithm.\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the sum of common divisors of the two numbers using the Euclidean algorithm.\n    def sum_common_divisors(a, b):\n        if a == b:\n            return a\n        elif a > b:\n            a, b = b, a\n        return sum_common_divisors(a, gcd(a, b)) + a\n\n    return sum_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Check if either integer is zero\n    if x == 0 or y == 0:\n        return 0\n\n    # Convert both integers to binary strings\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n\n    # Check if both binary strings are the same length\n    if len(x_bin)!= len(y_bin):\n        return 0\n\n    # Initialize the product as 0\n    product = 0\n\n    # Loop through each digit in the binary strings\n    for i in range(max(len(x_bin), len(y_bin))):\n        # If the i-th digit is a 1, add the corresponding digit in the product\n        if int(x_bin[i]) + int(y_bin[i]) == 2:\n            product += 1 << i\n\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        remainder = x % y\n        result += remainder\n        x = x // y\n        y = remainder\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into a list of words\n    long_words = [word for word in words if len(word) > n] # Filter the list to only include words longer than n characters\n    return long_words # Return the filtered list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # Split the string into words\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    This function takes two arguments - n and words - and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check for unique rows and columns\n    for i in range(n):\n        if len(set(my_matrix[i]))!= n:\n            return False\n        if len(set([x[i] for x in my_matrix]))!= n:\n            return False\n    # check for magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] + sum(my_matrix[i][k] + my_matrix[k][j] for k in range(n))!= n * (n + 1) - 1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a dictionary to store the frequency of each element in the matrix\n    freq = {}\n    \n    # Iterate through each row in the matrix\n    for i in range(len(my_matrix)):\n        # Iterate through each element in the row\n        for j in range(len(my_matrix[i])):\n            # If the element is already in the dictionary, increment its frequency\n            if my_matrix[i][j] in freq:\n                freq[my_matrix[i][j]] += 1\n            # If the element is not in the dictionary, add it with a frequency of 1\n            else:\n                freq[my_matrix[i][j]] = 1\n    \n    # Check if the frequency of each element in the matrix is the same as the range of numbers from 1 to n^2\n    for num in range(1, len(my_matrix) ** 2 + 1):\n        if freq.get(num, 0) == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of all elements in the matrix\n    sum_of_elements = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of all elements is equal to the product of the matrix dimensions\n    if sum_of_elements == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Calculate the sum of the elements in the matrix\n    total_sum = sum([sum(row) for row in my_matrix])\n    \n    # Calculate the sum of the diagonals\n    diag1_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diag2_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    \n    # Compare the total sum and diagonals sums\n    return total_sum == diag1_sum + diag2_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n    \n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if each row is a magic square\n        for j in range(n):\n            # Check if the current element is equal to the sum of its row and column indices\n            if my_matrix[i][j]!= (i+j):\n                return False\n        # Check if each column is a magic square\n        for j in range(n):\n            # Check if the current element is equal to the sum of its row and column indices\n            if my_matrix[j][i]!= (i+j):\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n    # Check if each row, column, and diagonal contains the same values\n    for i in range(n):\n        row_sum = sum(my_matrix[i][j] for j in range(n))\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if row_sum!= col_sum or row_sum!= my_matrix[i][i]:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # create a list of sums\n    sums = [sum(row) for row in my_matrix]\n    \n    # check if there are any negative sums in the list\n    if any(x < 0 for x in sums):\n        return False\n    \n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= sums[i]:\n            return False\n        for j in range(len(my_matrix)):\n            if j!= i and my_matrix[i][j]!= sums[i+j]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n    \n    # Check if the matrix has all unique elements\n    if len(set(sum(my_matrix, [])))!= 3**3:\n        return False\n    \n    # Check if all rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if row_sums!= row_sums[:1]:\n        return False\n    \n    # Check if all columns have the same sum\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(3)]\n    if col_sums!= col_sums[1:]:\n        return False\n    \n    # Check if the main diagonal and the secondary diagonal have the same sum\n    main_diag = [my_matrix[i][i] for i in range(3)]\n    secondary_diag = [my_matrix[i][2-i] for i in range(3)]\n    if main_diag!= secondary_diag:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    \n    # Check rows\n    for i in range(n):\n        row_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n        if row_sum == magic_sum:\n            return True\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum == magic_sum:\n            return True\n    \n    # Check diagonals\n    for i in range(n):\n        if my_matrix[i][i] == magic_sum:\n            return True\n        if my_matrix[i][n-i-1] == magic_sum:\n            return True\n    \n    # Check remaining elements\n    for i in range(n-3):\n        for j in range(n-3):\n            sum_elem = my_matrix[i][j] + my_matrix[i][j+1] + my_matrix[i][j+2] + \\\n                       my_matrix[i+1][j] + my_matrix[i+1][j+1] + my_matrix[i+1][j+2] + \\\n                       my_matrix[i+2][j] + my_matrix[i+2][j+1] + my_matrix[i+2][j+2]\n            if sum_elem == magic_sum:\n                return True\n    \n    # No magic square found\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n    \n    # Check if the matrix has the same number of rows and columns\n    if rows!= cols:\n        return False\n    \n    # Check if the matrix is symmetric\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[rows-i-1][rows-i-1]:\n            return False\n    \n    # Check if the matrix has a specific sum\n    for i in range(rows):\n        row_sum = 0\n        for j in range(cols):\n            row_sum += my_matrix[i][j]\n        if row_sum!= magic_sum:\n            return False\n    \n    # Check if the matrix has a specific sum in the columns\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += my_matrix[i][j]\n        if col_sum!= magic_sum:\n            return False\n    \n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    # Find the item with the highest count\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_freq_item = [num for num, f in freq.items() if f == max_freq][0]\n    return max_freq_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = max(freq.values())\n\n    return [key for key, value in freq.items() if value == max_count][0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n\n    max_num = max(frequency_dict, key=frequency_dict.get)\n    max_frequency = frequency_dict[max_num]\n\n    return max_num, max_frequency"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item in freq:\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = max(count, key=count.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # find the item with the highest count\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Iterate over the dictionary and find the item with maximum frequency\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item\n\n    # If there is no item with maximum frequency, return None\n    return None"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in str1 if char not in vowels][::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_dict = {v: i for i, v in enumerate(vowels)}\n\n    # converting the string to lowercase\n    str1 = str1.lower()\n\n    # finding the indices of vowels\n    indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            indices.append(i)\n\n    # reversing the vowels\n    for i in reversed(range(len(indices))):\n        index = indices[i]\n        if index in vowel_dict:\n            str1 = str1[:index] + str1[index].lower() + str1[index+1:]\n\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    vowels_reversed = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n            vowels_reversed += str1[i]\n    return vowels_reversed, vowel_count"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_list = list(vowels)\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] not in vowels_list:\n            new_str = new_str + str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) +''\n    return str1.strip()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert tuple to a list\n    lst = list(tup)\n    # Join list elements with comma separator\n    return ','.join(lst)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_list = []\n    for item in tup1:\n        string_list.append(str(item))\n    return \"\".join(string_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string and return it\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the join() method\n    str_tup = ', '.join(str(i) for i in tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    tup_str = str(tup1)\n    return tup_str"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to zero\n    sum_neg = 0\n    \n    # Loop through each element in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum_neg += num\n    \n    # Return the sum of the negative numbers\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to keep track of the sum of negative numbers\n    neg_sum = 0\n    \n    # Iterate over the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the number to the sum of negative numbers\n            neg_sum += num\n            \n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n\n    hexagonal_num = (n * (2 * n - 1)) + n\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Base case: if n = 1, return 1\n    if n == 1:\n        return 1\n\n    # Find the number of squares needed to reach n\n    num_squares = (n - 1) // 2\n\n    # Calculate the value of the nth hexagon using the formula for hexagonal numbers\n    nth_hex = (num_squares * (2 * num_squares - 1)) // 3\n\n    # Return the nth hexagon\n    return nth_hex\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # First, let's calculate the value of n/2\n    n_half = n / 2\n    \n    # Then, let's calculate the value of n - n/2\n    n_minus_n_half = n - n_half\n    \n    # Finally, let's calculate the value of n_minus_n_half^2\n    hex_num = n_minus_n_half**2\n    \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def hexagonal_helper(i, j):\n        if i == 0:\n            return 1\n        else:\n            return 2 * hexagonal_helper(i-1, j) + j\n\n    return hexagonal_helper(n, 0)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the function to find the nth hexagonal number\n    def nth_hexagonal(n):\n        '''\n        Write a function to find the nth hexagonal number.\n        '''\n        # Initialize the first two terms of the sequence\n        a = 1\n        b = 1\n        # Loop through the sequence up to the nth term\n        for i in range(n):\n            # Calculate the next term\n            c = a + b\n            # Update the values of a and b for the next iteration\n            a = b\n            b = c\n        # Return the nth term of the sequence\n        return a\n    \n    # Return the nth hexagonal number\n    return nth_hexagonal(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1)) / 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_ones += 1\n    if num_zeros == 0:\n        return 0\n    else:\n        return num_zeros / num_ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    return zero_count/non_zero_count if non_zero_count!= 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1]*len(nums))\n    non_zero_count = 0\n\n    for num in nums:\n        if num!= 0:\n            count[num-1] -= 1\n            non_zero_count += 1\n\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n\n    # Initialize empty arrays for non-zero and zero counts\n    non_zero_count = array('i')\n    zero_count = array('i')\n\n    # Iterate through the array and count non-zero and zero counts\n    for num in nums:\n        if num!= 0:\n            non_zero_count.append(1)\n        else:\n            zero_count.append(1)\n\n    # Calculate the ratio of non-zero to zero counts\n    non_zero_count = non_zero_count[::-1]\n    zero_count = zero_count[::-1]\n    zero_ratio = non_zero_count[0] / zero_count[0]\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n    ratio = zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))  # create an array of zeros of length len(nums)\n    for num in nums:\n        if num == 0:\n            count[num] += 1  # increment the count for each zero found\n    zero_count = 0\n    non_zero_count = 0\n    for num in count:\n        zero_count += num\n        non_zero_count += len(count) - num\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize the array with zeros\n    arr = array('i', [0] * len(nums))\n\n    # Iterate over the array and increment the corresponding element\n    for i in range(len(nums)):\n        arr[i] = nums[i]\n\n    # Find the sum of the elements\n    total = arr.sum()\n\n    # Calculate the ratio of zeroes to non-zeroes\n    non_zeroes = arr.count(1)\n    zeroes = arr.count(0)\n    ratio = zeroes / non_zeroes if non_zeroes!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    zero_ratio = zero_count / non_zero_count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    non_zero_count = array('i')\n    \n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n    \n    zero_sum = sum(zero_count)\n    non_zero_sum = sum(non_zero_count)\n    \n    if non_zero_sum == 0:\n        return 0\n    \n    return zero_sum / non_zero_sum"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Calculate the sum of powers of 2 less than or equal to n\n    powers_of_two = [2**(i+1) for i in range(n//2+1)]\n    total = sum(powers_of_two)\n    # Check if n is equal to the sum of powers of 2\n    return n == total"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n\n    # check for power of 2\n    if n & (n-1) == 0: \n        return True\n\n    # check for sum of non-zero powers of 2\n    for i in range(1, n//2+1): \n        if n - 2**(i-1) > 0: \n            if is_Sum_Of_Powers_Of_Two(n - 2**(i-1)): \n                return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # To check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # To check if the given number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # To calculate the number of powers of 2 in the given number\n    count = 0\n    while n > 1:\n        n //= 2\n        count += 1\n\n    # To calculate the sum of non-zero powers of 2\n    result = 0\n    while count > 0:\n        if count % 2 == 1:\n            result += 2 ** count\n        count //= 2\n\n    # To check if the sum of non-zero powers of 2 is equal to the given number\n    if result == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == (1 << i) - 1:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n <= 0: #base case\n        return False\n    elif n == 1: #special case\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n%i == 0:\n                return False #if any of the factors is not a power of 2\n        return True #if no factor is found"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case\n    if n == 1:\n        return True\n    \n    # Check if n is a power of 2\n    if n == 2**0:\n        return True\n    \n    # Check if n can be expressed as sum of powers of 2\n    for i in range(1, int(n**0.5)+1):\n        if n == 2**i + 2**(n-2**i):\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the input number to binary string\n    binary = bin(n)[2:]\n    \n    # Check for the length of the binary string\n    if len(binary) == 1:\n        # If the binary string has only one digit, then it can be represented as sum of powers of 2\n        return True\n    \n    # Initialize a variable to store the powers of 2\n    powers_of_two = []\n    \n    # Iterate through the binary string from right to left\n    for i in range(len(binary)-1, -1, -1):\n        # If the current digit is 0, then there cannot be a sum of powers of 2, so return False\n        if binary[i] == '0':\n            return False\n        \n        # If the current digit is 1, then check if the power of 2 is already present in the list of powers of 2\n        if binary[i] == '1' and powers_of_two.count(2**i) == 0:\n            powers_of_two.append(2**i)\n    \n    # If all the powers of 2 are present, then the binary string can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0: \n            if n // i == 1: \n                return True\n            elif n // i == 2: \n                return False\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes a number as input and returns True if it can be represented as a sum of powers of 2, \n    otherwise, it returns False.\n\n    \"\"\"\n\n    # we start with a count of 1 in each bit of the binary representation of n\n    count = [0] * 32\n    while n > 0:\n        count[n & 1] += 1\n        n >>= 1\n\n    # we loop through all possible combinations of powers of 2\n    for i in range(1, 32):\n        # if the count of the i-th bit is greater than 0, it means that the number can be represented as a sum of powers of 2\n        if count[i] > 0:\n            # we can represent the number as a sum of powers of 2 by adding a power of 2 raised to the power of the count of the i-th bit\n            return n == (1 << i) * 2 ** count[i]\n\n    # if we get here, it means that the number cannot be represented as a sum of powers of 2\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2*pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n\n    # Calculate the circumference of the circle using the formula: \n    # circumference = 2 * pi * radius\n    circumference = 2 * 3.14159 * r\n\n    # Return the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Formula for calculating the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    flat_set = set(flatten(test_list))\n    return list(flat_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        for subitem in item:\n            if isinstance(subitem, (list, tuple)):\n                flattened.extend(subitem)\n            else:\n                flattened.append(subitem)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return list(set(flattened))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    def flatten(lst):\n        \"\"\"\n        Recursive function to flatten the list.\n        \"\"\"\n        result = []\n        for element in lst:\n            if isinstance(element, list):\n                result.extend(flatten(element))\n            else:\n                result.append(element)\n        return result\n    \n    return set(flatten(test_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            if type(num) == int or type(num) == float:\n                result.append(num)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty set to store the flattened numbers\n    flattened_numbers = set()\n\n    # iterate through each list in the test_list\n    for sublist in test_list:\n        # iterate through each element in the sublist and add it to the flattened_numbers set\n        for element in sublist:\n            flattened_numbers.add(element)\n\n    # convert the flattened_numbers set to a list and return it\n    return list(flattened_numbers)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Start with the last element as the pivot\n    n = len(nums)\n    pivot = nums[n-1]\n    # Sort the first n-1 elements as a pancake\n    for i in range(n-1):\n        # Find the smallest element in the unsorted part of the array\n        min_idx = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        # Swap the pivot with the smallest element\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n        # Bake the pancake\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n        # Move the pivot to the end of the sorted part of the array\n        if nums[n-1] == pivot:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # function to get the largest element in the list\n    def find_largest_element(nums):\n        largest = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > largest:\n                largest = nums[i]\n        return largest\n\n    # function to create a pancake with the given number of pies\n    def create_pancake(n):\n        pancake = [n] * n\n        return pancake\n\n    # function to reverse the pancake\n    def reverse_pancake(pancake, i, j):\n        while i < j:\n            pancake[i], pancake[j] = pancake[j], pancake[i]\n            i += 1\n            j -= 1\n\n    # function to put the largest element at the end of the list\n    def put_largest_at_end(nums):\n        largest = find_largest_element(nums)\n        nums.remove(largest)\n        nums.append(largest)\n\n    # function to print the sorted list\n    def print_sorted_list(nums):\n        print(nums)\n\n    # main function\n    def main():\n        # get the number of pies to sort the list\n        n = int(input(\"Enter the number of pies: \"))\n\n        # create the pancakes\n        pancakes = []\n        for i in range(n):\n            pancakes.append(create_pancake(i+1))\n\n        # sort the list\n        sorted_list = pancake_sort(nums)\n\n        # reverse the pancakes\n        for pancake in pancakes:\n            for i in range(len(pancake)-2, -1, -1):\n                reverse_pancake(pancake, i, len(pancake)-1)\n\n        # put the largest element at the end of the list\n        put_largest_at_end(sorted_list)\n\n        # print the sorted list\n        print_sorted_list(sorted_list)\n\n    # call the main function\n    main()"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the last element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Print the sorted array at each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n    '''\n    # Create a copy of the input list to avoid modifying it.\n    nums = nums.copy()\n\n    # Loop through the list and find the largest element.\n    max_element = max(nums)\n\n    # Loop through the list and find the pancakes for each element.\n    for i in range(len(nums)):\n        # Find the index of the largest element to the left of this element.\n        left_index = i\n        while left_index > 0 and nums[left_index-1] > nums[left_index]:\n            left_index -= 1\n\n        # Find the index of the largest element to the right of this element.\n        right_index = i\n        while right_index < len(nums)-1 and nums[right_index+1] > nums[right_index]:\n            right_index += 1\n\n        # Swap the elements if necessary.\n        if left_index < right_index:\n            nums[left_index], nums[right_index] = nums[right_index], nums[left_index]\n\n    # Return the sorted list.\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a list of integers from 1 to n, in reverse order\n    reverse_order = [n-i for i in range(1,n+1)]\n    # reverse the order of the list of integers\n    reverse_order.reverse()\n    # swap the first element of the list with the last element of the reversed order list\n    nums[0], nums[reverse_order[0]-1] = nums[reverse_order[0]-1], nums[0]\n    # keep swapping adjacent elements of the list until no more swaps are needed\n    while any(nums[i] > nums[i+1] for i in range(n-1)):\n        # find the index of the largest element in the remaining unsorted portion of the list\n        max_index = 0\n        for j in range(1,n-1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the max element with the last element in the unsorted portion of the list\n        nums[max_index], nums[n-1] = nums[n-1], nums[max_index]\n        # find the index of the largest element in the unsorted portion of the list\n        for j in range(max_index+1,n):\n            if nums[j] > nums[n-1]:\n                max_index = j\n        # swap the max element with the element in the max_index-th position in the unsorted portion of the list\n        nums[max_index], nums[n-1] = nums[n-1], nums[max_index]\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    def reverse_list(nums):\n        for i in range(len(nums) // 2):\n            nums[i], nums[-i - 1] = nums[-i - 1], nums[i]\n\n    for i in range(len(nums) - 1, 0, -1):\n        reverse_list(nums[:i])\n        reverse_list(nums[i:])\n        reverse_list(nums[:i])\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def pancake_sort_inner(nums, k):\n        if k == 0:\n            return nums\n\n        for i in range(k):\n            max_index = i\n            for j in range(i+1, k):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n            swap(nums, i, max_index)\n\n        pancake_sort_inner(nums, k-1)\n\n    pancake_sort_inner(nums, len(nums))\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Initialize the maximum swaps to 0\n    max_swaps = 0\n    # Initialize the list of swaps to 0\n    swaps = [0] * n\n    # Initialize the list of indices to iterate over\n    indices = range(n)\n    # Iterate over the indices\n    for i in range(n):\n        # Find the index of the largest element\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the largest element with the current element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Update the maximum swaps count\n        max_swaps += 1\n        # Update the list of swaps\n        for j in range(n):\n            swaps[j] = 0\n        # Reverse the indices to iterate over in reverse order\n        indices = indices[::-1]\n        # Iterate over the reversed indices\n        for j in indices:\n            # Swap the largest element with the current element\n            nums[j], nums[i] = nums[i], nums[j]\n            # Update the list of swaps\n            swaps[j] = 1\n            # Update the maximum swaps count\n            max_swaps += 1\n    # Print the maximum swaps count\n    print(\"Maximum swaps:\", max_swaps)\n    # Print the sorted list\n    print(\"Sorted list:\", nums)\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    # Get the length of the list\n    n = len(nums)\n    # Initialize an empty list to store the sorted elements\n    sorted_nums = []\n\n    # Loop through the list n-1 times (for each element)\n    for i in range(n-1):\n        # Get the index of the element with the largest value\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the elements at the current index with the element with the largest value\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Add the sorted element to the sorted_nums list\n        sorted_nums.append(nums[i])\n\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # initialize the length of the list\n    n = len(nums)\n\n    # while the list is not sorted\n    while True:\n        # find the largest unsorted element\n        largest = 0\n        for i in range(1, n):\n            if nums[i] > nums[largest]:\n                largest = i\n\n        # if the largest unsorted element is already at the end of the list, the list is sorted\n        if largest == n - 1:\n            break\n\n        # swap the largest unsorted element with the end of the list\n        nums[n - 1], nums[largest] = nums[largest], nums[n - 1]\n\n        # reduce the length of the list by one\n        n -= 1\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes in three lists as arguments and returns the count of items that are identical in the same position of those lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list1)):\n                if list1[j] == list3[j]:\n                    if i == j:\n                        count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes in an array as an argument and returns the maximum absolute difference between any two elements in the array.\n    '''\n\n    # Initialize the maximum absolute difference variable to the smallest possible value\n    max_diff = float('-inf')\n\n    # Loop through each pair of elements in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the two elements and check if it is greater than the current maximum absolute difference\n            curr_diff = abs(arr[i]-arr[j])\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff: \n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes a list as input and returns the maximum absolute difference between any two elements in the list.\n    '''\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Calculate the maximum absolute difference\n    max_diff = abs(arr[-1] - arr[0])\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the minimum value as a large positive number\n    min_value = float('inf')\n\n    # Traverse the array\n    for i in range(len(arr)): \n        # If the current element is smaller than the minimum value, update the minimum value\n        if arr[i] < min_value: \n            min_value = arr[i]\n        \n        # If the current element is greater than the minimum value, calculate the difference between it and the minimum value\n        else: \n            diff = arr[i] - min_value\n            \n            # Update the maximum difference if the calculated difference is greater than the current maximum difference\n            if diff > max_diff: \n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables\n    x = None\n    y = None\n\n    # Calculate the discriminant\n    disc = b ** 2 - 4 * a * n\n\n    # Check if the discriminant is positive\n    if disc > 0:\n        # Calculate the two solutions\n        x1 = (-b + disc ** 0.5) / (2 * a)\n        x2 = (-b - disc ** 0.5) / (2 * a)\n\n        # Check if both solutions exist and are integers\n        if x1.is_integer() and x2.is_integer():\n            # If both solutions are integers, return them as a tuple\n            return (int(x1), int(x2))\n\n    # If the discriminant is negative, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n - b + 1):\n        y = n - a * x - b * x\n        if y >= 0 and y % 2 == 0:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n\n    # Calculate the discriminant\n    d = b ** 2 - 4 * a * n\n\n    # If the discriminant is positive, there is only one solution\n    if d > 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return (x1, x2)\n\n    # If the discriminant is negative, there are two solutions\n    elif d < 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return (x1, x2)\n\n    # If the discriminant is zero, there are infinite solutions\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = -n // b\n            y = x * b\n    else:\n        x = (n - b // a * a) // a\n        y = x * a + b\n\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        x = i\n        y = n - i\n        if a*x + b*y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (int(-n/b), None)\n    elif b == 0:\n        return (None, int(-n/a))\n    else:\n        d = b**2 - 4*a*n\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5) / (2*a)\n            x2 = (-b - d**0.5) / (2*a)\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Find the solutions to ax + by = n.\n\n    Parameters:\n    a, b (int): coefficients of the equation\n    n (int): value of the equation\n\n    Returns:\n    tuple: (x, y) or None if no solution exists\n    \"\"\"\n    # Calculate the determinant\n    det = a * b - n\n\n    # Check if the determinant is equal to zero\n    if det == 0:\n        # Calculate the second and third solutions\n        x = -b / a\n        y = -b / a\n\n        return (x, y)\n\n    # Calculate the first solution\n    x = -b / a\n\n    # Check if the first solution exists\n    if x >= 0:\n        # Calculate the second solution\n        y = x - det / a\n\n        # Check if the second solution exists\n        if y >= 0:\n            return (x, y)\n\n    # No solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    \n    x = (-n + b) // a\n    y = (-n - b) // a\n    \n    if a == 1 and x == y:\n        return (x, x)\n    elif a == -1 and x == y:\n        return (x, -x)\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        # If a is zero, it means the equation is in the form ax + by = n\n        # where x and y are real numbers\n        # so we can use the quadratic formula to find the roots\n        discriminant = b**2 - 4*a*n\n        if discriminant > 0:\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            return (x1, x2)\n        else:\n            return None\n    else:\n        # If a is not zero, it means the equation is in the form x = {-b/a +/- sqrt(b^2 - 4an)} / 2a\n        # so we can use the quadratic formula to find the real roots\n        discriminant = b**2 - 4*a*n\n        if discriminant > 0:\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            return (x1, x2)\n        else:\n            x1 = (-b/a + discriminant**0.5)/(2*a)\n            x2 = (-b/a - discriminant**0.5)/(2*a)\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n//a + 1):\n        x = i * a\n        y = i * b\n        if x + y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the elements that need to be removed from list1\n    elements_to_remove = []\n\n    # Loop through the elements in list1\n    for element in list1:\n        # If the element is present in list2, add it to the list of elements to remove\n        if element in list2:\n            elements_to_remove.append(element)\n\n    # Loop through the elements in elements_to_remove and remove them from list1\n    for element in elements_to_remove:\n        list1.remove(element)\n\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [num for num in list1 if num not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as inputs and returns a new list with all elements from the first list that are not present in the second list.\n    '''\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the list1 and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a copy of the first list\n    new_list = list(list1)\n    # iterate over the second list\n    for elem in list2:\n        # remove the element from the copy of the first list if it exists\n        if elem in new_list:\n            new_list.remove(elem)\n    # return the modified copy of the first list\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        sum = 2\n        for i in range(1, n // 2):\n            sum += (n - 2 * i)\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n // 2):\n        series += n - 2 * i\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_even(n)\n    else:\n        return sum_odd(n)\n\ndef sum_odd(n):\n    \"\"\"\n    Helper function to sum the series from i=0 to n // 2 for odd n.\n    \"\"\"\n    total = 0\n    i = 1\n    while i * 2 <= n:\n        total += n - i * 2\n        i += 1\n    return total\n\ndef sum_even(n):\n    \"\"\"\n    Helper function to sum the series from i=0 to n // 2 for even n.\n    \"\"\"\n    total = 0\n    i = 1\n    while i * 2 <= n:\n        total += n - i * 2\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        x = n-2\n        y = n//2\n        sum = 0\n        for i in range(x, y+1):\n            sum += n - 2*i\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - l - 1)) / (2 * math.factorial(l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s - l) * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, n):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(n):\n        area += s * tan(i*2*pi/n)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i*2*pi)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        angle = 2*pi/l * i\n        area += s * tan(angle/2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using the formula: area = 0.5 * s * l\n    area = 0.5 * s * l\n    \n    # convert the area to square units\n    area = area * (1/tan(pi/4)) * (1/tan(pi/4))\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # convert the sides length and number of sides to radians\n    radians = (2 * pi) / l\n    # calculate the area of the polygon using the formula:\n    # area = (s * (s - tan(radians))) / 2\n    area = ((s * (s - tan(radians))) / 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    sp = (s + l) / 2\n\n    # calculate the area of the polygon using the formula:\n    # A = (n * s * sin(\u03b8) + (n-1) * l * sin(\u03b8) + (n-2) * l^2 * sin(\u03b8)) / 2\n    # where n is the number of sides, s is the semi-perimeter, l is the length, \u03b8 is the angle between adjacent sides,\n    # sin(\u03b8) is the sine of the angle, and A is the area of the polygon.\n\n    # calculate the number of sides of the polygon\n    n = l // s\n\n    # calculate the angle between adjacent sides\n    \u03b8 = 2 * pi / n\n\n    # calculate the sine of the angle\n    sin_\u03b8 = tan(\u03b8 / 2)\n\n    # calculate the area of the polygon using the formula\n    area = (n * s * sin_\u03b8 + (n - 1) * l * sin_\u03b8 + (n - 2) * l ** 2 * sin_\u03b8) / 2\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n/i!= int(n/i):\n                divisors.append(int(n/i))\n    return sum(divisors) == n*2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0: \n            divisors.append(i) \n            divisors.append(n//i) \n    divisors.sort() \n    if divisors[-1]!= n: \n        return False \n    else: \n        return True "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i!= i:\n                return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_set = set()\n    div_sum = 0\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            div_set.add(i)\n            if n//i!= i:\n                div_sum += n//i\n                div_set.add(n//i)\n    \n    if n == div_sum:\n        print(\"The sum of the divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate the sum of the divisors of an integer\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    # Check if the sum of the divisors of n and n+1 are the same\n    if sum_of_divisors(n) == sum_of_divisors(n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum == sum(range(1, n + 1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    d = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            d.append(i)\n    s = sum(d)\n    \n    # Check if the sum of the divisors is the same as n\n    if s == n:\n        print(\"The sum of the divisors of\", n, \"are the same as\", n)\n    else:\n        print(\"The sum of the divisors of\", n, \"are different from\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divs.append(i)\n        i += 1\n    return sum(divs) == n*n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    \n    return sum(divs) == sum(math.factorial(i) for i in divs)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(26):\n        count_dict[alphabet[i]] = 0\n    \n    for char in str1:\n        count_dict[char.lower()] += 1\n    \n    for char in str1:\n        if char.lower() in count_dict:\n            if char.lower() == count_dict[char.lower()]:\n                count_dict[char.lower()] += 1\n    \n    count = 0\n    for count in count_dict.values():\n        count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n\n    # Iterate through each character in the string\n    for i in range(len(str1)):\n        # Get the character at the current position\n        c = str1[i]\n\n        # Check if the character is a letter\n        if c.isalpha():\n            # Convert the character to its position in the English alphabet (0-25)\n            pos = ord(c) - ord('a')\n\n            # Check if the position already exists in the dictionary\n            if pos in char_count:\n                # Increment the count by 1\n                char_count[pos] += 1\n            else:\n                # Add the position to the dictionary with a count of 1\n                char_count[pos] = 1\n\n    # Return the dictionary containing the count of characters at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize the count of characters to 0\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(26):\n        # Check if the current character is the same as the current index in the English alphabet\n        if str1[i] == chr(ord('a') + i):\n            # Increment the count of characters at the same position in the string\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+65)] = 0\n        \n    for char in str1:\n        if char in char_count and char.lower() in char_count:\n            char_count[char.lower()] += 1\n    \n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for char in str1.lower():\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for char in str1.lower():\n        if char.isalpha():\n            i = ord(char) - ord('a')\n            if i == 0 or i == 26:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(65+i)) == len(str1):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        char = alphabet[i]\n        if char in str1.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.find(char.lower())\n            count += 1\n            while index > 0 and alphabet[index-1].isalpha():\n                index -= 1\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0: \n                count += 1\n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**int(log2(n) + 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a number `n` as input and returns the smallest power of 2 greater than or equal to `n`.\n    \"\"\"\n    # Start with the smallest power of 2\n    power = 1\n    \n    # Loop until we find the next power of 2 greater than or equal to `n`\n    while power < n:\n        power *= 2\n        \n    # Return the next power of 2 greater than or equal to `n`\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = n\n    \n    # Find the binary representation of n\n    n_bin = bin(n)[2:]\n    \n    # Initialize a variable to keep track of the position of the 1's in the binary representation\n    position = len(n_bin) - 1\n    \n    # While the position is not negative and the ith position of the binary representation is 1, set the result to 2**position\n    while position >= 0 and n_bin[position] == '1':\n        result = result * 2\n        position -= 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Initialize result variable with n\n    result = n\n    \n    # Loop until result is a power of 2\n    while result & (result - 1)!= 0:\n        result += 1\n    \n    # Return result\n    return result\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the exponent to 0\n    exponent = 0\n    # While n is not a power of 2\n    while n!= 1: \n        # Increment the exponent\n        exponent += 1\n        # Calculate the next power of 2\n        n = 2 ** exponent\n    # Return the exponent\n    return exponent"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    \n    power_of_2 = 2\n    while power_of_2 < n:\n        power_of_2 *= 2\n    \n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize variables\n    p = 1\n    x = 0\n\n    # Check if n is already a power of 2\n    while p < n:\n        p *= 2\n        x += 1\n\n    # Check if n is already a power of 2\n    while p >= n:\n        p /= 2\n        x -= 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return (1 << x)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result to n\n    result = n\n    \n    # Loop while n is not a power of 2\n    while result & (result - 1)!= 0:\n        result += 1\n        \n    # Return the result\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each element of the list\n    for i in range(m, n+1):\n        # Check if the element is in the list\n        if i in list1:\n            # Add the element to the sum variable\n            sum += i\n    # Return the sum of the elements within the specified range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > n:\n        return None\n    elif m == 0:\n        return list1[0]\n    elif m == n:\n        return list1[n-1]\n    else:\n        return list1[m-1] + sum_range_list(list1, m+1, n)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are within the list bounds\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return \"Invalid indices!\"\n\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through the list and add up the numbers in the specified range\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m >= len(list1) or n < 0:\n        return \"Invalid indices\"\n    \n    # Calculate the sum of the numbers in the range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n        \n    # Return the sum of the range\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    return 5 * a\n\nprint(perimeter_pentagon(5))  # Output: 25"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Calculate the semi-perimeter of the pentagon\n    semi_perimeter = (5 * a) / 4\n    \n    # Calculate the area of the pentagon\n    area = math.pi * (semi_perimeter ** 2)\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * area\n    \n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Convert the length of the side to radians and calculate the area using the formula for a regular polygon\n    s = 5 * a / 4\n    area = math.pi * (s ** 2)\n    # Calculate the perimeter using the formula for a regular polygon\n    perimeter = 5 * a\n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a regular pentagon as input\n    and returns the perimeter of the pentagon.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the perimeter of the pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon\n    area = (5/2) * a**2\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a + 5 * math.sqrt(3) * a\n    # return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a) + (5 * a)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while start!= -1:\n        start = s.find('std', start)\n        if start!= -1:\n            start += 2\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    return s.count(\"std\")"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = 0\n    while True:\n        index = s.find('std', start_index)\n        if index == -1:\n            break\n        else:\n            count += 1\n            start_index = index + 4\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    elif all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return False\n\n    first_type = type(test_tuple[0])\n\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # Loop through the tuple and compare data type with the first element\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    # If all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Find the first element in the tuple\n    first_elem = type(test_tuple[0])\n    # Loop through the rest of the elements in the tuple\n    for elem in test_tuple[1:]:\n        # If the current element is not of the same type as the first element, return False\n        if type(elem)!= first_elem:\n            return False\n    # If we make it through the loop without returning False, all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize an empty set to store data types of all elements in the tuple\n    data_types = set()\n    # iterate over all elements in the tuple\n    for element in test_tuple:\n        # check if the data type of the current element is already present in the set\n        if type(element) not in data_types:\n            # if not, add it to the set\n            data_types.add(type(element))\n        else:\n            # if it is present, check if it is the same as the first element in the set\n            if type(element)!= data_types.pop():\n                # if not, return False\n                return False\n    # if all elements in the tuple have same data types, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as an argument and checks if all the elements in the tuple have the same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return \"Empty tuple\"\n    first_element = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if not isinstance(element, first_element):\n            return \"Tuple elements have different data types\"\n    return \"All tuple elements have same data type\""
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count and candidate variables\n    count = 0\n    candidate = None\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to the given element, increment the count\n        if arr[i] == x:\n            count += 1\n\n        # If the count is greater than n/2, the element is the majority\n        if count > n//2:\n            return True\n\n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Find the left and right pointers for the given element\n    left, right = 0, n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the element is present at the middle of the array\n        if arr[mid] == x:\n            # Check if the element is the majority element\n            count = 1\n            while left <= right and arr[left] == x:\n                left += 1\n                count += 1\n            while left <= right and arr[right] == x:\n                right -= 1\n                count += 1\n            if count > n // 2:\n                return True\n            else:\n                return False\n\n        # If the element is smaller than mid, ignore left half\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the element is greater than mid, ignore right half\n        else:\n            right = mid - 1\n\n    # If we reach here, the element was not present in the array\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(int(ord(c))) if (ord(c) % 2!= 0) else c for c in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    # Convert string to list of characters\n    chars = list(str)\n\n    # Loop through each character in the list\n    for i in range(len(chars)):\n        # If the index is odd, remove it from the list\n        if i % 2 == 1:\n            del chars[i]\n\n    # Convert list of characters back to string\n    result = ''.join(chars)\n\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = [i for i in range(len(str)) if i % 2 == 1]\n    return ''.join([str[i] for i in range(len(str)) if i not in odd_index_values])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with odd index values removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # loop through each character in the input string\n    for char in str:\n        # if the index of the character is odd, add it to the even string\n        if ord(char) % 2 == 1:\n            even_str += char\n    # return the even string\n    return even_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Remove odd index characters\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    while l <= r:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n        l = l + 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): Number of bits in the integer n.\n    l (int): Lower bound of the range.\n    r (int): Upper bound of the range.\n\n    Returns:\n    bool: True if all the bits are unset in the given range, otherwise False.\n    \"\"\"\n\n    # Iterate through the range and count the number of set bits\n    count = 0\n    for i in range(l, r+1):\n        if bin(i).count('1') == n:\n            count += 1\n\n    # Check if all the bits are unset\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_unset = True\n    for i in range(l, r + 1):\n        if bin(n).count('1') < l:\n            all_unset = False\n            break\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the unset bits in the given range\n    unset_bits = 0\n\n    # Iterate through each bit in the given range\n    for i in range(l, r + 1):\n        # If the current bit is unset, increment the unset_bits variable\n        if n & (1 << i) == 0:\n            unset_bits += 1\n\n    # If all the bits are unset in the given range, return True\n    if unset_bits == 0:\n        return True\n\n    # If at least one bit is still set, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if l == r:\n        return all_Bits_Set_In_The_Given_Range(n-1, l, l)\n    if all_Bits_Set_In_The_Given_Range(n-1, l, r):\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n-1, l, l) or all_Bits_Set_In_The_Given_Range(n-1, r+1, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert binary values to integer\n    n = int(n, 2)\n    l = int(l, 2)\n    r = int(r, 2)\n\n    # Initialize a variable to store the count of unset bits\n    count = 0\n\n    # Iterate over all bits of the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit of the binary representation of n is set or not\n        if (n & (1 << i)) == 0:\n            # If the bit is unset, increment the count of unset bits\n            count += 1\n\n        # Check if the i-th bit of the binary representation of l is set or not\n        if (l & (1 << i)) == 0:\n            # If the bit is unset, increment the count of unset bits\n            count += 1\n\n        # Check if the i-th bit of the binary representation of r is set or not\n        if (r & (1 << i)) == 0:\n            # If the bit is unset, increment the count of unset bits\n            count += 1\n\n    # Check if all the bits are unset in the given range or not\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Calculate the number of bits in n\n    num_bits = bin(n).count('1')\n\n    # Calculate the number of bits in the range [l, r]\n    range_bits = bin((r - l + 1) << l).count('1')\n\n    # Check if the number of set bits in the range is equal to the number of bits in n\n    if range_bits == num_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integer parameters n, l and r and returns True if all the bits are set in the given range or False otherwise.\n    The given range is inclusive of both the left and right ends.\n    \"\"\"\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r+1):\n\n        # If any bit is unset, return False\n        if not n & (1 << i):\n            return False\n\n    # If all the bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Calculate the range of bits\n    num_bits = r - l + 1\n\n    # Loop through all the bits in the range\n    for i in range(num_bits):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            return False\n\n    # If all the bits are set, then return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    while l <= r:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n        l = l + 1\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    all_elements = negatives + positives\n    arr[:n] = all_elements"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize three variables to keep track of the count of negative, positive, and zero values in the array\n    neg_count = 0\n    pos_count = 0\n    zero_count = 0\n\n    # Iterate through the array and count the number of negative, positive, and zero values\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        elif num > 0:\n            pos_count += 1\n        else:\n            zero_count += 1\n\n    # Check if there are enough negative and positive values to re-arrange the array\n    if neg_count < n or pos_count < n:\n        return \"Not enough negative and positive values to re-arrange the array.\"\n\n    # Initialize three lists to keep track of the negative, positive, and zero values of the array, respectively\n    neg_list = []\n    pos_list = []\n    zero_list = []\n\n    # Iterate through the array and add negative values to the negative list, positive values to the positive list, and zero values to the zero list\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        elif num > 0:\n            pos_list.append(num)\n        else:\n            zero_list.append(num)\n\n    # Shuffle the negative list randomly\n    for i in range(len(neg_list)):\n        j = random.randint(0, len(neg_list) - 1)\n        neg_list[i], neg_list[j] = neg_list[j], neg_list[i]\n\n    # Shuffle the positive list randomly\n    for i in range(len(pos_list)):\n        j = random.randint(0, len(pos_list) - 1)\n        pos_list[i], pos_list[j] = pos_list[j], pos_list[i]\n\n    # Shuffle the zero list randomly\n    for i in range(len(zero_list)):\n        j = random.randint(0, len(zero_list) - 1)\n        zero_list[i], zero_list[j] = zero_list[j], zero_list[i]\n\n    # Combine the lists of negative, positive, and zero values and return the result\n    return neg_list + pos_list + zero_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers - one for positive elements and one for negative elements\n    i, j = 0, n - 1\n    \n    # Iterate through the array\n    while i < j:\n        # If the current element is positive, increment the positive pointer\n        if arr[i] >= 0:\n            i += 1\n        # If the current element is negative, decrement the negative pointer\n        else:\n            j -= 1\n        \n        # Swap the elements at the positive and negative pointers\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # create a list to store positive and negative numbers\n    positive = []\n    negative = []\n\n    # loop through the array and add positive and negative numbers to their respective lists\n    for i in range(n):\n        if arr[i] >= 0:\n            positive.append(arr[i])\n        else:\n            negative.append(arr[i])\n\n    # sort the negative numbers in reverse order and add them to the end of the positive list\n    negative.sort(reverse=True)\n    positive.extend(negative)\n\n    # re-arrange the positive numbers so that they appear before negative ones\n    for i in range(len(positive)):\n        if positive[i] < 0:\n            break\n        for j in range(i+1, len(positive)):\n            if positive[j] >= 0:\n                positive[i], positive[j] = positive[j], positive[i]\n                break\n\n    # return the re-arranged array\n    return positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    neg.sort()\n    pos.sort()\n    for i in range(n):\n        arr[i] = neg[i] if neg[i] < 0 else pos[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    for i in range(n):\n        arr[i] = negative[i]\n    for i in range(n, len(arr)):\n        arr[i] = positive[i - n]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Helper function to check if a number is negative\n    def is_negative(num):\n        return num < 0\n\n    # Initialize two pointers at the beginning and end of the array\n    left = 0\n    right = n - 1\n\n    # Loop through the array while there are still elements left to re-arrange\n    while left < right:\n        # Check if the left element is negative\n        if is_negative(arr[left]):\n            # If it is, increment the left pointer\n            left += 1\n        # Check if the right element is negative\n        elif is_negative(arr[right]):\n            # If it is, decrement the right pointer\n            right -= 1\n        # If the left and right elements are both positive or both negative, swap them\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Use two pointers to swap elements until we reach the end of the first half of the array\n    pos_ptr = 0\n    neg_ptr = n - 1\n    while pos_ptr < n:\n        if arr[pos_ptr] >= 0:\n            # If the element is positive, swap it with the element at the negative pointer and increment the positive pointer\n            arr[pos_ptr], arr[neg_ptr] = arr[neg_ptr], arr[pos_ptr]\n            pos_ptr += 1\n        else:\n            # If the element is negative, increment the negative pointer\n            neg_ptr -= 1\n\n    # Use another pointer to swap elements until we reach the end of the second half of the array\n    while pos_ptr < neg_ptr:\n        if arr[pos_ptr] < 0:\n            # If the element is negative, swap it with the element at the positive pointer and decrement the negative pointer\n            arr[pos_ptr], arr[neg_ptr] = arr[neg_ptr], arr[pos_ptr]\n            pos_ptr += 1\n        else:\n            # If the element is positive, decrement the positive pointer\n            pos_ptr -= 1\n\n    # Finally, reverse the array to put all positive elements first and all negative elements last\n    arr.reverse()"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store positive and negative elements\n    pos = []\n    neg = []\n\n    # Iterate through the array and add elements to the appropriate lists\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n\n    # Sort the positive and negative lists\n    pos.sort()\n    neg.sort()\n\n    # Concatenate the two lists and return the result\n    return pos + neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_indices = []\n    positive_indices = []\n\n    # find indices of negative and positive elements in the array\n    for i in range(n):\n        if arr[i] < 0:\n            negative_indices.append(i)\n        else:\n            positive_indices.append(i)\n\n    # create a new array with the negative elements before the positive ones\n    result = []\n    for i in range(n):\n        if i in negative_indices:\n            result.append(arr[i])\n        elif i in positive_indices:\n            result.append(arr[i])\n        else:\n            result.append(None)\n\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"{}\".format(char))\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Convert string to list of characters\n    char_list = list(char)\n    # Initialize empty list to store new string\n    new_str = []\n    # Loop through each character in the string\n    for char in str1:\n        # If character is a blank space, replace it with character from char_list\n        if char == \" \":\n            new_str.append(char_list[0])\n        # If character is not a blank space, append it to the new_str list\n        else:\n            new_str.append(char)\n    # Convert new_str list to a string and return it\n    return ''.join(new_str)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Using a max heap to get the n largest items from the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Converting the max heap to a list and returning it\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a max heap\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        # if the heap has more than n elements, remove the smallest one\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # convert the max heap back to a list\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap and add the first n elements of the list to it\n    min_heap = [heapq.heappushpop(min_heap, -x) for x in list1[:n]]\n    # Add the remaining elements of the list to the min heap\n    for x in list1[n:]:\n        heapq.heappush(min_heap, -x)\n    # Return the elements of the min heap in descending order\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sorting the list in descending order\n    list1.sort(reverse=True)\n    # returning the first n elements of the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the base area using formula A = pi * r^2\n    A = 2 * pi * r * r\n\n    # Calculate the lateral surface area using formula A = pi * r^2 * h\n    As = A * h\n\n    # Return the lateral surface area\n    return As"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2*3.14*r*h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Parameters\n    ----------\n    r : float\n        Radius of the cylinder.\n    h : float\n        Height of the cylinder.\n\n    Returns\n    -------\n    float\n        Lateral surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2*3.14159*r**2 # pi * r^2\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    LSA = 2*math.pi*r*h\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * r + 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: the lateral surface area of the cylinder\n    \"\"\"\n    \n    area = 2 * r * h\n    \n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3  # calculating volume by taking the cube of side length\n    return volume  # returning the volume of the cube"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the set bits\n    even_bits = []\n    \n    # iterate through each bit of the number\n    for bit in bin(n)[2:]: \n        # check if the bit is even\n        if int(bit) == 0: \n            # if it's odd, add it to the even_bits list\n            even_bits.append(bit)\n        # if the bit is even, set it to 1 in the string representation of the number\n        else: \n            n = int(n, 2) ^ int(bit) << (bit == '1')\n            even_bits.append(bit)\n    \n    # convert the number back to an integer and return the even_bits list\n    return int(n, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0:\n        even_bit = n & 1\n        n = n >> 1\n        if even_bit == 0:\n            n = n | (1 << i) # set even bit i to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the modified number\n    modified_number = 0\n    \n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            modified_number |= 1 << int(bit)\n    \n    # Return the modified number\n    return modified_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer as input and sets all even bits of the integer to 1.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n & 1 == 0:\n        return n\n    else:\n        return n | (1 << (n & -2))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through each bit of the number and set the corresponding bit in the result to 1 if it is even\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            result |= 1 << i\n            \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result as 0\n    result = 0\n\n    # Iterate through the bits of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1, otherwise leave it as it is\n        if int(bit) % 2 == 0:\n            result = result | int(bit)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result \n    result = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for i in range(32): \n        # If the current bit is even, set its corresponding bit in the result to 1 \n        if n & (1 << i)!= 0: \n            result |= (1 << i)\n            \n    # Return the result \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1,n+1):\n        if i%2 == 0:\n            n |= i\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # iterate over the bits of the input number\n    for bit in bin(n)[2:]:\n        # if the bit is even, set it to 1, otherwise leave it as 0\n        if int(bit) % 2 == 0:\n            result.append(1)\n        else:\n            result.append(0)\n    \n    # convert the list of bits back to an integer and return it\n    return int(''.join(str(x) for x in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n.bit_length()): \n        if n & (1 << i): \n            n |= 1 << i \n            \n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through the test list and count the occurrences of each tuple\n    for tup in test_list:\n        if tup not in counts:\n            counts[tup] = 1\n        else:\n            counts[tup] += 1\n            \n    # Return the final dictionary\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n\n    # Create a dictionary to store the counts of each unique tuple\n    counts = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup not in counts:\n            # If not, add it with a count of 1\n            counts[tup] = 1\n        else:\n            # If it is, increment its count by 1\n            counts[tup] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a dictionary to store the counts\n    count_dict = {}\n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is not in the dictionary yet, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # otherwise, increment the count by 1\n        else:\n            count_dict[tup] += 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Use Counter function from the Counter module to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # Iterate over the keys in the counter object and store the count of each key in the count_dict dictionary\n    for key, value in counter.items():\n        count_dict[key] = value\n    # Return the count_dict dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples into a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Use the Counter class from the collections module to count the occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count occurrences of tuples in the list\n    count_obj = Counter(test_list)\n\n    # convert the Counter object to a dictionary\n    count_dict = dict(count_obj)\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Creating a dictionary to store the number of occurrences of each tuple in the list\n    counts = Counter(test_list)\n\n    # Returning the dictionary with the counts of each tuple\n    return counts"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = set()\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substrings.add(str[i:j+1])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    This function takes a string as input and returns the count of all non-empty substrings in the string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize a variable to keep track of the number of substrings\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Loop through each character from the current position to the end of the string\n        for j in range(i, len(string)):\n            # Check if the substring is non-empty\n            if string[i:j+1]!= '':\n                # Increment the count\n                count += 1\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str) + 1):\n        for j in range(i, len(str) + 1):\n            if j - i >= 2:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize variables to keep track of the count of substrings and their lengths\n    count = 0\n    substring_len = 0\n\n    # iterate over each character in the string\n    for i in range(len(str)):\n        # check if the character is a letter or digit\n        if str[i].isalpha() or str[i].isdigit():\n            # if the character is a letter or digit, update the substring length and check if it's a non-empty substring\n            substring_len += 1\n            if i == len(str)-1 or not str[i+1].isalpha() and not str[i+1].isdigit():\n                # if the substring is non-empty, increment the count\n                count += 1\n        else:\n            # if the character is not a letter or digit, reset the substring length\n            substring_len = 0\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1].strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j-i > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Create an empty list to store all possible sequences\n    sequences = []\n    # Initialize a variable to store the current sequence\n    sequence = []\n    # Loop through all numbers from 2 to m\n    for i in range(2, m + 1):\n        # If the current number is greater than or equal to twice the previous number and less than or equal to n, add it to the current sequence\n        if i >= 2 * sequence[-1] <= n:\n            sequence.append(i)\n        # If the current sequence is of length n, add it to the list of possible sequences\n        if len(sequence) == n:\n            sequences.append(sequence[:])\n            # Remove the first element of the current sequence to start a new one\n            sequence = sequence[1:]\n    # Return the number of possible sequences\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev = float('-inf')\n    for i in range(1, m+1):\n        if i >= 2*prev and i <= m:\n            count += 1\n        prev = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize a variable to store the number of possible sequences\n    num_of_sequences = 0\n\n    # Loop through each element from 1 to m\n    for i in range(m+1):\n        # Check if the element is greater than or equal to twice the previous element\n        if i >= 2*i and i <= m:\n            # Increment the number of possible sequences by 1\n            num_of_sequences += 1\n\n        # Check if the sum of the last n elements is equal to m\n        if i == m and sum(i for i in range(m-n+1, m+1)) == m:\n            # Increment the number of possible sequences by 1\n            num_of_sequences += 1\n\n    # Return the number of possible sequences\n    return num_of_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    elif n == 2:\n        return m * (m - 1) // 2\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the numbers of sequences\n    count_list = []\n    # Start with the first sequence of length n\n    count_list.append(1)\n    # Initialize the previous two elements of the sequence\n    prev_two = (0, 0)\n    # Loop through the remaining possible sequences\n    for i in range(1, n + 1):\n        # Calculate the current number of sequences\n        curr_count = 0\n        # Loop through the possible combinations of the previous two elements\n        for j in range(len(count_list)):\n            # Calculate the current element of the sequence\n            curr_element = i + j\n            # Check if the current element satisfies the conditions\n            if curr_element >= 2 * prev_two[0] and curr_element <= m and curr_element!= prev_two[1]:\n                # If yes, increment the count of sequences\n                curr_count += count_list[j]\n        # Add the count of sequences to the count list\n        count_list.append(curr_count)\n        # Update the previous two elements of the sequence\n        prev_two = (i, curr_element)\n    # Return the total count of sequences\n    return sum(count_list)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    sequence = [2] * n\n    for i in range(1, m):\n        if i >= 2 * sequence[-1]:\n            sequence.append(i)\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Helper function to check if a number is a power of 2\n    def is_power_of_two(n):\n        return n!= 0 and (n & (n - 1)) == 0\n\n    # Helper function to count the number of subsets of a set\n    def count_subsets(subset):\n        n = len(subset)\n        return 2 ** n\n\n    # Helper function to compute the number of subsets of a set that are within a specific range of values\n    def count_subsets_within_range(subset, min_value, max_value):\n        count = 0\n        for value in subset:\n            if value >= min_value and value <= max_value:\n                count += 1\n        return count\n\n    # Helper function to compute the number of subsets of a set that are divisible by a specific value\n    def count_subsets_divisible_by(subset, divisor):\n        count = 0\n        for value in subset:\n            if value % divisor == 0:\n                count += 1\n        return count\n\n    # Helper function to compute the sum of a set of values\n    def sum_set(subset):\n        total = 0\n        for value in subset:\n            total += value\n        return total\n\n    # Helper function to compute the difference between two sets\n    def set_difference(subset_a, subset_b):\n        return list(set(subset_a) - set(subset_b))\n\n    # Helper function to compute the intersection between two sets\n    def set_intersection(subset_a, subset_b):\n        return list(set(subset_a) & set(subset_b))\n\n    # Helper function to compute the power set of a set\n    def power_set(subset):\n        power_set = [[]]\n        for value in subset:\n            power_set = [subset_item + [value] for subset_item in power_set for value in power_set]\n        return power_set\n\n    # Helper function to compute the number of ways to choose a subset of a set\n    def count_ways_to_choose(subset, k):\n        return count_subsets(subset) // count_subsets_within_range(subset, 1, k)\n\n    # Helper function to compute the number of ways to choose a subset of a set with a specific value\n    def count_ways_to_choose_divisible_by(subset, k, divisor):\n        return count_subsets_divisible_by(subset, divisor) // count_subsets_within_range(subset, 1, k)\n\n    # Helper function to compute the number of ways to choose a subset of a set that has a specific range of values\n    def count_ways_to_choose_within_range(subset, k, min_value, max_value):\n        return count_subsets_within_range(subset, min_value, max_value) // count_subsets_within_range(subset, 1, k)\n\n    # Helper function to compute the number of ways to choose a subset of a set that is within a specific range of values and divisible by a specific value\n    def count_ways_to_choose_divisible_by_within_range(subset, k, min_value, max_value, divisor):\n        return count_subsets_divisible_by_within_range(subset, min_value, max_value, divisor) // count_subsets_within_range(subset, 1, k)\n\n    # Helper function to compute the number of ways to choose a subset of a set that is divisible by a specific value and has a specific range of values\n    def count_ways_to_choose_divisible_by_within_range_with_value(subset, k, min_value, max_value, divisor, value):\n        count = 0\n        for subset_item in subset:\n            if subset_item % divisor == 0 and subset_item >= min_value and subset_item <= max_value and subset_item!= value:\n                count += 1\n        return count\n\n    # Helper function to compute the number of ways to choose a subset of a set that is within a specific range of values and has a specific value\n    def count_ways_to_choose_within_range_with_value(subset, k, min_value, max_value,"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        return all(a > 2 * b and b < m for a, b in zip(sequence, sequence[1:]))\n\n    def recursive_count(m, n, sequence, count):\n        if n == 0:\n            return count\n        else:\n            for a in range(2, m):\n                if is_valid_sequence(sequence + [a]):\n                    recursive_count(m, n - 1, sequence + [a], count)\n\n    return recursive_count(m, n, [], 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, n + 1):\n        if i >= 2 * m and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize the number of sequences to 0\n    count = 0\n\n    # Initialize the previous element to None\n    prev_element = None\n\n    # Loop through the range of possible elements\n    for element in range(2, m + 1):\n\n        # Check if the element is greater than or equal to twice the previous element\n        if element >= 2 * prev_element and element <= m:\n\n            # Check if the length of the sequence is equal to n\n            if len(str(element)) == n:\n                # Increment the count of sequences\n                count += 1\n\n        # Update the previous element\n        prev_element = element\n\n    # Return the count of sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1 += list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    # Loop through the first list and replace the last element with the elements of the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = list2[i]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Find the index of the last element in the first list\n    last_index = len(list1) - 1\n    \n    # Replace the last element in the first list with the elements of the second list\n    list1[last_index:last_index+1] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Remove the last element of the first list\n    list1.pop()\n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Find the index of the last element in list1\n    last_index = len(list1) - 1\n    \n    # Loop through the second list and append its elements to list1\n    for element in list2:\n        list1.append(element)\n    \n    # Remove the last element from list1\n    del list1[last_index]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[-1:]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(n):\n        return n == int(n**0.5 + 0.5)**2\n\n    def is_greater_than_sqrt(n):\n        return math.sqrt(n) > math.sqrt(N)\n\n    def is_greater_than_N(n):\n        return n > N\n\n    def is_greater_than_next_perfect_square(n):\n        if is_perfect_square(n):\n            return is_greater_than_sqrt(n)\n        else:\n            return is_greater_than_sqrt(n + 1)\n\n    next_square = None\n    while next_square is None:\n        current_square = 1\n        while True:\n            if is_perfect_square(current_square) and is_greater_than_N(current_square):\n                if is_greater_than_next_perfect_square(current_square):\n                    next_square = current_square\n                break\n            current_square += 1\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        return N + 1\n    else:\n        return next_Perfect_Square(int(sqrt_N) + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n\n    # Check if the square root is an integer\n    if sqrt_N**2!= N:\n        # If it's not, increment it until it is\n        while sqrt_N**2!= N:\n            sqrt_N += 1\n\n    # Calculate the next perfect square\n    next_N = sqrt_N**2\n\n    # If the next perfect square is greater than the given number, return it\n    if next_N > N:\n        return next_N\n\n    # Otherwise, return the next perfect square less than the given number\n    else:\n        return next_N - 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n\n    # Get the square root of the given number\n    sqrt_n = math.sqrt(N)\n\n    # If the square root is an integer, return the next integer\n    if int(sqrt_n) ** 2 == N:\n        return int(sqrt_n) + 1\n\n    # If the square root is a floating point number, round it up to the nearest integer\n    else:\n        return int(math.ceil(sqrt_n)) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N % 4 == 0:\n        return N + 4\n    else:\n        return next_Perfect_Square(int((math.sqrt(8*N+1)+1)/2))\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        # check if the square is less than N\n        square = int(math.sqrt(N))\n        if square * square > N:\n            # return the square\n            return square * square\n        # if the square is greater than N, increase the number by 1\n        N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    sqrtN = int(sqrtN) + 1\n    nextN = sqrtN * sqrtN\n    if nextN > N:\n        nextN = nextN / 2\n    else:\n        nextN = nextN + sqrtN\n    return nextN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square number greater than N\n    \"\"\"\n    # Find the closest perfect square number to N\n    sqrt_N = int(math.sqrt(N))\n    closest_square = int(N / sqrt_N) * sqrt_N\n\n    # Increase the perfect square until it is greater than N\n    while closest_square > N:\n        sqrt_closest_square = int(math.sqrt(closest_square))\n        closest_square = int((closest_square + sqrt_closest_square) / 2)\n\n    return closest_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Use binary search to find the next perfect square greater than N\n    left = 0\n    right = N\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is a perfect square\n        if int(math.sqrt(mid))**2 == mid:\n            left = mid + 1 # mid is a perfect square, move right to find next perfect square\n        else:\n            right = mid - 1 # mid is not a perfect square, move left to find next perfect square\n    \n    return left"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    while True:\n        sqrt_N += 1\n        if math.isqrt(sqrt_N * sqrt_N) == sqrt_N:\n            return int(sqrt_N * sqrt_N)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables\n    n = len(arr)\n    bitonic_sum = float('-inf')\n\n    # loop through the array\n    for i in range(n):\n        # check if the subsequence ending at i is increasing and decreasing\n        if (i > 0 and arr[i] > arr[i-1]) or (i < n-1 and arr[i] < arr[i+1]):\n            # if it is, update the bitonic sum if necessary\n            bitonic_sum = max(bitonic_sum, arr[i])\n\n    return bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Finding the indices of the increasing subsequence\n    increasing_indices = []\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            increasing_indices.append(i)\n\n    # Finding the indices of the decreasing subsequence\n    decreasing_indices = []\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            decreasing_indices.append(i)\n\n    # Finding the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(len(increasing_indices)):\n        max_sum = max(max_sum, arr[increasing_indices[i]] - arr[decreasing_indices[i] + 1])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    max_left = arr[0]\n    max_right = arr[n-1]\n\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            max_left = max(max_left, arr[i])\n        else:\n            max_right = max(max_right, arr[i])\n\n    return max(max_left, max_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n\n    # Initialize the maximum increasing subsequence\n    max_increasing = float('-inf')\n\n    # Initialize the maximum decreasing subsequence\n    max_decreasing = float('-inf')\n\n    # Initialize the maximum subsequence length\n    max_subseq_length = 1\n\n    # Loop through the array\n    for i in range(n):\n        # If the element is increasing\n        if arr[i] > arr[i - 1]:\n            # Update the maximum increasing subsequence\n            max_increasing = max(max_increasing + arr[i], arr[i])\n            # Update the maximum subsequence length\n            max_subseq_length = max(max_subseq_length, i - max_increasing_subsequence)\n        # If the element is decreasing\n        else:\n            # Update the maximum decreasing subsequence\n            max_decreasing = max(max_decreasing + arr[i], arr[i])\n            # Update the maximum subsequence length\n            max_subseq_length = max(max_subseq_length, i - max_decreasing_subsequence)\n\n    # Update the maximum sum\n    max_sum = max(max_sum, max_increasing + max_decreasing)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:  # base case\n        return 0\n    \n    n = len(arr)\n    max_sum = float('-inf')\n    \n    # check the first and last elements of the array\n    if arr[0] < arr[-1]:\n        max_sum = max(max_sum, arr[0])\n    else:\n        max_sum = max(max_sum, arr[-1])\n        \n    # check for increasing sequence\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1] and arr[i] < arr[i+1]:\n            max_sum = max(max_sum, arr[i])\n            \n    # check for decreasing sequence\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            max_sum = max(max_sum, arr[i])\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    left = 0\n    right = n - 1\n    max_left_sum = max_right_sum = arr[left]\n\n    while right > left:\n        if arr[right] >= arr[left]:\n            max_left_sum = max(max_left_sum, arr[left] + arr[right])\n            right -= 1\n        else:\n            max_right_sum = max(max_right_sum, arr[left] + arr[right])\n            left += 1\n\n    return max(max_left_sum, max_right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    left_sum = arr[0]\n    right_sum = max(arr[0], arr[1])\n    max_sum = max(left_sum, right_sum)\n    \n    for i in range(1, n-1):\n        current_sum = max(left_sum + arr[i], right_sum + arr[i])\n        left_sum = right_sum\n        right_sum = current_sum\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n\n    left_max = [float('-inf')] * n\n    right_max = [float('-inf')] * n\n\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i-1])\n        right_max[i] = max(right_max[i-1], arr[n-1-i])\n\n    for i in range(n-1, 0, -1):\n        left_sum = left_max[i] + arr[i]\n        right_sum = right_max[i] + arr[n-1-i]\n\n        max_sum = max(max_sum, left_sum, right_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return 0\n\n    # Check if the array is bitonic\n    is_bitonic = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            is_bitonic = False\n            break\n        elif arr[i] > arr[i-1]:\n            is_bitonic = False\n            break\n\n    if is_bitonic:\n        max_sum_left = 0\n        max_sum_right = 0\n\n        # Find the maximum sum of the left and right half of the array\n        for i in range(len(arr)//2):\n            if arr[i] > max_sum_left:\n                max_sum_left = arr[i]\n            if arr[len(arr)//2+i] > max_sum_right:\n                max_sum_right = arr[len(arr)//2+i]\n\n        # Return the maximum sum of the array\n        return max(max_sum_left, max_sum_right)\n    else:\n        # Find the maximum sum of the array\n        max_sum = max(arr)\n\n        # Find the maximum sum of a bitonic subsequence of the array\n        max_bitonic_sum = 0\n        for i in range(len(arr)):\n            left_sum = 0\n            right_sum = 0\n            for j in range(i):\n                left_sum += arr[j]\n            for j in range(i+1, len(arr)):\n                right_sum += arr[j]\n            max_bitonic_sum = max(max_bitonic_sum, left_sum + right_sum)\n\n        # Return the maximum of the two sums\n        return max(max_sum, max_bitonic_sum)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    x = number / 2\n    i = 1\n\n    # Iterate until x is within 0.0001 of the target value\n    while abs(x**2 - number) > 0.0001:\n        # Calculate the new x value using the formula x = x - (x**2 - number) / (2 * x)\n        x = x - (x**2 - number) / (2 * x)\n        i += 1\n\n    # Print the final value of x\n    print(\"The square root of\", number, \"is approximately\", round(x, 4), \"using the Babylonian method.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n\n    # Base case: number is 0 or 1\n    if number == 0 or number == 1:\n        return number\n\n    # Initialize variables\n    guess = number / 2\n    prev_guess = 0\n    precision = 0.000000001\n\n    # Keep iterating until the difference between the guess and previous guess is less than precision\n    while abs(guess - prev_guess) >= precision:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n\n    :param number: the number whose square root is to be computed.\n    :return: the square root of the given number.\n    \"\"\"\n    x0 = number / 2.0  # initial guess\n    x1 = x0 ** 2  # first estimate\n    epsilon = 1e-6  # tolerance for convergence\n    count = 0  # iteration counter\n    while abs(x1 - x0) > epsilon:\n        x2 = (x1 + x0) / 2.0  # new estimate\n        x0 = x1  # update old estimate\n        x1 = x2  # update new estimate\n        count += 1  # increment iteration counter\n    return x1  # return the final estimate\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize the guess and the lower bound of the range\n    guess = 1\n    lower_bound = 0\n    upper_bound = number\n    \n    # initialize the number of iterations\n    iterations = 0\n    \n    # iterate until the upper bound is reached\n    while lower_bound <= upper_bound:\n        # calculate the average of the lower and upper bounds\n        mid_bound = (lower_bound + upper_bound) / 2\n        \n        # check if the guess is a root\n        if abs(guess * guess - number) < 0.00001:\n            return guess\n        \n        # update the guess and the range\n        guess = mid_bound\n        iterations += 1\n        \n        # update the range\n        if guess * guess < number:\n            lower_bound = guess\n        else:\n            upper_bound = guess\n    \n    # if the guess is not a root, return None\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            guess = (guess + number/guess)/2\n        else:\n            guess = (guess + number/guess)*2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    x_0 = number\n    x_1 = 0.5 * (number + x_0 / x_0)\n    while abs(x_1 - x_0) > 0.0001:\n        x_0 = x_1\n        x_1 = 0.5 * (number + x_0 / x_0)\n    return x_1\n\nThis function takes a number as input and returns the approximate square root using the babylonian method. It starts with the initial estimate of the square root as the input number and then iteratively reduces the estimate to the next best approximation using the above formula. The while loop stops when the difference between the current estimate and the previous estimate is less than a small tolerance value (0.0001 in this case)."
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables for iteration and iteration count\n    k = 0\n    count = 0\n\n    # Keep iterating until the square of the current iteration is greater than the input number\n    while number / (2**k) >= number:\n        count += 1\n        k += 1\n\n    # Return the value of the square root using the babylonian method\n    return (2**k) * (number / (2**k))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number/2\n    while guess**2 > number:\n        guess = (guess + number/guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n    - number: a positive real number\n\n    Returns:\n    - The square root of the given number\n    \"\"\"\n    # initialize variables\n    guess = number / 2\n    x = guess\n    \n    # initialize loop counter\n    i = 0\n    \n    # iterate until the square root is within a tolerance\n    while abs(guess**2 - number) > 0.0001:\n        # compute the next guess\n        next_guess = (guess + number / guess) / 2\n        \n        # update the x value\n        x = next_guess\n        \n        # increment loop counter\n        i += 1\n        \n        # check if the loop has exceeded the maximum number of iterations\n        if i > 1000:\n            raise ValueError(\"Maximum number of iterations exceeded.\")\n        \n        # update the guess\n        guess = next_guess\n    \n    # return the final x value\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    if number < 0:\n        raise ValueError('The input must be a non-negative number.')\n\n    # Get the initial approximation of the square root\n    x = number / 2.0\n\n    # Compute the number of iterations to reach the desired accuracy\n    iters = 0\n    while abs(x * x - number) / number > 0.000001:\n        x = (x + number / x) / 2.0\n        iters += 1\n\n    print('Number of iterations:', iters)\n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    if not str:\n        return 0\n\n    n = len(str)\n    lps_len = 1\n    max_len = 1\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_len += 1\n            max_len = max(max_len, lps_len)\n        else:\n            lps_len = 1\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store LPS lengths \n    # (Note: L[i][j] will store the length of LPS \n    # for substring str[i:j+1]) \n    L = [[0] * (n) for _ in range(n)] \n\n    # Fill L[i][j] in bottom up manner \n    for i in range(n): \n        for j in range(i, n): \n            if i == j: \n                L[i][j] = 1\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i+1][j], L[i][j-1]) \n\n    # Return length of LPS for given string \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    # Create a 2D table to store lengths of subsequences \n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)] \n  \n    # Fill the table \n    for i in range(1, len(str) + 1): \n        for j in range(1, len(str) + 1): \n  \n            # If the characters match, consider the subsequence \n            if str[i - 1] == str[j - 1]: \n                table[i][j] = table[i - 1][j - 1] + 1 \n  \n            # If not, take the maximum of two options \n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1]) \n  \n    # Return the length of the longest palindromic subsequence \n    return table[len(str)][len(str)] \n  "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize a 2D array to store the length of longest palindrome subsequences ending at each index.\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and column to 1, since empty string and single character string are palindromes.\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill the rest of the matrix using dynamic programming.\n    for i in range(1, n):\n        for j in range(i):\n            # If the characters at indices i and j are the same, extend the palindrome.\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            # If the characters at indices i and j are not the same, take the maximum of extending the palindrome on the left or the palindrome on the right.\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # Return the length of the longest palindrome subsequence.\n    return dp[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Finding the length of the longest palindromic substring\n    n = len(str)\n    max_len = 1\n\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                temp = j - i + 1\n                if temp > max_len:\n                    max_len = temp\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Helper function to check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef longest_palindrome_subseq(s):\n    \"\"\"\n    Main function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return n\n\n    # Create a 2D table to store the length of longest palindromic subsequence of a substring\n    dp = [[0] * n for _ in range(n)]\n\n    # Check for palindrome substrings of length 1\n    for i in range(n):\n        dp[i][i] = 1\n        if is_palindrome(s[i]):\n            dp[i][i] += 1\n\n    # Check for palindrome substrings of length 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if is_palindrome(s[i:j+1]):\n                dp[i][j] = length\n\n    # Find the length of the longest palindromic subsequence\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            max_len = max(max_len, dp[i][j])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a list to store the length of the longest palindromic subsequence ending at each index\n    dp = [0] * len(str)\n    # Initialize the first element of the list to 0\n    dp[0] = 0\n    # Iterate through the string from the second character to the last character\n    for i in range(1, len(str)):\n        # Check if the previous character is a palindrome or not\n        if str[i] == str[i-1]:\n            # If yes, then set the value of the current index to the previous value plus 1\n            dp[i] = dp[i-1] + 1\n        # Check if the previous character is not a palindrome or not\n        else:\n            # If no, then set the value of the current index to the maximum of the previous value and the previous index\n            dp[i] = max(dp[i-1], dp[i])\n    # Return the maximum value in the dp list which corresponds to the length of the longest palindromic subsequence\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    # create a table to store the lengths of LPS for all substrings\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    # length of LPS for empty string is 0\n    for i in range(1, n+1):\n        dp[i][0] = 0\n\n    # length of LPS for single character string is 1\n    for i in range(1, n+1):\n        dp[i][i] = 1\n\n    # fill the table using dynamic programming\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if s[j-1] == s[i-1]:\n                dp[i][j] = dp[j-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[j][i-1])\n\n    return dp[n][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    # Create a 2D table to store the length of LPS for every substring\n    table = [[0] * len(s) for _ in range(len(s))]\n\n    # Initialize the first row and column of the table\n    for i in range(len(s)):\n        table[i][i] = 1\n\n    # Compute LPS lengths for all possible substrings in the string\n    for length in range(3, len(s) + 1):\n        for start in range(len(s) - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    return table[0][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D array to store LPS values\n    # Length of the longest palindrome ending at i and j\n    lps_arr = [[0] * n for _ in range(n)]\n\n    # Initialize LPS values of all substrings as 1\n    for i in range(n):\n        lps_arr[i][i] = 1\n\n    # Iterate through the string and calculate LPS values for all pairs of substrings\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                lps_arr[i][j] = 2 + lps_arr[i+1][j-1]\n            else:\n                lps_arr[i][j] = max(lps_arr[i][j-1], lps_arr[i+1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_arr[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/(2*n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The harmonic sum of\", n-1, \"is\", harmonic_sum(n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (2/n) + (3/n) +... + ((n-2)/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    sum = 1\n    for i in range(1, n):\n        sum += 1 / (i + 1)\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return 1.0/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate harmonic sum of n-1\n    harmonic_sum = (1/n) + (1/(n-1))\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1/n + 1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # find the intersection of the two arrays using set intersection\n    intersection = set(array_nums1) & set(array_nums2)\n    # convert the set to a list and return the intersection\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the intersection\n    intersection_set = set()\n\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # If the element is in the second array, add it to the set\n        if num in array_nums2:\n            intersection_set.add(num)\n\n    # Return the intersection set as a list\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Find the intersection of two arrays using a set\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of the elements in array_nums1\n    set_nums1 = set(array_nums1)\n    # Create a set of the elements in array_nums2\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store unique elements of array_nums1\n    set_nums1 = set(array_nums1)\n\n    # Initialize an empty list to store intersection elements\n    intersection_list = []\n\n    # Iterate through array_nums2 and check if each element is present in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_list.append(num)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    # create a new list to hold the modified elements\n    modified_list = []\n    # iterate over the original list\n    for item in list:\n        # insert the element before each element in the list\n        modified_list.insert(0, element)\n        # append the original element to the end of the modified list\n        modified_list.append(item)\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in lst:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # create a new empty list to store the modified list\n    modified_list = []\n    \n    # iterate over each element in the original list\n    for i in range(len(list)):\n        # insert the element before the current element in the original list\n        modified_list.insert(i, element)\n        \n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n\n    # Create a new list to store the modified elements\n    result = []\n\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Add the element to the result list before the element in the list that is i-1\n        result.append(list[i])\n        result.append(element)\n        result.append(list[i-1])\n\n    # Return the resulting list\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates in the form \"real + imaginary theta degrees\"\n        print(f\"{r:.2f} + {theta:.2f} degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        polar_number = cmath.polar(number)\n        polar_numbers.append(polar_number)\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        # Convert to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        phi = cmath.phase(number)\n\n        # Print the result\n        print(\"({}, {})\".format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    # loop through each number in the list\n    for number in numbers:\n        # check if the number is complex\n        if isinstance(number, complex):\n            # convert the complex number to polar coordinates\n            real, imag = cmath.polar(number)\n            # add the polar coordinates to the dictionary\n            polar_coords[str(number)] = (real, imag)\n        # if the number is not complex, assume it's a real number\n        else:\n            # add the real number to the dictionary\n            polar_coords[str(number)] = (number, 0)\n    # return the dictionary of polar coordinates\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        # Print the polar coordinates\n        print(f\"{num} is approximately equal to r = {r:.2f}, theta = {theta:.2f}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print the result\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through the list of numbers\n    for num in numbers:\n        # extract real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        \n        # calculate the modulus of the complex number\n        modulus = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the argument of the complex number\n        argument = cmath.phase(num)\n        \n        # create a new tuple with the modulus and argument of the complex number\n        new_num = (modulus, argument)\n        \n        # print the new tuple\n        print(new_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # loop through each number in the list\n    for number in numbers:\n        # convert the complex number to polar coordinates using the cmath module\n        r = abs(number)\n        phi = cmath.phase(number)\n\n        # print the result\n        print(\"({}, {})\".format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = number.real\n        imaginary = number.imag\n\n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imaginary**2)\n\n        # calculate the phase of the complex number\n        phase = cmath.phase(number)\n\n        # create a tuple of the polar coordinates\n        polar_coordinates = (magnitude, phase)\n\n        # print the polar coordinates\n        print(polar_coordinates)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        magnitude = abs(num.real) + abs(num.imag)j\n        angle = cmath.phase(num)\n        polar_coords.append((magnitude, angle))\n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the count of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l) + 1):\n        for c in combinations_with_replacement(l, i):\n            result.append((c,))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j-i == n:\n                combs.append((l[i], l[j-1]))\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            result.append(tuple(l[i:j]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations with repetition of the elements of the list\n    comb = list(combinations_with_replacement(l, n))\n\n    # Format the tuples as a list of lists\n    return [[tuple(c)] for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    result = []\n    for c in comb:\n        result.append(tuple(c))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return maximize_elements(test_tup2, test_tup1)\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                result_tup += (test_tup1[i],)\n            else:\n                result_tup += (test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Convert the tuples into lists to make the comparison easier\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Initialize variables to store the maximum values\n    max_val1 = max_val2 = float('-inf')\n\n    # Iterate through the lists and compare each element\n    for i in range(len(list1)):\n        # If the current element in the first tuple is greater, update max_val1\n        if list1[i] > max_val1:\n            max_val1 = list1[i]\n        # If the current element in the second tuple is greater, update max_val2\n        if list2[i] > max_val2:\n            max_val2 = list2[i]\n\n    # Return the tuple with the maximum values\n    if max_val1 > max_val2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    max_tup = (max(test_tup1), max(test_tup2))\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    max_tuple = max_num1, max_num2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n\n    # Check if all elements in the two tuples are numbers\n    for num in test_tup1 + test_tup2:\n        if not isinstance(num, (int, float)):\n            print(\"Error: All elements in the tuples must be numbers.\")\n            return None\n\n    # Initialize variables for the two tuples\n    max_tup1 = test_tup1\n    max_tup2 = test_tup2\n\n    # Compare each element of the two tuples and update max_tup1 if the element is greater\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup1 = test_tup1\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup2 = test_tup2\n\n    # Return the maximum tuple\n    return max_tup1 if max_tup1[0] > max_tup2[0] else max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the maximum value among them.\n    \"\"\"\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]\n    else:\n        return test_tup2[0], test_tup2[1], test_tup1[0], test_tup1[1]"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1)\n    if max_num == test_tup1[0]:\n        return test_tup1\n    elif max_num == test_tup2[0]:\n        return test_tup2\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(max(test_tup1), max(test_tup2))\n    if max_val == max(test_tup1):\n        return max(test_tup1)\n    else:\n        return max(test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Define a function to compare two tuples\n    def compare_tuples(tup1, tup2):\n        # Compare the length of the tuples\n        if len(tup1) > len(tup2):\n            return tup1\n        elif len(tup1) < len(tup2):\n            return tup2\n        else:\n            # Compare the elements of the tuples\n            for i in range(len(tup1)):\n                if tup1[i] > tup2[i]:\n                    return tup1\n                elif tup1[i] < tup2[i]:\n                    return tup2\n                else:\n                    continue\n    \n    # Call the compare_tuples function and pass the two tuples as arguments\n    max_tuple = compare_tuples(test_tup1, test_tup2)\n    \n    # Return the max_tuple\n    return max_tuple"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    current_prime = 3\n    \n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if prime*prime > current_prime:\n                break\n            if current_prime % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current_prime)\n        current_prime += 2\n    \n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 2:\n        return -1 # Input value should be greater than or equal to 2\n    elif n == 2:\n        return 2\n    else:\n        i = 2\n        while i**2 <= n:\n            if n % i:\n                i += 1\n            else:\n                return i\n                break\n        i += 1\n        while i**2 <= n:\n            if n % i:\n                i += 1\n            else:\n                return i\n                break\n        return i # Return the last prime number that is less than or equal to n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    for i in range(2, n):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if len(primes) == n:\n                return i\n\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function finds the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize the count of prime numbers\n    count = 0\n    # initialize the current number\n    current = 2\n    # initialize a boolean variable to mark whether the current number is prime or not\n    is_prime = True\n\n    # loop through the range of numbers from 3 to n\n    for i in range(3, n+1):\n        # check whether the current number is prime or not\n        for j in range(2, int(i**0.5)+1):\n            # if the current number is divisible by any number between 2 and the square root of the current number, it is not prime\n            if i % j == 0:\n                is_prime = False\n                break\n        # if the current number is prime and has not been marked as a newman prime, mark it as a newman prime and increment the count\n        if is_prime and current not in [2, 3]:\n            count += 1\n        # update the current number for the next iteration\n        current += 1\n\n    # return the count of newman prime numbers found\n    return count\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 2\n    while True:\n        is_prime = True\n        for i in range(2, prime):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return prime\n        prime += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n\n    while count < n:\n        # Check if the number is prime\n        if is_prime(p):\n            count += 1\n        p += 1\n\n    return p\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a counter variable to 2\n    count = 2\n    # initialize a variable to keep track of the next prime number\n    next_prime = 3\n    \n    # loop until the counter variable is equal to n\n    while count < n: \n        # check if the next prime number is prime\n        is_prime = True\n        for i in range(2, next_prime): \n            if next_prime % i == 0: \n                is_prime = False\n                break\n        \n        # if the next prime number is prime, add it to the list and increment the counter\n        if is_prime: \n            print(next_prime)\n            count += 1\n        \n        # increment the next prime number\n        next_prime += 2\n    \n    # if the counter variable is equal to n, return the last prime number added to the list\n    return next_prime - 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    num = 3\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 2\n    \n    return num - 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 3 * newman_prime(n-1) + 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize a list of prime numbers\n    prime_numbers = []\n\n    # iterate until n prime numbers have been generated\n    while len(prime_numbers) < n:\n        # check if the next prime number is newman-shanks-williams\n        is_prime = True\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(n)\n            n += 1\n\n    # return the nth newman-shanks-williams prime number\n    return prime_numbers[n - 1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup\n    else:\n        raise ValueError('The length of the tuples must be same.')"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # make sure that the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupples must have the same length')\n    # perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            raise ValueError('Division by zero is not allowed')\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # perform the division operation element-wise\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    # return the modified tuples\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Define the length of the second part\n    L2 = len(list1) - L\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise ValueError(\"The length of the list should be a multiple of L\")\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # check if L is a valid input\n    if not isinstance(L, int) or L < 1:\n        raise ValueError(\"L should be a positive integer\")\n    \n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Get the length of the first part of the list\n    length = len(list1) // 2\n    \n    # Split the list into two parts\n    list1_part = list1[:length]\n    list2_part = list1[length:]\n    \n    # Return the resulting lists in a tuple\n    return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Sort the list in ascending order\n    list1.sort()\n    # Calculate the index at which to split the list\n    mid = L // 2\n    # Split the list into two parts\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # find the length of the first part of the list\n    length_of_first_part = len(list1) // 2\n    \n    # split the list into two parts\n    part1 = list1[:length_of_first_part]\n    part2 = list1[length_of_first_part:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L == 0:\n        num_parts = len(list1) // L\n        return (list1[:L * num_parts], list1[L * num_parts:])\n    else:\n        raise ValueError(\"The length of the input list must be a multiple of the length of the output lists.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Given a list and an integer L, splits the list into two parts where the length of the first part is L.\n    Returns a tuple containing the two resulting lists.\n    \"\"\"\n    half = len(lst) // 2\n    return lst[:half], lst[half:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if L <= 0:\n        print(\"L must be a positive integer\")\n        return\n    \n    # Find the length of the first part of the list\n    first_part_len = len(list1) // L\n    \n    # Split the list into two parts and return the resulting lists in a tuple\n    first_part = list1[:first_part_len]\n    second_part = list1[first_part_len:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in days\n    days_in_year = 365\n    days_in_week = 7\n    days_old = h_age * days_in_week\n    # Calculate the dog's age in years\n    years_old = days_old / days_in_year\n    return years_old"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = (7 + 0.6 * h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    age_in_years = h_age * dog_years\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) + 6"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return (2 * h_age) + 10"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    elif step > len(S):\n        return []\n    else:\n        S_split = list_split(S[step:], step)\n        S_split.append(S[:step])\n        return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    for i in range(0, len(S), step):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initializing an empty list to store the resulting lists\n    result = []\n    # splitting the given list into chunks of length n\n    for i in range(0, len(S), step):\n        # appending each chunk to the result list\n        result.append(S[i:i+step])\n    # returning the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Use a for loop to iterate through each element of the input list\n    for i in range(0, len(S), step):\n        # Use a slice to extract a portion of the input list starting at index i and continuing for step elements\n        part = S[i:i+step]\n        # Append the extracted portion to the result list\n        result.append(part)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Create an empty list to store the resulting sublists\n    result = []\n    \n    # Loop over the elements of the input list, splitting each one at every nth step\n    for i in range(0, len(S), step):\n        # Create a new sublist starting from the current index\n        sublist = S[i:i+step]\n        # Add the sublist to the result list\n        result.append(sublist)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    while len(S) >= step:\n        result.append(S[:n])\n        S = S[n:]\n    result.append(S)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_len = len(S)\n    n_elements = int(S_len/step)\n    result = []\n    for i in range(0, n_elements, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Add the current slice to the result list\n        result.append(S[i:i+step])\n        \n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # calculate the lateral surface area of the cube\n    surface_area = 6 * l * l\n\n    # return the lateral surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l\n    return 6*3.14159265358979*(s**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_squares = 0\n    counter = 0\n    \n    # iterate from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if i is odd (using modulo operator)\n        if i % 2!= 0:\n            # add the square of i to the sum_of_squares variable\n            sum_of_squares += i*i\n            # increment the counter variable\n            counter += 1\n    \n    # return the sum_of_squares value\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i*i*2 # i^3*2 = i^2 + i + 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count**2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    num = 1\n\n    while num <= 2*n:\n        if num % 2!= 0:\n            sum_of_squares += num ** 2\n        num += 1\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0  \n    i = 1  \n    while i <= n:  \n        if i % 2!= 0:  \n            sum += i*i  \n            i += 1  \n        else:  \n            i += 1  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Define a function to calculate the nth star number using recursion\n    def nth_star(n): \n        if n == 0: \n            return 1\n        else: \n            return n * nth_star(n-1)\n\n    # Call the nth_star function and return the result\n    return nth_star(n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n\n    result = \"\"\n    num = 1\n\n    while num <= n:\n        if num % 2 == 0:\n            result += \"*\"\n        else:\n            result += \" \"\n        num += 1\n\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    for i in range(1, n+1):\n        star_num *= 2\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the counter variable to 1\n    count = 1\n\n    # loop through the number of times specified by n\n    for i in range(1, n+1):\n        # print the current count value\n        print(count)\n        # increment the counter variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the range of the number of stars\n    range_of_stars = 12\n\n    # Calculate the number of stars for the nth number\n    nth_star = (n * range_of_stars) // 10\n\n    # Return the nth star number\n    return nth_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first number to 1\n    num = 1\n\n    # Loop through the number of stars to find the nth star\n    for i in range(1, n+1):\n        # Multiply the current number by 2 to get the next number\n        num *= 2\n\n        # Print the current number\n        print(num, end=' ')\n\n    # Print a newline character to move to the next line\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1 \n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print('*', end='')\n        print()\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the count of stars to 1\n    count = 1\n\n    # Iterate until we reach the nth star\n    while count <= n:\n        # Print the current count of stars\n        print('*' * count)\n        # Increment the count of stars\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the base and the step for the loop\n    base = '*'\n    step = n-1\n\n    # Initialize an empty string to store the star numbers\n    star_num_str = ''\n\n    # Loop through the n number of times\n    for i in range(1, n+1):\n        # Concatenate the base and step multiple times to get the nth star number\n        star_num_str += base * i\n\n        # Update the base and step for the next iteration\n        base = '*' + base\n        step = step - 1\n\n    return star_num_str"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as an input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII value\n    ascii_value = ord(k)\n    # Return the ASCII value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #convert string to uppercase\n    k = k.upper()\n    #convert the string to a list of characters\n    k_list = list(k)\n    #calculate the ascii value of each character in the list\n    ascii_list = [ord(i) for i in k_list]\n    #find the maximum value in the list\n    max_val = max(ascii_list)\n    #return the maximum value\n    return max_val"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    sum_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += i\n\n    return sum_even, sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n        if i % 2 == 0:\n            if count!= 0:\n                sum += sum\n                count = 0\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and index % 2 == 0:\n            sum_even += arr[i]\n        index += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n\n    return sum_even, count"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        even_sum += i ** 5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    power_sum = 0\n    for i in range(2, n+1):\n        power_sum += i**5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i ** 5\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i**5)\n    return sum(even_numbers)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_sum = 0\n    for i in range(n):\n        even_sum += i ** 5\n    return even_sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index, element in enumerate(test_tup1):\n        if index in test_tup2:\n            test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n    else:\n        # Loop through each element of the first tuple\n        for i in range(len(test_tup1)):\n            # Subtract the corresponding element of the second tuple from the first tuple\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n            # Print the updated tuple\n            print(test_tup1)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must be of equal length.\")\n        return\n\n    # loop through the input tuples and subtract the elements with the same index\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n\n    # Initialize a new tuple to store the result\n    result_tup = ()\n\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        # Check if the elements at the same index are the same\n        if test_tup1[i] == test_tup2[i]:\n            # If they are, add 0 to the result tuple to indicate that the elements are the same\n            result_tup += (0, )\n        # If the elements are different, add their difference to the result tuple\n        else:\n            result_tup += (test_tup1[i] - test_tup2[i], )\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    # Initialize the first two even index binomial coefficients\n    sum_even_binomial = (n*(n-1))//2\n    for i in range(2, int(math.log2(n))+1):\n        # Initialize the i-th even index binomial coefficient\n        sum_even_binomial += (n//(2**i))*(2**i-1)\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum and loop variables\n    even_sum = 0\n    index = 0\n\n    # Calculate the binomial coefficient for each index between 0 and n-1\n    while index <= n:\n        coeff = math.comb(n, index)\n        if index % 2 == 0:\n            even_sum += coeff\n        index += 1\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize sum variable to 0\n    even_sum = 0\n    \n    # iterate through all possible values of k (even indices)\n    for k in range(0, n//2+1):\n        # calculate the binomial coefficient and add it to the sum if it's even\n        binomial = math.comb(n, k)\n        if k % 2 == 0:\n            even_sum += binomial\n    \n    # return the sum of even binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    else:\n        even_sum = 0\n        for i in range(2, n+1, 2):\n            even_sum += math.comb(n, i-1)\n        return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(i, 2*i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        n = n - 1\n        even_sum = 0\n        count = 0\n        for i in range(1, n+1):\n            binomial_coeff = math.comb(n, i)\n            if i % 2 == 0:\n                even_sum += binomial_coeff\n                count += 1\n        return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        print(\"Error: n must be greater than or equal to 1.\")\n        return\n\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += math.comb(n, i, exact=True)\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_Coeff = 0\n    for i in range(2, n+1):\n        for j in range(i, n+1, i):\n            sum_even_binomial_Coeff += (j*(j-1))//2\n    return sum_even_binomial_Coeff"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = ((1/3) * (3.14 * r ** 2)) + (2 * 3.14 * r * h) + (2 * 3.14 * h ** 2)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r ** 2 * h\n    return v\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nvolume = volume_cylinder(radius, height)\nprint(\"The volume of the cylinder is:\", volume)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder using the formula: V = (1/3) * pi * r^2 * h\n    V = (1/3) * 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # calculate the volume of the cylinder\n    V = (1/3) * pi * (r**2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/5) * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder\n    V = 3.14159 * (r**2) * h\n    \n    # Return the volume\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {k:v for k,v in dict.items() if v >= n}\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            if test_tup[i] == 1:\n                count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]+1:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for element in test_tup:\n        if element!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_count = 0\n    num = 1\n    \n    while decagonal_count < n:\n        decagonal_count += 1\n        num += 1\n    \n    return num\n\nprint(is_num_decagonal(1))  # Output: 1\nprint(is_num_decagonal(2))  # Output: 3\nprint(is_num_decagonal(3))  # Output: 12"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initializing a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Calculating the sum of squares of the first n integers\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n    \n    # Calculating the decagonal number\n    decagonal_num = sum_of_squares**(1/2)\n    \n    # Returning the decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # function to calculate the decagonal number\n    def decagonal_num(n):\n        return (n*(3*n-1))//2\n\n    # check if n is a valid input\n    if n < 0:\n        print(\"Invalid input! Please enter a non-negative integer.\")\n        return\n\n    # find the nth decagonal number and print it\n    nth_decagonal = decagonal_num(n)\n    print(\"The\", n, \"th decagonal number is:\", nth_decagonal)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 0\n    c = 1\n    for i in range(n):\n        a, b, c = b, c, a + b + c\n    return c\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    count = 1\n    dec_sum = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1): \n        # Check if the number is a decagonal number\n        if i*i == 1 + count: \n            dec_sum += i \n            count += 2\n        else:\n            count += 1\n    \n    # Return the nth decagonal number\n    return dec_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (2 * n - 1)\n\ndef nth_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return is_num_decagonal(n) - n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    # Initialize variables\n    decagonal_sum = 0\n    num_in_decagonal = 1\n    \n    # Calculate the decagonal sum using the formula:\n    #   (n + (n/2))^2\n    while num_in_decagonal <= n:\n        decagonal_sum += (num_in_decagonal + (num_in_decagonal // 2)) ** 2\n        num_in_decagonal += 1\n    \n    # Check if the nth decagonal number is equal to the given n\n    return decagonal_sum == (n ** 2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    decagonal_num = 0\n    for i in range(n):\n        decagonal_num += i * (2 * i - 1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Calculate the first n terms of the series\n    series = [(i*(i+1))//2 for i in range(n+1)]\n    # Calculate the sum of the first n terms\n    sum_series = sum(series)\n    # Check if the sum is equal to n*(n+1)/2\n    return (sum_series == n*(n+1)/2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += (2*i-1)*i\n    return num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element, and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements in the list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all the elements are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element in unique_list:\n            return False\n        else:\n            unique_list.append(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set and check if its length is equal to its count\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique,\n    and False otherwise.\n    '''\n    # Create a set from the input list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the input list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate through each element in the list\n    for element in test_list:\n\n        # check if the element is already in the set\n        if element in unique_set:\n            return False\n\n        # add the element to the set\n        unique_set.add(element)\n\n    # if no element was found in the set, all elements were unique\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return None\n\n    # Subtract the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    return [a-b for a,b in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n\n    Args:\n    nums1: a list of numbers\n    nums2: a list of numbers with the same length as nums1\n\n    Returns:\n    A list of the same length as nums1, with the result of nums1 - nums2\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = [0] * 10\n    for digit in str(n):\n        frequency[int(digit)] += 1\n    for i in range(10):\n        if frequency[i] > 0 and frequency[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize an array with 10 zeros\n    \n    # iterate through each digit of the number\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # iterate through the frequency array and check if each digit is less than or equal to itself\n    for i in range(10):\n        if freq[i] > freq[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = str(n)\n    freq = [0] * 10\n    \n    for digit in digits:\n        freq[int(digit)] += 1\n    \n    for i in range(10):\n        if freq[i] > n // i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n    \n    # count the frequency of digits in the integer\n    for digit in str(n):\n        count[int(digit)] += 1\n        \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 0 and count[i] > n % 10:\n            return False\n            \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    freq = [0] * 10  # initialize frequency list with 0 for each digit\n    for i in str(n):  # iterate over each digit in the integer\n        freq[int(i)] += 1  # increment the frequency count for the digit\n    \n    for digit in freq:  # iterate over the frequency list\n        if digit > n:  # if a digit is greater than the integer itself\n            return False\n    \n    return True  # if no digit is greater than the integer itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    # Helper function to check if a digit has a specific frequency\n    def has_frequency(digit, frequency): \n        count = 0 \n        while n > 0: \n            digit_value = n % 10 \n            if digit_value == digit: \n                count += 1 \n            n //= 10 \n        return count <= frequency\n    \n    # Check if the number has a frequency of 10 or less in each digit\n    if not has_frequency(1, 10): \n        return False\n    if not has_frequency(2, 10): \n        return False\n    if not has_frequency(3, 10): \n        return False\n    if not has_frequency(4, 10): \n        return False\n    if not has_frequency(5, 10): \n        return False\n    if not has_frequency(6, 10): \n        return False\n    if not has_frequency(7, 10): \n        return False\n    if not has_frequency(8, 10): \n        return False\n    if not has_frequency(9, 10): \n        return False\n    \n    # Check if the number has a frequency of 2 or less in each pair of adjacent digits\n    for i in range(9): \n        if has_frequency(i+1, 2)!= has_frequency(i, 2): \n            return False\n    \n    # All the checks passed, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # initialize frequency array of size 10\n    \n    # count frequency of each digit in n\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # check if frequency of each digit is less than or equal to its value\n    for digit in range(10):\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # split the integer into a list of digits\n    digits = [int(d) for d in str(n)]\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # loop through the digits and update the frequency count\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n    # loop through the digits again and check if the frequency is less than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    # all digits have the same frequency or they have the same frequency as themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for i in range(10):\n        digit_freq[i] = 0\n    for i in str(n):\n        digit_freq[int(i)] += 1\n    for i in range(10):\n        if digit_freq[i] > 0 and digit_freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if the list is empty\n    if not list:\n        return True\n    # check if the first element in the list is equal to the given element\n    if list[0] == element:\n        # check if all other elements in the list are also equal to the given element\n        return all(x == element for x in list[1:])\n    # if the first element is not equal to the given element, return False\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns a boolean value indicating whether all elements in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?i)a(?=b{2,3})'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?=.{2,3})'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=.*b.{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains the pattern 'a.*b{2,3}'\")\n    else:\n        print(\"The string does not contain the pattern 'a.*b{2,3}'\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = []\n    for i in range(k):\n        mod_a.extend(a)\n    mod_a.extend(a[:1])\n    mod_a.extend(a[-1:])\n    \n    max_sum = max(mod_a)\n    \n    for i in range(n-k):\n        max_sum = max(max_sum, mod_a[i] + mod_a[i+k])\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the sum of the first n elements\n    first_sum = sum(a[:n])\n    # Initialize the maximum subarray sum\n    max_subarray_sum = first_sum\n\n    # Loop through the array k times\n    for _ in range(k):\n        # Calculate the sum of the array with k repetitions of the first n elements\n        repeated_sum = k * first_sum\n        # Calculate the maximum subarray sum by taking the maximum of the first n elements and the sum of the array with k repetitions of the first n elements\n        max_subarray_sum = max(max_subarray_sum, repeated_sum)\n\n    # Return the maximum subarray sum\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if n <= 1:\n        return 0\n    if k == 1:\n        return max(a)\n    if n == 2:\n        return max(a[0], a[1])\n    if k > n // 2:\n        k = n // 2\n    max_so_far = float('-inf')\n    curr_max = float('-inf')\n    prev_max = float('-inf')\n    for i in range(k - 1):\n        curr_max = max(prev_max + a[i], a[i])\n        prev_max = curr_max\n        max_so_far = max(max_so_far, prev_max)\n    for i in range(k, n):\n        curr_max = max(prev_max + a[i] - a[i - k], a[i])\n        prev_max = curr_max\n        max_so_far = max(max_so_far, prev_max)\n    return max_so_far"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the given array with k times of the array\n    modified_array = [num for _ in range(k)] + a + [num for _ in range(k)]\n    # Initialize the maximum sum with the first element of the array\n    max_sum = a[0]\n    # Traverse through the modified array\n    for i in range(k, n + k):\n        # Find the sum of the subarray ending at index i\n        sub_array_sum = sum(modified_array[i - k:i])\n        # Update the maximum sum if the sum is greater than the current maximum sum\n        max_sum = max(max_sum, sub_array_sum)\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    temp_start = 0\n    prev_max_sum = 0\n    \n    # iterate over all possible subarrays\n    for i in range(n):\n        # add the current element to the temp_sum\n        temp_sum += a[i]\n        \n        # if the temp_sum exceeds k times the previous max_sum, update the max_sum\n        if temp_sum > k * prev_max_sum:\n            max_sum = max(max_sum, temp_sum - k * prev_max_sum)\n            \n            # move the temp_sum back to its initial value\n            temp_sum = a[i]\n            temp_start = i + 1\n            \n        # if the temp_sum is no longer greater than k times the previous max_sum, update the temp_sum\n        elif temp_sum > prev_max_sum:\n            temp_sum = a[i]\n        \n        # update the previous max_sum\n        prev_max_sum = max(prev_max_sum, temp_sum)\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    max_sum = float('-inf')\n    mod_arr = a * k\n    left, right = 0, 0\n\n    while right < n:\n        current_sum = 0\n        for i in range(k):\n            current_sum += mod_arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        left += 1\n        right += 1\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Loop through the array k times\n    for i in range(k):\n        # Update the current subarray sum with the original array\n        curr_sum = sum(a)\n        \n        # If the current subarray sum is greater than the maximum subarray sum, update the maximum subarray sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = sum(a[:n])\n    repeated_sum = sum(a[n:n+k])\n    for i in range(n, n+k):\n        current_sum = current_sum - a[i-k] + a[i]\n        repeated_sum = repeated_sum + a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    # Iterate through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n        # If the current sum exceeds the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # If the current sum exceeds the threshold, add the current element to the sum and reset the sum\n        if current_sum > k * a[i]:\n            current_sum -= a[i]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum sum of a contiguous array from the given array\n    max_sum = max_contiguous_subarray(a, n)\n\n    # Calculate the maximum sum of a contiguous array from the modified array formed by repeating the given array k times\n    modified_array = a * k\n    modified_max_sum = max_contiguous_subarray(modified_array, k)\n\n    # Return the maximum of the two sums\n    return max(max_sum, modified_max_sum)\n\n\ndef max_contiguous_subarray(arr, n):\n    '''\n    Find the maximum sum of a contiguous array from the given array.\n    '''\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += arr[i]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum of the array\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    # iterate from 0 to n\n    for i in range(n):\n        # if the current number is even, add its square to the sum of squares\n        if i % 2 == 0:\n            sum_of_squares += i**2\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_squares = 0\n    while count < n:\n        sum_of_squares += count ** 2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        square = count ** 2\n        sum_of_squares += square\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_length_index = lengths.index(max(lengths))\n    return [list1[i] for i in range(len(list1)) if i == max_length_index]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), default=0)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize variables to keep track of the maximum length and its corresponding list\n    max_len = 0\n    max_list = []\n\n    # Loop through each element of the list\n    for elem in list1:\n        # Check if the length of the current element is greater than the current maximum length\n        if len(elem) > max_len:\n            # If it is, update the maximum length and corresponding list\n            max_len = len(elem)\n            max_list = [elem]\n        # If the length of the current element is equal to the current maximum length, add it to the list\n        elif len(elem) == max_len:\n            max_list.append(elem)\n\n    # Return the maximum length and corresponding list\n    return max_len, max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        if length not in max_lengths:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and len(max_lengths) > 0):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the fence consists of a single post, there is only one way to paint it\n    if n == 1:\n        return 1\n    \n    # If there are only k colors, there are at most n/k ways to paint the fence\n    if k == n:\n        return n\n    \n    # Initialize a 2D array to store the number of ways to paint the fence for each possible arrangement of colors\n    ways = [[0] * (k+1) for i in range(n+1)]\n    \n    # Initialize the first row and column\n    ways[0][0] = 1\n    ways[1][0] = 1\n    \n    # Iterate over the remaining rows and columns\n    for i in range(2, n+1):\n        for j in range(k+1):\n            # If there are no more adjacent posts, there are only n-i ways to paint the fence\n            if i < n:\n                ways[i][j] = ways[i-1][j]\n            \n            # If there are more than 2 adjacent posts, there are at most 2*min(i,j) ways to paint the fence\n            elif i > 2 and j > 2:\n                ways[i][j] = min(ways[i-1][j], 2*ways[i-2][j-1])\n                \n            # If there are less than or equal to 2 adjacent posts, there are at most j ways to paint the fence\n            elif i <= 2 and j > 1:\n                ways[i][j] = ways[i-1][j-1]\n                \n    # Return the number of ways to paint the fence using the last row and column\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(color_count, current_color, current_position, remaining_colors):\n        if current_position == n:\n            return 1\n        \n        ways = 0\n        for color in remaining_colors:\n            if color_count[current_color] + 1 <= k:\n                color_count[current_color] += 1\n                ways += backtrack(color_count, current_color, current_position + 1, remaining_colors)\n                color_count[current_color] -= 1\n        \n        return ways\n    \n    color_count = [0] * k\n    return backtrack(color_count, 0, 0, range(1, k + 1))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "The above recurrence relation is because if we have j colors and there are no adjacent posts with the same color, then there are no ways to paint the fence. If we have j colors and there are at most 2 adjacent posts with the same color, then there are at most 2 ways to paint the fence. Therefore, we can use the recurrence relation to fill the dp array and count the number of ways to paint the fence with n-i-1 posts and j colors such that at most 2 adjacent posts have the same color."
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the number of ways to paint the fence\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    # Base cases\n    dp[0][0] = 1\n    dp[0][1] = 1\n\n    # Fill the array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(k+1):\n            if j == 0 or j == k:\n                dp[i][j] = dp[i-1][j]\n            elif i == 0 or j == dp[i-1][j-1]:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n\n    # Return the answer\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if n == 1:\n        return 1\n    # initialize variables\n    ways = [0] * (n+1)\n    ways[0] = 1\n    \n    # filling the array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i] += ways[i-j]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create an array of size n to store the count of ways for each color\n    count = [0] * k\n\n    # Base case for the first color: all ways are 1\n    count[0] = 1\n\n    # Loop through the rest of the colors\n    for i in range(1, k):\n        # Loop through all possible combinations of the previous colors\n        for j in range(k):\n            # Check if the current color is less than the next color\n            if j < i:\n                # If it is, check if the colors are adjacent\n                if i - j == 1 or i - j == n - k + 1:\n                    # If they are, increment the count for the current color\n                    count[i] += count[j]\n\n    # Return the count of ways for each color\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the number of ways to paint the fence\n    dp = {}\n    # Base case: if there are 1 or 0 colors, there is only 1 way to paint the fence\n    if k == 1 or k == 0:\n        return 1\n    # Base case: if the fence has 1 post, there is only 1 way to paint the fence\n    if n == 1:\n        return 1\n    # Base case: if the fence has 2 or more posts, there is only 1 way to paint the fence\n    if n > 2:\n        dp[2] = 1\n    # Fill the dictionary using dynamic programming\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            # If the fence has i posts and j colors, there can be at most 2 adjacent posts with the same color\n            if i == 2:\n                dp[i] += dp[2] * j\n            else:\n                dp[i] += dp[i-1] * j\n    # Return the value in the dictionary\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a 2D array to store the number of ways of painting the fence for each pair of adjacent colors\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n\n    # Initialize the base cases\n    dp[0][0] = 1\n    dp[0][1] = 0\n    dp[1][0] = 0\n    dp[1][1] = 1\n\n    # Fill the remaining values in the dp array\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if i == 2:\n                dp[i][j] = dp[i-1][j]\n            elif j == 2:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # Return the final value in the dp array\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Create a boolean array of size n+1 and initialize all values to True\n    dp = [True] * (n + 1)\n\n    # Iterate through the array from 2 to n\n    for i in range(2, n + 1):\n        # If the number of adjacent posts is less than or equal to k,\n        # then we can paint the post with i color and the next post will have a different color\n        if i <= k:\n            # Set all values to True\n            dp[i] = True\n            # Iterate through the array from 1 to i-1\n            for j in range(1, i):\n                # If the current post and the next post have the same color,\n                # then we can paint the post with i color and the next post will have a different color\n                if dp[j] and dp[i-j]:\n                    dp[i] = True\n                    break\n            else:\n                # If no adjacent post has the same color, then we can't paint the post with i color\n                dp[i] = False\n\n    # The number of ways of painting the fence with at most 2 adjacent posts having the same color is the sum of all values in the array\n    return sum(dp)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, k + 1):\n        for j in range(i):\n            if j < n - 1 and dp[j] == dp[j + 1]:\n                dp[i] += dp[j]\n    return dp[k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    if m == 0:\n        return None\n\n    if n < 0:\n        n = -n\n\n    if m < 0:\n        m = -m\n\n    q = n // m\n\n    if n % m == 0:\n        return q\n    else:\n        return q + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if n < m:\n        n, m = m, n\n    if n == 0:\n        return 0\n    else:\n        return find(n - m, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    # calculate the quotient using integer division\n    quotient = n // m\n    # check if the remainder is 0, otherwise round the quotient up\n    if quotient * m == n:\n        quotient -= 1\n    # return the rounded quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int((n/m))"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient\n    quotient = n // m\n    \n    # round the quotient down to the nearest integer\n    quotient = int(quotient)\n    \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer) by dividing the larger number by the smaller number, and then truncating the result to the nearest integer.\n\n    Args:\n        n: The larger number.\n        m: The smaller number.\n\n    Returns:\n        The quotient of n divided by m, rounded down to the nearest integer.\n    \"\"\"\n\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h > w:\n        return math.sqrt(w**2 + h**2)\n    else:\n        return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the base and the height of the triangle\n    base = math.sqrt(w ** 2 + h ** 2)\n    height = w\n\n    # Calculate the length of the perimeter of the triangle\n    perimeter = base + height\n\n    # Calculate the area of the triangle\n    area = (base * height) / 2\n\n    # Calculate the third side of the right angled triangle\n    third_side = perimeter ** 2 - area\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w ** 2 + h ** 2) ** 0.5\n    s = (w ** 2 + c ** 2 - h ** 2) ** 0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2+h**2)**0.5 # Calculate the semi-perimeter\n    c = math.sqrt((w**2+h**2)**2-(w**2-h**2)**2) # Calculate the cosine of the right angle\n    third_side = s*c # Calculate the length of the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the Law of Cosines to find the semi-perimeter\n    s = (w**2 + h**2) ** 0.5\n    # Using the formula for the angle bisectors of a right angle triangle\n    a = math.degrees(math.acos((w**2 + h**2 - s**2) / (2 * w * h)))\n    b = math.degrees(math.acos((h**2 + w**2 - s**2) / (2 * h * w)))\n    c = 180 - a - b\n    # Using the formula for the right angle in degrees\n    right_angle_degrees = 180 - a - b\n    # Returning the right angle in degrees\n    return right_angle_degrees"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = math.sqrt(w**2 + h**2)\n    side2 = w * h / side1\n    third_side = math.sqrt(side1**2 - side2**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w ** 2 + h ** 2)\n    # calculate the length of the semi-perimeter\n    semi_perimeter = 0.5 * (w + h)\n    # calculate the length of the third side\n    third_side = 0.5 * hypotenuse\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')  # initialize a variable to store the maximum number\n    for val in listval:\n        if type(val) == int:\n            if val > max_num:\n                max_num = val\n        elif type(val) == float:\n            if val > max_num:\n                max_num = val\n        elif type(val) == bool:\n            if val is True:\n                max_num = val\n        elif type(val) == str:\n            if len(val) > len(str(max_num)):\n                max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as an argument and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max value to the first element of the list\n    max_val = listval[0]\n    # Loop through the list and compare each element to the max value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None:\n            max_val = i\n        elif i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize the maximum value to the first element of the list\n    max_val = listval[0]\n\n    # loop through the list starting from the second element\n    for i in range(1, len(listval)):\n        # if the current element is greater than the maximum value, update the maximum value\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    # return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list of values and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # find the maximum value of the first element\n    max_val = listval[0]\n    \n    # iterate over the rest of the list\n    for val in listval[1:]:\n        # if the current value is greater than the maximum value, update max_val\n        if val > max_val:\n            max_val = val\n            \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of values as input and returns the maximum value in the list.\n    The input list can contain different data types such as integers, strings, and floats.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of different data types and returns the maximum value in the list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_value = None\n    \n    # Loop through each element in the list\n    for value in listval:\n        # If the current value is greater than the maximum value, update the max_value variable\n        if type(value)!= list and (max_value is None or value > max_value):\n            max_value = value\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    div_sum = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            div_sum += divisor\n        divisor += 1\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_div(12)) # Output: 20\nprint(sum_div(24)) # Output: 24\nprint(sum_div(25)) # Output: 25\nprint(sum_div(30)) # Output: 15"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_of_div += i\n    return sum_of_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    \n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    \n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # sort the array\n    arr.sort()\n\n    # iterate through the array\n    for i in range(1, n):\n        # check if the array is in reverse order\n        if arr[i] < arr[i-1]:\n            inv_count += i - 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array\n    arr = sorted(arr)\n    \n    # Initialize inversion count\n    count = 0\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        \n        # Find inversions\n        left = 0\n        right = i - 1\n        \n        while left < right:\n            \n            # Check if the left and right subarrays are sorted\n            if arr[left] > arr[right]:\n                count += (right - left + 1)\n                left += 1\n            else:\n                right -= 1\n                \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(arr, left, mid, right):\n    n1 = mid - left + 1\n    n2 = right - mid\n\n    L = [0] * n1\n    R = [0] * n2\n\n    for i in range(n1):\n        L[i] = arr[left + i]\n\n    for j in range(n2):\n        R[j] = arr[mid + 1 + j]\n\n    i = 0\n    j = 0\n    k = left\n\n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\n\ndef merge_sort(arr, left, right):\n    if left < right:\n        mid = (left + right) // 2\n        merge_sort(arr, left, mid)\n        merge_sort(arr, mid + 1, right)\n        merge(arr, left, mid, right)\n\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    merge_sort(arr, 0, n - 1)\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            inv_count += n - i\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n        # Initialize count of inversions \n        count = 0 \n  \n        # Traverse through remaining array elements \n        for j in range(i + 1, n): \n            # If current element is greater than the next element, \n            # increment the count of inversions \n            if arr[i] > arr[j]: \n                count += 1 \n  \n        # Add the count of inversions to the sum of inversions \n        total_count += count \n  \n    return total_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Use two pointers to traverse the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize a count variable to keep track of the number of inversions\n    count = 0\n\n    # While the left pointer is less than the right pointer\n    while left < right:\n\n        # Check if the left element is smaller than the right element\n        if arr[left] > arr[right]:\n\n            # If the left element is smaller, swap it with the right element\n            arr[left], arr[right] = arr[right], arr[left]\n\n            # Increment the count variable\n            count += right - left\n\n            # Move the left pointer to the right\n            left += 1\n\n            # Move the right pointer to the left\n            right -= 1\n\n        else:\n\n            # If the left element is not smaller, move the left pointer to the right\n            left += 1\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Define an auxiliary array to store the indices of the sorted elements\n    inv_index = []\n    \n    # Sort the array using the merge sort algorithm\n    merge_sort(arr, 0, len(arr)-1, inv_index)\n    \n    # Count the number of inversions using the inv_index array\n    inv_count = 0\n    for i in range(len(inv_index)):\n        inv_count += inv_index[i] * (len(arr)-inv_index[i])\n    \n    return inv_count\n\ndef merge_sort(arr, low, high, inv_index):\n    '''\n    Merge sort algorithm for counting inversions.\n    '''\n    if low < high:\n        mid = (low + high) // 2\n        \n        # Sort the left and right subarrays\n        merge_sort(arr, low, mid, inv_index)\n        merge_sort(arr, mid+1, high, inv_index)\n        \n        # Merge the sorted subarrays\n        i = low\n        j = mid+1\n        k = low\n        \n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                inv_index.append(j-low)\n                inv_count += j-low\n                i += 1\n            else:\n                inv_index.append(i-low)\n                inv_count += i-low\n                j += 1\n                \n        # Copy any remaining elements from the left or right subarrays\n        while i <= mid:\n            inv_index.append(mid-low)\n            inv_count += mid-low\n            i += 1\n        while j <= high:\n            inv_index.append(high-low)\n            inv_count += high-low\n            j += 1\n        \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n\n    # Create a function to find the number of inversions in a subarray\n    def count_inversions(arr, left, right):\n        # Base case: if subarray has only one element, return 0\n        if left == right:\n            return 0\n        # Divide the subarray into two halves and count inversions in each half\n        mid = (left + right) // 2\n        inversions_left = count_inversions(arr, left, mid)\n        inversions_right = count_inversions(arr, mid + 1, right)\n        inversions_total = merge_sort(arr, left, mid, right)\n        return inversions_left + inversions_right + inversions_total\n\n    # Merge sort algorithm to count inversions in the array\n    def merge_sort(arr, left, mid, right):\n        # Initialize variables for merging and counting inversions\n        inversions_total = 0\n        inversions_left = 0\n        inversions_right = 0\n        # Initialize two pointers for each subarray\n        i = left\n        j = mid + 1\n        # Initialize an array to store the sorted subarray\n        sorted_arr = [0] * (right - left + 1)\n        # Merge the two subarrays into the sorted subarray\n        k = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                sorted_arr[k] = arr[i]\n                i += 1\n                inversions_total += inversions_left\n            else:\n                sorted_arr[k] = arr[j]\n                j += 1\n                inversions_total += inversions_right\n            k += 1\n        # Copy any remaining elements from the left subarray\n        while i <= mid:\n            sorted_arr[k] = arr[i]\n            i += 1\n            k += 1\n        # Copy any remaining elements from the right subarray\n        while j <= right:\n            sorted_arr[k] = arr[j]\n            j += 1\n            k += 1\n        # Copy the sorted subarray into the original array\n        for i in range(left, right + 1):\n            arr[i] = sorted_arr[i - left]\n        return inversions_total\n\n    # Call the count_inversions function to count inversions in the array\n    return count_inversions(arr, 0, len(arr) - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Count inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initializing an empty list to store the flattened elements\n    flattened_list = []\n\n    # Iterating through each element of the input list\n    for element in list1:\n        # If the element is a list, then we recursively call the flatten_list function on it\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        # If the element is not a list, then we add it to the flattened_list\n        else:\n            flattened_list.append(element)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Use recursion to traverse the nested list\n    def traverse(sublist):\n        # If the sublist is empty, return an empty list\n        if not sublist:\n            return []\n        # If the sublist has only one element, return the sublist\n        elif len(sublist) == 1:\n            return sublist\n        # Otherwise, flatten the sublist and append each element to the flattened list\n        else:\n            for element in sublist:\n                flattened_list.append(element)\n            # Recursively traverse the sublist\n            return traverse(sublist[1:])\n\n    # Call the traverse function on the input list\n    flattened_list = traverse(list1)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Define an empty list to hold the flattened list\n    flattened_list = []\n\n    # Loop through each element in the list\n    for item in list1:\n\n        # If the item is a list, flatten it and append the flattened list to the flattened list\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n\n        # Otherwise, append the item to the flattened list\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    temp_sum = 0\n    days = defaultdict(int)\n\n    for date, amount in stdata:\n        days[date] += amount\n\n        if date == '2021-06-15':\n            temp_sum = 0\n\n        temp_sum += amount\n\n        if temp_sum > max_sum and date == '2021-06-15':\n            max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_item = []\n    for item, value in stdata:\n        if value > max_sum:\n            max_sum = value\n            max_item = [item]\n        elif value == max_sum:\n            max_item.append(item)\n    return max_item"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    prev_date = None\n    data = defaultdict(list)\n\n    for date, amount in stdata:\n        if prev_date is not None and date.day == prev_date.day:\n            data[date].append(amount)\n        else:\n            if prev_date is not None:\n                if max(data[prev_date]) > max_agg:\n                    max_agg = max(data[prev_date])\n\n            data[date] = [amount]\n\n        prev_date = date\n\n    if prev_date is not None:\n        if max(data[prev_date]) > max_agg:\n            max_agg = max(data[prev_date])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each transaction\n    max_agg_dict = defaultdict(int)\n    \n    # loop through each transaction\n    for trans_data in stdata:\n        # calculate the maximum aggregate for this transaction\n        max_agg = sum(amount for item, amount in trans_data)\n        \n        # update the maximum aggregate for this transaction in the dictionary\n        max_agg_dict[trans_data] = max_agg\n    \n    # find the maximum aggregate across all transactions\n    max_agg_all = max(max_agg_dict.values())\n    \n    # return the maximum aggregate\n    return max_agg_all"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for transaction in stdata:\n        for item in transaction:\n            max_aggr[item] += transaction[item]\n    max_aggr_list = sorted(max_aggr.items(), key=lambda x: x[1], reverse=True)\n    max_aggr_dict = dict(max_aggr_list)\n    max_agg_key, max_agg_value = max_aggr_dict.popitem()\n    return max_agg_key, max_agg_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n    \n    # Iterate over each tuple in the list\n    for customer, amount in stdata:\n        # Calculate the maximum aggregate for the customer\n        max_agg[customer] = max(max_agg[customer], amount)\n    \n    # Return the maximum aggregate for all customers\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Initialize a defaultdict to store the maximum aggregate for each customer\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through each tuple in the list of tuples\n    for customer, agg in stdata:\n\n        # If the aggregate for the customer is greater than the current maximum, update the maximum\n        if agg > max_agg_dict[customer]:\n            max_agg_dict[customer] = agg\n\n    # Return the maximum aggregate for each customer\n    return max_agg_dict"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)  # defaultdict to keep track of the sum of transactions\n    max_aggr = 0  # initialize the maximum aggregate to 0\n\n    for t in stdata:\n        d[t[1]] += t[0]\n        if max_aggr < d[t[1]]:\n            max_aggr = d[t[1]]\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int) # initialize a defaultdict to store the maximum aggregate for each customer\n    \n    # loop through the list of tuples\n    for c, t in stdata:\n        max_aggr[c] = max(max_aggr[c], t) # update the maximum aggregate for each customer\n    \n    # find the maximum value in the defaultdict and return it\n    max_val = max(max_aggr.values())\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    frequency = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item, freq in stdata:\n        # Update the frequency of the item in the dictionary\n        frequency[item] += freq\n    \n    # Initialize the maximum aggregate variable\n    max_agg = 0\n    \n    # Iterate through the dictionary and update the maximum aggregate variable\n    for freq in frequency.values():\n        max_agg = max(max_agg, freq)\n    \n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize two lists to store the count of sequences for the first and last n bits respectively\n    count_list = [0] * (2 * n + 1)\n    seq_list = ['0'] * 2 * n\n\n    # Initialize the count of sequences for the first and last n bits\n    count_list[0] = 1\n    count_list[2 * n] = 1\n\n    # Fill the seq_list with all possible binary sequences of length 2n\n    for i in range(1, 2 * n + 1):\n        for j in range(2):\n            if i % (2 ** j) == 0:\n                seq_list[i] = seq_list[i] + seq_list[i - (2 ** j)]\n\n    # Iterate over all possible sequences of length 2n\n    for i in range(1, 2 * n + 1):\n        # If the sum of the first n bits is same as the sum of the last n bits, increment the count of sequences\n        if int(seq_list[i]) == int(seq_list[i-n]) + int(seq_list[i-2*n]):\n            count_list[i] = count_list[i-1]\n\n    # Return the count of all sequences of length 2n\n    return count_list[2 * n]"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n+1, 2**n):\n        if sum(i//(2**n) % 2**n) == sum(i//(2**n-1) % 2**n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        curr_seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in curr_seq) == sum(int(bit) for bit in curr_seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(n)\n        if binary_seq[n-1] == binary_seq[-n]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize count and values\n    count = 0\n    seq = [0, 1]\n    \n    # Generate binary sequences of length 2n\n    for i in range(2, 2*n+1):\n        # Generate binary sequence\n        seq.append(int(''.join(map(str, seq[i-1:i])), 2))\n        \n        # Check if sum of first n bits is same as sum of last n bits\n        if sum(seq[:i]) == sum(seq[-i:]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            binary_sum = bin(i)[2:] + bin(j)[2:]\n            if binary_sum[:n] == binary_sum[-n:]:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        if i & (i-1) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if (i & j)!= 0:\n                if i + j == 2**(2*n) - 2**n:\n                    count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        bit_sum = sum(int(digit) for digit in bin(i)[2:])\n        if bit_sum == (2**(n-1) + 2**n - 1):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth of the dictionary\n    depth = 0\n    # Recursively check if the value is a dictionary\n    if isinstance(d, dict):\n        # Increment the depth by 1\n        depth += 1\n        # Recursively check all the values in the dictionary\n        for value in d.values():\n            # Recursively call the function with the value\n            depth = max(depth, dict_depth(value))\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n\n    # Loop through each key-value pair in the dictionary\n    for key, value in d.items():\n        # If the value is a dictionary, call the function recursively on it\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value))\n        # If the value is a list, call the function recursively on each element\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item))\n\n    # Return the maximum depth found\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # base case for empty dictionary\n    if not d:\n        return 0\n    \n    # recursive case to find the depth of the dictionary\n    else:\n        # initialize a counter variable to keep track of the depth\n        depth = 0\n        \n        # iterate through the dictionary\n        for key in d:\n            # add one to the depth variable for each nested dictionary\n            if isinstance(d[key], dict):\n                depth += 1\n            \n            # add one to the depth variable for each list element\n            elif isinstance(d[key], list):\n                depth += len(d[key])\n            \n            # add one to the depth variable for each string element\n            elif isinstance(d[key], str):\n                depth += 1\n            \n            # add one to the depth variable for each integer element\n            elif isinstance(d[key], int):\n                depth += 1\n            \n            # add one to the depth variable for each float element\n            elif isinstance(d[key], float):\n                depth += 1\n            \n            # add one to the depth variable for each boolean element\n            elif isinstance(d[key], bool):\n                depth += 1\n            \n            # add one to the depth variable for each None element\n            elif d[key] is None:\n                depth += 1\n            \n            # add one to the depth variable for each element that is not a dictionary, list, string, int, float, bool, or None\n            else:\n                depth += 1\n        \n        # return the depth of the dictionary\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = max(depth, dict_depth(v) + 1)\n            elif isinstance(v, list):\n                for item in v:\n                    if isinstance(item, dict):\n                        depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            nested_depth = dict_depth(v) + 1\n            max_depth = max(max_depth, nested_depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth counter to 1\n    depth = 1\n    \n    # Iterate through each key in the dictionary\n    for key in d.keys():\n        # Check if the value is a dictionary\n        if isinstance(d[key], dict):\n            # Recursively call the function on the subdictionary\n            depth += dict_depth(d[key])\n    \n    # Return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            new_depth = dict_depth(value)\n            current_depth -= 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n        else:\n            current_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the required index after rotations\n    final_index = (index - 1) % len(arr) + rotations - 1\n\n    # Check if the final index is in the range of valid indices\n    if final_index >= 0 and final_index < len(arr):\n        return arr[final_index]\n\n    # If the final index is outside the range of valid indices, find the element after rotations\n    else:\n        # Find the index of the first element after rotations\n        first_index = (index - rotations) % len(arr)\n\n        # Calculate the element at the first index\n        first_element = arr[first_index]\n\n        # Calculate the element at the final index\n        final_element = arr[final_index]\n\n        # Find the element after rotations\n        for i in range(rotations):\n            if i == 0:\n                index = final_index\n            else:\n                index = (index - 1) % len(arr) + rotations - 1\n\n            if index >= 0 and index < len(arr):\n                first_index = (index - rotations) % len(arr)\n                first_element = arr[first_index]\n                final_index = (index - 1) % len(arr) + rotations - 1\n                final_element = arr[final_index]\n\n        return first_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the initial index for rotations\n    initial_index = (index + rotations) % len(arr)\n    \n    # Check if the initial index lies within the range of indexes\n    if initial_index < 0 :\n        initial_index += len(arr)\n    \n    # Calculate the final index\n    final_index = initial_index + ranges[initial_index]\n    \n    # Check if the final index lies within the range of indexes\n    if final_index >= len(arr) :\n        final_index -= len(arr)\n    \n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # check if the given index is valid or not\n    if index >= len(arr) or index < 0:\n        return -1\n\n    # find the index of the given element\n    element_index = arr.index(arr[index])\n\n    # find the element after the given index after rotations\n    rotated_index = (element_index + rotations) % len(arr)\n\n    # return the element at the rotated index\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    def find_Element_helper(arr, index, rotations, ranges):\n        if index == 0:\n            return arr[0]\n\n        current_range = ranges[rotations % len(ranges)]\n        rotated_arr = arr[-current_range:] + arr[:-current_range]\n        return find_Element_helper(rotated_arr, index - 1, rotations + 1, ranges)\n\n    return find_Element_helper(arr, index, 0, ranges)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the number of rotations required to get to the index\n    rotations = abs(rotations)\n    total_rotations = (len(arr) + rotations) % len(arr)\n\n    # Calculate the element to find\n    element = (index + rotations) % len(arr)\n\n    # Calculate the element to rotate to\n    new_element = (element + total_rotations) % len(arr)\n\n    # Calculate the new range\n    new_range = ranges[new_element]\n\n    # Create a new array with the new range\n    new_arr = arr[:new_element] + [new_range] + arr[new_element+1:]\n\n    return new_arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of rotation ranges, a number of rotations, and an index as inputs,\n    and returns the element at the given index after rotating the array by the specified number of rotations.\n    \"\"\"\n    # initialize the result to None\n    result = None\n    \n    # iterate through the rotation ranges\n    for i in range(len(ranges)):\n        # determine the range of the rotation\n        start, end = ranges[i]\n        \n        # if the rotation is within the array, rotate the array and check if the index is within the range\n        if start <= index <= end:\n            # calculate the new index after the rotation\n            new_index = (index - start) % len(arr)\n            \n            # rotate the array by the number of rotations\n            arr = arr[rotations:] + arr[:rotations]\n            \n            # return the element at the new index\n            result = arr[new_index]\n            \n            # break out of the loop if the result is not None\n            if result is not None:\n                break\n    \n    # return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = list(arr)\n    n = len(arr)\n    count = 0\n\n    for i in range(rotations):\n        for j in range(n):\n            temp = arr[j]\n            k = j\n            for _ in range(ranges[count]):\n                k = (k + 1) % n\n                arr[j] = arr[k]\n            arr[j] = temp\n        count += 1\n\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    This function takes in an array of elements, a list of ranges, a list of rotations, and an index.\n    It returns the element at the given index after the number of rotations.\n\n    If the element at the given index is not in the range of the element after rotating, the function returns None.\n\n    For example:\n    arr = [1, 2, 3, 4, 5]\n    ranges = [[1, 4], [2, 4], [3, 4]]\n    rotations = [2, 1, 0]\n    index = 1\n    output = find_Element(arr,ranges,rotations,index)\n    '''\n\n    # Set up a dictionary to store the element after rotating each index\n    rotated_elements = {}\n\n    # Iterate through the ranges and rotations\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        rotation = rotations[i]\n\n        # Rotate the range start and end by the rotation amount\n        start_rotated = start + rotation\n        end_rotated = end + rotation\n\n        # Check if the start and end have been rotated\n        if start_rotated > end_rotated:\n            start_rotated = start_rotated % arr.length\n            end_rotated = end_rotated % arr.length\n\n        # If the start and end have not been rotated, store the element in the dictionary\n        if start_rotated == index and end_rotated == index:\n            rotated_elements[index] = arr[start:end+1]\n\n    # If the element at the given index is not in the rotated range, return None\n    if index not in rotated_elements:\n        return None\n\n    # Find the element at the given index after the rotation\n    element = rotated_elements[index]\n\n    # Return the element after rotating\n    return element[index-start]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of ranges, and number of rotations to find the element at a given index after rotations.\n\n    Args:\n        arr (list): Array of elements to search through.\n        ranges (list): List of tuples of the form (start, end), where start and end represent the range of indices to search.\n        rotations (int): Number of rotations to perform.\n        index (int): Index of the element to search for after rotations.\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n    # Define a helper function to perform a single rotation\n    def rotate(arr, start, end):\n        \"\"\"\n        This function performs a single rotation on a given array.\n\n        Args:\n            arr (list): Array to perform rotation on.\n            start (int): Starting index of the range to rotate.\n            end (int): Ending index of the range to rotate.\n\n        Returns:\n            The rotated array.\n        \"\"\"\n        # Initialize variables to keep track of the first and last elements of the range\n        first = arr[start]\n        last = arr[end - 1]\n\n        # Move all elements from the start to the middle of the range to the end\n        for i in range(start, end - 1):\n            arr[i] = arr[i + 1]\n\n        # Move the first and last elements to the start and end of the range\n        arr[start] = first\n        arr[end - 1] = last\n\n        return arr\n\n    # Initialize variables to keep track of the current index and the result array\n    current_index = index\n    result_array = arr.copy()\n\n    # Perform rotations until the current index is found\n    for i in range(rotations):\n        # Find the range of indices to rotate\n        start, end = ranges[i]\n\n        # Perform the rotation and update the result array\n        result_array = rotate(result_array, start, end)\n\n        # Update the current index\n        current_index = (current_index - start) % (end - start) + start\n\n    # Return the element at the given index after rotations\n    return result_array[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges and a number of rotations, and finds the element at the given index after the specified number of rotations.\n    '''\n    # Initialize variables\n    temp = []\n    element = -1\n    for i in range(len(arr)):\n        temp.append(arr[i])\n        for j in range(len(ranges)):\n            if i in ranges[j]:\n                temp[i] = arr[j[1]]\n                break\n\n    # Rotate the array\n    for _ in range(rotations):\n        temp = temp[1:] + temp[0]\n\n    # Find the element at the given index\n    for i in range(len(temp)):\n        if index == 0:\n            element = temp[i]\n            break\n        else:\n            index -= 1\n\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Use regular expression to find all words starting with 'p'\n    pattern = re.compile(r'\\b[Pp]\\w+\\b')\n    matches = pattern.findall(words)\n\n    # Check if there are at least two matches\n    if len(matches) >= 2:\n        # Return the two matches\n        return matches[0], matches[1]\n    else:\n        # If there are not at least two matches, return None\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*')\n    for word in words:\n        match = pattern.search(word)\n        if match:\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression to match words starting with letter 'p'\n    pattern = r'^p[a-zA-Z]*'\n    \n    # Iterate over the list of words\n    for word in words:\n        # Use the regular expression to check if the word starts with 'p'\n        if re.match(pattern, word):\n            # Return the two words that start with 'p'\n            return word, words[words.index(word)+1]\n    \n    # If no words start with 'p', return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile('^p')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            return (words[i], words[i+1])\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p[a-zA-Z]*')\n    matches = pattern.findall(words)\n    if len(matches) > 0:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]+')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Find the words starting with letter 'p'\n    words_starting_with_p = re.findall(r'^p\\w+', words)\n    # Check if there are at least two words starting with 'p'\n    if len(words_starting_with_p) >= 2:\n        # Return the two words starting with 'p'\n        return words_starting_with_p[0], words_starting_with_p[1]\n    # If there are not at least two words starting with 'p', return None\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    if k == index:\n        return a[k]\n    \n    if index == 0:\n        return max(a[k], a[k-1])\n    \n    left = max_sum_increasing_subseq(a, n, index-1, k)\n    right = max_sum_increasing_subseq(a, n, index-1, k-1)\n    \n    return max(a[index] + left, a[index] + right)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return max(a[index], max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        prefix_sum = 0\n        subseq_sum = 0\n        for i in range(k, index+1):\n            subseq_sum += a[i]\n            prefix_sum += a[i]\n        return max(prefix_sum, subseq_sum)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp table\n    dp = [0] * n\n    # Initialize maximum sum\n    max_sum = float('-inf')\n    # Traverse through the array from 1 to n-1\n    for i in range(1, n):\n        # If the current element is less than or equal to k, then we cannot include it in the increasing subsequence, so ignore it.\n        if a[i] <= k:\n            continue\n        # Initialize current sum\n        curr_sum = a[i]\n        # Traverse through the array from i+1 to n-1 to find the maximum sum of increasing subsequence that ends at index i\n        for j in range(i+1, n):\n            # If the current element is greater than the current element in the increasing subsequence, then include the current element in the increasing subsequence.\n            if a[j] > a[i]:\n                curr_sum += a[j]\n        # If the current sum is greater than the maximum sum, then update the maximum sum and the corresponding index of the increasing subsequence\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_index = i\n        # If the current sum is equal to the maximum sum and the index is greater than or equal to k, then update the maximum sum and the corresponding index of the increasing subsequence\n        elif curr_sum == max_sum and index >= max_sum_index:\n            max_sum = curr_sum\n            max_sum_index = i\n    # If the maximum sum is still float('-inf'), then the maximum sum of increasing subsequence does not exist.\n    if max_sum == float('-inf'):\n        return -1\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    else:\n        return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create an empty array to store the maximum sum of increasing subsequence for each prefix\n    dp = [0] * n\n    dp[0] = a[0]\n    # Initialize the maximum sum of increasing subsequence for the ith index\n    for i in range(1, index + 1):\n        # Check if the i-th element is greater than k or not\n        if a[i] > k:\n            # If yes, update the maximum sum of increasing subsequence for the ith index\n            dp[i] = max(dp[i], dp[i - 1])\n        else:\n            # If no, update the maximum sum of increasing subsequence for the ith index and the sum of the previous subsequence\n            dp[i] = max(dp[i], dp[i - 1] + a[i])\n    # Return the maximum sum of increasing subsequence\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and the subsequence\n    max_sum = float('-inf')\n    subseq = [0]\n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If a[i] is greater than or equal to k, add it to the subsequence\n        if a[i] >= k:\n            # Initialize the j variable to i-1\n            j = i-1\n            # While j is greater than or equal to index-1 and a[j] < k, we can add a[j] to the subsequence\n            while j >= index-1 and a[j] < k:\n                j -= 1\n            # Add the value of a[i] to the maximum sum\n            max_sum = max(max_sum, a[i] + j+1)\n            # Add a[i] to the subsequence\n            subseq.append(a[i])\n        # If a[i] is not greater than or equal to k, move to the next index\n        else:\n            continue\n    # Return the subsequence and the maximum sum\n    return subseq, max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if index == 0:\n        return a[index]\n    \n    max_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    if k > index:\n        return max(max_sum, a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # If the given index is greater than or equal to n, then return 0\n    if index >= n:\n        return 0\n\n    # Initialize a dictionary to store the sum of increasing subsequence from the ith index to kth index\n    prefix_sum = {0: 0}\n\n    # Initialize a variable to store the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Traverse through the array from the ith index to n-1\n    for i in range(index, n):\n\n        # If the current element is greater than or equal to k\n        if a[i] >= k:\n\n            # Calculate the sum of increasing subsequence from the ith index to kth index\n            current_sum = prefix_sum[i] + a[i]\n\n            # If the current sum is greater than the maximum sum of increasing subsequence till now\n            if current_sum > max_sum:\n\n                # Update the maximum sum of increasing subsequence\n                max_sum = current_sum\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n-1:\n        return max(a[index], a[k]) + a[index]\n    else:\n        if a[index] > a[k]:\n            return max(a[index], max_sum_increasing_subseq(a, n, index+1, k))\n        else:\n            return max(a[index], max_sum_increasing_subseq(a, n, index+1, k)) + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(index, n):\n        # If the element is greater than the kth element and current element is greater than the current element, update the maximum sum ending here\n        if i <= k - 1 and a[i] > a[k - 1]:\n            max_ending_here += a[i]\n        # Update the maximum sum of increasing subsequence if the current element is greater than the current maximum sum ending here\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        # If the current element is less than or equal to the kth element, it does not contribute to the sum of increasing subsequence\n        if i <= k - 1:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        for j in range(i, k+1):\n            dp[i] = max(dp[i], dp[j-1] + a[i])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(len(tuplex)):\n        if i % m == 0:\n            col.append(deepcopy(tuplex[i]))\n            for j in range(i+1, len(tuplex), m):\n                if j % n == 0:\n                    col[-1].append(deepcopy(tuplex[j]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to get the colon from.\n        m (int): The number of rows in the tuple.\n        n (int): The number of columns in the tuple.\n\n    Returns:\n        tuple: The colon of the tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n        ValueError: If the input tuple has less than m rows.\n        ValueError: If the input tuple has less than n columns.\n    '''\n\n    if not isinstance(tuplex, tuple):\n        raise TypeError('Input must be a tuple.')\n\n    if len(tuplex) < m:\n        raise ValueError('Input tuple has less than m rows.')\n\n    if len(tuplex[0]) < n:\n        raise ValueError('Input tuple has less than n columns.')\n\n    col = tuple(tuplex[i][j] for i in range(m) for j in range(n))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    - tuplex (tuple): A tuple to get a colon of.\n    - m (int): The number of rows in the colon.\n    - n (int): The number of columns in the colon.\n\n    Returns:\n    - list: A list of tuples, where each tuple contains m elements taken from tuplex.\n    '''\n\n    # Create a copy of the tuple to modify.\n    modified_tuplex = deepcopy(tuplex)\n\n    # Get the length of the tuple.\n    length = len(modified_tuplex)\n\n    # Calculate the number of rows.\n    num_rows = length // n\n\n    # Calculate the number of columns.\n    num_cols = m\n\n    # Initialize an empty list to store the colon.\n    colon = []\n\n    # Iterate over the rows of the colon.\n    for i in range(num_rows):\n\n        # Get a row of the modified tuple.\n        row = modified_tuplex[i * n:(i + 1) * n]\n\n        # Add the row to the colon.\n        colon.append(row)\n\n    # Return the colon.\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    This function takes a tuple and a pair of integers (m,n)\n    and returns a colon of the tuple.\n    \"\"\"\n    # Convert the tuple into a list to make modifications easier\n    tup = list(tuplex)\n    # Define the colon as a new list\n    colon = []\n    # Loop through the tuple\n    for i in range(len(tup)):\n        # If the index is divisible by m, add the value of n to the colon\n        if i % m == 0:\n            colon.append(n)\n        else:\n            # If the index is not divisible by m, append the value of the tuple\n            colon.append(tup[i])\n    # Convert the colon back into a tuple and return it\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col_tuplex = []\n    for i in range(m):\n        col_tuplex.append(deepcopy(tuplex[i]))\n    for i in range(n):\n        col_tuplex.append(deepcopy(tuplex[i]))\n    return tuple(col_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    copy_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        copy_tuplex = copy_tuplex[1:]\n    for j in range(n):\n        copy_tuplex = copy_tuplex[1:]\n    return copy_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple\n    tuplex_cp = deepcopy(tuplex)\n    # Divide the tuple into m columns\n    col = []\n    for i in range(m):\n        col.append(tuplex_cp[i::n])\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m],) * (n - 1)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the length of the tuple is less than m*n\n    if len(tuplex)<m*n:\n        raise ValueError('Tuple length should be at least m*n.')\n    # Create a copy of the tuple\n    colon_tup = deepcopy(tuplex)\n    # Get the index of the first element in the colon\n    first_index = 0\n    # Loop through the colon and swap the elements\n    for i in range(m):\n        for j in range(n):\n            # Get the index of the element to be swapped\n            index = first_index + i*n + j\n            # Swap the elements\n            colon_tup[index],colon_tup[first_index] = colon_tup[first_index],colon_tup[index]\n            # Update the first index\n            first_index += 1\n    # Return the coloned tuple\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_colon = deepcopy(tuplex)\n    for i in range(m):\n        tuplex_colon = tuplex_colon + (tuplex[i],)\n    for i in range(n-m):\n        tuplex_colon = tuplex_colon + (tuplex[i+m],)\n    return tuplex_colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Loop through the specified number of products\n    for i in range(N):\n        # Calculate the product of the largest elements in each list\n        product1 = nums1[i] * nums1[N-1-i]\n        product2 = nums2[i] * nums2[N-1-i]\n\n        # Add the products to the list of largest products\n        largest_products.append(product1)\n        largest_products.append(product2)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    \n    # Find the largest N products\n    largest_products = [0] * N\n    \n    # Calculate the largest products and store them in the list\n    for i in range(N):\n        largest_products[i] = nums1[i] * nums2[i]\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = max(nums1[i] * nums2[j], nums1[j] * nums2[i])\n            if product > max_product:\n                max_product = product\n                products = [product]\n            elif product == max_product:\n                products.append(product)\n            if len(products) == N:\n                break\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the product of the first N numbers of both lists\n    product = 1\n    for i in range(N):\n        product *= nums1[i]\n        product *= nums2[i]\n    \n    return product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest products found so far\n    largest1 = 0\n    largest2 = 0\n\n    # Initialize variables to keep track of the current largest products\n    current1 = 1\n    current2 = 1\n\n    # Loop through the first list of numbers\n    for num1 in nums1:\n        # Compute the current largest product by multiplying the current numbers by the second number\n        current = current1 * num1\n\n        # Compare the current largest product with the previous largest products\n        if current > largest1:\n            largest1 = current\n\n        # If we have found the desired number of products, stop\n        if largest1 >= N:\n            break\n\n        # Move to the next number in the second list\n        current1 = current\n\n    # Loop through the second list of numbers\n    for num2 in nums2:\n        # Compute the current largest product by multiplying the current numbers by the second number\n        current = current2 * num2\n\n        # Compare the current largest product with the previous largest products\n        if current > largest2:\n            largest2 = current\n\n        # If we have found the desired number of products, stop\n        if largest2 >= N:\n            break\n\n        # Move to the next number in the second list\n        current2 = current\n\n    # Return the largest products found\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists,\n    selecting one factor from each list.\n    \"\"\"\n\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    if N > len(nums1) * len(nums2):\n        raise ValueError(\"N must be less than or equal to the product of the lengths of the two lists.\")\n\n    max_product = float('-inf')\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = max(nums1[i], nums2[j]) * min(nums1[i], nums2[j])\n            if product > max_product:\n                max_product = product\n                products = [(i, j), (nums1.index(nums1[i]), nums2.index(nums2[j]))]\n\n    return max_product, products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for the two largest products\n    largest1 = nums1[-1] * nums2[-1]\n    largest2 = nums1[-2] * nums2[-2]\n\n    # Initialize variables for the remaining products\n    product = 0\n    largest_product = 0\n\n    # Loop through the remaining products until the total number of products is N\n    for i in range(len(nums1) - 2):\n        for j in range(len(nums2) - 2):\n            product = nums1[i] * nums2[j]\n            if product > largest_product:\n                largest_product = product\n                if largest_product > largest1:\n                    largest1 = largest_product\n                if largest_product > largest2:\n                    largest2 = largest_product\n\n    # Return the N largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    largest_products = []\n    largest_product = 0\n    factor1 = 0\n    factor2 = 0\n    count = 0\n\n    # iterate through each element of nums1\n    for i in range(len(nums1)):\n        # initialize variables\n        largest_product = 0\n        factor1 = 0\n        factor2 = 0\n\n        # iterate through each element of nums2\n        for j in range(len(nums2)):\n            # calculate the product of the current element of nums1 with the current element of nums2\n            current_product = nums1[i] * nums2[j]\n\n            # check if the current product is larger than the current largest product\n            if current_product > largest_product:\n                # if so, update the largest_product and factor1 and factor2\n                largest_product = current_product\n                factor1 = nums1[i]\n                factor2 = nums2[j]\n\n            # count the number of products found\n            count += 1\n\n            # check if we have found N products\n            if count == N:\n                # if so, break out of the inner loop\n                break\n\n        # append the largest product and the factors to the list of largest products\n        largest_products.append((largest_product, factor1, factor2))\n\n        # reset the count and largest_product variables\n        count = 0\n        largest_product = 0\n\n    # return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in decreasing order of their length\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list and counters\n    result = []\n    count1 = count2 = 0\n    \n    # Iterate over the two lists, combining the largest two elements from each list\n    for i in range(len(nums1)):\n        for j in range(i+1, min(len(nums1), len(nums2))):\n            # Check if the combined product is larger than the current largest product\n            if nums1[i]*nums2[j] > result[count1]*result[count2]:\n                # If so, update the result list and counters\n                result[count1], result[count2] = nums1[i]*nums2[j], nums1[i]*nums2[j]\n                count1, count2 = i, j\n    \n    # Check if we have found enough products to satisfy the N parameter\n    if N <= len(result):\n        return result[:N]\n    else:\n        return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Find the largest product of each list with its corresponding factor from the other list\n    for i in range(N):\n        # Find the index of the largest element in the first list\n        largest_idx1 = 0\n        for j in range(1, len(nums1)):\n            if nums1[j] > nums1[largest_idx1]:\n                largest_idx1 = j\n\n        # Find the index of the largest element in the second list\n        largest_idx2 = 0\n        for j in range(1, len(nums2)):\n            if nums2[j] > nums2[largest_idx2]:\n                largest_idx2 = j\n\n        # Update the result with the product of the largest elements of both lists\n        result[i] = nums1[largest_idx1] * nums2[largest_idx2]\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    # convert the string to a list of characters\n    char_list = list(str1)\n    # convert the list to a tuple\n    tuple_char = tuple(char_list)\n    return tuple_char"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of unset bits\n    unset_bits = 0\n    # Iterate through all bits in the binary representation of n\n    for i in range(32):\n        # Check if the ith bit is 1\n        if (n >> i) & 1:\n            # If it is, unset the ith bit and move to the next bit\n            n &= ~(1 << i)\n            # Update the count of unset bits\n            unset_bits = unset_bits | (1 << i)\n    # If there are no unset bits, set the 32nd bit to 1\n    if unset_bits == 0:\n        n = n | (1 << 31)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize count variable\n    count = 0\n    \n    # Loop through each bit in the integer n\n    while n > 0:\n        # Check if the current bit is unset\n        if n % 2 == 1:\n            return count\n        # Increment the count if the bit is set\n        n //= 2\n        count += 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the mask to 1\n    mask = 1\n    # loop through all the bits in the mask\n    for i in range(32):\n        # if the bit is unset, set it to 1 and break out of the loop\n        if n & mask == 0:\n            n |= mask\n            break\n        # shift the mask to the left\n        mask <<= 1\n    # return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function will set the left most unset bit in a binary number.\n\n    Args:\n        n: An integer representing a binary number.\n\n    Returns:\n        An integer representing the binary number with the left most unset bit set.\n    \"\"\"\n\n    # initialize a variable to keep track of the unset bits\n    unset_bits = 0\n\n    # loop through each bit of the binary number\n    for i in range(len(bin(n)[2:])):\n        # if the bit is 0, set the unset_bits variable to the binary number and exit the loop\n        if bin(n)[2:].count('0') <= bin(n)[2:].count('1'):\n            unset_bits = n\n            break\n\n    # shift the unset_bits variable to the left by 1 bit and return the result\n    return unset_bits << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    # Check if the binary representation of n has only 1's\n    if bin(n).count('1') == 1:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (n - 1) == 0:\n        n -= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    # Set all bits to 1\n    mask = 2**32-1\n    n = n & mask\n    \n    # Find the rightmost bit set to 1\n    while n & 1 == 0:\n        n = n >> 1\n    \n    # Set the leftmost bit to 1\n    return n | 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << (n.bit_length() - 1)) == 0:\n        n <<= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit.\n    \"\"\"\n    # Count the number of set bits in binary representation of n\n    num_set_bits = 0\n    while n > 0:\n        num_set_bits += n & 1\n        n >>= 1\n\n    # Calculate the number of set bits to the left of the leftmost unset bit\n    set_bits_to_left = num_set_bits - (1 << (num_set_bits - 1))\n\n    # Set the left most unset bit by shifting all the bits to the left by set_bits_to_left\n    return n << set_bits_to_left"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variables\n    bit_count = 0\n    set_bit_index = 0\n    \n    # Count the number of set bits in the binary representation of n\n    while n!= 0:\n        n = n & (n - 1)\n        bit_count += 1\n    \n    # Find the index of the leftmost unset bit\n    for i in range(bit_count - 1, -1, -1):\n        if (n >> i) & 1 == 0:\n            set_bit_index = i\n            break\n    \n    # Set the leftmost unset bit\n    n = n & ~(1 << set_bit_index)\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two parameters, r (radius) and h (height), which represent the radius and height of the cone respectively.\n    It returns the volume of the cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with given radius and height.\n\n    Parameters\n    ----------\n    r : float\n        The radius of the cone.\n    h : float\n        The height of the cone.\n\n    Returns\n    -------\n    float\n        The volume of the cone.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Args:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    \"\"\"\n    pi = math.pi\n    volume = pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    \n    while highest <= n:\n        highest <<= 1\n        \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # find the power of 2 that is less than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # check if n is positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # set the initial power of 2 to 1\n    power = 1\n\n    # loop through all numbers from 2 to n\n    while n > power:\n        # check if n is a power of 2\n        if n == power * 2:\n            return power\n        # increment the power of 2\n        power *= 2\n\n    # if n is not a power of 2, it will never be less than or equal to 2^power\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    # initialize the highest power of 2 as 0\n    highest_power_of_2 = 0\n    \n    # loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        \n        # check if the current number is a power of 2\n        if num == 1:\n            # if it is, set the highest power of 2 to 1\n            highest_power_of_2 = 1\n        else:\n            # if it's not, loop through all numbers from 2 to the square root of the current number\n            for power in range(2, int(num**0.5)+1):\n                # if the current number is divisible by the current power, set the highest power of 2 to that power\n                if num % power == 0:\n                    highest_power_of_2 = power\n                    break\n                \n    # return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # convert n to binary and count the number of 1's\n    count = sum(int(digit) for digit in bin(n)[2:])\n    # return 2 raised to the power of count\n    return 2**count"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n == 0:\n        return 0\n    else:\n        return 1 << highest_Power_of_2(n - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    max_pow_of_2 = 1\n\n    # Iterate over all numbers from 2 to n\n    for i in range(2, n+1):\n        # If the current number is a power of 2, update max_pow_of_2\n        if i == 2**max_pow_of_2:\n            max_pow_of_2 += 1\n\n    # Return the highest power of 2 that is less than or equal to n\n    return max_pow_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n <= 0:\n        return 0\n\n    count = 0\n    while n > 1:\n        count += 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # check if n is negative or zero\n    if n <= 0:\n        return None\n\n    # initialize a variable to store the highest power of 2 found so far\n    highest_power = 1\n\n    # loop until we find the highest power of 2 that is less than or equal to n\n    while highest_power <= n:\n        # if the power of 2 is greater than or equal to n, update the highest power found so far\n        if highest_power >= n:\n            break\n\n        # increase the power of 2 by 1\n        highest_power *= 2\n\n    # return the highest power of 2 found so far\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    This function finds the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0: \n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Initialize the first two numbers of the sequence\n    a = 2\n    b = 1\n    \n    # If n is 1, return a\n    if n == 1: \n        return a\n    \n    # If n is 2, return b\n    elif n == 2: \n        return b\n    \n    # If n is greater than 2, return the nth lucas number\n    else: \n        for i in range(2, n+1): \n            # Calculate the nth lucas number using the formula a(n+1) = 1 + a + b(n-1)\n            c = 1 + a + b*(n-1)\n            \n            # Update the values of a, b, and c\n            a = b\n            b = c\n        \n        return c"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [0, 2]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list and apply the format string\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(lst, format_str):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n    lst (list): List of elements to apply the format string to.\n    format_str (str): Format string to apply to each element.\n\n    Returns:\n    list: A new list with the same elements as the input list, but each element has been formatted using the given format string.\n    '''\n    formatted_lst = []\n    for elem in lst:\n        formatted_lst.append(format(elem, format_str))\n    return formatted_lst"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1: list of strings\n    l2: list of integers\n    l3: list of tuples\n\n    Returns:\n    nested_dict: a dictionary of lists, where each key is the name of a list\n    \"\"\"\n    # create empty dictionary for nested dictionary\n    nested_dict = {}\n\n    # add elements of each list to nested dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        key = lst[0]\n        value = lst[1:]\n        nested_dict[key] = value\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        if not isinstance(lst, list):\n            raise ValueError(\"All input lists should be of type list\")\n        for j, item in enumerate(lst):\n            if not isinstance(item, dict):\n                if isinstance(item, (int, float, str)):\n                    key = f\"{i}.{j}\"\n                    result[key] = item\n                else:\n                    raise ValueError(\"All items in all lists should be dictionaries or of types int, float, str\")\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty nested dictionary to store results\n    result = {}\n    \n    # iterate over each list and add items to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Get the keys and values from the current list\n        key = l1[i]\n        value = l2[i]\n        # Check if the current key is already in the result dictionary\n        if key in result:\n            # If it is, add the value to the list associated with that key\n            result[key].append(value)\n        else:\n            # If it's not, create a new dictionary for that key and add the value to it\n            result[key] = [value]\n    # Loop through each list\n    for i in range(len(l3)):\n        # Get the keys and values from the current list\n        key = l3[i][0]\n        value = l3[i][1]\n        # Check if the current key is already in the result dictionary\n        if key in result:\n            # If it is, add the value to the list associated with that key\n            result[key].append(value)\n        else:\n            # If it's not, create a new dictionary for that key and add the value to it\n            result[key] = [value]\n    # Return the final result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create empty dictionary to store the data\n    data = {}\n    # Loop through each list and add keys and values to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = l2[i]\n        data[l1[i]] = {l3[i]: l3[i+1]}\n    # Return the converted dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary with keys from l1, l2, and l3\n    nested_dict = {key: [] for key in l1}\n    nested_dict.update({key: [] for key in l2})\n    nested_dict.update({key: [] for key in l3})\n    \n    # Loop through each element of each list and append it to the corresponding nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]].append(l2[i])\n    for i in range(len(l1)):\n        nested_dict[l2[i]].append(l3[i])\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Function to convert a list to a dictionary\n    def list_to_dict(lst):\n        return dict(zip(lst[0], lst[1:]))\n    \n    # Convert the first list to a dictionary\n    d1 = list_to_dict(l1)\n    \n    # Convert the second list to a dictionary\n    d2 = list_to_dict(l2)\n    \n    # Convert the third list to a dictionary\n    d3 = list_to_dict(l3)\n    \n    # Merge all dictionaries into one\n    merged_dict = {**d1, **d2, **d3}\n    \n    return merged_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Check if n is 1 or 2\n    if n == 1 or n == 2:\n        return n\n    \n    # Calculate the sum of f(n/2) to f(n/5)\n    sum_of_n_div_2_to_n_div_5 = n/2 * (n/2 + n/3 + n/4 + n/5)\n    \n    # Calculate the sum of f(n/2) to f(n)\n    sum_of_n_div_2_to_n = sum_of_n_div_2_to_n_div_5 + n\n    \n    # Return the maximum sum\n    return max(sum_of_n_div_2_to_n_div_5, sum_of_n_div_2_to_n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 5:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize a variable to store the maximum length\n    max_len = 0\n    \n    # Loop through each element in the input_list\n    for elem in input_list:\n        # Check if the length of the current element is greater than the maximum length\n        if len(elem) > max_len:\n            # If yes, update the maximum length\n            max_len = len(elem)\n    \n    # Return the list with maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    result = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of integers as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list[1:]:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    set_tup = set(test_tup)\n    # check if set has more than one element\n    if len(set_tup) > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a dictionary to store the unique elements\n    unique_dict = {}\n    # Loop through the elements of the tuple\n    for element in test_tup:\n        # If the element already exists in the dictionary, return False\n        if element in unique_dict:\n            return False\n        # Add the element to the dictionary\n        unique_dict[element] = True\n    # If no duplicates were found, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    The first non-repeated character in the string, or None if there is no such character.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character\n    freq = {}\n\n    # loop through the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # loop through the string again to find the first non-repeating character\n    for char in str1:\n        # if the character is not already in the dictionary, it is the first non-repeating character\n        if char not in freq:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    first_non_repeating_char = None\n    for char in char_dict:\n        if char_dict[char] == 1:\n            first_non_repeating_char = char\n            break\n    \n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there is no non-repeating character in the string, it returns None.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # Iterate over each character in the string again to find the first non-repeating character\n    for char in str1:\n        # If the character has a frequency of 1 in the dictionary, return it\n        if char_freq[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string and returns the first non-repeated character in it.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the character count\n    char_count = {}\n\n    # Traverse through the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Traverse through the dictionary and find the first non-repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"There is no non-repeating character in the given string.\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    sorted_nums = sorted([a, b, c])\n    mid = len(sorted_nums) // 2\n    if len(sorted_nums) % 2 == 0:\n        return (sorted_nums[mid - 1] + sorted_nums[mid]) / 2\n    else:\n        return sorted_nums[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    length = len(sorted_numbers)\n    middle_index = length // 2\n\n    if length % 2 == 0:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of those numbers.\n    The median is the middle number if the numbers are sorted in ascending order,\n    and the middle number if the numbers are sorted in descending order.\n    '''\n    # Sort the input numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the middle index of the sorted numbers\n    mid_index = len(sorted_nums) // 2\n\n    # If the length of the sorted numbers is odd, the median is the middle number\n    if len(sorted_nums) % 2 == 1:\n        return sorted_nums[mid_index]\n    # If the length of the sorted numbers is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_nums[mid_index - 1] + sorted_nums[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_sorted = sorted([a,b,c])\n    median = a_sorted[len(a_sorted)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    mid = len(numbers)//2\n    if len(numbers)%2 == 0:\n        return (numbers[mid-1]+numbers[mid])/2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Find the middle index\n    mid = len(nums) // 2\n    \n    # If there are odd numbers, the median is the middle number\n    if len(nums) % 2 == 1:\n        return nums[mid]\n    # If there are even numbers, the median is the average of the two middle numbers\n    else:\n        return (nums[mid-1] + nums[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Finding the middle index of the sorted array\n    middle_index = len(sorted_numbers) // 2\n\n    # Finding the median of the sorted array\n    if middle_index % 2 == 0:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the middle index of the sorted array\n    middle_index = len(sorted_numbers) // 2\n    # Find the median by taking the middle two values\n    median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the middle index\n    middle_index = len(numbers) // 2\n    \n    # Return the median\n    if len(numbers) % 2 == 0:\n        # Find the mean of the two middle numbers\n        mean = (numbers[middle_index - 1] + numbers[middle_index]) / 2\n        return mean\n    else:\n        return numbers[middle_index]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        num = str(num)\n        sum_of_digits += sum([int(digit) for digit in num])\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        # convert each number to a string and loop through its characters to sum up the digits\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(num)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(num)) for num in nums])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] ^ test_tup2[i]:\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result_tup += (test_tup1[len(test_tup2):] ^ test_tup1[:len(test_tup2)],)\n    elif len(test_tup2) > len(test_tup1):\n        result_tup += (test_tup2[len(test_tup1):] ^ test_tup2[:len(test_tup1)],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty tuple to store the result\n    result = ()\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the current element from the first tuple\n        elem1 = test_tup1[i]\n        # Extract the current element from the second tuple\n        elem2 = test_tup2[i]\n        # Perform the mathematical bitwise xor operation\n        xor_result = elem1 ^ elem2\n        # Append the result to the result tuple\n        result += (xor_result,)\n        \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with all zeros\n    result_tup = (0, 0, 0, 0)\n    \n    # Iterate through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n        \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in it.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of unique tuples in the given list.\n    '''\n\n    # Set an empty dictionary to store unique tuples\n    unique_tuples = {}\n\n    # Iterate through each tuple in the list\n    for tuple_in_list in test_list:\n        # Check if the tuple is already in the dictionary\n        if tuple_in_list in unique_tuples:\n            # If it is, increment the count by 1\n            unique_tuples[tuple_in_list] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            unique_tuples[tuple_in_list] = 1\n\n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create a set of tuples to store unique tuples\n    unique_tuples = set()\n    \n    # loop through the list and add each unique tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n        \n    # return the length of the set, which will be the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n\n    for item in test_list:\n        if type(item) == tuple:\n            unique_tuples.add(item)\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each tuple\n    freq = {}\n\n    # Iterate over each element in the list\n    for element in test_list:\n        # Check if the element is already in the dictionary\n        if element in freq:\n            # Increment the count for this tuple\n            freq[element] += 1\n        else:\n            # Add the element to the dictionary with a count of 1\n            freq[element] = 1\n\n    # Return the total number of unique tuples in the list\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize a new empty tuple to store the result\n    result = ()\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n\n        # Extract the value of the current element from the first tuple\n        first_value = test_tup1[i]\n\n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n\n            # Extract the value of the current element from the second tuple\n            second_value = test_tup2[i][j]\n\n            # Perform the addition of the two values and append the result to the result tuple\n            result = result + (first_value + second_value,)\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of first tuple is not equal to the length of second tuple\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        try:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n        except IndexError:\n            print(\"Error: Index out of range in tuple\")\n            return\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x, y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Initialize an empty nested tuple\n    result_tup = ()\n    \n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store the elements of the nested tuple\n        sub_list = []\n        \n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the elements at the current index of both tuples\n            sub_list.append(test_tup1[i][j] + test_tup2[i][j])\n            \n        # Add the nested tuple to the result tuple\n        result_tup = result_tup + ((sub_list,),(i,))\n    \n    # Return the final result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup1[i], tuple) and not isinstance(test_tup2[i], tuple):\n            result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup2[i], tuple) and not isinstance(test_tup1[i], tuple):\n            result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different number of elements.\")\n        return\n    \n    # Initialize a new empty tuple with the same number of elements as the first tuple\n    result = tuple(0 for i in range(len(test_tup1)))\n    \n    # Perform index wise addition of tuple elements in the two given tuples\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] + test_tup2[i]\n    \n    # Return the resultant tuple\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n\n    Args:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The minimum of the two numbers.\n\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} is present in tuple1.\")\n    else:\n        print(f\"{tuplex} is not present in tuple1.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(tuplex, \"exists in tuple1\") \n    else: \n        print(tuplex, \"does not exist in tuple1\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    This function takes in two tuples and returns True if the element exists within the first tuple, and False otherwise.\n\n    Args:\n        tuplex (tuple): The first tuple to search.\n        tuple1 (tuple): The second tuple to search within.\n\n    Returns:\n        bool: True if the element exists within the first tuple, and False otherwise.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The parity of {} is even\".format(x)\n    else:\n        return \"The parity of {} is odd\".format(x)\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: #if the number is even, then the parity is even\n        return \"Even\"\n    else: #if the number is odd, then the parity is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        print(\"The parity of\", x, \"is even.\") \n    else: \n        print(\"The parity of\", x, \"is odd.\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number x as input and returns True if the parity of x is odd and False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity is odd and False otherwise.\n    '''\n\n    # Calculate the parity of the given number\n    parity = 0\n    if x < 0:\n        parity = 1\n    elif x > 0:\n        parity = 0\n\n    # Check if the parity is odd\n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    sorted_digits = sorted(digits, reverse=True)\n    max_digit = sorted_digits[0]\n    for i in range(len(sorted_digits)):\n        if sorted_digits[i] < max_digit:\n            max_digit = sorted_digits[i]\n            break\n    bigger_number = 0\n    for i in range(len(sorted_digits)):\n        if sorted_digits[i] == max_digit:\n            bigger_number += (10 ** i)\n    return bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    while n % 10 == 0:\n        n = n // 10\n    \n    prev_digit = n % 10\n    n = n // 10\n    \n    while n > 0:\n        digit = n % 10\n        \n        if digit > prev_digit:\n            break\n        \n        n = n // 10\n    \n    next_digit = n * 10\n    return next_digit + prev_digit"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # split the string into digits\n    digits = [int(digit) for digit in num_str]\n    # reverse the digits\n    digits.reverse()\n    # create a new string with the digits in reverse order\n    num_str = ''.join(map(str, digits))\n    # convert the new string back to an integer\n    new_num = int(num_str)\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the number of digits in n\n    num_digits = len(str(n))\n\n    # Create a list of digits in n\n    num_digits_list = [int(digit) for digit in str(n)]\n\n    # Find the index of the first digit that is smaller than n\n    for i in range(num_digits):\n        if num_digits_list[i] < n:\n            break\n\n    # Find the index of the last digit that is greater than or equal to n\n    for j in range(num_digits - 1, -1, -1):\n        if num_digits_list[j] >= n:\n            break\n\n    # Rearrange the digits in the list\n    num_digits_list[i], num_digits_list[j] = num_digits_list[j], num_digits_list[i]\n\n    # Create the next bigger number by converting the list back to a number\n    next_bigger_num = int(\"\".join(map(str, num_digits_list)))\n\n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    digits = [int(digit) for digit in num]\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] == 9:\n            digits[i] = 0\n            digits[i+1] += 1\n            break\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    \n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(map(str, digits)))\n    \n    # If the largest number is the last digit, create a new one\n    return 10 * int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Finding the digits of the given number\n    digits = list(str(n))\n\n    # Reverse the digits of the number\n    digits.reverse()\n\n    # Finding the maximum digit and its index\n    max_digit = max(digits)\n    max_digit_index = digits.index(max_digit)\n\n    # Reversing the digits from the maximum digit index to the end\n    digits[max_digit_index:] = digits[:max_digit_index][::-1]\n\n    # Finding the sum of the digits\n    total_sum = sum(int(digit) for digit in digits)\n\n    # Adding 1 to the total sum\n    total_sum += 1\n\n    # Creating a new number with the same digits but the same sign\n    new_number = total_sum * (-1) ** (len(digits) - 1)\n\n    # Returning the new number\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Find the last digit of the input number\n    last_digit = n % 10\n\n    # Find the maximum number that can be formed by rearranging the digits of the input number\n    max_number = 9 * last_digit + 9\n\n    # Create a list of all possible rearrangements of the digits of the input number\n    rearrangements = [i * last_digit + last_digit for i in range(1, max_number + 1)]\n\n    # Find the smallest possible rearrangement that is greater than or equal to the input number\n    min_rearrangement = min(rearrangements, key=lambda x: x - n)\n\n    # Return the smallest possible rearrangement that is greater than or equal to the input number\n    return min_rearrangement"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string and split it into individual digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Check if the number is already the biggest possible number\n    max_digits = [9 for i in range(len(digits))]\n    if digits == max_digits:\n        return n\n\n    # Find the index of the maximum digit\n    max_index = digits.index(max(digits))\n\n    # Initialize the new number by copying the digits except the maximum one\n    new_digits = digits[:max_index] + digits[max_index+1:]\n\n    # Convert the new number to an integer and check if it's the biggest possible number\n    new_number = int(''.join(str(digit) for digit in new_digits))\n    max_new_digits = [9 for i in range(len(new_digits))]\n    if new_number == int(''.join(str(digit) for digit in max_new_digits)):\n        return new_number\n\n    # Increment the maximum digit by one\n    for i in range(max_index, len(new_digits)-1):\n        if new_digits[i]!= new_digits[i+1]:\n            new_digits[i] += 1\n            break\n\n    # Convert the new number back to a string and add the original number to it\n    return str(int(''.join(str(digit) for digit in new_digits))) + str(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n\n    # Convert the given number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the index of the largest digit\n    index = digits.index(max(digits))\n\n    # Convert the digits list into a string and split it into two parts\n    part1 = \"\".join(str(digit) for digit in digits[:index])\n    part2 = \"\".join(str(digit) for digit in digits[index+1:])\n\n    # Convert the parts into integers and add them up\n    part1 = int(part1)\n    part2 = int(part2)\n    next_bigger = part1 + part2\n\n    # Convert the result back to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a dictionary to store the minimum element of each array\n    min_dict = {}\n    for num in nums1:\n        if num not in min_dict or min_dict[num] > nums2[0]:\n            min_dict[num] = nums2[0]\n    \n    # create a heap to store the minimum pairs\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, min_dict[num]))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # find k smallest pairs\n    pairs = []\n    while heap:\n        pair = heapq.heappop(heap)\n        if len(pairs) < k:\n            pairs.append(pair)\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    \n    # Convert the given lists into sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # Sort the elements from both the arrays\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # Fill the min_heap with the first k elements of nums1 and nums2\n    for i in range(k):\n        heapq.heappush(heap, (-nums1[i], nums2[i]))\n        heapq.heappush(min_heap, (-nums1[i], -nums2[i]))\n    \n    # Add the remaining elements of nums1 and nums2 into the min_heap\n    for i in range(k, len(nums1)):\n        while len(heap) > 0 and -heap[0][0] >= nums1[i]:\n            heapq.heappop(heap)\n        heapq.heappush(heap, (-nums1[i], nums2[i]))\n        while len(min_heap) > 0 and -min_heap[0][0] >= nums1[i]:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (-nums1[i], -nums2[i]))\n    \n    # Return the k smallest pairs\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1, num2))\n            else:\n                if num1 + num2 > heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num1, num2))\n    result = []\n    for _ in range(k):\n        result.append(heap[0])\n        heapq.heappop(heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert both lists to sets for faster lookups\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    # create a min heap to store the minimum element from each list\n    min_heap1 = []\n    min_heap2 = []\n    # iterate through the lists\n    for i in nums1:\n        # add i to the min_heap1\n        heapq.heappush(min_heap1, i)\n        # if min_heap1 has more than k elements, remove the minimum element from min_heap2 and add it to min_heap1\n        while len(min_heap1) > k:\n            heapq.heappop(min_heap2)\n    # iterate through the lists\n    for j in nums2:\n        # add j to the min_heap2\n        heapq.heappush(min_heap2, j)\n        # if min_heap2 has more than k elements, remove the minimum element from min_heap1 and add it to min_heap2\n        while len(min_heap2) > k:\n            heapq.heappop(min_heap1)\n    # convert min_heap1 and min_heap2 back to lists\n    result = []\n    while len(min_heap1) > 0:\n        result.append(heapq.heappop(min_heap1))\n    while len(min_heap2) > 0:\n        result.append(heapq.heappop(min_heap2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    for num in nums2:\n        if len(min_heap) == k:\n            if min_heap[0] > num:\n                heapq.heappop(min_heap)\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the current pair's value\n            pair_value = (num1, num2)\n            # Add the pair to the min heap if the heap is not full\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, pair_value)\n            # Otherwise, if the heap is full, compare the pair's value with the smallest one in the heap and remove the smallest one if needed\n            else:\n                smallest_pair = heapq.heappop(min_heap)\n                if pair_value < smallest_pair:\n                    heapq.heappush(min_heap, pair_value)\n    \n    # Extract the k smallest pairs from the min heap and return them\n    k_smallest_pairs = []\n    for _ in range(k):\n        k_smallest_pairs.append(heapq.heappop(min_heap))\n    \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Convert the two arrays into a single list\n    nums = nums1 + nums2\n    \n    # Sort the list\n    nums.sort()\n    \n    # Initialize the result list and a priority queue to store the smallest k pairs\n    result = []\n    min_heap = []\n    \n    # Iterate through the sorted list\n    for i in range(len(nums)):\n        # Check if the priority queue is empty or if the sum of the smallest element from the two arrays is greater than the current number\n        if len(min_heap) == 0 or nums[i] + min_heap[0][1] > nums[i]:\n            # Add the current element to the priority queue\n            heapq.heappush(min_heap, (nums[i], i))\n            # If the length of the priority queue is greater than or equal to k, remove the last element from the priority queue\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n        # If the priority queue is not empty and the sum of the smallest element from the two arrays is less than or equal to the current number, add the current element to the result list\n        if len(min_heap) > 0 and nums[i] + min_heap[0][1] <= nums[i]:\n            result.append((min_heap[0][0], nums[i]))\n            # Remove the smallest element from the priority queue and add the current element\n            heapq.heappop(min_heap)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \n    Args:\n        nums1 (list[int]): A list of integers representing the first array.\n        nums2 (list[int]): A list of integers representing the second array.\n        k (int): The number of pairs to find.\n        \n    Returns:\n        list[list[int]]: A list of lists, where each inner list contains two integers representing one pair of elements from the first and second arrays.\n    \"\"\"\n    # Sort the arrays in non-descending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Create a min heap to store the pairs of elements\n    min_heap = []\n    \n    # Initialize two pointers, one for each array, pointing to the first element\n    i = 0\n    j = 0\n    \n    # Iterate over the pairs of elements until we have found k pairs\n    while k > 0:\n        # Check if the current pair of elements is in the min heap\n        if i < len(nums1) and j < len(nums2) and nums1[i] + nums2[j] < -nums1[i] - nums2[j]:\n            # If it is, pop the smallest pair from the heap and add it to the result list\n            pair = heapq.heappop(min_heap)\n            result.append(pair)\n            k -= 1\n            # Increment both pointers\n            i += 1\n            j += 1\n        elif i < len(nums1) and j < len(nums2) and nums1[i] + nums2[j] > -nums1[i] - nums2[j]:\n            # If it is not, add the current pair to the min heap\n            heapq.heappush(min_heap, [nums1[i], nums2[j]])\n            # Increment the pointer for the smaller array\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        elif i == len(nums1) and j < len(nums2) and -nums1[i] - nums2[j] > -nums1[i] - nums2[j]:\n            # If the current pair is the last one in the first array and the next element in the second array is smaller than the current element,\n            # add the current pair to the min heap\n            heapq.heappush(min_heap, [nums1[i], nums2[j]])\n            # Increment the pointer for the smaller array\n            j += 1\n        elif i < len(nums1) and j == len(nums2) and -nums1[i] - nums2[j] > -nums1[i] - nums2[j]:\n            # If the current pair is the last one in the second array and the next element in the first array is smaller than the current element,\n            # add the current pair to the min heap\n            heapq.heappush(min_heap, [nums1[i], nums2[j]])\n            # Increment the pointer for the larger array\n            i += 1\n        else:\n            # If the current pair is the last one in both arrays, the heap is empty, and the next element in the first array is larger than the current element,\n            # add the current pair to the min heap\n            heapq.heappush(min_heap, [nums1[i], nums2[j]])\n            # Increment the pointer for the larger array\n            i += 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            elif (num1 + num2) < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a heap to keep track of the smallest k numbers\n    min_heap = []\n\n    # Iterate through each element in the first array\n    for num1 in nums1:\n        # If the heap is not full, add the current element to it\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num1)\n        # If the heap is full and the current element is less than the smallest element in it, replace the smallest element in the heap with the current element\n        elif num1 < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num1)\n\n    # Iterate through each element in the second array\n    for num2 in nums2:\n        # If the heap is not empty, add the current element to it\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num2)\n        # If the heap is empty and the current element is greater than the smallest element in it, replace the smallest element in the heap with the current element\n        elif num2 > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num2)\n\n    # Return the smallest k numbers from the two arrays\n    return min_heap[:k]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Find the length of the list\n    n = len(list1)\n\n    # Initialize the minimum product as infinity\n    min_product = float('inf')\n\n    # Initialize two variables to store the first and second elements of the tuples\n    first = second = float('inf')\n\n    # Iterate through the list\n    for i in range(n):\n        # Find the first element of the current tuple\n        first = list1[i][0]\n\n        # Iterate through the remaining elements of the list\n        for j in range(i+1, n):\n            # Find the second element of the current tuple\n            second = list1[j][0]\n\n            # Find the product of the two elements\n            product = first * second\n\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Given a list of tuples, find the minimum product of any two pairs of tuples.\n\n    Args:\n        list1 (list): A list of tuples\n\n    Returns:\n        int: The minimum product of any two pairs of tuples within the list\n\n    \"\"\"\n\n    min_product = float('inf')  # initialize the minimum product to infinity\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            min_product = min(min_product, product)\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize minimum product and variables to keep track of current min and max products\n    min_product = float('inf')\n    current_min_product = float('inf')\n    max_product = float('-inf')\n    current_max_product = float('-inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the two tuples\n        current_product = list1[i][0] * list1[i][1]\n        # Update the minimum product if the current product is smaller\n        if current_product < min_product:\n            min_product = current_product\n            current_min_product = list1[i][0] * list1[i][1]\n        # Update the maximum product if the current product is larger\n        if current_product > max_product:\n            max_product = current_product\n            current_max_product = list1[i][0] * list1[i][1]\n    # Return the minimum product tuple\n    return (current_min_product, current_max_product)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Find the length of the list\n    n = len(list1)\n    # Initialize variables to keep track of the minimum product and the indices of the minimum pair\n    min_product = float('inf')\n    min_pair = []\n    # Loop through the list and find the minimum product among all pairs of tuples\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the product of the two tuples and update the minimum product and indices if necessary\n            product = tuple(list1[i]) * tuple(list1[j])\n            if product < min_product:\n                min_product = product\n                min_pair = [i, j]\n    # Return the minimum product and indices of the minimum pair\n    return min_product, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product variable\n    min_product = float('inf')\n    \n    # Loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it's less than the current minimum product\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # If the list is empty, return None\n    if not listval:\n        return None\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n    # Iterate through the rest of the list and update the minimum value if necessary\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        # Find the minimum value in the remaining elements of the list\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as an argument and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous data types as input and returns the minimum value in the list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = None\n\n    # Iterate over each element in the list\n    for val in listval:\n        # If this element is less than the current minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n\n    # Return the minimum value found in the list\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create an empty list to store the minimum value\n    min_list = []\n\n    # iterate over each value in the list\n    for value in listval:\n        # check if the value is smaller than the minimum value found so far\n        if value < min(min_list):\n            # if it is, append the new value to the list\n            min_list.append(value)\n\n    # return the minimum value found in the list\n    return min(min_list)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value variable with first element of the list\n    min_val = listval[0]\n    # loop through the list and update minimum value variable if a smaller element is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in the list.\n    \"\"\"\n    # Initialize the minimum value to the first element of the list\n    min_val = lst[0]\n    # Iterate over the rest of the list\n    for i in range(1, len(lst)):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if lst[i] < min_val:\n            min_val = lst[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"Empty list\")\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval[1:]:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)')\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert the given string to snake case\n    snake_case = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # Convert the snake case string to camel case\n    camel_case = re.sub(r'([a-z])_([a-z0-9])', r'\\1\\2', snake_case)\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case using regular expressions\n    s1 = re.sub('([A-Z]+)([A-Z][a-z]+)', r'\\1_\\2', word)\n    s2 = re.sub('([a-z\\d])([A-Z])', r'\\1_\\2', s1)\n    # Remove prefix and suffix underscores\n    return s2.lstrip('_').rstrip('_')"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n\n    # Convert snake case to camel case\n    camel_case = re.sub(r'(_\\w)', lambda x: x.group(1).upper(), word)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    pattern = r'([a-z])([A-Z])'\n    camel_case = re.sub(pattern, r'\\1_\\2', word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, c in enumerate(word):\n        if c.isupper():\n            camel_case += c.lower()\n        else:\n            camel_case += c.upper()\n        if i < len(word) - 1 and word[i+1].islower():\n            camel_case += '_'\n    return camel_case.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word\n    camel_case_words = [word[0].upper() + word[1:].lower() for word in words]\n    # Join the camel case words into a single string\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Convert all letters to lowercase\n    word = word.lower()\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [w.capitalize() for w in words]\n    # Join the words with an underscore\n    camel_word = ''.join(words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake_case string to camelCase string.\n\n    Parameters:\n    word (str): A snake_case string.\n\n    Returns:\n    camelCase string: A camelCase string corresponding to the input snake_case string.\n    '''\n\n    # Convert snake_case to CamelCase\n    camel_case = ''.join([word[0].upper(), word[1:].lower()])\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)(?=[A-Z])')\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_list = []\n    for num in l:\n        if num % 2 == 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to hold the even numbers\n    evens = []\n    # loop through the input list\n    for num in l:\n        # if the number is even, add it to the evens list\n        if num % 2 == 0:\n            evens.append(num)\n    # return the evens list\n    return evens"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0: # checking if the number is even or odd\n            result.append(num) # if it's even, appending it to the result list\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if n is valid\n    if n < 1 or n > len(list1):\n        return None\n    \n    # extract the nth element and return it\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n-1:\n            return list1[i][1]\n        elif i < n-1:\n            return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1) == list and type(n) == int and n > 0:\n        return list1[n-1]\n    else:\n        print(\"Invalid input type(s).\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n\n    # Use a for loop to iterate over each tuple in the list\n    for i in range(len(list1)):\n        # Use the nth index to extract the nth element from the tuple\n        if n == i:\n            return list1[i]\n\n    # If the nth element is not found, return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        # Check if the input is a list of tuples\n        if type(list1)!= list:\n            raise TypeError(\"Input must be a list of tuples.\")\n\n        # Check if the input is a positive integer\n        if not isinstance(n, int) or n <= 0:\n            raise ValueError(\"Input must be a positive integer.\")\n\n        # Check if the list has at least n elements\n        if len(list1) < n:\n            raise IndexError(\"List does not have enough elements.\")\n\n        # Extract the nth element from the list\n        return list1[n-1][1]\n\n    except IndexError:\n        print(\"List does not have enough elements.\")\n    except ValueError:\n        print(\"Input must be a positive integer.\")\n    except TypeError:\n        print(\"Input must be a list of tuples.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # Check if n is valid\n    if n >= length:\n        print(\"Invalid index. Index out of range.\")\n    else:\n        # Extract the nth element\n        element = list1[n-1][0]\n        print(\"The\", n, \"element of the list is:\", element)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set for each sequence\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the two sets\n    intersect = set1.intersection(set2)\n    # Check if the intersection is empty or not\n    if intersect:\n        # Return True if there is overlap\n        return True\n    else:\n        # Return False if there is no overlap\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1: A sequence of values.\n        list2: Another sequence of values.\n\n    Returns:\n        A boolean indicating whether any value in list1 is also in list2.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    '''\n    for element in list1:\n        if element in list2:\n            print(f'{element} exists in list2')\n            return True\n    print('No overlapping values found')\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = arr[0]\n    max_2 = arr[0]\n    min_1 = arr[0]\n    min_2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n        elif arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n    \n    return (max_1 * max_2, max_1 * min_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    # initializing variables\n    max1 = arr[0]\n    max2 = max1\n    min1 = arr[0]\n    min2 = arr[0]\n\n    # iterating through the array\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    # returning the maximum product\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the maximum product pair\n    max_pair = [arr[0], arr[1]]\n    max_product = max(arr[0] * arr[1], arr[1] * arr[2])\n\n    # Find the second maximum product pair\n    for i in range(2, len(arr) - 2):\n        second_max = max(max_pair[0] * arr[i], max_pair[1] * arr[i], arr[i] * arr[i + 1], arr[i] * arr[i + 2], arr[i] * arr[i - 1], arr[i] * arr[i - 2])\n        if second_max > max_product:\n            max_product = second_max\n            max_pair = [arr[i - 2], arr[i - 1]]\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair of integers with the highest product.\n    '''\n    arr.sort()\n    max_product = arr[-1] * arr[-2]\n    min_product = arr[0] * arr[1]\n    return max(max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1:\n        return arr[0], arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1]), min(arr[0], arr[1])\n    else:\n        arr.sort()\n        if arr[0] * arr[-1] > arr[-1] * arr[-2]:\n            return arr[-1] * arr[-2], arr[0] * arr[1]\n        else:\n            return arr[0] * arr[1], arr[-1] * arr[-2]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max1, max2, min1, min2 = float('-inf'), float('-inf'), float('inf'), float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = []\n    min_product = float('inf')\n    min_product_pair = []\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_pair = [i, arr[i]]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_product_pair = [i, arr[i]]\n    return max_product_pair, min_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the pair with the highest product from the array.\n    \"\"\"\n    # Initialize two variables to keep track of the largest and second largest product\n    largest = arr[0]\n    second_largest = arr[1]\n\n    # Iterate through the array and update the largest and second largest variables if a new product is found\n    for i in range(2, len(arr)):\n        if arr[i] > largest:\n            second_largest = largest\n            largest = arr[i]\n        elif arr[i] > second_largest and arr[i]!= largest:\n            second_largest = arr[i]\n\n    # Return the pair with the highest product\n    return (largest, second_largest)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the count of each first element\n    count_dict = {}\n\n    # Iterate over each tuple in the list\n    for i in Input:\n        # Get the first element of the tuple\n        first_element = i[0]\n\n        # If the first element is not in the dictionary, initialize its count to 1\n        if first_element not in count_dict:\n            count_dict[first_element] = 1\n        # Otherwise, increment the count by 1\n        else:\n            count_dict[first_element] += 1\n\n    # Find the common first element with the maximum count\n    common_element = None\n    max_count = 0\n    for i in count_dict:\n        if count_dict[i] > max_count:\n            max_count = count_dict[i]\n            common_element = i\n\n    # Return the common first element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in Input:\n        if len(i) > 1 and i[0] in common_list:\n            continue\n        common_list.append(i[0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_first_elements.append(Input[i])\n                common_first_elements.append(Input[j])\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if item[0] == common_element:\n            common_element = None\n        elif common_element is None:\n            common_element = item[0]\n    return common_element\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuples = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_tuples.append((Input[i][0], (Input[i], Input[j])))\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty list to store the common first element of each tuple\n    common_elements = []\n    \n    # Iterate through the list of tuples\n    for i in range(len(Input)):\n        # Find the first element in each tuple\n        element = Input[i][0]\n        \n        # Check if the element is already present in the common_elements list\n        if element in common_elements:\n            # If it is, add the index of the current tuple to the list\n            common_elements.append(i)\n        else:\n            # If it's not, add it to the list\n            common_elements.append(element)\n    \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common.append(i[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        elif common_element!= item[0]:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    where each tuple contains only the common first element in the input list.\n    '''\n    # Initialize a dictionary to store the count of each common first element\n    first_count = {}\n\n    # Loop through each tuple in the input list\n    for t in Input: \n        # Get the first element of the tuple\n        first = t[0]\n\n        # If the first element is not in the dictionary, add it with a count of 1\n        if first not in first_count: \n            first_count[first] = 1\n        # If the first element is already in the dictionary, increment its count\n        else: \n            first_count[first] += 1\n\n    # Initialize an empty list to store the output tuples\n    output = []\n\n    # Loop through each tuple in the input list\n    for t in Input: \n        # Get the first element of the tuple\n        first = t[0]\n\n        # If the first element is present in the dictionary, append the tuple to the output list\n        if first in first_count: \n            output.append(t)\n\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for tuple in Input: \n        if tuple[0] not in first_element: \n            first_element.append(tuple[0])\n    return first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an input and returns the element with maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    # Find the length of the list\n    length = len(lst)\n    # Initialize a variable to keep track of the maximum length\n    max_len = 0\n    # Initialize a variable to keep track of the maximum element\n    max_elem = None\n    # Loop through the list\n    for i in range(length):\n        # Find the length of the current element\n        cur_len = len(lst[i])\n        # If the current length is greater than the maximum length\n        if cur_len > max_len:\n            # Update the maximum length and element\n            max_len = cur_len\n            max_elem = lst[i]\n    # Return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        length = len(i)\n        if length > max_length:\n            max_length = length\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list \n    having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    # Iterate through the list\n    for i in lst:\n        \n        # Check if the length of the element is greater than the current max_len\n        if len(i) > max_len:\n            \n            # Update the max_len and max_element\n            max_len = len(i)\n            max_element = i\n    \n    # Return the max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(str(elem)) > max_length:\n            max_length = len(str(elem))\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list having the maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n    \n    # iterate over the list and update the max_length and max_element variables accordingly\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = max(len(s) for s in lst)\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    # initialize variables to store the maximum length and the maximum element\n    max_length = 0\n    max_element = None\n    # loop through the list and update the maximum length and maximum element\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    # return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    # finding the length of the longest element of the list\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n\n    # returning the longest element of the list\n    return max_element\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    total = sum([round(x) for x in lst])\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(x) for x in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_of_cubes = 0\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the first n even natural numbers\n    while count < n:\n        # Add the cube of the current number to the sum of cubes\n        sum_of_cubes += count ** 3\n        \n        # Increment the counter variable\n        count += 1\n    \n    # Return the sum of cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_cubes = []\n    for i in range(2, n+1, 2):\n        even_cubes.append(i**3)\n    return sum(even_cubes)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(n):\n        count += 1\n        sum += count**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of the first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum and cube sum variables to zero\n    cube_sum = 0\n    sum_of_cubes = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+2, 2):\n        # add the cube of the current number to the cube sum\n        cube_sum += i**3\n        # add the current number to the sum of cubes\n        sum_of_cubes += i\n    \n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0 \n    i = 1 \n    while i <= n:\n        if i%2 == 0:\n            sum_of_cubes += i**3\n        i += 1\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_numbers = [2*i+1 for i in range(n)]\n    cube_sum = sum([i**3 for i in even_numbers])\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    #initialize sum variable to zero\n    sum = 0\n\n    #loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        #calculate the cube of the current number\n        cube = i ** 3\n        #add the cube to the sum\n        sum += cube\n        \n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for i in test_tup:\n        concatenated_str += str(i) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    '''\n    Write a function to concatenate each element of tuple by the given delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the number\n        cube = i ** 3\n\n        # add the cube to the sum\n        sum_of_cubes += cube\n\n    # find the average of cubes and return it\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing the sum and count variables\n    sum_cube = 0\n    count = 0\n\n    # looping from 1 to n and finding the cubes of each number and adding it to the sum variable\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum_cube += cube\n        count += 1\n\n    # finding the average of the cubes by dividing the sum by the count\n    average = sum_cube/count\n\n    # printing the result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    # finding the sum of cubes of natural numbers from 1 to n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # calculating the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    average = sum(cubes) / len(cubes)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    return sum / n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_cubes = 0\n    for i in range(1, n+1):\n        total_cubes += i**3\n    return total_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize the sum of cubes to zero\n    sum_of_cubes = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the current number and add it to the sum of cubes\n        sum_of_cubes += i**3\n\n    # calculate the average of cubes and return the result\n    average = sum_of_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize variables\n    count = 0\n    sum = 0\n\n    # calculate sum of cubes\n    for i in range(n):\n        sum += i**3\n        count += 1\n\n    # calculate average of cubes\n    average = sum/count\n\n    # return the average\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(rear_index(item) for item in test_tuple)\n\ndef rear_index(string):\n    '''\n    Helper function to extract the rear index element of a string.\n    '''\n    return string[-1]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    return [test_tuple[i][rear_index] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_index_list.append(item)\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[::-1][1:])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element x as input. It counts the number of sublists \n    in the list that contain the element x.\n\n    Input:\n    - list1: A list of sublists.\n    - x: The element that we want to count.\n\n    Output:\n    - The number of sublists containing the element x.\n\n    Example:\n    - list1 = [[1,2,3],[4,5,6],[7,8,9]]\n    - x = 5\n    - Output: 2\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for i in list1:\n        if x in i:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list of odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # iterate over the list and append only the odd numbers to a new list\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    # return the new list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match date format in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Find all matches of the regular expression in the date string\n    matches = re.findall(pattern, dt)\n    # Convert each date string from yyyy-mm-dd format to dd-mm-yyyy format\n    new_dt = [f'{d[2]}/{d[1]}/{d[0]}' for d in matches]\n    # Join the new date strings with a comma separator\n    result = ', '.join(new_dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    return yyyy_mm_dd.group(3)+'-'+yyyy_mm_dd.group(2)+'-'+yyyy_mm_dd.group(1)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyymmdd = re.sub('-', '', dt)\n    new_date = yyyymmdd[:2] + '-' + yyyymmdd[2:4] + '-' + yyyymmdd[4:]\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() function to replace the year, month, and day with the desired format\n    return re.sub(pattern, lambda m: m.group(3)+m.group(2)+m.group(1), dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define a regular expression pattern for matching a date in the yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # search the input string for a match to the pattern\n    match = re.search(pattern, dt)\n    # if a match is found, extract the year, month, and day from the match object\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # construct a new date string in the dd-mm-yyyy format\n        new_dt = f'{day}-{month}-{year}'\n        # return the new date string\n        return new_dt\n    # if no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.sub() function to replace the matched pattern with the desired format\n    result = re.sub(pattern, r'\\g<2>-\\g<1>-\\g<0>', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching a date string in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the pattern to match the date string in the input string\n    match = re.match(pattern, dt)\n    \n    # Check if the match is successful\n    if match:\n        # Extract the matched groups and reverse the month and day order\n        yyyy = match.group(1)\n        mm = match.group(2)\n        dd = match.group(3)\n        yyyy = int(yyyy)\n        mm = int(mm)\n        dd = int(dd)\n        mm = mm.zfill(2)\n        dd = dd.zfill(2)\n        dt = f'{dd}-{mm}-{yyyy}'\n        return dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'{}-{}-{}'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return new_format.format(day, month, year)\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step size for the shell sort\n    gap = n // 2\n\n    while gap > 0:\n        # Insertion sort for gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n        # Decrease gap size\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Find the largest element in the array\n    largest = my_list[0]\n    for i in range(1, n):\n        if my_list[i] > largest:\n            largest = my_list[i]\n    \n    # Set the increment value for the sorting step\n    increment = largest // n * 2\n    \n    # Perform the sorting step\n    while increment > 0:\n        for i in range(increment, n):\n            key = my_list[i]\n            j = i\n            while j >= increment and my_list[j - increment] > key:\n                my_list[j] = my_list[j - increment]\n                j -= increment\n            my_list[j] = key\n        increment //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step 1: Calculate the increment value for each sublist\n    increment = n // 2\n    while increment > 0:\n        # Step 2: Perform insertion sort on each sublist\n        for i in range(increment, n):\n            key = my_list[i]\n            j = i\n            while j >= increment and my_list[j - increment] > key:\n                my_list[j] = my_list[j - increment]\n                j -= increment\n            my_list[j] = key\n        # Step 3: Decrease the increment value for the next sublist\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuple = ()\n    for i in range(len(test_tup1)):\n        and_tuple += (test_tup1[i] & test_tup2[i],)\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same number of elements.\")\n        return None\n\n    # Extract the elementwise and tuples from the two tuples\n    and_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    and_tup = tuple(elem1 & elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    \n    # Initialize an empty list to store the result tuples\n    result_list = []\n    \n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from the tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # Perform the elementwise and operation and append the result to the result list\n        result = elem1 & elem2\n        result_list.append(result)\n    \n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create a new tuple to hold the elementwise and tuples\n    and_tup = ()\n    # iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # extract the first element of the first tuple\n        first1 = test_tup1[i]\n        # extract the second element of the second tuple\n        second2 = test_tup2[i]\n        # calculate the elementwise and between the two elements\n        and_elem = first1 & second2\n        # add the elementwise and tuple to the new tuple\n        and_tup += (and_elem,)\n    # return the new tuple containing the elementwise and tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_tup_list = []\n\n    # Loop through the two input tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        and_tup = test_tup1[i] & test_tup2[i]\n        and_tup_list.append(and_tup)\n\n    # Return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their elementwise and tuples.\n    '''\n    and_tuple = ()\n    for i in range(len(test_tup1)):\n        and_tuple += (test_tup1[i] & test_tup2[i],)\n    return and_tuple"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(f\"The directrix is between {root1:.2f} and {root2:.2f}.\")\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(f\"The directrix is at {root:.2f}.\")\n    else:\n        print(\"The discriminant is negative, which means the parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n    else:\n        print(\"The given equation has no real roots.\")\n        return None\n    \n    return [x1, x2]"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function calculates the directrix of a parabola by solving the quadratic equation:\n    \n    y^2 = a*x^2 + b*x + c\n    \n    The directrix is the value of x where the slope of the parabola is positive.\n    '''\n    \n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # check if the quadratic equation has a single root\n    if disc > 0:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        return root1, root2\n    \n    # if the quadratic equation has no real roots, the directrix is the unique root\n    elif disc == 0:\n        root = -b/(2*a)\n        return root\n    \n    # if the quadratic equation has two real roots, the directrix is the average of the two roots\n    else:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        return (root1 + root2)/2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No real roots\"\n    elif d == 0:\n        x = -b/2/a\n        return f\"The directrix is {x:.2f}\"\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return f\"The directrix is between {x1:.2f} and {x2:.2f}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Define the quadratic equation\n    quadratic = (b**2) - (4*a*c)\n    \n    # Calculate the discriminant\n    disc = quadratic**0.5\n    \n    # Calculate the roots\n    root1 = (-b + disc) / (2*a)\n    root2 = (-b - disc) / (2*a)\n    \n    # Check which root(s) are real and within the range of x-values\n    if root1 > 0 and root1 < 1:\n        return root1\n    elif root2 > 0 and root2 < 1:\n        return root2\n    else:\n        print(\"No real root(s) within the range of x-values.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b - (b**2-4*a*c)**0.5)/(2*a)\n        return directrix\n    elif discriminant == 0:\n        directrix = (-b)/(2*a)\n        return directrix\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        return x1, x2\n    else:\n        return \"There is no real solution to the equation.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    root1 = (-b + determinant**0.5)/(2*a)\n    root2 = (-b - determinant**0.5)/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The equation has no real roots.\")\n    elif delta == 0:\n        x = -b/(2*a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is between\", x1, \"and\", x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = False\n    for num in list1:\n        if num in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there is any common element\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set to store the common elements in list1\n    common_elements = set(list1)\n    # Loop through list2 to find if any elements are common to both lists\n    for element in list2:\n        if element in common_elements:\n            return True\n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there are any common elements between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    # Calculate the lengths of the three sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n    side3 = height - side1 - side2\n    # Sort the lengths in ascending order\n    sides = sorted([side1, side2, side3])\n    # Calculate the lengths of the trapezium\n    base = 0.5 * sides[0]\n    height = sides[1]\n    trapezium_length = sides[2]\n    # Calculate the length of the upper half of the trapezium\n    upper_half = 0.5 * trapezium_length * (base / height)\n    # Calculate the length of the lower half of the trapezium\n    lower_half = 0.5 * trapezium_length * (base / height)\n    # Calculate the median length of the trapezium\n    median = 0.5 * (upper_half + lower_half)\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    half_height = height / 2\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    area_trapezium = area1 + area2\n    \n    trapezium_perimeter = 2 * (base1 + base2)\n    median_trapezium_length = math.sqrt(2 * area_trapezium / trapezium_perimeter)\n    median_trapezium_length = round(median_trapezium_length, 2)\n    \n    return median_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + 2 * height\n\n    # Calculate the length of the longest side of the trapezium\n    longest_side = 0.5 * (base1 + base2)\n\n    # Calculate the length of the shortest side of the trapezium\n    shortest_side = longest_side - 2 * height\n\n    # Calculate the sum of the lengths of the two shorter sides\n    mid_length = longest_side - shortest_side\n\n    # Calculate the area of the half-trapezium with the shorter side\n    area_shorter = (shortest_side * height) / 2\n\n    # Calculate the area of the half-trapezium with the longest side\n    area_longest = (longest_side * height) / 2\n\n    # Calculate the area of the full trapezium\n    area_full = area - area_shorter - area_longest\n\n    # Calculate the height of the trapezium\n    height_trapezium = 0.5 * area_full / (area_shorter + area_longest)\n\n    # Calculate the area of the trapezium's base\n    base_area = area_shorter + area_longest\n\n    # Calculate the area of the trapezium's top\n    top_area = area_shorter - area_longest\n\n    # Calculate the height of the trapezium's top\n    top_height = height - height_trapezium\n\n    # Calculate the area of the trapezium's bottom\n    bottom_area = area_full - (area_shorter + area_longest)\n\n    # Calculate the height of the trapezium's bottom\n    bottom_height = height - height_trapezium\n\n    # Calculate the area of the trapezium's midline\n    midline_area = base_area - (top_area + bottom_area)\n\n    # Calculate the length of the trapezium's midline\n    midline_length = 0.5 * (top_height + bottom_height)\n\n    # Calculate the area of the trapezium's midline\n    midline_area = midline_area + midline_length * midline_length\n\n    # Calculate the area of the trapezium's full area\n    area_trapezium = area_trapezium + midline_area\n\n    # Calculate the total area of the trapezium\n    total_area = area_trapezium + perimeter * height\n\n    # Calculate the number of triangles in the trapezium\n    triangles = 0.5 * perimeter * (area_trapezium / total_area)\n\n    # Calculate the median area of the trapezium\n    median_area = triangles * (base_area + top_area + bottom_area + midline_area) / total_area\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (height_trapezium + midline_length)\n\n    # Calculate the median length of the trapezium's base\n    median_base = median_area / base_area\n\n    # Calculate the median length of the trapezium's top\n    median_top = median_area / top_area\n\n    # Calculate the median length of the trapezium's bottom\n    median_bottom = median_area / bottom_area\n\n    # Calculate the median length of the trapezium's midline\n    median_midline = 0.5 * (median_top + median_bottom)\n\n    # Calculate the median area of the trapezium's base\n    median_base_area = median_base * base_area\n\n    # Calculate the median area of the trapezium's top\n    median_top_area = median_top * top_area\n\n    # Calculate the median area of the trapezium's bottom\n    median_bottom_area = median_bottom * bottom_area\n\n    # Calculate the median area of the trapezium's midline\n    median_midline_area = median_midline * midline_area\n\n    # Calculate the median perimeter of the trapezium\n    median_perimeter = 2 * median_length + midline_length\n\n    # Calculate the median area of the trapezium's full area\n    median_area_trapezium = median_area_"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median_area = 0.5 * (area + area)\n    length = (2 * base1 * height + 2 * base2 * height) / median_area\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three arguments:\n    base1: the length of the base of the first trapezium\n    base2: the length of the base of the second trapezium\n    height: the height of the trapezium\n    \"\"\"\n    # Find the length of the first trapezium\n    length1 = 0.5 * (base1 + base2)\n    # Find the length of the second trapezium\n    length2 = 0.5 * (base1 + base2)\n    # Find the total length of the trapezium\n    total_length = length1 + length2\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    # Calculate the area of the larger half of the trapezium\n    area_large = 0.5 * base2 * height\n    # Calculate the area of the smaller half of the trapezium\n    area_small = 0.5 * base1 * height\n    # Calculate the difference between the areas of the two halves of the trapezium\n    difference_area = area - area_large - area_small\n    # Calculate the length of the smaller half of the trapezium\n    length_small = 0.5 * (total_length - difference_area)\n    # Calculate the area of the smaller half of the trapezium\n    area_small = length_small * height\n    # Calculate the length of the larger half of the trapezium\n    length_large = 0.5 * (total_length + difference_area)\n    # Calculate the area of the larger half of the trapezium\n    area_large = length_large * height\n    # Calculate the area of the larger half of the trapezium\n    area_total = area_large + area_small\n    # Find the median length of the trapezium\n    median = 0.5 * (length1 + length2 + length_small + length_large)\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium using the formula:\n    # Area = 0.5 x base1 x base2 x height\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the lengths of the trapezium using the formula:\n    # Length1 = 0.5 x base1 x height\n    # Length2 = 0.5 x base2 x height\n    length1 = 0.5 * base1 * height\n    length2 = 0.5 * base2 * height\n\n    # Sort the lengths of the trapezium in ascending order\n    sorted_lengths = sorted([length1, length2])\n\n    # Calculate the median length of the trapezium using the formula:\n    # Median = 0.5 * (Length1 + Length2)\n    median = 0.5 * (sorted_lengths[0] + sorted_lengths[1])\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    L = 0.5 * base1 + 0.5 * base2\n    sorted_values = sorted([base1, base2, L])\n    middle_value = sum(sorted_values[1:-1]) / 2\n    return middle_value"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the two sides of the trapezium\n    side1 = 0.5 * area / height\n    side2 = 0.5 * area / height\n\n    # Sort the sides of the trapezium\n    sides = sorted([side1, side2])\n\n    # Calculate the length of the trapezium\n    trapezium_length = 2 * sides[0] + sides[1]\n\n    # Calculate the median length of the trapezium\n    median = trapezium_length\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n    \n    Parameters:\n    base1 (float): Base length of the first trapezium\n    base2 (float): Base length of the second trapezium\n    height (float): Height of the trapezium\n    \n    Returns:\n    float: Median length of the trapezium\n    '''\n    \n    # calculate the area of the trapezium using the trapezoidal rule\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # calculate the length of the shorter trapezium\n    short_length = max(base1, base2)\n    \n    # calculate the length of the longer trapezium\n    long_length = min(base1, base2)\n    \n    # calculate the difference between the lengths of the trapeziums\n    length_diff = long_length - short_length\n    \n    # calculate the difference between the areas of the trapeziums\n    area_diff = area - 0.5 * short_length * height + 0.5 * long_length * height\n    \n    # calculate the midpoint of the shorter trapezium\n    midpoint1 = short_length * height / 2\n    \n    # calculate the midpoint of the longer trapezium\n    midpoint2 = long_length * height / 2\n    \n    # calculate the midpoint of the trapezium\n    midpoint = (midpoint1 + midpoint2) / 2\n    \n    # calculate the areas of the two trapeziums\n    area1 = 0.5 * short_length * height\n    area2 = 0.5 * long_length * height\n    \n    # calculate the ratio of the areas of the two trapeziums\n    area_ratio = area1 / area2\n    \n    # calculate the median length of the trapezium\n    median_length = (length_diff * area_ratio) / area_diff\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #calculating the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    #calculating the length of the trapezium\n    length = (0.5 * base1 * height + 0.5 * base2 * height) / area\n    #calculating the length of the half-trapezium\n    half_length = 0.5 * (base1 + base2)\n    #calculating the number of equal parts of the trapezium\n    equal_parts = int((height / 2) / length)\n    #calculating the median length of the trapezium\n    median_length = 0.5 * (equal_parts * length + half_length)\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # loop through the array and check if each element is greater than the entered number\n    for elem in arr:\n        if elem > number:\n            print(\"True\")\n            return\n    \n    # if the loop completes without finding any element greater than the entered number, print False\n    print(\"False\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # loop through each element in the array\n    for num in arr:\n        # if the current element is greater than the entered number, return True\n        if num > number:\n            return True\n    # if no element in the array is greater than the entered number, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}.\")\n            return\n    print(f\"{number} is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\nmatches = text_match_one(text)\nprint(matches)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the number to string\n    str_n = str(n)\n    # getting the last character of the string\n    last_char = str_n[-1]\n    # converting the last character to integer and returning it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #find the last digit of the number using modulus operator\n    last_digit = n % 10\n    #return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a Python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # converting the given number into a string\n    n = str(n)\n\n    # getting the last character of the string\n    last_digit = n[-1]\n\n    # returning the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in the given list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing all the negative numbers in the original list.\n    \"\"\"\n    # initialize an empty list to store negative numbers\n    neg_list = []\n    \n    # iterate through each number in the input list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, add it to the neg_list\n            neg_list.append(num)\n    \n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    Returns a list of negative numbers in the input list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from a list of numbers.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return \"\".join([char for char in string if ord(char) % 2!= 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            if int(char) % 2 == 0:\n                new_string += char\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the new string without odd characters\n    new_str = ''\n    # Loop through each character in the original string\n    for char in str1:\n        # Check if the character is odd\n        if int(char) % 2!= 0:\n            # If the character is odd, add it to the new string\n            new_str += char\n    # Return the new string without odd characters\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char)%2!=0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # iterate through each character in the original string\n    for char in str1:\n        # if the character is odd, add it to the new string\n        if int(char) % 2 == 1:\n            new_str += char\n    # return the new string with odd characters removed\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    seen = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pair = tuple(sorted((test_list[i], test_list[j])))\n            if pair not in seen:\n                count += 1\n                seen.add(pair)\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Loop through the test list\n    for pair in test_list:\n        # If the pair is a tuple, check if it's a valid bidirectional tuple\n        if isinstance(pair, tuple) and len(pair) == 2:\n            # If the pair is a valid bidirectional tuple, increment the count\n            if pair[0] == pair[1]:\n                count += 1\n    # Return the count of bidirectional tuple pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list[j]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty variable to store the single integer\n    single_integer = 0\n    # Iterate over each element in the list\n    for num in L:\n        # Check if the element is a multiple of 3\n        if num % 3 == 0:\n            # If it is, add the element to the single integer\n            single_integer += num\n        else:\n            # If it's not a multiple of 3, add 0 to the single integer\n            single_integer += 0\n    # Return the single integer\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return None\n    result = 0\n    for num in L:\n        if num < 0:\n            return None\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a string and remove all non-integer characters\n    L = ''.join(filter(str.isdigit, str(L)))\n    \n    # Convert the string back to an integer and return it\n    return int(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for i in range(len(L)):\n        total *= L[i]\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will find all the adverbs in a given sentence and their positions.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b([a-zA-Z]+)([a-zA-Z]+)\\b'\n\n    # Use the re.finditer() function to find all the matches in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate over the matches and extract the adverbs and their positions\n    for match in matches:\n        adverb = match.group(1)\n        pos = match.start()\n        adverbs.append((adverb, pos))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # create a regular expression pattern to match adverbs\n    pattern = r'\\b(rather|more|less|most|least|mostly|leastly|not|also|also|or|nor|but|yet|if|so|when|where|why|how|which|whose|whichever|whatever|whenever|wherever|whereabouts|whence|whomever|whomsoever|whosever|whereas|whenas|whenceas|whereafter|whereupon|whereby|wheresoever|whereinsoever|wherebysoever|whereassoever|whereinsoever|wheresoever)\\b'\n    \n    # find all occurrences of adverbs in the given text\n    matches = re.findall(pattern, text)\n    \n    # iterate through each match and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(f'{match} at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern to match adverbs\n    pattern = r'\\b(adverb|adv)(\\s*)(\\w+)'\n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and print the adverb and its position in the sentence\n    for match in matches:\n        print(match[1] + \" position: \" + str(text.find(match[2])))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[aeiou]\\w*[aeiou]\\w*\\b', text)\n    \n    # Find the positions of the adverbs in the sentence\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((adv, text.index(adv)))\n        \n    return adverbs, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[aeiou].*\\b\\w*', text)\n\n    # Find the position of the first adverb\n    if len(adverbs) > 0:\n        return adverbs[0] + \" found at position \" + str(text.find(adverbs[0]))\n    else:\n        return \"No adverbs found in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+(ing|ed|ing|ed|est)\\b', text)\n    \n    # Find the first adverb and its position in the sentence\n    if adverbs:\n        adverb = adverbs[0]\n        position = text.lower().find(adverb.lower())\n        print('Adverb:', adverb)\n        print('Position:', position)\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a given sentence as input and returns a list of tuples containing the first adverb found and its position in the sentence.\n    \"\"\"\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b([a-zA-Z]+[sS]?)\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate over the matches to find the adverbs and their positions\n    for i, match in enumerate(matches):\n        # Check if the match is a proper noun\n        if not match.isupper():\n            # If not, add it to the adverbs list and its position\n            adverbs.append((match, i))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern for adverb\n    pattern = r'\\b(?:(?:adv|adv\\w+)(?:\\w+(?:\\s+\\w+)?)*)\\b'\n    # Use regex to find all occurrences of adverb in the given text\n    matches = re.findall(pattern, text)\n    # Initialize dictionary to store adverb positions\n    adverbs = {}\n    # Iterate over all matches and extract the positions\n    for match in matches:\n        positions = []\n        # Extract each position from the match\n        for position in match.split():\n            # Check if the position is a digit\n            if position.isdigit():\n                positions.append(int(position))\n        # Store the positions of the adverb in the dictionary\n        adverbs[match] = positions\n    # Return the dictionary containing the positions of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define pattern to match adverbs\n    pattern = r'\\b(adverb)\\b'\n\n    # use re.findall() to find all occurrences of adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # print the position of each adverb\n    for i, adverb in enumerate(adverbs):\n        print(f'{i+1}. {adverb} at position {text.find(adverb)}')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using Heron's formula\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        total_count += 1\n        \n    if total_count == 0:\n        return 0\n    else:\n        return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array to a list to make it mutable\n    nums = list(nums)\n\n    # Initialize the sum and count of positive numbers\n    positive_sum = 0\n    positive_count = 0\n\n    # Iterate through the list of integers\n    for num in nums:\n        # If the number is positive, add it to the sum and increment the count\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n\n    # Calculate the ration of positive numbers\n    positive_ratio = positive_count / len(nums)\n\n    # Return the result\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Initialize an empty array to store positive numbers\n    positive = array('i')\n    # Iterate over the input array\n    for num in nums:\n        # If the number is positive, append it to the positive array\n        if num > 0:\n            positive.append(num)\n    # Calculate the ration of positive numbers by dividing the length of the positive array by the length of the input array\n    ration = len(positive) / len(nums)\n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    # convert input list to array\n    nums = array('i', nums)\n    # count positive numbers and divide by array length\n    return sum(1 for num in nums if num > 0) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the positive numbers\n    positive_nums = array('i')\n\n    # iterate over the array and append positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n\n    # calculate the ration of positive numbers\n    ration = len(positive_nums) / len(nums)\n\n    # return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0, 0, 0, 0, 0])\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n        elif num == 0:\n            count[1] += 1\n        elif num < 0:\n            count[2] += 1\n    for i in range(3):\n        if count[i] > 0:\n            count[i] = round(count[i] / sum(count) * 100, 2)\n    return count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array of integers to store the positive numbers\n    positive_arr = array('i')\n\n    # iterate through the array and add the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n\n    # calculate the ratio of positive numbers to the total number of numbers in the array\n    ratio = len(positive_arr) / len(nums)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # convert the array to a list\n    arr = list(nums)\n    # create a list to store the count of positive numbers\n    count_list = []\n    # iterate over the list of integers\n    for num in arr:\n        # if the number is positive, add 1 to the count list\n        if num > 0:\n            count_list.append(1)\n        # if the number is 0, add 0 to the count list\n        elif num == 0:\n            count_list.append(0)\n        # if the number is negative, do nothing\n    # calculate the ration of positive numbers\n    positive_ratio = sum(count_list) / len(arr)\n    # return the ration\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # create an array of integers from input list\n    count = 0\n    total = len(arr)\n    for i in range(total):\n        if arr[i] > 0:\n            count += 1\n    return count / total"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1\n    for num in list1: \n        if num < 0 and num > largest_num: \n            largest_num = num \n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    largest = float('-inf') #initialize the largest variable with the smallest possible number\n    for num in list1:\n        if num < 0 and num > largest: #if the number is negative and greater than the current largest, update the largest variable\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number in a list of integers.\n\n    :param list1: List of integers.\n    :return: The largest negative number in the list.\n    \"\"\"\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    return max(filter(lambda x: x < 0, lst))"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]  # initialize largest number as first element in list\n\n    for num in list1:\n        if num < 0 and num > largest_num:  # check if current number is negative and larger than largest negative number found so far\n            largest_num = num  # update largest negative number\n\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') # initial value of max_neg is negative infinity\n    \n    for num in list1: \n        if num < 0 and num > max_neg: # if the number is negative and greater than max_neg\n            max_neg = num # update max_neg with the current number\n    \n    return max_neg # return the value of max_neg as the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initialize largest negative number to negative infinity\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num # update largest negative number if current number is greater than largest negative number\n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # initialize a variable to store the largest negative number\n    largest_num = -float('inf')\n\n    # loop through the list and compare each number with the current largest negative number\n    for num in list1:\n        if num < 0:\n            if num > largest_num:\n                largest_num = num\n\n    return largest_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store the trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Initialize a counter variable to count the number of elements in the tuple\n        count = 0\n        # Loop through each element in the tuple\n        for elem in tup:\n            # If the counter variable is less than k, append the element to the trimmed tuple\n            if count < K:\n                trimmed_list.append(elem)\n            # Increment the counter variable\n            count += 1\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i]):\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        new_t = tuple([x[K:] if K < len(x) else x[:K] for x in t])\n        result.append(new_t)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Define an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than K\n        if len(tup) > K:\n            # Trim the tuple by K positions from the beginning\n            trimmed_tup = tup[K:]\n            # Add the trimmed tuple to the trimmed list\n            trimmed_list.append(trimmed_tup)\n        else:\n            # Add the original tuple to the trimmed list\n            trimmed_list.append(tup)\n\n    # Return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple([x for x in tup if x!= None])\n        if len(new_tup) > K:\n            new_tup = new_tup[:K]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples are not equal.\")\n        return\n\n    result = [test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))]\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Creating a Counter object from the tuple and list\n    counter = Counter(tup)\n\n    # Counting the occurrences of each element in the list\n    count = 0\n    for num in lst:\n        count += counter[num]\n\n    # Returning the count of occurrences of each element in the list\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in tup:\n        count[i] += 1\n    for j in lst:\n        count[j] += 1\n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = tup.count(i)\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list and returns a dictionary where the keys are the elements of the tuple and the values are the number of occurrences of each element in the tuple.\n    '''\n\n    count_dict = Counter(tup)  # create a dictionary from the tuple\n\n    for elem in lst:  # iterate over the list and increment the count for each element\n        if elem in count_dict:\n            count_dict[elem] += 1  # increment the count if the element is in the dictionary\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) # Counter() function used to count the occurrence of all elements of the tuple\n    count = 0\n    for i in lst:\n        if i in count_dict:\n            count += count_dict[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst)\n    for num in tup:\n        if num in counts:\n            counts[num] += 1\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(tup) # Count the frequency of each element in the tuple\n    for elem in lst: \n        if elem in count: \n            count[elem] += 1 # Increment the count for that element in the Counter object\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Find the cube of the current element\n        cube = num ** 3\n        # Add the cube to the result list\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (4 * i - 1) / 6\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 189392490709135, 307061521170129, 496454011879264, 793515533049393, 1290069544928657, 2083585077978050, 3373654622906707, 5457240690884757, 8830895313791464, 14288136004676211, 23119031318467675, 37407167323143886, 60526208641611561, 97933375964755447, 158459584606367008, 266392960571122455, 424852545177489463, 6912455057"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    for i in range(1, n+1):\n        sum += p\n        p *= (i/p)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 3, 13, 83, 519, 3985, 36289, 362881]\n    result = 0\n    \n    for i in range(n):\n        result += perrin[i]\n        \n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 0\n    i = 1\n    while i <= n:\n        sum += i\n        p += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 16, 64, 256, 1024]\n    total_sum = 0\n    \n    for num in perrin_numbers:\n        total_sum += num\n        \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = 0\n    for i in range(1, n+1):\n        perrin += i\n        print(perrin)\n    return perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum_of_perrin = 0\n    perrin_number = 1\n    for i in range(n):\n        sum_of_perrin += perrin_number\n        perrin_number += 2\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s[:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function takes a list of string values and a length as input and returns a new list containing the extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string[:length])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and extracts the specified size of strings from the list.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, length):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == length:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts the specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), l):\n        result.append(' '.join(str_list[i:i+l]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of extracted strings.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a list of strings containing \n    the specified size of strings from the input list.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_list.append(string[:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the strings to be extracted as input.\n    It then extracts the specified size of strings from the list and returns the result as a new list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted = []\n    for s in l:\n        if len(s) >= l:\n            extracted.append(s)\n    return extracted"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the `sub` method to replace all whitespace characters in the string with a single space\n    return pattern.sub(' ', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    # Removing all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regex to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    # use slicing to remove first and last whitespaces\n    text3 = text2[1:-1]\n    # return the result\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the given string\n    text2 = re.sub(r'\\s+','', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespace characters from the string\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    This function takes two arguments, actual_cost and sale_amount. \n    It calculates the loss amount based on the given formula and returns the result. \n\n    Formula: Loss Amount = (Actual Cost - Sale Amount) * 100 / Sale Amount\n\n    If actual_cost is greater than sale_amount, it returns 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        loss = (actual_cost - sale_amount) * 100 / sale_amount\n        return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    # Calculate the loss amount\n    loss_amount = actual_cost - sale_amount\n\n    # Return the loss amount\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            sum += i\n            if i*i!= n:\n                sum += n // i\n        i += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    # Check if the number is even\n    if n % 2 == 0: \n        # If the number is even, check if it is divisible by 2\n        total += n\n        # Check if the number is divisible by 2\n        while n % 2 == 0: \n            n /= 2\n            total += n\n        # Return the sum of factors\n        return total\n    else: \n        return \"Number is not even\""
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2): \n        if n % i == 0: \n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of all even factors of that number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        if n % 2 == 0:\n            sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i % 2 == 0:\n                sum += i\n    if count == 0:\n        return sum\n    else:\n        return -1"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a list of words that contain 'z'.\n    '''\n    # Use regular expression to match words containing 'z'\n    pattern = re.compile(r'\\w+z\\w+')\n    # Use findall() method to find all non-overlapping matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b' # matches a word containing 'z' with word boundaries\n    matches = re.findall(pattern, text) # find all the matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b', re.IGNORECASE)\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z0-9]+z\\b'\n    match_list = re.findall(pattern, text)\n    return match_list"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bword\\s*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return 29\n        else:\n            return 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['1', '3', '5', '7', '8', '10', '12']:\n        return True\n    elif monthnum2 in ['4', '6', '9', '11']:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # Check if the input is an integer\n    try:\n        monthnum2 = int(monthnum2)\n    except ValueError:\n        print(\"Error: Input must be an integer!\")\n        return\n    \n    # Check if the input is a valid month number\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Error: Invalid month number!\")\n        return\n    \n    # Check if the month number has 31 days\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if monthnum2 in days_in_month:\n        print(f\"{monthnum2} has 31 days.\")\n    else:\n        print(f\"{monthnum2} does not have 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month number contains 31 days and False otherwise.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is valid\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    \n    # Check if the month number contains 31 days or not\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(str(monthnum2)) == 2:\n        monthnum2 = int(monthnum2)\n    if monthnum2 <= 12:\n        if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            return True\n        elif monthnum2 == 2 and (year % 4!= 0 or (year % 100 == 0 and year % 400!= 0)):\n            return False\n        elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return False\n        elif monthnum2 == 28:\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 400 == 0):\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the input is a valid integer\n    try:\n        monthnum2 = int(monthnum2)\n        if monthnum2 < 1 or monthnum2 > 12:\n            raise ValueError\n    except ValueError:\n        return \"Invalid input\"\n\n    # check if the month number contains 31 days\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in [4, 6, 9, 11]:\n        if monthnum2 == 4 or monthnum2 == 6:\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    elif monthnum2 in [2]:\n        days_in_month[2] = 29\n    elif monthnum2 == 1:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n\n    # check if the input month number contains 31 days\n    for i in range(1, days_in_month[monthnum2-1]):\n        if i == days_in_month[monthnum2-1]:\n            return True\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        print(\"Invalid input for month number\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n\n        # Split the string into individual characters\n        chars = list(stringlist[i])\n\n        # Reverse each character in the string\n        for j in range(len(chars)//2):\n            temp = chars[j]\n            chars[j] = chars[-j-1]\n            chars[-j-1] = temp\n\n        # Join the characters back into a string\n        reversed_string = ''.join(chars)\n\n        # Update the original list with the reversed string\n        stringlist[i] = reversed_string"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_string = string[::-1]\n        new_list.append(new_string)\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # Reverse the string using slicing notation\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    # Initialize minimum length and the sublist\n    min_len = float('inf')\n    min_lst = []\n    # Traverse through the list\n    for i in range(len(lst)):\n        # If the current length is less than minimum length\n        if len(lst[i]) < min_len:\n            # Set the minimum length and the sublist\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    # Return the minimum length and the sublist\n    return min_len, min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = [] \n    for sublist in lst: \n        if len(sublist) < len(min_sublist): \n            min_sublist = sublist \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist \n    having minimum length from the given list.\n    '''\n\n    # Initialize the minimum length and sublist\n    min_len = float('inf')\n    sublist = None\n\n    # Loop through the given list\n    for i in range(len(lst)):\n        # Initialize the current sublist length and its index\n        curr_len = 1\n        curr_idx = i\n\n        # Loop through the rest of the list\n        while i+curr_len < len(lst):\n            # If the current sublist length is less than the minimum length, update the minimum length and sublist\n            if lst[i+curr_len]!= lst[i]:\n                break\n            curr_len += 1\n\n        # Update the minimum length and sublist if the current sublist length is less than the minimum length\n        if curr_len < min_len:\n            min_len = curr_len\n            sublist = lst[i:i+min_len]\n\n    # Return the minimum length and sublist\n    return min_len, sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and finds the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    for i in range(len(lst)):\n        min_sublist = []\n        for j in range(i, len(lst)):\n            min_sublist.append(lst[j])\n            if len(min_sublist) == min(map(len, min_sublist)):\n                return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return lst[lst.index(min(lst, key=len))].copy()"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists as input and returns the sublist that has minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase to avoid case sensitivity issues\n    str1 = str1.lower()\n    # Use regular expressions to find all uppercase substrings and replace them with an empty string\n    str1 = re.sub('([a-z])(?=[A-Z])', r'\\1', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # remove all uppercase substrings\n    str1 = re.sub(r'[A-Z]', '', str1)\n    # remove leading and trailing whitespaces\n    str1 = str1.strip()\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = r'\\b[A-Z]{1}[a-z]+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Use regular expressions to match uppercase substrings\n    pattern = r'[A-Z]+'\n    matches = re.findall(pattern, str1)\n\n    # Loop through matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(r'{}'.format(match), '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = r'[A-Z]'\n    substrings = re.findall(uppercase_pattern, str1)\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    string = string.lower()\n    pattern = re.compile(r'[^a-z\\s]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase = re.findall('[A-Z]+', str1)\n    if uppercase:\n        str1 = ''.join([i for i in str1 if i not in uppercase[0]])\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define the pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]')\n\n    # Find all uppercase substrings in the string\n    uppercase_substrings = pattern.findall(str1)\n\n    # Iterate over the uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i][0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, increment the count by 1\n            count += 1\n    \n    # return the count of uppercase characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in it.\n    \"\"\"\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort() # sort the list in ascending order\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    list1 = list(list1)\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    comb = []\n\n    # Define the function to generate the combinations recursively\n    def helper(remaining, combination):\n        # If all elements have been used, add the combination to the list\n        if remaining == 0:\n            comb.append(combination)\n        # Recursively generate the combinations for the remaining elements\n        else:\n            for i in range(len(list1)):\n                # If the current element is not in the combination, add it and generate the remaining combinations\n                if i not in combination:\n                    helper(remaining - 1, combination + [i])\n\n    # Call the helper function to generate the combinations\n    helper(len(list1), [])\n\n    # Return the list of combinations\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[i-1:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # List to store the combinations\n    combinations = []\n\n    # Base case: if there are no elements in the list, return an empty list\n    if len(list1) == 0:\n        return combinations\n\n    # Recursive case: generate combinations for all elements except the first one\n    for i in range(1, len(list1)):\n        sub_list = list1[:i] + list1[i+1:]\n        for comb in combinations_list(sub_list):\n            combinations.append([list1[0]] + comb)\n\n    # Base case: if there is only one element, return a list containing that element\n    if len(list1) == 1:\n        return [list1]\n\n    # Recursive case: generate combinations for the remaining elements\n    for comb in combinations_list(list1[1:]):\n        combinations.append([list1[0]] + comb)\n\n    # Return the final list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n        list1 (list): a list of elements\n\n    Returns:\n        list: a list of all possible combinations of elements in the input list\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of elements in the list.\n    '''\n    result = []\n    n = len(lst)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            comb = lst[j:j+i]\n            result.append(comb)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n        list1 (list): A list of elements to find combinations of.\n\n    Returns:\n        list: A list of all possible combinations of the elements in `list1`.\n    \"\"\"\n    # Initialize a list to store all possible combinations\n    combinations = []\n\n    # Create a function to generate all possible combinations of a list\n    def generate_combinations(start, path):\n        # Base case: add the last element to the path and return the combination\n        if start == len(list1):\n            combinations.append(path[:])\n            return\n\n        # Recursive case: add the current element to the path and generate combinations for the remaining elements\n        generate_combinations(start + 1, path + [list1[start]])\n        generate_combinations(start + 1, path)\n\n    # Call the function to generate all possible combinations\n    generate_combinations(0, [])\n\n    # Return the list of all possible combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if current_product < 0:\n            current_product = 1\n        current_product = max(0, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], arr[i] * current_product)\n        max_product = max(max_product, current_product)\n        max_so_far = max(max_so_far, current_product)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the maximum product subarray.\n\n    Args:\n    arr: A list of integers.\n\n    Returns:\n    The maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        if num < 0:\n            curr_product = 1\n        else:\n            curr_product *= num\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    start = 0\n    max_start = 0\n\n    for end in range(len(arr)):\n        curr_product *= arr[end]\n        if curr_product > max_product:\n            max_product = curr_product\n            max_start = start\n        elif curr_product < 0:\n            curr_product = 1\n            start = end + 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i] if max_ending_here > 0 else arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i] if min_ending_here < 0 else arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # iterate through the dictionary keys\n    for key in dict:\n        # initialize a variable to hold the first value found\n        first_value = dict[key]\n\n        # iterate through the remaining dictionary values\n        for value in dict.values():\n            # if the current value is different from the first value, return False\n            if value!= first_value:\n                return False\n\n    # if all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    return values.count(values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Use a set to store the values of the dictionary\n    values = set(dict.values())\n    # Check if all values are same\n    if len(values) == 1:\n        # If yes, then all values are same, so return True\n        return True\n    else:\n        # If no, then all values are different, so return False\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values == values[:n]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        elif first_value!= value:\n            return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set()\n    for key, value in dict.items():\n        values.add(value)\n    return len(values) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Create a list to store values in the dictionary\n    values = []\n\n    # Loop through each key-value pair in the dictionary\n    for key, value in dict.items():\n        # Append the value to the list\n        values.append(value)\n\n    # Compare the length of the list of values with n\n    if len(set(values)) == n:\n        # Return True if all values are the same\n        return True\n    else:\n        # Return False if not all values are the same\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if value!= dict[value]:\n            return False\n        else:\n            count += 1\n    return count == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_list = list(dict.values())\n    if len(value_list) == 1:\n        return True\n    else:\n        for i in range(1, len(value_list)):\n            if value_list[i]!= value_list[0]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input and returns True if all values in the dictionary are same, False otherwise.\n    '''\n    # Initialize an empty list to store the values in the dictionary\n    values = []\n    # Loop through the dictionary and append the values to the list\n    for value in dict.values():\n        values.append(value)\n    # Check if the length of the list is equal to n, if yes, all values are same and return True\n    if len(values) == n:\n        return True\n    # If the length of the list is not equal to n, return False\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and removes any key-value pairs that have an empty string as value.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Iterate over the dictionary items\n    for key, value in dict1.items():\n        # Check if the value is empty\n        if not value:\n            # If it is, remove the key-value pair\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i] * -1)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i] * -1)\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n\n    # Initialize variables for storing the maximum product and the current subsequence product\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Traverse through the array and find the maximum product formed by increasing subsequences\n    for i in range(n):\n        # If the current element is greater than the next element, then multiply the previous subsequence product with the current element to find the maximum product\n        if arr[i] > arr[i+1]:\n            curr_product = curr_product * arr[i]\n        # If the current element is less than or equal to the next element, then reset the current subsequence product to 1 to start a new subsequence\n        else:\n            curr_product = 1\n\n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, curr_product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i] * -1)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Create an array dp[i] to store the maximum product formed by multiplying the numbers of the increasing subsequence of arr[:i+1]\n    dp = [0]*n\n    \n    # Fill the dp array\n    for i in range(n):\n        if i == 0 or i == n-1:\n            dp[i] = arr[i]\n        else:\n            dp[i] = max(arr[i], arr[i]*dp[i-1])\n    \n    # Find the maximum product formed by multiplying the numbers of the increasing subsequence of arr[:i+1]\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            if i+1 == j:\n                max_product = max(max_product, dp[j])\n            else:\n                max_product = max(max_product, arr[i]*dp[j])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize variables\n    max_product = arr[0]\n    temp_product = 1\n    # Find maximum product for each subsequence\n    for i in range(1, n):\n        temp_product *= arr[i]\n        max_product = max(max_product, temp_product)\n        temp_product = max(temp_product, arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    \n    # Compute the maximum product of two numbers\n    def max_product_helper(i, j):\n        if i == j:\n            return arr[i]\n        else:\n            max_product = arr[i] * max(arr[i], arr[j])\n            min_product = arr[i] * min(arr[i], arr[j])\n            return max(max_product, min_product)\n\n    # Initialize the DP table\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    # Fill the DP table using the maximum product of two numbers\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]) * arr[i]\n\n    # Find the maximum product formed by multiplying numbers of an increasing subsequence\n    max_product = dp[n-1]\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize the maximum product and the current product with the first element of the array\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, n):\n        # Check if the current element is greater than the current product\n        if arr[i] > current_product:\n            # Update the current product\n            current_product = arr[i]\n        else:\n            # Update the maximum product\n            max_product = max(max_product, current_product)\n            # Update the current product with the previous maximum product\n            current_product = max_product * arr[i]\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list[int]): A non-empty list of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence of the input array.\n\n    Examples:\n        >>> max_product([2, 3, -2, 4, -5])\n        8\n        >>> max_product([-5, -2, -1])\n        0\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here, min_ending_here * arr[i])\n        min_ending_here = min(temp, min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) < 3:\n        return 0\n\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_ending_here *= arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        else:\n            max_ending_here = 1\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables to store the maximum subsequence product and the current subsequence product\n    max_product_so_far = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array and compute the maximum subsequence product\n    for num in arr:\n        # Compute the product of the current number and the current subsequence product\n        current_product *= num\n        \n        # Update the maximum subsequence product if the current product is greater\n        max_product_so_far = max(max_product_so_far, current_product)\n        \n        # Reduce the current subsequence product to get the next number in the subsequence\n        current_product //= num\n        \n    # Return the maximum subsequence product\n    return max_product_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    result = []\n    for i in range(1, len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i-1] + test_tup[i+1])\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple must have at least two elements.\")\n    pair_sum = 0\n    for i in range(len(test_tup)-1):\n        pair_sum += test_tup[i] + test_tup[i+1]\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    else:\n        # create a new tuple with one element shorter to avoid indexing issues\n        test_tup_new = test_tup[:-1]\n        # add the first and second elements\n        sum_pair = test_tup[0] + test_tup[1]\n        # add the pairwise addition of the new tuple to the sum\n        for i in range(2, len(test_tup)):\n            sum_pair += add_pairwise(test_tup_new + (test_tup[i],))\n        return sum_pair"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        # find the length of the tuple\n        n = len(test_tup)\n        # initialize the sum of the pairwise additions\n        add_sum = 0\n        # loop through the tuple elements\n        for i in range(n-1):\n            # add the current element to the next element and add the result to the sum\n            add_sum += test_tup[i] + test_tup[i+1]\n        # return the final sum of the pairwise additions\n        return add_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i] + test_tup[i+1]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Tuple must have at least two elements\"\n\n    # initializing variables\n    total = 0\n\n    # iterating through the tuple and adding the neighboring elements\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length < 2:\n        return None\n    else:\n        total = 0\n        for i in range(length-1):\n            total += test_tup[i] + test_tup[i+1]\n        return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    if n < 0:\n        return \"The modulo value must be a positive integer.\"\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    total = 1\n    for i in arr:\n        total = (total * i) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input and returns the product of the array's \n    multiplication modulo n.\n    \"\"\"\n\n    # initialize the product as 1\n    product = 1\n\n    # iterate through the array and multiply each element with the current product\n    for num in arr:\n        product = (product * num) % n\n\n    # return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product >= n:\n            product -= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return \"The given list should have at least two elements\"\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return \"The given list does not contain consecutive numbers\"\n    \n    return \"The given list contains consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if len(l) < 2: \n        return False\n\n    for i in range(len(l)-1): \n        if l[i+1]!= l[i] + 1: \n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    if len(l) <= 1:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize a variable to store the number of consecutive numbers\n    count = 0\n    \n    # Iterate through the list\n    for i in range(len(l)-1):\n        # If the current number is consecutive with the next number, increment the count\n        if l[i] == l[i+1]+1:\n            count += 1\n        # If the current number is not consecutive with the next number, reset the count to 0\n        else:\n            count = 0\n            \n    # If the count is still greater than 0, then the list contains consecutive numbers\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return False \n    return True "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + 1 == l[i + 1]:\n                return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i] + 1:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize two variables to keep track of the current and next numbers in the list\n    curr = l[0]\n    next = l[1]\n    # Iterate through the list\n    for i in range(2, len(l)): \n        # If the current number is equal to the next number, it is not consecutive\n        if curr == next: \n            return False\n        # Update the current and next numbers\n        curr = next\n        next = l[i+1]\n    # If all the numbers in the list are consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list is empty or not\n    if len(l) == 0:\n        return False\n    \n    # Initialize the first number\n    num1 = l[0]\n    \n    # Loop through the rest of the list\n    for num2 in l[1:]:\n        # Check if the current number is one more than the previous number\n        if num2 - num1!= 1:\n            return False\n        # Update the current number\n        num1 = num2\n    \n    # If the loop completes without returning False, then the list contains consecutive numbers\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples and finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists as input and returns a new list containing the tuple intersection of the given lists.\n    '''\n    # creating a set from both lists to get the unique tuples\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # checking if the intersection set is empty\n    if set1.intersection(set2):\n        return list(set1.intersection(set2))\n    else:\n        return []"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from the first list and then find the intersection with the second list using set intersection\n    set1 = set(test_list1)\n    return list(set1.intersection(*[set(x) for x in test_list2]))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first list\n    set1 = set(test_list1)\n    \n    # Create a new set to store the common elements\n    common_set = set()\n    \n    # Iterate through the second list and add the elements that are present in both sets\n    for element in test_list2:\n        if element in set1:\n            common_set.add(element)\n            \n    # Convert the set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort both lists in ascending order\n    test_list1.sort()\n    test_list2.sort()\n    \n    # Initialize an empty list to store the intersection\n    intersection_list = []\n    \n    # Iterate through both lists\n    for i in range(min(len(test_list1), len(test_list2))):\n        if test_list1[i] == test_list2[i]:\n            intersection_list.append(test_list1[i])\n            \n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_elements = []\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.append(element)\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        if i in test_list2 and i not in intersection_list:\n            intersection_list.append(i)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort the two lists in ascending order\n    test_list1.sort()\n    test_list2.sort()\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    # Loop through both lists simultaneously\n    for element in test_list1:\n        # Check if the element is also present in the second list\n        if element in test_list2:\n            common_elements.add(element)\n    # Return the list of common elements as a tuple\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort both lists\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    # Initialize a set to store the common elements\n    common_set = set()\n    # Iterate through the lists\n    for element1 in test_list1:\n        if element1 in test_list2 and element1 not in common_set:\n            common_set.add(element1)\n    # Return the set as a tuple\n    return tuple(common_set)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        \n        # If the character matches the search character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        else:\n            # Otherwise, append the original character to the modified string\n            modified_str += char\n            \n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Convert the first string to a list of characters\n    lst = list(str1)\n    # Loop through the list and replace the specified characters\n    for i in range(len(lst)):\n        if lst[i] == ch:\n            lst[i] = newch\n    # Convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes a string `str1`, a character `ch` to be replaced, and a new character `newch` as input.\n    It replaces all occurrences of `ch` with `newch` in `str1` and returns the modified string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a given string with another character.\n    '''\n\n    # Convert the given string to a list of characters\n    char_list = list(str1)\n\n    # Loop through the list of characters and replace the character if it matches the given character\n    for i in range(len(char_list)):\n        if char_list[i] == ch:\n            char_list[i] = newch\n\n    # Convert the list of characters back to a string and return the result\n    return ''.join(char_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' with a character 'newch' in a string'str1'.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    :param str1: The string in which the character will be replaced.\n    :type str1: str\n    :param ch: The character to be replaced.\n    :type ch: str\n    :param newch: The new character to replace all occurrences of the old character.\n    :type newch: str\n    :return: The modified string.\n    :rtype: str\n    \"\"\"\n    # Create a new string to store the modified string\n    modified_str = \"\"\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not equal to the old character, add it to the new string\n        if char!= ch:\n            modified_str += char\n        # If the character is equal to the old character, add the new character to the new string\n        else:\n            modified_str += newch\n\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in ascending order\n    sorted_counter = counter.most_common()\n\n    # Sort the sorted Counter object by key in descending order\n    sorted_counter.sort(key=lambda x: x[0], reverse=True)\n\n    # Extract the sorted keys and values from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary into a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object by values\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = {k: v for k, v in sorted_counter}\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    return dict(sorted_dict.most_common())"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value in descending order.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = {k: v for k, v in sorted(counter.items(), key=lambda item: item[1], reverse=True)}\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return \"Array is empty\"\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Initialize variables to store the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    # Loop through the array and update the largest and smallest values as needed\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the largest value\n    largest = nums[-1]\n    # Find the smallest value\n    smallest = nums[0]\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        print(\"Array should contain at least two elements.\")\n        return\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lowercase.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower() # convert string to lowercase\n    str1 = re.sub('[a-z]+', '', str1) # remove lowercase substrings\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    return re.sub(pattern, '', str1).lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return re.sub(pattern, '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    '''\n    # Define the regular expression pattern to match lowercase substrings\n    pattern = r'([a-z])'\n    \n    # Use re.sub() function to replace all lowercase substrings with an empty string\n    result = re.sub(pattern, '', string)\n    \n    # Return the new string with all lowercase substrings removed\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regular expression to remove substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    str1 = pattern.sub('', str1)\n    # Convert the string back to original case\n    str1 = str1.upper()\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a string where all the lowercase substrings are removed.\n    '''\n    return re.sub(r'[a-z]+', '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = re.compile(r'[a-z]+')\n    result = regex.sub('', str1)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a number\n    try:\n        num = int(n)\n    except ValueError:\n        return 'The input is not a number.'\n\n    # Check if the number is less than 10\n    if num < 10:\n        return 'The first digit is'+ str(num)\n    else:\n        return 'The input is less than 10.'"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = str(n)[0]\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the number is non-negative\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n    # Convert the number to a string\n    num_str = str(n)\n    # Check if the number has at least one digit\n    if len(num_str) == 0:\n        raise ValueError(\"Input number must have at least one digit.\")\n    # Return the first digit of the number\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of that number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 1000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Extract the first digit of the string\n    first_digit = num[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    odd_list = []\n\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to store sum of cubes and sum of first n natural numbers\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    \n    # Calculate sum of first n natural numbers\n    for i in range(n):\n        sum_of_natural_numbers += i+1\n    \n    # Calculate difference between sum of cubes and sum of first n natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    # Return difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # Function to calculate sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    # Function to calculate sum of first n natural numbers\n    def sum_of_numbers(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    # Calculating the difference between the two sums\n    difference = abs(sum_of_cubes(n) - sum_of_numbers(n))\n    \n    # Returning the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n + 1) / 2\n    # Compute the sum of the cubes of the first n natural numbers\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) / 6\n    # Return the difference between the two sums\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of first n natural numbers\n    cube_sum = sum([x**3 for x in range(1, n+1)])\n\n    # Calculate the sum of first n natural numbers\n    sum_of_first_n = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return cube_sum - sum_of_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(x**3 for x in range(n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_first_n = sum(range(n+1))\n\n    # Return the difference between the two sums\n    return abs(sum_of_cubes - sum_of_first_n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize the variables\n    sum_cubes = 0\n    sum_natural = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the cube of each natural number to the sum_cubes variable\n        sum_cubes += i ** 3\n        # add each natural number to the sum_natural variable\n        sum_natural += i\n    # return the difference between the sum of cubes and the sum of natural numbers\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        \"\"\"\n        This function takes an integer n as input and returns the sum of cubes of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i ** 3\n        return sum\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n+1) // 2\n\n    # Return the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    def sum_of_cubes(n):\n        \"\"\"\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        total = 0\n        for i in range(1, n + 1):\n            total += i ** 3\n        return total\n\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        Write a python function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        total = 0\n        for i in range(1, n + 1):\n            total += i\n        return total\n\n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n    difference_n = sum_of_cubes_n - sum_of_natural_numbers_n\n\n    return difference_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    # calculate the sum of cubes of the first n natural numbers\n    cubes = sum(i**3 for i in range(1, n+1))\n\n    # calculate the sum of the first n natural numbers\n    sums = sum(range(1, n+1))\n\n    # return the difference between the two sums\n    return cubes - sums"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    xor_value = 0\n    for i in range(N):\n        xor_value ^= A[i]\n        count += xor_value & 1\n        xor_value >>= 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    # initializing a dictionary to store the count of odd xor values\n    odd_count = {}\n\n    # iterate through the array\n    for num in A:\n        # xor the current number with all other numbers in the array\n        xor_sum = sum(set(A) - set([num]))\n\n        # check if the xor_sum is odd\n        if xor_sum % 2!= 0:\n            # if odd, increment the count in the dictionary\n            if xor_sum in odd_count:\n                odd_count[xor_sum] += 1\n            else:\n                odd_count[xor_sum] = 1\n\n    # iterate through the odd_count dictionary and return the number of pairs whose xor value is odd\n    total_odd_pairs = 0\n    for key, value in odd_count.items():\n        if value % 2!= 0:\n            total_odd_pairs += value\n\n    return total_odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n                if count == N:\n                    return count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A of size N and returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(i,N):\n            xor_sum = xor_sum ^ A[j]\n            if xor_sum % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Count the number of pairs whose xor value is odd.\n\n    Parameters:\n    A: list, the list of integers.\n    N: int, the maximum integer that can be in the list A.\n\n    Returns:\n    int, the number of odd pairs.\n    '''\n    count = 0\n    for i in range(N+1):\n        for j in range(i+1, N+1):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all the pairs in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the xor of the two pairs\n            xor_value = A[i] ^ A[j]\n\n            # Check if the xor value is odd\n            if xor_value % 2!= 0:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Initialize an empty string to store the toggled string\n    toggled_string = ''\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is lowercase, convert it to uppercase and vice versa\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Loop through each character in the list\n    for i in range(len(chars)):\n        # Check if the character is a lowercase letter\n        if chars[i].islower():\n            # Convert the character to uppercase\n            chars[i] = chars[i].upper()\n        # Check if the character is an uppercase letter\n        elif chars[i].isupper():\n            # Convert the character to lowercase\n            chars[i] = chars[i].lower()\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # convert it to lowercase\n            print(char.lower(), end='')\n        else:\n            # convert it to uppercase\n            print(char.upper(), end='')\n    print()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    return ''.join(chr(ord(c.lower()) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create a new string with all characters converted to uppercase\n    result = string.upper()\n    # Convert the result back to lowercase\n    result = result.lower()\n    # Return the result\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for i in range(10):\n        a = n1 // 10 ** i\n        b = n2 // 10 ** i\n        c = a - b\n        distance += abs(c)\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the distance between the two lists of digits\n    distance = 0\n    for i in range(len(digits1)):\n        distance += abs(digits1[i] - digits2[i])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    diff = n1 ^ n2\n\n    # Count the number of digits in the binary representation of the difference\n    count = 0\n    while diff > 0:\n        diff //= 10\n        count += 1\n\n    # Calculate the sum of the per-digit differences\n    total_sum = 0\n    for i in range(count):\n        if n1 % 10 == n2 % 10:\n            total_sum += 0\n        else:\n            total_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    \n    # iterate through each digit in the first number\n    for i in range(len(str(n1))):\n        # convert the current digit to integer and subtract it from the corresponding digit in the second number\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    \n    # loop through each digit in n1 and n2 and add the absolute value of the difference\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n        difference += abs(digit1 - digit2)\n    \n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to lists of digits\n    list1 = [int(digit) for digit in str(n1)]\n    list2 = [int(digit) for digit in str(n2)]\n    # Calculate the per-digit difference between the two lists\n    per_digit_diff = [abs(x1 - x2) for x1, x2 in zip(list1, list2)]\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(per_digit_diff)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digit_list1 = [int(d) for d in str(n1)]\n    digit_list2 = [int(d) for d in str(n2)]\n\n    # Find the difference between the digits\n    digit_diff = [(digit_list1[i] - digit_list2[i]) for i in range(len(digit_list1))]\n\n    # Find the sum of the absolute values of the differences\n    sum_diff = sum([abs(d) for d in digit_diff])\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1_list = [int(x) for x in str(n1)]\n    num2_list = [int(x) for x in str(n2)]\n\n    # Calculate the per-digit difference between the two numbers\n    digit_diff_sum = sum([abs(num1_list[i] - num2_list[i]) for i in range(len(num1_list))])\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert input numbers to lists of digits\n    num1_digits = list(str(n1))\n    num2_digits = list(str(n2))\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through each digit of the input numbers\n    for i in range(len(num1_digits)):\n        # Calculate the per-digit difference between the two digits\n        digit_diff = abs(int(num1_digits[i]) - int(num2_digits[i]))\n        # Add the digit difference to the result variable\n        result += digit_diff\n\n    # Return the final result\n    return result"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize max sum to negative infinity\n    current_sum = 0 # initialize current sum to zero\n\n    # loop through the array\n    for i in range(size):\n        current_sum += a[i]\n\n        # check if current sum is greater than max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n    return max_sum, start_index\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum and the current subarray sum\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # Loop through the array and update the maximum sum and subarray sum\n    for i in range(len(a)):\n        cur_sum += a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if cur_sum < 0:\n            cur_sum = 0\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a)):\n        current_sum += a[i]\n        if i >= size-1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= a[i-size+1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > size - size:\n            current_sum -= a[i - size]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    arr (list): A list of integers.\n    size (int): The size of the sublist.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    \"\"\"\n    max_sum = arr[0]\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += arr[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the maximum subarray sum and its index\n    max_sum = float('-inf')\n    max_sum_index = 0\n\n    # Initialize the sum variable to 0\n    current_sum = 0\n\n    # Iterate through the list using a for loop\n    for i in range(size):\n        # Add the current element to the sum\n        current_sum += a[i]\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and its index\n            max_sum = current_sum\n            max_sum_index = i\n\n        # If the sum exceeds the size of the list, start over with a new sum\n        if i == size - 1:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum, start"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert both tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union = set1.union(set2)\n    # Convert the set back to a list and sort it in ascending order\n    union_list = sorted(list(union))\n    # Output the union list\n    print(\"The union of the elements of the two given tuples are:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() function to find the union of the elements of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Using sorted() function to sort the union elements in the order of occurrence\n    sorted_union = sorted(union_set)\n    # Outputting the sorted union elements\n    print(\"Union of the elements in the two tuples: \", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates using set\n    unique_tup = list(set(combined_tup))\n    \n    # Sort the unique tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    \n    # Print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two given tuples\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the union of the two given tuples\n    union_tup = sorted(union_tup)\n\n    # Output the union of the two given tuples in sorted order\n    print(\"The union of the two given tuples is:\", end=\" \")\n    for item in union_tup:\n        print(item, end=\" \")\n    print()"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # combine the sets using the union operator\n    union_set = set1.union(set2)\n    # convert the set back to a tuple\n    union_tup = tuple(union_set)\n    # sort the tuple in ascending order\n    union_tup = sorted(union_tup)\n    # output the sorted union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1) | set(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty set to store the union of the elements of the tuples\n    union_set = set()\n    # iterate over each element in the first tuple and add it to the union set\n    for element in test_tup1:\n        union_set.add(element)\n    # iterate over each element in the second tuple and add it to the union set\n    for element in test_tup2:\n        union_set.add(element)\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # output the union list as a comma-separated string\n    print(','.join(str(elem) for elem in union_list))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # use set() to convert tuples to sets and find the union of the sets\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set back to a tuple and sort it in ascending order\n    sorted_union = sorted(union_set)\n    # output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #initialize a dictionary to store the lengths of sublists\n    maxLength = {}\n    #loop through the list of lists\n    for i in range(len(lst)):\n        #loop through the current list of sublists\n        for j in range(len(lst[i])):\n            #check if the current sublist has already been seen before\n            if lst[i][j] not in maxLength:\n                #if not, add it to the dictionary and set its length to 1\n                maxLength[lst[i][j]] = 1\n            else:\n                #if it has, increment its length by 1\n                maxLength[lst[i][j]] += 1\n            #update the maxLength variable with the current maxLength value\n            maxLength = max(maxLength, key=maxLength.get)\n    #return the maximum length of any sublist\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n\n    for sublist in lst:\n        length = 0\n        for item in sublist:\n            length += 1\n        if length > max_length:\n            max_length = length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = lst[i:j]\n            max_len = max(max_len, len(sub_list))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in lst:\n        if len(i) > current_length:\n            max_length = current_length\n            current_length = len(i)\n        else:\n            current_length += len(i)\n    if max_length == 0:\n        max_length = 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            current_length += 1\n            max_length = current_length\n        elif lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through the list\n    for num in lst:\n        # Add the number to the current length\n        current_length += 1\n        # If the current length is greater than the maximum length, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[i:j+1]\n            if len(sub_lst) > max_len:\n                max_len = len(sub_lst)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)  \n\n    # Initialize max_length as 0  \n    max_length = 0  \n\n    # Iterate through the list and calculate the length of the sublists  \n    for i in range(n):  \n        length = 1  \n        j = i + 1  \n        # Check if the next element is equal to the current element  \n        while j < n and lst[j] == lst[i]:  \n            length += 1  \n            j += 1  \n        # Update max_length if the length is greater than max_length  \n        if length > max_length:  \n            max_length = length  \n\n    return max_length  "
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input, searches for values between quotation marks and returns a list of the values.\n    '''\n    pattern = r\"(?<=\\\")\\w+\\b(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"[^\"]*\"'\n    # Find all the matches in the text and return a list of values\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")' # pattern to match quoted text\n    matches = re.findall(pattern, text) # find all matches using the pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern to match quotation marks\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip())\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters that make up the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store the characters\n    chars = []\n    # loop through each character in the word\n    for char in word:\n        # add the character to the list\n        chars.append(char)\n    # return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each character in the string\n    for digit in num:\n        # Add the digit to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # extract each digit of the number\n    while n > 0:\n        # extract the last digit of the number\n        digit = n % 10\n        # add the digit to the sum of digits\n        sum_of_digits += digit\n        # remove the last digit from the number\n        n = n // 10\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize a variable to hold the sum of digits\n    total = 0\n\n    # convert the input number to a string\n    n_str = str(n)\n\n    # loop through each character in the string\n    for digit in n_str:\n        # convert the character to an integer and add it to the total\n        total += int(digit)\n\n    # return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    # Iterate through the digits and add each one to the sum\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then iterate through each digit\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and then to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Use a loop to add up the digits and return the result\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and then to a list of digits\n    digits = list(str(n))\n\n    # Initialize the sum to zero\n    total = 0\n\n    # Iterate over each digit in the list and add it to the total\n    for digit in digits:\n        total += int(digit)\n\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Calculate the sum of the digits\n    sum_of_digits = sum(digits)\n\n    # Return the sum\n    return sum_of_digits"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # convert list to string\n    string_list = ''.join(map(str, list1))\n    # check if string is sorted\n    sorted_string = ''.join(sorted(string_list))\n    if sorted_string == string_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) > 1:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted, and False otherwise.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Check if the first element of the list is greater than or equal to the rest of the elements\n    for i in range(len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    \n    # If all the elements are in order, then the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # check if all elements in the list are of the same data type\n    if all(isinstance(x, type(list1[0])) for x in list1):\n        # sort the list using built-in sort function\n        sorted_list = sorted(list1)\n        # check if the sorted list is the same as the original list\n        if sorted_list == list1:\n            return True\n        else:\n            return False\n    else:\n        return \"Not all elements in the list are of the same data type.\""
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[1] < list1[0]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    length (int): the number of dictionaries to create\n\n    Returns:\n    list of dictionaries: a list of N empty dictionaries\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Iterate through each list in the input\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # Add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list of lists\n    without any duplicate numbers in the original lists.\n    \"\"\"\n    # Convert the input list of lists to a list of unique elements\n    unique_elements = list(set([item for sublist in nums for item in sublist]))\n    # Convert the unique elements back to a list of lists\n    return [list(item) for item in unique_elements]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through each number in the input list\n    for num in nums:\n        # Add the number to the set if it's not already in there\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create an empty list to store the unique numbers\n    unique_nums = []\n\n    # Iterate through each list in the input list\n    for num_list in nums:\n\n        # Iterate through each number in the current list\n        for num in num_list:\n\n            # Check if the current number is not already in the unique_nums list\n            if num not in unique_nums:\n\n                # Add the current number to the unique_nums list\n                unique_nums.append(num)\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with all the unique numbers from the input list.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(lst):\n    # create a dictionary to store the count of each unique number\n    counts = {}\n    for num in lst:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for count in counts.values():\n        product *= count\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    return reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Filter out the unique elements from the list\n    unique_list = list(set(list_data))\n\n    # Calculate the product of the unique elements\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    # create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set from the input list to remove duplicates\n    unique_set = set(list_data)\n\n    # Convert the set back to a list and calculate the product\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and calculates the product of the unique numbers in the list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * (3.14 * r**2 + 2 * 3.14 * r * h + 3.14 * h**2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h + 2*3.14159*r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)+(2*r*h)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * r * r * h + 2 * r * r * (r - h) + 2 * r * (r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r + 2*math.pi*r*h + 2*math.pi*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input\n    and returns its surface area.\n    \"\"\"\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * (r**2) + 2 * (r**2) * (h/3)\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B): \n        return all(x in B for x in A) \n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if the first list is a sublist of the second list\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    else: \n        for i in range(len(B)):\n            if B[i] in A:\n                A.remove(B[i])\n        return len(A) == 0\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Check if all elements of B are present in A\n    if all(x in A for x in B): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return False\n    for i in range(len(A)): \n        if A[i] not in B: \n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if A is sublist of B\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function will take two lists A and B and check whether one list is a sublist of the other.\n\n    Parameters:\n    A (list): List of integers.\n    B (list): List of integers.\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    # Check if B is a sublist of A\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit as 0\n    last_digit = 0\n    # loop through each digit in the factorial\n    while n > 0:\n        # extract the last digit of n\n        digit = n % 10\n        # multiply the last digit with the factorial of the remaining digits\n        last_digit = last_digit * digit\n        # remove the last digit from n\n        n = n // 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n\n    # get the last character of the number as an integer\n    last_char = int(num_str[-1])\n\n    # calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n\n    # get the last digit of the factorial\n    last_digit = factorial // 10 ** (len(num_str) - 1) % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    for i in range(1, n+1):\n        last_digit = last_digit + int(str(factorial(i))[-1])\n    return last_digit\n\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    '''\n    #initialize the last digit as 0\n    last_digit = 0\n\n    #find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    #find the last digit in the factorial\n    while factorial // 10!= 0:\n        last_digit = factorial % 10\n        factorial //= 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of its factorial.\n\n    Example:\n\n    >>> last_Digit_Factorial(5)\n    1\n    >>> last_Digit_Factorial(10)\n    5\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = str(factorial)[-1]\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create an empty list to store the interleaved result\n    result = []\n    \n    # iterate over the lists and add each element to the result list in order\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    index1 = index2 = index3 = 0\n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        interleaved_list.append(list1[index1])\n        interleaved_list.append(list2[index2])\n        interleaved_list.append(list3[index3])\n        index1 += 1\n        index2 += 1\n        index3 += 1\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    # create a temporary list to store the interleaved list\n    interleaved_list = []\n    # iterate over each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the final interleaved list\n    final_list = []\n\n    # Iterate through each list and append its elements to the final list in the proper order\n    for i in range(len(list1)):\n        final_list.append(list1[i])\n        final_list.append(list2[i])\n        final_list.append(list3[i])\n\n    return final_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes in three lists of equal length and returns a single flat list containing the elements of all three lists interleaved.\n    '''\n    # initialize an empty list to hold the interleaved elements\n    interleaved_list = []\n    # loop through each element in the three input lists\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Get the lengths of the input lists\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    # Check that all lists have the same length\n    if len1!= len2 or len1!= len3:\n        raise ValueError(\"All input lists must have the same length.\")\n    # Initialize an empty list to hold the interleaved list\n    result = []\n    # Loop through each element in the input lists\n    for i in range(len1):\n        # Add the first element of list1 to the result list\n        result.append(list1[i])\n        # Add the second element of list2 to the result list\n        result.append(list2[i])\n        # Add the third element of list3 to the result list\n        result.append(list3[i])\n    # Return the interleaved list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate through the elements of the first tuple\n    for element in test_tup1:\n        # If the element is not present in the second tuple, append it to the list\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Create a dictionary to store the count of each element in the combined list\n    count_dict = {}\n\n    # Iterate through the combined list\n    for element in combined_list:\n        # If the element is already in the dictionary, increment its count\n        if element in count_dict:\n            count_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[element] = 1\n\n    # Create a list of the elements with a count of 1 in the combined list\n    dissimilar_elements = [key for key, value in count_dict.items() if value == 1]\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # convert both tuples to sets to remove duplicates and count their occurrences\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # subtract the two sets to find the elements that are in only one set but not the other\n    diff = set1.symmetric_difference(set2)\n    # convert the difference set back to a list and return it\n    return list(diff)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    # find the intersection of the two tuples\n    intersection = set(test_tup1) & set(test_tup2)\n    # find the elements that are only in test_tup1\n    only_in_tup1 = test_tup1 - intersection\n    # find the elements that are only in test_tup2\n    only_in_tup2 = test_tup2 - intersection\n    # add the dissimilar elements to the set\n    dissimilar_set.update(only_in_tup1)\n    dissimilar_set.update(only_in_tup2)\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elems = list(set(test_tup1) & set(test_tup2))\n    dissimilar_elems = set(test_tup1) - set(test_tup2) - set(common_elems)\n    return dissimilar_elems"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using set to remove duplicate elements from both tuples\n    tup1_set = set(test_tup1)\n    tup2_set = set(test_tup2)\n    \n    # Using set intersection to find the dissimilar elements\n    dissimilar_set = tup1_set.intersection(tup2_set)\n    \n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Iterate over the elements of both tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        # If the elements are not equal, append them to the dissimilar list\n        if element1!= element2:\n            dissimilar.append(element1)\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Filter out even elements in the test tuple\n    even_tuple = list(filter(even_fnc, test_tuple))\n    # Return the even tuple\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_elements = []\n    even_elements = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            odd_elements.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_elements.append(item)\n        else:\n            odd_elements.append(item)\n    return odd_elements + even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple: \n        if isinstance(i, (tuple, list)):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple\n\ndef even_fnc(num): \n    '''\n    Write a function to check if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        else:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    return [x for x in test_tuple if even_fnc(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            new_tuple.append(even_ele(test_tuple[i], even_fnc))\n        elif even_fnc(test_tuple[i]):\n            new_tuple.append(test_tuple[i])\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Convert the nested tuple to a list to make it easier to manipulate\n    nested_list = list(test_tuple)\n\n    # Loop through the list and check if each element is even using the even_fnc function\n    for i in range(len(nested_list)):\n        if not even_fnc(nested_list[i]):\n            # Remove the uneven element from the list\n            del nested_list[i]\n\n    # Convert the list back to a tuple and return it\n    return tuple(nested_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Unpack the tuple to check each element individually\n    for i in test_tuple:\n        # Check if the element is even\n        if even_fnc(i):\n            # If even, add it to a new list\n            even_list.append(i)\n        # If odd, add it to the new list as well\n        else:\n            odd_list.append(i)\n    # Merge the even and odd lists into a new tuple\n    return tuple(even_list + odd_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            new_tuple.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = ((1, 2, 3, 4, 5), ('a', 'b', 'c', 'd'), 6, (True, False, True))\nprint(even_ele(test_tuple, is_even)) # Output: (2, 6)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_fnc(item))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list\n\n\ndef even_fnc(item):\n    \"\"\"\n    Define a nested function to remove even elements from the nested tuple.\n    \"\"\"\n    return [x for x in item if x % 2 == 0]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif isinstance(i, even_fnc):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculate the area of each side of the pyramid\n    area_base = b*s\n    area_top = s*s\n    #calculate the surface area of the pyramid\n    area_pyramid = (area_base+area_top)*2\n    #return the surface area of the pyramid\n    return area_pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(s/3)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the surface area of the base of the pyramid\n    base_area = 0.5 * b * s\n    \n    # Calculate the surface area of the top of the pyramid\n    top_area = 0.5 * b * b\n    \n    # Add the surface areas of the base and top of the pyramid to get the total surface area\n    total_area = base_area + top_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*b)+(s*s) \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + 2*s*b + s*s + b*b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # finding the half side of the square pyramid\n    half = b/2\n\n    # finding the area of each of the three sides of the square pyramid\n    area1 = b**2\n    area2 = s**2\n    area3 = (b**2 + s**2 + half**2)**0.5\n\n    # finding the total surface area of the square pyramid\n    surface_area = (3*area1 + 4*area2 + 4*area3)/2\n\n    # printing the surface area of the square pyramid\n    print(\"The surface area of the square pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b * s) + (b * s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (2*b*s) + (2*s*s) + (2*b*b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s*(2*b+2*s) + b*b*s\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid\n    surface_area = 2 * (b * s) + 6 * b * s**2\n    print(\"The surface area of the pyramid is\", surface_area)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # check if the dictionary is empty\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    catalan = 0\n    for i in range(n+1):\n        catalan += (2*i+1) * (4*i-1) * (2*i+1) // (i+2)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Compute the Catalan number using the formula\n    # C(n, k) = binomial(n, k) / (k! * (n-k)!)\n    # where k=0, 1, 2,... n\n\n    result = 0\n    for k in range(1, n + 1):\n        numerator = (1 * (2 * n - 1) * (2 * n - 2) // (k * (2 * n - k)))\n        denominator = factorial(k) * factorial(n - k)\n        result += numerator / denominator\n\n    return result\n\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        numerator = 1\n        denominator = 1\n        for i in range(1, n+1):\n            numerator *= i\n            denominator *= (n-i+1)\n        return numerator / denominator"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (4*n - 2) * catalan_number(n//2)\n    else:\n        return (4*n - 2) * catalan_number((n-1)//2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) * (2*n-1) // (n+1)\n    else:\n        return catalan_number(n//2) * (2*n-1) // (n+1) * 4 // (2*n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (4*n-1) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_list = [1]\n        for i in range(2, num+1):\n            prev = catalan_list[i-1]\n            curr = 2*prev*i\n            catalan_list.append(curr)\n        return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (4*n - 1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 2*catalan_number(num-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define a pattern to match adverbs ending with ly\n    pattern = r'\\b(ly|lys|lyse|lyses|lysi|lysing|lysine|lysingly|lysinely|lysily|lysilyly|lysilyman|lysilywoman|lysilychild|lysilyteen|lysilytwelve|lysilythirteen|lysilyforteen|lysilyfifteen|lysilysixteen|lysilyseventeen|lysilyeighteen|lysilynineteen|lysilytwenty|lysilythirty|lysilyforty|lysilyfifty|lysilysixty|lysilyseventy|lysilyeighty|lysilyninety|lysilyhundred|lysilythousand|lysilymillion|lysilybillion|lysilytrillion|lysilyquadrillion|lysilyquintillion|lysilysextillion|lysilyseptillion|lysilyoctillion|lysilynonillion|lysilydecillion|lysilyundecillion|lysilyduodecillion|lysilytredecillion|lysilyquattuordecillion|lysilyquindecillion|lysilysexdecillion|lysilyseptendecillion|lysilyoctodecillion|lysilynovemdecillion|lysilyvigintillion)\\b'\n\n    # Use the re.findall() function to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Loop through each adverb found and append its position to the positions list\n    for adverb in adverbs:\n        start_index = text.find(adverb)\n        end_index = start_index + len(adverb)\n        positions.append((start_index, end_index))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb and its positions in the string.\n    The adverb must be at the end of a word with a vowel as its last consonant, otherwise it will be considered as a part of the noun or adjective.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    words = re.findall(r'\\b\\w+\\b', text)\n    adverbs = []\n    \n    for i, word in enumerate(words):\n        if word[-1].lower() in vowels:\n            adverb = word[-1:]\n            if adverb.lower() == 'ly':\n                adverbs.append((word, i))\n                \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        adverbs.append((match, start, end))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(the|a|an|an?)\\s+([aeiouy]|(?:[aeiouy][aeiouy]?))\\s*ly\\b'\n\n    # Use the re.findall() function to find all the matches in the given text\n    matches = re.findall(pattern, text)\n\n    # If there are matches, return a list of tuples containing the first adverb and its positions\n    if matches:\n        return [(match[2].strip(), match.start()) for match in matches]\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(?:st|nd|rd|th)\\s*(?:(?:of|under|against|above|below|over|between|through|among|except)\\s*)+ly\\b'\n    # Use the re.finditer() function to find all matches in the string\n    matches = re.finditer(pattern, text)\n    # Iterate over the matches and return a list of tuples containing the adverb and its positions\n    result = []\n    for match in matches:\n        result.append((match.group(), match.span()))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a list to store the positions of all matches\n    positions = []\n\n    # Iterate over the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n\n    # Return a list of tuples containing the matches and their positions\n    return list(zip(matches, positions))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # Otherwise, return a list of tuples containing the matched adverb and its position in the original text\n    result = []\n    for match in matches:\n        start, end = match.span()\n        result.append((match, start, end))\n    \n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regex to find all occurrences of the pattern \"(\\w+)(ly)$\"\n    matches = re.findall(r'\\b(\\w+)(ly)\\b', text)\n\n    # Loop through each match and print the adverb and its position\n    for match in matches:\n        print(f'Adverb \"{match[1]}\" found at position {match[0]}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define the pattern to search for adverbs ending with ly\n    pattern = r'\\b[lL][yY]\\b'\n    # Search for all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    # Loop through all matches and append their positions to the adverb_positions list\n    for match in matches:\n        start, end = match.span()\n        adverb_positions.append((start, end))\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if not heapq.heappushpop(heap, -item):\n            heapq.heappushpop(heap, -item)\n        if len(heap) > n:\n            heapq.heappushpop(heap, -heapq.heappop(heap))\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n as arguments.\n    It returns a list of the n most expensive items in the dataset.\n\n    The function uses a min heap to store the n most expensive items.\n    The heapq module is used to achieve this.\n\n    The time complexity of the function is O(n log n) due to the sorting operation of the heap.\n    '''\n    # sort the items by price in ascending order\n    sorted_items = sorted(items, key=lambda x: x[1])\n    # create a min heap of size n and add the first n items from the sorted items list\n    heapq.heapify(sorted_items[:n])\n    # remove the first item from the heap and add the next item\n    for i in range(n, len(sorted_items)):\n        heapq.heappushpop(sorted_items[:n], sorted_items[i])\n    # return the n most expensive items in the dataset\n    return [item for item in sorted_items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n\n    Parameters:\n    items: A list of tuples where each tuple contains the price and item name of an item.\n    n: An integer indicating the number of items to be considered for the top n.\n\n    Returns:\n    A list of the n most expensive items.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the min-heap if they are cheaper than the smallest item in the heap\n    for price, item in items:\n        if not min_heap or price < min_heap[0][0]:\n            heapq.heappush(min_heap, (price, item))\n\n        # If the heap size is greater than n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items in the min-heap in the order of their prices\n    result = []\n    for _ in range(n):\n        result.append(min_heap[0][1])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input.\n    It returns a list of the n most expensive items in the list.\n    \"\"\"\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, float('inf'))\n\n    # Iterate through the items and update the min heap with each item\n    for item in items:\n        if item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = [(-item[1], item) for item in items]\n    heapq.heapify(heap)\n\n    result = []\n    for _ in range(n):\n        _, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): a list of (item, price) tuples\n        n (int): the number of most expensive items to find\n\n    Returns:\n        list: a list of n most expensive items\n    \"\"\"\n    # create a min-heap of (price, index) tuples, sorted by price\n    heap = [(-price, index) for index, (item, price) in enumerate(items)]\n    heapq.heapify(heap)\n\n    # extract the n most expensive items from the heap and return them as a list\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the number of items to be returned.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    # Create a max heap of size n to store the top n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    # Return the top n items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Initialize an empty priority queue\n    heap = []\n    # Iterate over each item in the dataset\n    for item in items:\n        # If the heap is not full or the item is less expensive than the\n        # top item in the heap, add the item to the heap\n        if len(heap) < n or item < heap[0][1]:\n            heapq.heappush(heap, (item, item))\n        # If the heap is full and the item is less expensive than the\n        # top item in the heap, remove the least expensive item from the heap\n        elif item < heap[0][1] and len(heap) == n:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (item, item))\n    # Return the n most expensive items from the heap\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a min-heap of size n\n    heap = []\n\n    # Iterate over the items and insert them into the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Return the n most expensive items from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input, and returns a list of the n most expensive items in the dataset.\n    '''\n    # sort the items in descending order based on the value of the second element of each item tuple\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # extract the first n items from the sorted list\n    top_n_items = sorted_items[:n]\n    \n    # return the top_n_items list as the result\n    return top_n_items"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n > len(l):\n        return \"Error: nth element does not exist in the list\"\n    else:\n        return [l[0]] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        raise ValueError(\"List length must be greater than or equal to the given index.\")\n    else:\n        half = len(l) // 2\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) > n:\n        return l[n:] + l[:n]\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is greater than 0\n    if len(l) <= 0:\n        return \"The list is empty\"\n    \n    # check if the length of the list is less than or equal to the n value\n    if len(l) <= n:\n        return \"The list is not long enough to split at the nth element\"\n    \n    # find the index of the nth element and add it to the end of the list\n    mid = n // 2\n    result = l[mid:] + l[:mid]\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return l\n    elif n < len(l):\n        return l + split_Arr(l, n+1)\n    else:\n        return []"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"The length of the list is less than the nth element.\")\n        return l\n    else:\n        return [l[0]] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than length of list\")\n        return None\n    elif n == 0:\n        return [l[0]]\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + [l[0]] + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid index\"\n    else:\n        l1 = l[:n]\n        l2 = l[n:]\n        l1.extend(l2)\n        return l1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a new list to store the first part of the list\n    arr1 = []\n    # create a new list to store the second part of the list\n    arr2 = []\n    # iterate over the list from the nth element to the end\n    for i in range(n, len(l)):\n        # append each element to the first part list\n        arr1.append(l[i])\n    # iterate over the list from the beginning to the nth element\n    for i in range(0, n):\n        # append each element to the second part list\n        arr2.append(l[i])\n    # concatenate the two lists into a single list and return it\n    return arr1 + arr2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at nth element\n    mid = len(l) // 2\n    if n > mid:\n        l = l[mid+1:]\n        l.append(l.pop(0))\n    elif n < mid:\n        l = l[:mid]\n        l.append(l.pop())\n    else:\n        return l\n    \n    # Add the first part to the end\n    l.insert(0, l.pop())\n    \n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # convert the list to a tuple\n    tupx = tuple(listx)\n    return tupx"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store min and max values\n    min_val = nums[0]\n    max_val = nums[0]\n    # iterate over the list and update min_val and max_val\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    # find the difference between max_val and min_val\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between maximum and minimum values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    # find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # calculate the difference between largest and smallest values\n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        sqrt_num = int(num ** 0.5)\n        if sqrt_num ** 2 == num:\n            print(sqrt_num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        square = num * num\n        if square == num:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Check if the input is valid\n    if a < 1 or b < 1:\n        raise ValueError(\"Input numbers must be greater than or equal to 1\")\n    if b >= a:\n        raise ValueError(\"b must be less than or equal to a\")\n\n    # Initialize variables to keep track of the number of perfect squares found\n    perfect_squares_found = 0\n    square_count = 0\n    square_sum = 0\n\n    # Iterate through the numbers between a and b, checking if each number is a perfect square\n    for num in range(a, b+1):\n        square_sum += num\n        square_count += 1\n        while square_sum ** 2 <= num:\n            perfect_squares_found += 1\n            square_sum -= num\n            square_count -= 1\n\n    # Return the number of perfect squares found\n    return perfect_squares_found"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            return square\n    return \"No perfect squares found between {} and {}\".format(a, b)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Finding the range of numbers between a and b\n    numbers = list(range(a, b+1))\n\n    # Filtering out the numbers that are not perfect squares\n    perfect_squares = [num for num in numbers if num ** 2 == sum([int(digit) for digit in str(num ** 2)])]\n\n    # Printing the perfect squares\n    print(\"Perfect squares between\", a, \"and\", b, \"are:\")\n    for square in perfect_squares:\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a < b:\n        start, end = a, b\n    else:\n        start, end = b, a\n    count = 0\n    while start <= end:\n        if start ** 2 == end:\n            count += 1\n        start += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            squares.add(i)\n        else:\n            break\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a list to store perfect squares\n    perfect_squares_list = []\n\n    # Iterate from a to b\n    for num in range(a, b + 1):\n        # Check if the current number is a perfect square\n        if num == int(num ** 0.5 + 0.5) ** 2:\n            # If it is, add it to the list\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    This function converts polar coordinates (r, phi) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function converts polar coordinates (r,theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    # Convert theta from degrees to radians\n    theta = theta * cmath.pi / 180\n\n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r,theta) to rectangular coordinates (x,y)\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    theta = cmath.phase(x - y*1j)\n    \n    print(\"Polar Coordinates:\", x, y, r, phi)\n    print(\"Rectangular Coordinates:\", r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters\n    ----------\n    r : float\n        The radius of the point.\n    theta : float\n        The angle in radians of the point.\n    \n    Returns\n    -------\n    tuple\n        A tuple containing the x and y coordinates of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list has more than 1 element\n    if len(newList) > 1:\n        # Get the first and last elements of the list\n        first = newList[0]\n        last = newList[-1]\n        # Interchange the first and last elements of the list\n        newList[0] = last\n        newList[-1] = first\n        # Print the modified list\n        print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has length 1\n    if length == 1:\n        return newList\n\n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[length - 1]\n\n    # Interchange the first and last elements\n    newList[0] = last\n    newList[length - 1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"Error: List should have at least two elements to swap.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #swap the first and last elements \n    newList[0], newList[-1] = newList[-1], newList[0] \n    #print the new list \n    print(\"New List:\", newList) "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to zero\n    sum_product = 0\n\n    # Initialize the binomial coefficient for n choose 0\n    coeff_0 = 1\n\n    # Initialize the binomial coefficient for n choose k\n    coeff_k = 1\n\n    # Loop through the number of k values\n    for i in range(k):\n\n        # Update the binomial coefficient for n choose i\n        coeff_i = (n-i) * coeff_0 + i * coeff_k\n\n        # Add the updated binomial coefficient to the sum\n        sum_product += coeff_i\n\n        # Update the values for the next iteration\n        coeff_0 = coeff_k\n        coeff_k = coeff_i\n\n    # Return the final sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n\n    # Calculate the binomial coefficient for (n, k)\n    coeff = 1\n    for i in range(n - k + 1):\n        coeff *= (n - i)\n        coeff //= i + 1\n\n    # Multiply the coefficient by the sum of the first k terms\n    for i in range(k):\n        sum += coeff\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #initializing the sum variable\n    sum=0\n    #looping through the values of k from 1 to n-k\n    for i in range(1,n-k+1):\n        #calculating the product of the binomial co-efficients\n        product=1\n        for j in range(1,k+1):\n            product*=i\n            product//=j\n        #adding the product to the sum variable\n        sum+=product\n    #returning the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # calculate the product of consecutive binomial co-efficients\n    prod = 1\n    for i in range(1,k+1):\n        prod *= (n-i+1) // i\n\n    # calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(1,n+1):\n        sum += prod\n        prod *= i\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(k,n+1):\n        coeff *= i\n    return coeff\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum = 0\nfor i in range(k,n+1):\n    sum += binomial_Coeff(n,i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two parameters n and k and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check if the value of k is greater than or equal to n\n    if k >= n: \n        return 0 \n    # Initialize the sum variable\n    sum = 0 \n    # Initialize the factorial variable\n    factorial = 1 \n    # Loop through each value of k from 0 to n-1\n    for i in range(k+1): \n        # Calculate the factorial of k\n        factorial *= (n-i) \n        # Calculate the factorial of (n-k)\n        factorial //= i+1 \n        # Add the factorial to the sum\n        sum += factorial \n    return sum "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Using recursion to find the sum of the product of consecutive binomial co-efficients\n    def find_sum(n,k,sum=0): \n        if k == 0 or k == n: \n            return sum \n        else: \n            return find_sum(n,k-1,sum+n*find_sum(n-1,k-1))\n\n    # Calling the recursive function to find the sum of the product of consecutive binomial co-efficients\n    return find_sum(n,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return n * binomial_Coeff(n-1,k-1) * binomial_Coeff(n-2,k-2) *... * binomial_Coeff(1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): Upper limit of the binomial series.\n    k (int): Order of the binomial series.\n\n    Returns:\n    (float): The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,k+1):\n        sum += n * (n-1) // 2 * i\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip() # Remove leading and trailing spaces\n    ip = re.sub(r'^\\d+\\.', '', ip) # Remove leading decimal point\n    ip = re.sub(r'\\.$', '', ip) # Remove trailing decimal point\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each octet of the ip address\n    ip = re.sub(r'(\\b0\\b)', r'\\1', ip)\n\n    # Remove the remaining zeroes at the end of the ip address\n    ip = re.sub(r'(\\b\\d\\b)\\b0*$', r'\\1', ip)\n\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\d)(?<=\\d)\\1+', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+(\\.\\d+){2}$', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip) # remove leading zeroes\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match ip addresses\n    pattern = r'\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'\n\n    # Use the pattern to search for the ip address in the input\n    match = re.search(pattern, ip)\n\n    # If a match is found, remove the leading zeroes and return the result\n    if match:\n        return ip.replace(match.group(0), match.group(0)[1:])\n    # If no match is found, return the input unchanged\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+:\\d+$', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+:\\d+$', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+:\\d+$', '', ip)\n    ip = re.sub(r'^\\d+:\\d+$', '', ip)\n    ip = re.sub(r'^:\\d+$', '', ip)\n    ip = re.sub(r'^::', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip() # Remove leading and trailing spaces\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.?0*0*$', '', ip) # Remove leading zeros in each octet\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = ip.lstrip('0')\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n\n    for i in list1:\n        if i % 2 == 0:\n            first_even = i\n        else:\n            first_odd = i\n\n    return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    return count_even - count_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    even_num = None\n    odd_num = None\n\n    # iterate through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num += num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num += num\n\n    # calculate the difference between the even and odd numbers\n    diff = even_num - odd_num\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    evens = [num for num in lst if num % 2 == 0][:1]\n    odds = [num for num in lst if num % 2!= 0][:1]\n    return evens[0] - odds[0]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        return 'The list must have at least two elements'\n    \n    # Find the first even number\n    even_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Find the first odd number\n    odd_num = None\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    # Check if both numbers were found\n    if even_num is None or odd_num is None:\n        return 'The list must have at least two even and two odd numbers'\n    \n    # Calculate the difference between the two numbers\n    diff = odd_num - even_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List must have at least 2 elements.\"\n    else:\n        even = 0\n        odd = 0\n        for i in range(len(list1)):\n            if list1[i] % 2 == 0:\n                even = list1[i]\n            else:\n                odd = list1[i]\n        return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)!= 4:\n        return \"Error: Input list should have exactly 4 elements.\"\n    \n    even_num = None\n    odd_num = None\n    \n    for i in range(4):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n        elif list1[i] % 2!= 0:\n            odd_num = list1[i]\n    \n    if even_num == None or odd_num == None:\n        return \"Error: No even or odd numbers found in the list.\"\n    \n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for number in list1:\n        if number % 2 == 0:\n            even_number = number\n        else:\n            odd_number = number\n    return odd_number - even_number"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Converting binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Finding the number of set bits in each number\n    count1 = bin(num1).count('1')\n    count2 = bin(num2).count('1')\n\n    # Counting the number of bits to be swapped\n    diff = abs(count1 - count2)\n\n    # Counting the minimum number of swaps required\n    swaps = 0\n    for i in range(diff):\n        if count1 < count2:\n            count1 += 1\n        elif count2 < count1:\n            count2 += 1\n        else:\n            # This condition handles the case where both numbers have the same number of set bits\n            if str1[i]!= str2[i]:\n                swaps += 1\n            count1 += 1\n            count2 += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    \n    # Initialize swaps counter\n    swaps = 0\n    \n    # Initialize two pointers for two binary strings\n    i = j = 0\n    \n    # Compare the characters of the two strings from left to right\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            # Swap the characters at the pointers\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            \n            # Increment swaps counter\n            swaps += 1\n            \n            # Move the pointers towards the middle of the strings\n            i += 1\n            j += 1\n    \n    # Count the remaining characters in one string\n    if i < len(str1):\n        swaps += len(str1) - i\n    elif j < len(str2):\n        swaps += len(str2) - j\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert one number to another.\n    \"\"\"\n    str1_list = [int(i) for i in str1]  # converting binary string to list of integers\n    str2_list = [int(i) for i in str2]\n\n    n = max(len(str1_list), len(str2_list))  # calculating the length of the larger string\n\n    for i in range(n):\n        # finding the position of the characters in both strings\n        pos1 = str1_list.index(i)\n        pos2 = str2_list.index(i)\n\n        # swapping the characters in the strings\n        str1_list[pos1], str1_list[pos2] = str1_list[pos2], str1_list[pos1]\n        str2_list[pos1], str2_list[pos2] = str2_list[pos2], str2_list[pos1]\n\n    # calculating the total number of swaps required to convert the strings\n    swaps = 0\n    for i in range(n):\n        if str1_list[i]!= str2_list[i]:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary numbers to their corresponding lists of digits\n    num1 = [int(d) for d in str1]\n    num2 = [int(d) for d in str2]\n\n    # Initialize the swaps counter to zero\n    swaps = 0\n\n    # Compare the two binary numbers and count the number of swaps required to convert them\n    for i in range(len(num1)):\n        if num1[i]!= num2[i]:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert the first string to the second string.\n    The function uses dynamic programming approach to solve the problem.\n    \"\"\"\n    n1, n2 = len(str1), len(str2)\n    dp = [[0]*(n1+1) for i in range(n2+1)]\n\n    # initialize first row and first column\n    for i in range(n2+1):\n        dp[i][0] = i\n\n    for i in range(n1+1):\n        dp[0][i] = i\n\n    # fill the remaining cells\n    for i in range(1, n2+1):\n        for j in range(1, n1+1):\n            if str1[j-1] == '1' and str2[i-1] == '0':\n                dp[i][j] = dp[i-1][j]\n            elif str1[j-1] == '0' and str2[i-1] == '1':\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n\n    return dp[n2][n1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize the length of each string\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Create a set of all possible swaps to perform\n    swaps = set()\n    for i in range(n1):\n        for j in range(n2):\n            # Check if swapping i with j would result in a valid swap\n            if (str1[i] == '1' and str2[j] == '0') or (str1[i] == '0' and str2[j] == '1'):\n                # If so, add a swap to the set of swaps\n                swaps.add((i, j))\n\n    # Return the minimum number of swaps required to convert one binary number to the other\n    return len(swaps)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize variables for binary strings\n    n1 = len(str1)\n    n2 = len(str2)\n    # Initialize variables for swaps\n    swaps = 0\n    \n    # Iterate through each bit position in both strings\n    for i in range(max(n1, n2)):\n        # If the i-th bit in str1 is 1 and the i-th bit in str2 is 0, swap the characters at that position\n        if str1[i] == '1' and str2[i] == '0':\n            str1 = str1[:i] + str1[i+1:] + str2[i] + str2[:i] + str2[i+1:]\n            str2 = str2[:i] + str2[i+1:] + str1[i] + str1[:i] + str1[i+1:]\n            swaps += 1\n    \n    # Check if the length of str2 is less than the length of str1\n    if n1 < n2:\n        str1, str2 = str2, str1\n    \n    # Calculate the minimum number of swaps required to convert str1 to str2\n    while str1!= str2:\n        # If str1 is greater than str2, swap the characters at the positions of the two strings that are different\n        if str1 > str2:\n            i = str1.index('1')\n            j = str2.index('1')\n            str1 = str1[:i] + str1[i+1:] + str2[j] + str2[i] + str2[j+1:]\n            str2 = str2[:j] + str2[j+1:] + str1[i] + str1[j] + str1[i+1:]\n            swaps += 1\n        else:\n            i = str2.index('1')\n            j = str1.index('1')\n            str1 = str1[:j] + str1[j+1:] + str2[i] + str2[j] + str2[i+1:]\n            str2 = str2[:i] + str2[i+1:] + str1[j] + str1[i] + str1[j+1:]\n            swaps += 1\n    \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[float('inf')] * (n + 1) for _ in range(2)]\n    \n    # Fill the dp table\n    for i in range(2):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            else:\n                dp[i][j] = dp[(1 - i) % 2][j]\n                if j < n and str1[j]!= str2[j]:\n                    dp[i][j] = min(dp[i][j], dp[(1 - i) % 2][j + 1] + 1)\n                \n    return dp[str1[0] == '1'][1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    n = len(str1)\n    # Initialize two lists to store the binary representation of str1 and str2\n    binary_list1 = []\n    binary_list2 = []\n\n    # Convert each character in the string to binary and append to the corresponding list\n    for i in range(n):\n        binary_list1.append(bin(int(str1[i], 2))[2:].zfill(8))\n        binary_list2.append(bin(int(str2[i], 2))[2:].zfill(8))\n\n    # Initialize two variables to store the number of swaps required and the current position of the swapped bits\n    swap_count = 0\n    current_swap = -1\n\n    # Compare the binary representations of str1 and str2 and swap the bits if they are different\n    for i in range(n):\n        if binary_list1[i]!= binary_list2[i]:\n            # Swap the bits and increment the swap count\n            binary_list1[i], binary_list2[i] = binary_list1[i][::-1], binary_list2[i][::-1]\n            swap_count += 1\n            current_swap = i\n\n    # If the last bit of str1 is different from the last bit of str2, swap it\n    if binary_list1[-1]!= binary_list2[-1]:\n        # Swap the bits and increment the swap count\n        binary_list1[-1], binary_list2[-1] = binary_list1[-1][::-1], binary_list2[-1][::-1]\n        swap_count += 1\n\n    # Return the swap count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Get the length of the binary number\n    n = len(str1)\n    # Initialize a variable to keep track of minimum number of swaps\n    min_swaps = float('inf')\n    # Iterate through the possible values of each bit\n    for i in range(n):\n        # Check if the value of the bit in the first string is equal to the value of the bit in the second string\n        if int(str1[i])!= int(str2[i]):\n            # Increment the number of swaps if the values are not equal\n            min_swaps = min(min_swaps, abs(int(str1[i]) - int(str2[i])))\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initializing the total size as 0\n    total_size = 0\n\n    # loop through each tuple in the list\n    for tup in tuple_list:\n        # calculate the size of the tuple in bytes\n        size = sys.getsizeof(tup)\n\n        # add the size of the tuple to the total size\n        total_size += size\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setrecursionlimit(10**6) # set recursion limit to avoid stack overflow error\n    total_size = 0 # initialize total size to 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            total_size += tuple_size(item) # recursive call to find the size of nested tuple\n        else:\n            total_size += sys.getsizeof(item) # add the size of the item to the total size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        item_size = sys.getsizeof(item)\n        total_size += item_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of each tuple\n    tuple_size = 0\n    for tuple_obj in tuple_list:\n        tuple_size += sys.getsizeof(tuple_obj)\n    \n    # Calculate the size of the whole tuple list\n    total_size = sys.getsizeof(tuple_list)\n    \n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size to 0\n    size = 0\n\n    # Loop through each element in the tuple\n    for element in tuple_list:\n        # Calculate the size of the element in bytes\n        element_size = sys.getsizeof(element)\n        # Add the size to the total size\n        size += element_size\n\n    # Return the total size in bytes\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments: two sorted arrays and an integer k.\n    It returns the kth element from the two arrays. If the two arrays are of different lengths,\n    the function will return the kth element from the first array, which has a length greater than or equal to k.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        if i == k:\n            return arr2[j - 1]\n        elif j == k:\n            return arr1[i - 1]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == k:\n            return arr1[i-1]\n        elif i == len(arr1):\n            return arr2[j-1]\n        elif j == len(arr2):\n            return arr1[i-1]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    if k > len(arr1) + len(arr2):\n        return None\n    elif k <= len(arr1):\n        return find_in_list(arr1, k)\n    else:\n        return find_in_list(arr2, k - len(arr1))\n\n\ndef find_in_list(arr, k):\n    if k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # Find the total length of the merged array\n    total_length = n1 + n2\n    # Create an empty merged array\n    merged_arr = []\n    # Initialize two pointers for the two arrays\n    i = 0\n    j = 0\n    # Compare the elements at the two pointers and add the smaller element to the merged array\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    # Append any remaining elements in the first array to the merged array\n    merged_arr += arr1[i:]\n    # Append any remaining elements in the second array to the merged array\n    merged_arr += arr2[j:]\n    # If k is less than the length of the merged array, return the element at index k\n    if k < total_length:\n        return merged_arr[k-1]\n    # Otherwise, return the element at index k-total_length (since the merged array starts from index 0)\n    else:\n        return merged_arr[total_length-k-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    sum_of_powers = 0\n    temp_number = number\n    while temp_number > 0:\n        digit = temp_number % 10\n        sum_of_powers += digit ** 3\n        temp_number //= 10\n    return number == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(num):\n    '''\n    A function to check whether a number is Armstrong or not.\n    '''\n    num_str = str(num)\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    elif number == 10:\n        return True\n    else:\n        sum = 0\n        n = number\n        while n > 0:\n            digit = n % 10\n            sum += digit ** 3\n            n //= 10\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum([digit ** len(digits) for digit in digits])\n    # Compare the original number with the sum of the digits raised to the power of the number of digits\n    if number == sum_of_digits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_list = []\n    for digit in num_str:\n        num_list.append(int(digit))\n    num_sum = sum(num_list)\n    return num_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(n):\n    # initialize sum to zero\n    s = 0\n    # convert number to string\n    num_str = str(n)\n    # calculate the sum of the squares of digits in the number\n    for digit in num_str:\n        s += int(digit)**len(num_str)\n    # check if the sum is equal to the original number\n    if s == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    return sum([int(digit)**len(str(n)) for digit in str(n)]) == n\n\ndef armstrong_number(n):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    if is_armstrong_number(n):\n        print(f\"{n} is an Armstrong number\")\n    else:\n        print(f\"{n} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        num_digits = len(str(number))\n        sum_of_cubes = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum_of_cubes += digit ** num_digits\n            temp //= 10\n        if number == sum_of_cubes:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Returns True if num is an armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    return num == total\n\nnum = int(input(\"Enter a number: \"))\nif is_armstrong(num):\n    print(num, \"is an armstrong number.\")\nelse:\n    print(num, \"is not an armstrong number.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"The sum is:\", sum)\n    print(\"The average is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", number, \"natural numbers is\", sum)\n    print(\"Average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum: \", sum)\n    print(\"Average: \", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        sum_of_numbers += i\n        count += 1\n        \n    average = sum_of_numbers / count\n    \n    return (sum_of_numbers, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum_ = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum_ += i\n        # increment the count of numbers\n        count += 1\n    # calculate the average\n    average = sum_ / count\n    # return the sum and average as a tuple\n    return (sum_, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    total = 0\n    count = 0\n    # iterate n times\n    for i in range(1, n+1):\n        # add i to sum and increment count\n        total += i\n        count += 1\n    # calculate average\n    average = total / count\n    # return sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If no repeated character is found, it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character by iterating through the dictionary\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no character was repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_dict = {}\n    \n    for char in char_list:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = {}\n    for char in str1:\n        if char in seen:\n            return char\n        else:\n            seen[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    char_count = {}\n\n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_list = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            j = 3\n            while j <= n:\n                if i*j <= n:\n                    ludic_list.append(i*j)\n                j += 2\n        else:\n            j = 2\n            while j <= n:\n                if i*j <= n:\n                    ludic_list.append(i*j)\n                j += 2\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    i = 0\n    \n    while True:\n        if i % 2 == 0:\n            lucid_numbers.append(2**i)\n        i += 1\n        \n        if i > n:\n            break\n            \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        if i <= 3:\n            lucids.append(i)\n        elif i%2 == 0:\n            lucids.append(i)\n            if i%3 == 0:\n                lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i + j == n:\n                lucid_numbers.append(i)\n                break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid.append(i)\n        elif i == 2:\n            lucid.append(i)\n        else:\n            j = 2\n            while j <= (n-i)/2:\n                if i-2*j > 1:\n                    if (i-2*j)%6 == 0:\n                        lucid.append(i-2*j)\n                j += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i**2)\n        if i**3 <= n:\n            lucid_numbers.append(i**3)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i > 1 and i % 2 == 0:\n            while i * i <= n:\n                i += 1\n        else:\n            i += 1\n        lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(2*i)\n        else:\n            lucid_numbers.append(3*i+1)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into words\n    reversed_words = []\n    for word in words: # Reverse each word\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words) # Join the reversed words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # reverse the characters in each word\n    return \" \".join(reversed_words)  # join the reversed words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    words.reverse() # reverse the order of the words\n    reversed_words =''.join(words) # join the words back together with spaces\n    return reversed_words # return the reversed words as a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # split the input string into words\n    words = s.split()\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the reversed words back into a string\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list in-place using the reverse() method\n    words.reverse()\n    # join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n    \n    # check if the number is divisible by any number between 2 and num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\n\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n\nprint(radian_degree(90))  # Output: 1.5707963267948966"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start = matches[0].start()\n        end = matches[0].end()\n        literal = matches[0]\n        return literal, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    start = min([m.start() for m in matches])\n    end = max([m.end() for m in matches])\n    return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # compile the regex pattern\n    pattern_obj = re.compile(pattern)\n    \n    # find all matches of the pattern in the text\n    matches = pattern_obj.finditer(text)\n    \n    # iterate over the matches and return the substrings with start and end indices\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = match.group()\n        print(literal, start, end)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = 0\n        for match in matches:\n            start_index = text.find(match, start_index)\n            yield match, start_index, start_index + len(match)\n            start_index += len(match)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(\"Match: \", match)\n        print(\"Start index: \", start_index)\n        print(\"End index: \", end_index)\n        print(\"--------------------------------------------\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex pattern to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Iterate over the matches and return the matching substrings, a start index, and an end index for each match\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        yield match, start_index, end_index"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return n * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_sequence = [0]\n    for i in range(1, n+1):\n        bell_sequence.append(bell_sequence[i-1] + bell_sequence[i-2])\n    return bell_sequence[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(math.factorial(n) / (math.factorial(n - 1) * math.factorial(1)))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize variables\n    prev_term = 0\n    curr_term = 1\n\n    # Calculate nth bell number\n    for i in range(1, n+1):\n        print(curr_term, end=' ')\n        temp = curr_term\n        curr_term = 2*prev_term + curr_term\n        prev_term = temp"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0]\n    for i in range(1, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find the nth Bell number.\n    \"\"\"\n    # initialize variables\n    result = 0\n    a = 1\n    b = 1\n\n    # calculate the nth bell number\n    for i in range(n):\n        result += a\n        a, b = b, result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n-1)) + bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function takes a list and an integer k as inputs and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if i!= k-1:\n            new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return []\n    if L > len(list1) or L < 1:\n        return list1\n    elif L == 1:\n        return list1[1:]\n    else:\n        return [list1[i] for i in range(len(list1)) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    for i in range(len(list1)-1, -1, -1):\n        if i == k:\n            list1.pop(i)\n        else:\n            list1[i] = list1[i+1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a positive integer L as input and returns a new list with the same elements\n    as the original list, except that the k'th element (where k is the value of L) is removed from the list.\n    If L is greater than the length of the list, the function returns the original list unmodified.\n    '''\n    if L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)):\n        if k == 1:\n            del list1[i]\n            return list1\n        k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    elif L < 1:\n        raise ValueError('L must be a positive integer')\n    elif L > len(list1):\n        return []\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1) or k < 1:\n        return \"Invalid input\"\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the number of rows in the matrix\n    rows = len(test_list)\n    \n    # get the length of the first row in the matrix\n    cols = len(test_list[0])\n    \n    # check if the n is a valid index for the matrix\n    if N >= cols:\n        return \"Invalid index for matrix\"\n    \n    # initialize the max value to be the first element of the column\n    max_val = test_list[0][N]\n    \n    # iterate over the rows in the matrix and update the max value of then'th column\n    for i in range(1, rows):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n    # Check if the input N is valid\n    if N < 1 or N > num_cols:\n        return \"Invalid input N\"\n    # Initialize a variable to store the max value\n    max_value = test_list[0][N-1]\n    # Loop through the rows of the matrix and find the max value of the N'th column\n    for i in range(1, num_rows):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    # Return the max value of the N'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Find the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Initialize a variable to hold the maximum value\n    max_val = test_list[0][N-1]\n    \n    # Loop through each row in the matrix and compare the value of then'th column to the current max value\n    for i in range(num_rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()\n        test_list[i] = test_list[i][-N:]\n    return max(test_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    '''\n    return max([row[N-1] for row in matrix])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the max_val variable to 0\n    max_val = 0\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Check if the index N is within the range of the row length\n        if N >= len(row):\n            # If it is, set the max_val to the value at the end of the row\n            max_val = row[-1]\n        else:\n            # Otherwise, set the max_val to the value at the Nth index of the row\n            max_val = row[N]\n    # Return the max_val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the max value\n    max_value = test_list[0][N-1]\n    # Loop through the rows of the matrix\n    for row in test_list:\n        # Check if the value of then'th column is greater than the current max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_col = []\n    for row in test_list:\n        max_col.append(row[N-1])\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the length of the longest row in the matrix\n    max_row_len = len(test_list)\n    # Initialize a variable to store the maximum value\n    max_value = float('-inf')\n    # Iterate over the rows in the matrix\n    for row in test_list:\n        # Check if the row has at least N columns\n        if len(row) >= N:\n            # Get the nth column of the row as a list\n            nth_col = [row[i] for i in range(N-1)]\n            # Get the maximum value in the nth column\n            nth_max = max(nth_col)\n            # Update the maximum value if necessary\n            if nth_max > max_value:\n                max_value = nth_max\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize an empty list to store the maximum value of each column\n    column_max = []\n\n    # Loop through each column in the matrix\n    for i in range(len(test_list[0])):\n        # Initialize an empty list to store the maximum value of then'th column\n        nth_column_max = []\n        # Loop through each row in the matrix\n        for row in test_list:\n            # If the current element is then'th column value, add it to the list of max values\n            if i == N-1:\n                nth_column_max.append(row[i])\n        # Find the maximum value in the nth column\n        nth_column_max_value = max(nth_column_max)\n        # If there are no values in the nth column, set it to None\n        if nth_column_max_value is None:\n            nth_column_max_value = None\n        # Append the maximum value of the nth column to the list of max values for all columns\n        column_max.append(nth_column_max_value)\n\n    # Find the maximum value of all columns\n    max_value = max(column_max)\n\n    # Return the maximum value of all columns\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    merged_lst = []  \n    for sublist in lst:  \n        merged_lst.append([sublist[0], sublist[1]])  \n    return merged_lst  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for i in range(len(lst)):\n        first_list = lst[i][0]\n        second_list = lst[i][1]\n        merged.append([first_list, second_list])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        first_element, second_element = sublist\n        merged_lst.append((first_element, second_element))\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first, second = sublist\n        merged_list.append([first, second])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    merged_list = []  \n    for sublist in lst:  \n        merged_list.append([sublist[0], sublist[1]])  \n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in each tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum += tup[0]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            cum_sum = test_list[i]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        if type(item) == tuple:\n            total_sum += item[1]\n        else:\n            total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initializing the cumulative sum variable\n    cum_sum = 0\n    # iterating through the given list of tuples\n    for i in range(len(test_list)):\n        # extracting the current tuple\n        curr_tuple = test_list[i]\n        # iterating through the values in the current tuple\n        for j in range(len(curr_tuple)):\n            # adding the current value to the cumulative sum\n            cum_sum += curr_tuple[j]\n    # returning the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    \n    # Loop through each element in the tuple list\n    for element in test_list:\n        # Add the element to the cumulative sum variable\n        cumulative_sum += element\n    \n    # Return the cumulative sum value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                cumulative_sum += sub_item\n        else:\n            cumulative_sum += item\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum list with the first value of the list\n    cum_sum = [test_list[0]]\n    # Iterate over the list starting from the second index\n    for num in test_list[1:]:\n        # Add the current value to the cumulative sum list\n        cum_sum.append(cum_sum[-1] + num)\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        tuple_sum = 0\n        for j in range(len(nums[i])):\n            tuple_sum += nums[i][j]\n        result.append(tuple_sum / len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average value for the current tuple\n        avg = sum(tup)/len(tup)\n        # Append the average value to the list\n        avg_list.append(avg)\n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for sublist in nums:\n        avg = sum(sublist) / len(sublist)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create a list to store the averages\n    avg_list = []\n    # loop through each tuple in the input list\n    for tup in nums:\n        # compute the average of the tuple elements\n        avg = sum(tup) / len(tup)\n        # append the average to the list\n        avg_list.append(avg)\n    # return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        average_tup = sum_tup / len(tup)\n        averages.append(average_tup)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        total += sum(i)\n        count += len(i)\n    average = total / count\n    return average"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in nums:\n        total = sum(i)\n        length = len(i)\n        average = total / length\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_values = 0\n        for val in tup:\n            sum_values += val\n        avg = sum_values/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Initialize a variable to store the sum of the values in the tuple\n        total = 0\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the total\n            total += val\n        # Divide the total by the number of values in the tuple to get the average\n        average = total / len(tup)\n        # Append the average to the averages list\n        averages.append(average)\n    # Return the averages list\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    \n    # Perform element-wise modulo\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Compare the lengths of the tuples\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must be of the same length!\")\n\n    # Create a new tuple with the element wise modulo\n    result_tup = tuple((i % j for i, j in zip(test_tup1, test_tup2)))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should be of the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    mod_tup = ()\n    for i in range(len(test_tup1)):\n        mod_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return mod_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # perform element wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # initialize the number of jumps required to reach (d, 0) from origin\n    jumps = 0\n    \n    # iterate over the number of steps\n    for i in range(steps):\n        # update the number of jumps required for each step\n        jumps += d\n        \n        # check if we reached the desired point\n        if jumps == d:\n            return i\n    \n    # if we haven't reached the desired point, we need a final jump\n    return steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the variables\n    steps = steps\n    d = d\n    current_point = (0, 0)\n    max_distance = 0\n    jumps = 0\n    steps_taken = 0\n\n    # Move to the starting point\n    while steps > 0:\n        if current_point[0] > d or current_point[1]!= 0:\n            # Maximum distance is at the leftmost point\n            max_distance = current_point[0]\n            jumps += 1\n            steps -= 1\n            steps_taken += 1\n            break\n        current_point = (current_point[0] + 1, current_point[1])\n\n    # Move to the rightmost point\n    while steps > 0:\n        if current_point[1] < 0 or current_point[0]!= d:\n            # Maximum distance is at the topmost point\n            max_distance = current_point[1]\n            jumps += 1\n            steps -= 1\n            steps_taken += 1\n            break\n        current_point = (current_point[0], current_point[1] - 1)\n\n    # Move to the bottommost point\n    while steps > 0:\n        if current_point[0] < 0 or current_point[1]!= d:\n            # Maximum distance is at the rightmost point\n            max_distance = current_point[0]\n            jumps += 1\n            steps -= 1\n            steps_taken += 1\n            break\n        current_point = (current_point[0] - 1, current_point[1])\n\n    # Move to the starting point again to reach the target point\n    while steps > 0:\n        if current_point[0] > d or current_point[1]!= 0:\n            # Maximum distance is at the leftmost point\n            max_distance = current_point[0]\n            jumps += 1\n            steps -= 1\n            steps_taken += 1\n            break\n        current_point = (current_point[0] + 1, current_point[1])\n\n    # Return the result\n    return jumps, steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    count = 0\n    current = 0\n    max_step = 0\n    curr_step = 0\n    step_count = 0\n\n    # Initialize variables to keep track of the current and maximum step count\n    curr_x = 0\n    curr_y = 0\n\n    # Iterate through the list of steps\n    for i in range(len(steps)):\n        # Calculate the current position after the step\n        x_pos = steps[i][0]\n        y_pos = steps[i][1]\n\n        # Check if the current position is within the limits of the dungeon\n        if x_pos >= 0 and x_pos < d and y_pos >= 0 and y_pos < d:\n            # Update the maximum step count if necessary\n            if y_pos > curr_y:\n                curr_y = y_pos\n                max_step = step_count\n\n            # Update the current step count\n            step_count += 1\n\n            # Check if the current position is the ending position (d, 0)\n            if x_pos == d and y_pos == 0:\n                # Update the count and exit the loop\n                count = step_count\n                break\n\n            # Calculate the distance to the current position\n            distance = abs(x_pos - curr_x) + abs(y_pos - curr_y)\n\n            # Check if the current step is shorter than the current distance to the ending position\n            if distance <= curr_step:\n                # Update the current position\n                curr_x = x_pos\n                curr_y = y_pos\n                curr_step = distance\n\n            # Check if the current position is within the limits of the dungeon\n            if x_pos >= 0 and x_pos < d and y_pos >= 0 and y_pos < d:\n                # Update the current position\n                curr_x = x_pos\n                curr_y = y_pos\n                curr_step = distance\n\n        # Reset the current step count if the current position is outside the limits of the dungeon\n        else:\n            step_count = 0\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    if steps == 1:\n        return 0\n    if d == 1:\n        return 1\n    if steps < d:\n        return -1\n    \n    jumps = min_Jumps(steps - d, d)\n    if jumps!= -1:\n        return 1 + jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    current_x = 0\n    current_y = 0\n\n    while True:\n        current_x += steps[current_y][current_x]\n        current_y += 1\n\n        if current_x >= len(steps[current_y]) or current_y >= len(steps):\n            return jumps\n\n        if steps[current_y][current_x] == d:\n            return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    current_pos = (0, 0)\n    visited = set()\n    min_steps = float('inf')\n    steps_taken = 0\n\n    # Loop through steps\n    while steps_taken < steps:\n        # Check if current position is visited\n        if current_pos in visited:\n            return min_steps - steps_taken\n\n        # Mark current position as visited\n        visited.add(current_pos)\n\n        # Calculate next position\n        next_pos = (current_pos[0] + d[0], current_pos[1] + d[1])\n\n        # Check if next position is valid\n        if 0 <= next_pos[0] < 100 and 0 <= next_pos[1] < 100:\n            # Check if next position is at the destination point\n            if next_pos == (d, 0):\n                # Update minimum steps and return\n                min_steps = min(min_steps, steps_taken + 1)\n                return min_steps\n            # Otherwise, move to the next position and continue\n            current_pos = next_pos\n            steps_taken += 1\n        else:\n            # If next position is invalid, move to the next position and continue\n            current_pos = next_pos\n            steps_taken += 1\n\n    # If the loop ends without finding the destination, return the minimum steps\n    return min_steps - steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the number of jumps and the maximum step count for the given number of jumps\n    jumps = 0\n    max_steps = steps\n\n    # Calculate the maximum step count for the given number of jumps\n    while steps >= d:\n        steps -= d\n        jumps += 1\n\n    # If the maximum step count is less than or equal to 0, there is no way to reach the point (d, 0) from origin with the given number of jumps.\n    if max_steps <= 0:\n        return -1\n\n    # Return the number of jumps required to reach the point (d, 0) from origin.\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    pos = 0\n    while pos <= len(steps):\n        if steps[pos] == 0:\n            break\n        else:\n            pos += steps[pos]\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    curr_x = 0\n    curr_y = 0\n    curr_jumps = 0\n\n    # Iterate through the steps\n    for i in range(steps):\n        # Calculate the distance to travel\n        distance = d - curr_x\n\n        # If the distance is greater than 0, make a jump\n        if distance > 0:\n            # Update the current position\n            curr_x += distance\n            curr_y = 0\n            curr_jumps += 1\n        else:\n            # If the distance is less than or equal to 0, move vertically\n            curr_y -= 1\n\n    # Return the number of jumps required\n    return curr_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    if steps == 1:\n        return 0\n    \n    jumps = 1\n    current_distance = d\n    remaining_distance = steps - d\n    \n    while remaining_distance > 0:\n        steps_to_reach_0 = remaining_distance // d\n        remaining_distance -= steps_to_reach_0 * d\n        \n        jumps += steps_to_reach_0\n        current_distance += d\n        \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists should have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have equal length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Division by zero is not allowed.\")\n            return None\n        else:\n            result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length\")\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(\"Error: Division by zero\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and divides each element of the first list by the corresponding element of the second list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Division by zero is not allowed.\")\n            return None\n        else:\n            result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # initialize an empty list to store the numbers\n    nums = []\n\n    # iterate through the characters in the string\n    for char in test_str:\n\n        # check if the character is a number\n        if char.isdigit():\n\n            # if it is, append it to the list of numbers\n            nums.append(char)\n\n    # join the list of numbers into a string\n    result = \"\".join(nums)\n\n    # return the modified string\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            pass\n    num_str = ''.join(num_list)\n    new_str = test_str.replace(num_str, '')\n    return new_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    num_flag = False\n    for char in test_str:\n        if char.isdigit():\n            num_flag = True\n        elif char.isalpha():\n            result += char\n            if num_flag:\n                result += char\n                num_flag = False\n        else:\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            test_str = test_str.replace(char, \"\")\n    test_str += numbers\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize an empty string to store the numbers\n    num_str = \"\"\n    # Iterate over each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the num_str variable\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, add it to the beginning of the string\n        else:\n            test_str = char + test_str\n    # Return the modified string\n    return num_str + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize empty list to store numbers\n    num_list = []\n    \n    # iterate through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the num_list\n            num_list.append(char)\n    \n    # join the num_list to form the final string\n    final_str = ''.join(num_list)\n    \n    # return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    # initialize variables\n    numbers = []\n    other_chars = []\n    new_str = \"\"\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # if it is a number, add it to the numbers list\n            numbers.append(char)\n        else:\n            # if it's not a number, add it to the other_chars list\n            other_chars.append(char)\n    \n    # reverse the numbers list and join it to form the new string\n    new_str = \"\".join(numbers[::-1]) + \"\".join(other_chars)\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create an empty list to store the numbers\n    nums = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        else:\n            # If the character is not a number, add it back to the string\n            test_str = test_str.replace(char, '')\n\n    # Join the nums list into a single string\n    result = ''.join(nums)\n    # Add the resulting string back to the beginning of the original string\n    return test_str + result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables to store the numbers and letters\n    nums = []\n    letters = []\n    \n    # Split the string into two lists\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    \n    # Join the lists back into a string\n    result = ''.join(letters + nums)\n    \n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize the maximum subset size\n    max_size = 1\n    # initialize the current subset size\n    curr_size = 1\n    # loop through the list\n    for i in range(len(a)):\n        # check if the current element is divisible by the previous element\n        if a[i] % a[i - 1] == 0:\n            # if it is, increment the current subset size\n            curr_size += 1\n        else:\n            # if it's not, update the maximum subset size if necessary\n            if curr_size > max_size:\n                max_size = curr_size\n            # reset the current subset size to 1\n            curr_size = 1\n    # check if the current subset size is greater than the maximum subset size\n    if curr_size > max_size:\n        max_size = curr_size\n    # return the maximum subset size\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize a variable to store the size of the largest subset\n    max_size = 0\n\n    # Initialize a variable to store the current subset size\n    current_size = 0\n\n    # Loop through the list\n    for num in a:\n        # Check if the current number is divisible by the next number\n        if num % a[current_size] == 0:\n            # If it is, increment the current subset size\n            current_size += 1\n        else:\n            # If not, reset the current subset size and move to the next number\n            current_size = 0\n\n        # Update the maximum size of the current subset if necessary\n        if current_size > max_size:\n            max_size = current_size\n\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n\n    max_size = 1\n    current_size = 1\n    start = 0\n\n    for i in range(1, n):\n        if a[i] % a[start] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n            start = i\n\n    max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 0\n    current_subset = [a[0]]\n    for num in a[1:]:\n        if num % current_subset[-1] == 0:\n            current_subset.append(num)\n        else:\n            size = max(size, len(current_subset))\n            current_subset = [num]\n    size = max(size, len(current_subset))\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pairs = [(0, x) for x in a]\n    pairs.sort(key=lambda x: x[1])\n    largest_size = 1\n    current_size = 1\n\n    for i in range(1, len(pairs)):\n        if pairs[i][1] % pairs[i-1][1] == 0:\n            current_size += 1\n            largest_size = max(largest_size, current_size)\n        else:\n            current_size = 1\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    # Initialize variables to keep track of the current subset and the largest subset found so far\n    current_subset = [a[0]]\n    largest_subset = [a[0]]\n    # Iterate over the remaining elements in the list\n    for i in range(1, len(a)):\n        # If the current element is not divisible by the next element, add it to the current subset and check if it forms a larger subset\n        if a[i] % a[i-1]!= 0:\n            current_subset.append(a[i])\n            if len(current_subset) > len(largest_subset):\n                largest_subset = current_subset\n        # If the current element is divisible by the next element, add it to the current subset and check if it forms a larger subset\n        else:\n            current_subset.append(a[i])\n            if len(current_subset) > len(largest_subset):\n                largest_subset = current_subset\n            # Reset the current subset and continue with the next iteration\n            current_subset = [a[i]]\n    # Return the size of the largest subset found\n    return len(largest_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a = sorted(a)\n    # Initialize variables\n    max_subset = 0\n    current_subset = 0\n    # Loop through the sorted list\n    for i in range(len(a)):\n        # If the current number is divisible by the previous number, add it to the current subset\n        if a[i] % a[i-1] == 0:\n            current_subset += 1\n            # If the current subset is greater than the maximum subset, update the maximum subset\n            if current_subset > max_subset:\n                max_subset = current_subset\n        # If the current number is not divisible by the previous number, reset the current subset to 0\n        else:\n            current_subset = 0\n    # Return the maximum subset\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n\n    max_size = 0\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                max_size = max(max_size, j - i + 1)\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Check if the two arrays have the same length\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays must have the same length.\")\n\n    # Merge the two arrays into a single sorted array\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Find the middle index of the sorted array\n    mid = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid]\n\n    # If the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of the two arrays\n    arr = arr1 + arr2\n    arr.sort()\n    median = arr[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both arrays\n    merged_array = arr1 + arr2\n\n    # Find the middle index\n    mid = n // 2\n\n    # Find the left and right indices\n    left = 0\n    right = n - 1\n\n    # Initialize the variable to store the median\n    median = None\n\n    while left <= right:\n        # Find the median value\n        if left == right:\n            if merged_array[left] < merged_array[right]:\n                median = merged_array[left]\n            else:\n                median = merged_array[right]\n        else:\n            if merged_array[left] < merged_array[mid] and merged_array[mid + 1] < merged_array[right]:\n                median = (merged_array[left] + merged_array[mid]) / 2\n            else:\n                median = (merged_array[mid] + merged_array[right]) / 2\n\n        # Check if the median is greater than the middle element of the merged array\n        if merged_array[left] > median and merged_array[right] > median:\n            left += 1\n        elif merged_array[left] > median:\n            right -= 1\n        else:\n            left += 1\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the length of the lists\n    length = len(arr1)\n\n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # find the middle index\n    middle_index = n // 2\n\n    # calculate the median\n    if n % 2 == 0:\n        # if the length of the list is even\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        # if the length of the list is odd\n        median = sorted_list[middle_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists and the size of the lists n.\n    It returns the median of the two lists.\n    \"\"\"\n    # Concatenate the two sorted lists into a single list.\n    combined_list = arr1 + arr2\n    \n    # Sort the combined list.\n    combined_list.sort()\n    \n    # Get the middle element of the combined list.\n    middle_index = n // 2\n    \n    # If the length of the combined list is odd, the median is the middle element.\n    if n % 2 == 1:\n        return combined_list[middle_index]\n    \n    # If the length of the combined list is even, the median is the average of the two middle elements.\n    else:\n        return (combined_list[middle_index - 1] + combined_list[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate both lists and sort them\n    all_arr = arr1 + arr2\n    all_arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If n is even, take the average of the two middle numbers\n        mid = n // 2\n        median = (all_arr[mid - 1] + all_arr[mid]) / 2\n    else:\n        # If n is odd, take the middle number\n        mid = n // 2\n        median = all_arr[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists and then find the median.\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    median_index = n // 2\n    if n % 2 == 0:\n        return (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # check if the input lists have equal length\n    if len(arr1)!= len(arr2):\n        print(\"Error: Input lists must have equal length.\")\n        return None\n    # initialize two pointers to keep track of the starting indices of the two lists\n    i = 0\n    j = 0\n    # initialize two variables to keep track of the current index of the two lists\n    index1 = 0\n    index2 = 0\n    # initialize a variable to keep track of the current index in the combined list\n    index_combined = 0\n    # initialize an array to store the combined list\n    combined_list = []\n    # loop through the input lists\n    while i < len(arr1) and j < len(arr2):\n        # if the first element of arr1 is smaller than the first element of arr2, add the first element of arr1 to the combined list and increment the pointers for arr1 and arr2\n        if arr1[i] < arr2[j]:\n            combined_list.append(arr1[i])\n            i += 1\n            index1 += 1\n        # otherwise, add the first element of arr2 to the combined list and increment the pointers for arr1 and arr2\n        else:\n            combined_list.append(arr2[j])\n            j += 1\n            index2 += 1\n        # if the combined list has more elements than n, remove the smallest element\n        while len(combined_list) > n:\n            combined_list.pop(0)\n        # check if the combined list has an even number of elements\n        if len(combined_list) % 2 == 0:\n            # if it does, add the average of the middle two elements to the combined list\n            combined_list.append((combined_list[n//2 - 1] + combined_list[n//2]) / 2)\n        # if it doesn't, add the middle element of the combined list to the combined list\n        else:\n            combined_list.append(combined_list[n//2])\n    # check if the combined list has an odd number of elements\n    if len(combined_list) % 2 == 1:\n        # if it does, add the middle element of the combined list to the combined list\n        combined_list.append(combined_list[n//2])\n    # return the combined list\n    return combined_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_merged = sorted(merged)\n    \n    # Calculate the middle index\n    mid = n // 2\n    \n    # Return the median based on the sorted list size\n    if n % 2 == 0:\n        # If the list has an even size, return the average of the two middle elements\n        return (sorted_merged[mid - 1] + sorted_merged[mid]) / 2\n    else:\n        # If the list has an odd size, return the middle element\n        return sorted_merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # First, we merge the two sorted lists into one list\n    merged_arr = arr1 + arr2\n    \n    # Next, we sort the merged list\n    merged_arr.sort()\n    \n    # Finally, we calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_arr[mid-1] + merged_arr[mid]) / 2\n    else:\n        median = merged_arr[mid]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    # loop through the list of numbers and compute the n-th power\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string is uppercase.\n\n    Returns:\n    True if the string is uppercase, False otherwise.\n    \"\"\"\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        return None"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase and False otherwise.\n    '''\n    # Check if all characters in the string are uppercase or not\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    elif len(newList) == 3:\n        newList[0], newList[1], newList[-1] = newList[-1], newList[0], newList[1]\n    else:\n        for i in range(len(newList) // 2):\n            newList[i], newList[-1 - i] = newList[-1 - i], newList[i]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    n = len(newList)\n    # check if the length is odd or even\n    if n % 2 == 0: # even length\n        # get the middle index\n        m = n // 2\n        # swap the first and last elements\n        newList[0], newList[m] = newList[m], newList[0]\n    else: # odd length\n        # get the middle index\n        m = n // 2\n        # swap the first and middle elements\n        newList[0], newList[m] = newList[m], newList[0]\n        # swap the middle and last elements\n        newList[m], newList[n-1] = newList[n-1], newList[m]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        # Get the index of the first and last elements in the list\n        first_index = 0\n        last_index = len(newList) - 1\n        # Swap the first and last elements in the list\n        newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the list has at least two elements\n    if len(newList) >= 2:\n        # swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The list must have at least two elements to swap the first and last elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # if the length of the list is less than 2, return the list\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle arc length\n    h = 2 * r * (1 + (1/3))**0.5\n    \n    # Calculate the area of each triangle\n    area1 = (r**2) / 4\n    area2 = (r**2) / 2\n    area3 = (r**2) / 4\n    \n    # Calculate the maximum area of any triangle\n    max_area = max(area1, area2, area3)\n    \n    # Calculate the area of the largest triangle\n    return 2 * max_area * h / (1 + (1/3))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the distance from the center of the semicircle to the vertex of the largest triangle\n    a = r / 2\n    b = r * (1 - 1 / (2 * r))\n    c = r / 2\n    \n    # Calculate the area of the largest triangle using Heron's formula\n    s = (a**2 + b**2) / (2 * c)\n    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Find the area of a triangle using Heron's formula\n    def heron_formula(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the circumradius\n    def circumradius(r):\n        return r * 2\n\n    # Calculate the semi-perimeter of a triangle\n    def semi_perimeter(r):\n        return 2 * r\n\n    # Calculate the area of a triangle using Heron's formula\n    def area_of_triangle(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    def area_largest_triangle(r):\n        c = circumradius(r)\n        a = semi_perimeter(c) / 2\n        b = c - a\n        return area_of_triangle(a, b, c)\n\n    # Find the area of the largest triangle that can be inscribed in a semicircle\n    area = area_largest_triangle(r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of a semicircle as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n    '''\n\n    # calculating the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # calculating the area of the largest triangle that can be inscribed in the semicircle\n    area = (s * (s - 2 * math.pi * r) * (s - 2 * math.pi * r)) / (4 * math.pi)\n\n    # converting the area to square units\n    area_square = area * math.pow(r, 2)\n\n    return area_square"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.pi * r ** 2) / 3\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semiperimeter of the largest triangle\n    a = r * (3 - (3**0.5))\n    b = r * (3 - (3**0.5))\n    c = r * (3 - (3**0.5))\n    \n    # Calculate the area of the largest triangle\n    s = (a + b + c) / 2\n    area = 0.5 * s * (s-a) * (s-b) * (s-c)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Finding the semi-perimeter of the semicircle\n    s = 2*r\n    \n    # Using the Pythagorean theorem to find the longest side of the triangle\n    a = s*(s-r)/2\n    \n    # Using the Pythagorean theorem to find the shortest side of the triangle\n    b = s*(s+r)/2\n    \n    # Calculating the semi-perimeter of the triangle\n    s_triangle = a + b\n    \n    # Using the Pythagorean theorem to find the area of the triangle\n    area = sqrt(s_triangle*s_triangle - a*a)\n    \n    # Returning the area of the triangle\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle area\n    semi_circle_area = 3.14 * r ** 2\n\n    # Calculate the triangle area\n    a = (3 * r ** 2) / 4\n    b = (3 * r ** 2) / 4\n    c = r ** 2\n\n    triangle_area = (semi_circle_area / 2) * (a + b + c)\n\n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r**2 * (1 - math.cos(math.pi / 3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    pi = 3.14159265358979323846\n    \n    # Calculating the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    a = 2*r\n    b = 2*r*pi\n    \n    # Calculating the area of the largest triangle that can be inscribed in the semicircle\n    area = a*pi + b*pi\n    \n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the first missing number in a sorted list of natural numbers.\n\n    Args:\n    - `array`: sorted list of natural numbers.\n    - `start`: optional parameter to specify the first index to consider.\n    - `end`: optional parameter to specify the last index to consider.\n\n    Returns:\n    - The smallest missing number in the sorted list of natural numbers.\n    \"\"\"\n\n    # If the end index is not specified, use the length of the array\n    if end is None:\n        end = len(array)\n\n    # Iterate through the array to find the first missing number\n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n\n    # If we reach this point, the last index is missing\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as an argument and returns the first missing number.\n    If start and end are provided, the function will search only within those indices.\n    \"\"\"\n\n    # If start and end are not provided, search the entire list\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the first missing number to the smallest possible number\n    missing_num = start\n\n    # Loop through the list and find the smallest missing number\n    for i in range(start, end + 1):\n        if array[i]!= missing_num:\n            missing_num = array[i]\n\n    # If we didn't find a missing number, return the last index + 1\n    if missing_num == end + 1:\n        return end + 1\n\n    # Otherwise, return the missing number\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if start >= end:\n        return start + 1\n\n    mid = (start + end) // 2\n    if mid == 0 or array[mid - 1] < array[mid]:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if end == len(array)-1:\n        for i in range(start,end):\n            if array[i]!= i+1:\n                return i+1\n    else:\n        mid = (start+end)//2\n        left_missing = find_First_Missing(array,start,mid)\n        right_missing = find_First_Missing(array,mid+1,end)\n        return min(left_missing,right_missing)+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the coordinates of the element\n    x, y = ele\n    \n    # Initialize a set to store the adjacent coordinates\n    adj = set()\n    \n    # Add the coordinates of the element to the set\n    adj.add((x, y))\n    \n    # Add the coordinates of the element plus (0,1) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (-1,0) to the set\n    adj.add((x, y+1))\n    \n    # Add the coordinates of the element plus (1,0) to the set\n    adj.add((x, y-1))\n    \n    # Add the coordinates of the element plus (0,1) and (1,0) to the set\n    adj.add((x+1, y+1))\n    \n    # Add the coordinates of the element plus (0,-1) and (-1,0) to the set\n    adj.add((x-1, y+1))\n    \n    # Add the coordinates of the element plus (1,1) to the set\n    adj.add((x+1, y-1))\n    \n    # Add the coordinates of the element plus (-1,1) to the set\n    adj.add((x-1, y-1))\n    \n    # Add the coordinates of the element plus (1,-1) to the set\n    adj.add((x+1, y+1))\n    \n    # Add the coordinates of the element plus (-1,-1) to the set\n    adj.add((x-1, y+1))\n    \n    # Add the coordinates of the element plus (-1,0) and (1,0) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (0,-1) to the set\n    adj.add((x, y+1))\n    \n    # Add the coordinates of the element plus (-1,0) and (1,0) to the set\n    adj.add((x-1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (1,0) to the set\n    adj.add((x, y-1))\n    \n    # Add the coordinates of the element plus (1,0) and (0,1) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (0,-1) to the set\n    adj.add((x, y+1))\n    \n    # Add the coordinates of the element plus (-1,0) and (0,1) to the set\n    adj.add((x-1, y))\n    \n    # Add the coordinates of the element plus (1,0) and (0,1) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (1,1) to the set\n    adj.add((x, y+1))\n    \n    # Add the coordinates of the element plus (-1,0) and (0,1) to the set\n    adj.add((x-1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (1,1) to the set\n    adj.add((x, y-1))\n    \n    # Add the coordinates of the element plus (1,0) and (1,1) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (-1,1) to the set\n    adj.add((x, y+1))\n    \n    # Add the coordinates of the element plus (-1,0) and (0,1) to the set\n    adj.add((x-1, y))\n    \n    # Add the coordinates of the element plus (1,0) and (-1,1) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (-1,-1) to the set\n    adj.add((x, y+1))\n    \n    # Add the coordinates of the element plus (-1,0) and (0,1) to the set\n    adj.add((x-1, y))\n    \n    # Add the coordinates of the element plus (1,0) and (-1,-1) to the set\n    adj.add((x+1, y))\n    \n    # Add the coordinates of the element plus (0,1) and (1,-1) to the set\n    adj.add((x, y-1))\n    \n    # Add the coordinates of the element"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i == x and j == y:\n                continue\n            adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n    adj_coords = []\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if nx >= 0 and nx < len(sub) and ny >= 0 and ny < len(sub[nx]):\n            adj_coords.append((nx, ny))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if isinstance(ele, tuple):\n        x, y = ele\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == 0 and j == 0:\n                    continue\n                if (x + i, y + j) not in sub:\n                    sub.append((x + i, y + j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    i, j = ele\n    \n    # List of adjacent coordinates\n    adj = [(i-1,j), (i+1,j), (i,j-1), (i,j+1)]\n    \n    # Filter out the coordinates that are out of bounds\n    adj = [coord for coord in adj if 0 <= coord[0] < len(sub) and 0 <= coord[1] < len(sub[0])]\n    \n    # Add the current coordinate to the list of adjacent coordinates\n    adj.append(ele)\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n    for i in range(row - 1, row + 2):\n        for j in range(col - 1, col + 2):\n            if (0 <= i < 9 and 0 <= j < 9) and (i, j)!= ele and (i, j) not in sub:\n                adj.append((i, j))\n                sub.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n    if x > 0 and y > 0:\n        adjacent.append((x-1,y-1))\n    if x > 0:\n        adjacent.append((x-1,y))\n    if x > 0 and y < 2:\n        adjacent.append((x-1,y+1))\n    if y > 0:\n        adjacent.append((x,y-1))\n    if y < 2:\n        adjacent.append((x,y+1))\n    if x < 2 and y > 0:\n        adjacent.append((x+1,y-1))\n    if x < 2:\n        adjacent.append((x+1,y))\n    if x < 2 and y < 2:\n        adjacent.append((x+1,y+1))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # define the valid moves\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # iterate over the valid moves and extract the adjacent coordinates\n    for move in moves:\n        x, y = move\n        nx, ny = x + ele[0], y + ele[1]\n        if (nx, ny) not in sub and nx >= 0 and ny >= 0:\n            sub.append((nx, ny))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the adjacent coordinates\n    if ele[0] < len(sub[0]) - 1:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[0] > 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[1] < len(sub) - 1:\n        sub.append((ele[0], ele[1] + 1))\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1] - 1))\n\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # Remove all spaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Replace whitespaces with underscores\n    result = \"\"\n    for char in text:\n        if char.isspace():\n            result += \"_\"\n        else:\n            result += char\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the input is a string\n    if not isinstance(text, str):\n        return \"Input must be a string.\"\n    \n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    \n    # Split the string into words\n    words = text.split()\n    \n    # Iterate over each word\n    for i in range(len(words)):\n        # Check if the word contains whitespace\n        if'' in words[i]:\n            # Replace whitespace with underscore\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word contains underscore\n        elif '_' in words[i]:\n            # Replace underscore with whitespace\n            words[i] = words[i].replace('_','')\n    \n    # Join the words back together into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # function to replace spaces with underscores\n    def replace_spaces_underscore(text):\n        return text.replace(\" \", \"_\")\n    \n    # function to replace underscores with spaces\n    def replace_underscore_spaces(text):\n        return text.replace(\"_\", \" \")\n    \n    # call the replace_spaces_underscore function on the input text\n    result = replace_spaces_underscore(text)\n    \n    # call the replace_underscore_spaces function on the result\n    result = replace_underscore_spaces(result)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one for the current position and the other for the previous position\n    i, j = 0, 0\n    \n    # loop through the list\n    while j < len(num_list):\n        # if the current number is not zero, move it to the next position\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n        \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # loop through the list and store the non-zero values in a new list\n    non_zero_list = []\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # loop through the original list and add all zeroes to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n\n    # copy the new list to the original list\n    num_list = non_zero_list\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            zero_count += 1\n    return num_list, zero_count"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize a flag to keep track of whether any zero has been found\n    has_zero = False\n    # loop through the list from the beginning to the end\n    for i in range(len(num_list) - 1, -1, -1):\n        # if the current number is zero, swap it with the last number in the list\n        if num_list[i] == 0:\n            has_zero = True\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n            # move the last number in the list one position to the right\n            num_list[len(num_list) - 2] = 0\n    # return the updated list\n    return num_list if has_zero else None"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    while zero_index!= -1:\n        num_list[zero_index], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[zero_index]\n        zero_index = -1\n        for index, num in enumerate(num_list):\n            if num == 0:\n                zero_index = index\n                break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = []\n    non_zero_indices = []\n\n    # Separate the list into two parts: those with non-zero values and those with zero values\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            non_zero_indices.append(i)\n        else:\n            zero_indices.append(i)\n\n    # Move the zero values to the end of the list\n    num_list[non_zero_indices] = [0] * len(zero_indices) + num_list[non_zero_indices]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    # Initialize a flag variable to keep track of whether there is at least one non-zero number in the list\n    has_zero = False\n\n    # Iterate over the list and move all non-zero numbers to the end of the list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n            has_zero = True  # Update the flag variable\n\n    # If there are no non-zero numbers in the list, move all zeroes to the end of the list\n    if not has_zero:\n        for i in range(len(num_list) - 1, -1, -1):\n            if num_list[i] == 0:\n                num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i, n in enumerate(num_list):\n        if n == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a Python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum_xor = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor = arr[i] ^ arr[j]\n            sum_xor ^= xor\n\n    return sum_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_sum(arr, n):\n    '''\n    This function takes a list of numbers and the length of the list as input.\n    It returns the sum of the xor of all pairs of numbers in the list.\n    '''\n\n    # initialize a variable to store the sum of xor of all pairs of numbers\n    xor_sum = 0\n\n    # iterate over the list using a for loop\n    for i in range(n):\n\n        # iterate over the remaining part of the list using a for loop\n        for j in range(i+1, n):\n\n            # calculate the xor of the current pair of numbers\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the sum of the xor of all pairs of the numbers in the array.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #initialize sum and xor as 0\n    sum=xor=0\n    \n    #iterate over the given list\n    for i in range(n-1):\n        #iterate over the remaining elements of the list\n        for j in range(i+1,n):\n            #add the xor of the current pair to the sum\n            sum+=arr[i]^arr[j]\n            #add the xor of the current pair to the xor\n            xor=arr[i]^arr[j]^xor\n    \n    #return the sum of xor of all pairs of numbers in the given list\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    # Convert the list to a max heap\n    heap = [x for x in iterable]\n    hq.heapify(heap)\n\n    # Sort the max heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap of the iterable\n    hq.heapify(iterable)\n    # build a new list in sorted order\n    sorted_list = []\n    while iterable:\n        # add the root of the heap to the sorted_list and pop the root of the heap\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappop(iterable)\n    for i in range(n):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heappush(iterable, iterable[0])"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # convert the list into a min heap\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # perform the heap sort\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    \n    # Build the max-heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i, len(lst))\n        \n    # Extract and return elements from the heap\n    for i in range(len(lst) - 1, 0, -1):\n        # Move the root element to the end of the heap\n        lst[0], lst[i] = lst[i], lst[0]\n        \n        # Reducing the heap from the root\n        hq.heapify(lst, 0, i)\n        \n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using a max heap.\n    '''\n    # convert the iterable to a list\n    iterable = list(iterable)\n    # calculate the length of the list\n    n = len(iterable)\n    # build the max heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # sort the max heap\n    for i in range(n-1, 0, -1):\n        # swap the root with the last element of the heap\n        hq.heapreplace(iterable, i)\n    # return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the Heap Sort algorithm.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    # Convert the iterable to a list\n    lst = list(iterable)\n\n    # Build a max heap from the list\n    heap_size = len(lst)\n    for i in range(heap_size//2 - 1, -1, -1):\n        hq.heapify(lst, i, heap_size)\n\n    # Extract and remove the elements from the heap\n    sorted_lst = []\n    while heap_size > 0:\n        sorted_lst.append(lst[0])\n        heap_size -= 1\n        hq.heapreplace(lst, 0, heap_size)\n\n    return sorted_lst"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n\n    # Check if the sale_amount is zero\n    if sale_amount == 0:\n        return True\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if there is a profit or a loss\n    if profit == 0 or loss == 0:\n        return True\n\n    # If there is a profit or loss, then there is no profit or loss\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): The cost of the sale in dollars.\n    sale_amount (float): The amount that was sold for the sale_price.\n    \n    Returns:\n    bool: True if the given sale has no profit and no loss, False otherwise.\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print(\"This amount has no profit and no loss.\")\n    else:\n        print(\"This amount has a profit and no loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check for no profit or no loss\n    if profit == 0 and loss == 0:\n        return \"Profit and Loss are zero\"\n    elif profit > 0 and loss == 0:\n        return \"Profit is positive, but Loss is zero\"\n    elif profit == 0 and loss > 0:\n        return \"Loss is positive, but Profit is zero\"\n    else:\n        return \"No profit and no loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss\")\n        return True\n    else:\n        print(\"Profit or loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit == 0:\n        if sale_amount == actual_cost:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    celsius_to_fahrenheit = lambda c: (c * 9/5) + 32\n    fahrenheit_to_celsius = lambda f: (f - 32) * 5/9\n\n    # Convert temperature from celsius to fahrenheit\n    t = fahrenheit_to_celsius(t)\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp(t/10) + 0.4275 * v**2\n\n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n\n    # Convert wind chill index from celsius to fahrenheit\n    wc = celsius_to_fahrenheit(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    # Calculate the dewpoint temperature\n    dew = 10.0 * math.log((k / 273.15) + (1.0 / (273.15 + (k / 273.15)))) - 50.0\n    # Calculate the relative humidity\n    rh = 100.0 * (1.0 - (0.00003 * v * v))\n    # Calculate the wind chill index\n    wci = (23.0 - 0.000065 * v + 0.0017 * rh - 0.00007 * dew) * k / 2.0\n    # Round the result to the nearest integer\n    result = round(wci)\n    return result"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wci = 35.74 + 0.6215*v + 35.75*(t-32) - 0.4275*v*t + 0.0068*v**2 + 0.0548*t**2\n    \n    # Round wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the given formula\n    # Chill index = 35.74 + 0.6215T - 35.75V/10\n    # where T is the temperature in celsius and V is the wind velocity in km/h\n    # Chill index is in celsius degrees\n    if t >= 0 and v >= 0:\n        chill_index = 35.74 + 0.6215 * t - 35.75 * v / 10\n        return round(chill_index)\n    else:\n        print(\"Invalid input: temperature and wind speed must be non-negative.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Formula for wind chill index\n    wc = -459.67 + 216.71 * math.log10(v) - 71.67 * t + 0.02 * t**2\n    # Round to the nearest integer\n    wc = round(wc)\n    return wc\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate wind chill index\n    wci = 35.74 + 0.6215*t - 35.75*math.log(v)+ 0.4275*t*(1-math.exp(-0.133*t))\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n\n    # Calculate the heat capacity at constant pressure\n    cp = 1004.6  # J/kg/K\n    # Calculate the specific heat ratio\n    sr = 1013.25 / cp\n    # Calculate the heat capacity ratio\n    hr = cp / (cp - 0.0065 * sr)\n\n    # Calculate the dew point temperature from the given temperature and wind velocity\n    dp = 25.4 * (t - (t * (v / 10.0) ** 0.16))\n\n    # Calculate the wind chill index\n    wci = 23.44 * (dp - 273.15) / (dp - 273.15 + 0.00621 * v * hr)\n\n    # Round the wind chill index to the next integer\n    wci_int = int(math.ceil(wci))\n\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 0.16 * t * (0.6219 - 0.000374 * v) * math.exp((17.625 * v) / (v + 243.5))\n    chill_rounded = round(chill)\n    return chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Wind chill formula\n    chill = 35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*math.log(v)\n    # Round the result to the nearest integer\n    return int(round(chill))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # calculate the wind chill index\n    c = 0.6219 * v * math.exp((17.625 * t_f)/(t_f + 243.125))\n    \n    # round to the nearest integer\n    c_int = round(c)\n    \n    return c_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_without_lowercase = [name for name in sample_names if name.isupper()]\n    total_length = sum(len(name) for name in names_without_lowercase)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name and move on to the next one\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the total\n        total_length += len(name)\n    # Return the sum of the lengths of the non-lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name.lower().startswith('a')]\n    lengths = [len(name) for name in names]\n    return sum(lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names after removing lowercase letters\n    names_no_lowercase = []\n    # Loop through each name in the original list of names\n    for name in sample_names:\n        # Check if the first character of the name is lowercase\n        if not name[0].islower():\n            # If the name starts with a lowercase letter, add it to the names_no_lowercase list\n            names_no_lowercase.append(name)\n    # Calculate the sum of the length of the names in the names_no_lowercase list\n    total_length = sum([len(name) for name in names_no_lowercase])\n    # Return the total length of the names in the names_no_lowercase list\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_list.append(name)\n    sum_length = sum([len(name) for name in name_list])\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_lower(name):\n        return name[0].isupper()\n    filtered_names = filter(remove_lower, sample_names)\n    total_length = sum(map(len, filtered_names))\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            names.append(name)\n    total_length = 0\n    for name in names:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    pattern = r\"\\([^)]*\\)\"\n    items = re.sub(pattern, \"\", items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define the pattern to match the parenthesis\n    pattern = r'\\((.*?)\\)'\n\n    # loop through each item in the list\n    for item in items:\n        # if the item matches the pattern\n        if re.search(pattern, item):\n            # extract the parenthesis and replace with nothing\n            item = re.sub(pattern, '', item)\n    \n    # return the modified list\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\([^\\)]+\\))'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')  # regular expression pattern to match any parenthesis\n    result = pattern.sub('', items)  # remove the matched parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to find all the parenthesis in the string\n    pattern = re.compile(r'\\([^\\)]*\\)')\n    \n    # Use the findall() method to find all the matches in the string\n    matches = pattern.findall(items)\n    \n    # Loop through the matches and remove the parenthesis and what is inbetween them\n    for match in matches:\n        items = items.replace(match, '')\n        \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    # pattern = r'\\((.*?)\\)' # alternative pattern that matches any number of parenthesis\n    # pattern = r'\\((.*?)\\)\\s*' # alternative pattern that matches any number of parenthesis with whitespace in between\n    # pattern = r'\\s*\\(.*?\\)' # alternative pattern that matches whitespace between the parenthesis and what is inside them\n    result = re.sub(pattern, '', items) # substitute the pattern with an empty string to remove the parenthesis and what is inbetween them\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize a variable to store the current nonagonal number\n    current_num = 1\n    \n    # Loop through the first n rows of Pascal's triangle\n    for i in range(n): \n        # Loop through each number in the current row\n        for j in range(1, (2*i)+1): \n            # Add the current number to the running total\n            current_num += j\n            \n            # If the current number exceeds the total number of cells, return False\n            if current_num > (2*n)-1: \n                return False\n            \n    # If the loop completes without finding a nonagonal number, return True\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            a = (i * (i - 1)) // 2\n            b = ((i * (i + 1)) // 2)\n            if a + b == n:\n                return a + b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the number of sides of a square pyramid\n    num_of_sides = 4 * n + 1\n    # Calculate the number of squares in a pyramid\n    num_of_squares = (num_of_sides - 1) // 2\n    # Calculate the number of squares in the nth nonagonal square\n    num_of_squares_in_n_nonagonal = (2 * n - 1) // 2\n    # Return the sum of the squares of the first n squares in the pyramid\n    return sum([i ** 2 for i in range(1, num_of_squares + 1)]) - sum([i ** 2 for i in range(1, num_of_squares_in_n_nonagonal + 1)])"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return None\n    else: \n        for i in range(1, n+1): \n            yield i**2 - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(n+1):\n        nonagonal_numbers.append(i**2 - 2*i + 1)\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variable for the sum of the first n natural numbers\n    sum_n = 1\n    \n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Add the square of i to the sum_n\n        sum_n += i ** 2\n    \n    # Return the sum_n\n    return sum_n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables\n    i = 1\n    j = 1\n    # Iterate until we reach the nth nonagonal number\n    while i <= n:\n        j += 1\n        i += j\n    return j - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer\")\n    else:\n        num = 1\n        for i in range(n):\n            num += 2*(i+1)\n        return num"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(r'\\W','', text) # Remove non-word characters from the text\n    words = text.split() # Split the text into words\n    result = False\n    for i in range(1, len(words)-1): # Check all words except the first and last\n        if words[i].startswith('z') and words[i].endswith('z'):\n            result = True\n            break\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w[zZ]\\w\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # remove non-alphanumeric characters\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # split the text into words\n    words = text.split()\n    # iterate over the words and check if they contain 'z' at the start or end\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regex pattern to match 'z' at the start and end of a word\n    pattern = r'\\b(z)\\b'\n    \n    # Use re.search() function to search for pattern in text\n    match = re.search(pattern, text)\n    \n    # Check if match found, and return True if found, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b[a-z]*[z][a-z]*\\b'\n    return bool(re.search(regex, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b', re.IGNORECASE)\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    reverse_array = input[:k]\n    for i in range(k, n):\n        reverse_array.append(input[i])\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    #Reverse the array from 0 to k-1\n    for i in range(k):\n        input[0], input[i] = input[i], input[0]\n    #Reverse the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    for i in range(k):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new list with the first k elements of the original list reversed\n    new_list = input[0:k][::-1]\n    # Concatenate the new list with the remaining elements of the original list\n    final_list = new_list + input[k:]\n    # Return the final list\n    return final_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # If k is greater than the length of the array, swap both indices\n    if k > n:\n        k = n - k\n    # Reverse the first k elements of the array\n    input = input[:k] + reversed(input[k:])\n    # Reverse the rest of the array\n    input = reversed(input)\n    return list(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k and reverses the array up to k.\n    '''\n    length = len(input)\n    if k > length or k < 0:\n        return \"Invalid position. Please enter a position greater than or equal to 0 and less than or equal to the length of the array.\"\n    else:\n        # Reverse the array up to k\n        input = input[:k][::-1] + input[k:]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize variables\n    n = len(input)\n    temp = []\n    # loop through the array from left to right\n    for i in range(k-1, n-1): \n        temp.append(input[i])\n    # loop through the array from right to left\n    for j in range(n-1, k-1, -1): \n        temp.append(input[j])\n    # copy the elements of the temporary array to the input array\n    for k in range(n-k): \n        input[n-k-1] = temp[k]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array\n    input.reverse()\n\n    # Reverse the array from k to the end\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from the beginning to k-1\n    input[k-1:] = input[k-1:][::-1]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n-k, n):\n        input[i], input[i-k] = input[i-k], input[i]"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of key-value pairs\n    test_list = [(key, test_dict[key]) for key in test_dict]\n    # Combine the tuple with the dictionary\n    combined_tup = tuple(test_tup) + test_list\n    return combined_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the keys of the original dictionary and their values\n    new_dict = {key: value for key, value in test_dict.items()}\n    # Merge the two dictionaries into a single dictionary with the keys and values of the original dictionary and the new dictionary\n    merged_dict = {**test_dict, **new_dict}\n    # Create a new tuple with the values of the original tuple and the new dictionary\n    new_tuple = (test_tup[0], **merged_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_tuple = tuple(test_tup) + (new_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = dict(test_dict)  # convert the dictionary to a new dictionary\n    new_tup = tuple(test_tup)  # convert the tuple to a new tuple\n    for key, value in new_dict.items():  # iterate through the new dictionary\n        new_tup = new_tup + (value,)  # add the value as a tuple element to the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_dict = dict(test_dict)\n    new_tup.update(new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary that contains all the values from the original tuple and the new dictionary\n    combined_dict = {**test_dict, **test_tup}\n    \n    # create a new tuple with all the values from the original tuple and the new dictionary\n    new_tuple = (*test_tup, *combined_dict.values())\n    \n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    new_list = list(test_dict.items())\n    # Add the list of tuples to the tuple\n    new_tup = test_tup + new_list\n    # Convert the new tuple back to a tuple\n    return tuple(new_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # initialize the maximum average\n    max_avg = 0\n    # iterate through all paths starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            # initialize the visited cells\n            visited = {(i,j)}\n            # helper function to recursively compute the maximum average\n            def dfs(i, j, total_cost):\n                # check if we have reached the bottom right cell\n                if i == N-1 and j == N-1:\n                    # compute the average and update the maximum average\n                    avg = total_cost / len(visited)\n                    max_avg = max(max_avg, avg)\n                    return\n                # check if we have already visited this cell\n                if (i,j) in visited:\n                    return\n                # mark the cell as visited\n                visited.add((i,j))\n                # compute the maximum average for this cell\n                dfs(i+1, j, total_cost + cost[i][j])\n                dfs(i, j+1, total_cost + cost[i][j])\n            dfs(0, 0, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = 0\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath(cost[i+1:]))\n            elif j == 0:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath([cost[i][j]] + cost[:j]))\n            else:\n                max_avg = max(max_avg, cost[i][j] + max(maxAverageOfPath(cost[:i]), maxAverageOfPath(cost[i+1:j])))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    path_avg = 0\n    start_row = 0\n    start_col = 0\n    visited = set()\n\n    def dfs(row, col):\n        if (row, col) in visited:\n            return\n        visited.add((row, col))\n\n        if row == N - 1 and col == N - 1:\n            nonlocal path_avg\n            path_avg = sum(cost[row][col]) / (row * col + 1)\n            max_avg = max(max_avg, path_avg)\n            return\n\n        if row < N - 1:\n            dfs(row + 1, col)\n        if col < N - 1:\n            dfs(row, col + 1)\n\n    dfs(start_row, start_col)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Find the maximum path from each cell\n    dp = [[0] * N for _ in range(N)]\n    max_sum = [0] * N\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j - 1], dp[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n            max_sum[i] = max(max_sum[i], dp[i][j])\n\n    # Find the maximum average of all paths\n    max_avg = 0\n    for i in range(N):\n        max_avg = max(max_avg, max_sum[i] / (i + 1))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum total cost\n    max_total_cost = max(sum(cost[0]), sum(cost[i][j] for i in range(len(cost)) for j in range(i+1)))\n\n    # Initialize variables\n    max_average = 0\n    current_average = 0\n    current_cost = 0\n    current_path = []\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Calculate the new cost and add it to the current path\n            new_cost = cost[i][j] + current_cost\n            current_path.append(cost[i][j])\n            current_cost = new_cost\n\n            # Check if the new path has a higher total cost than the current maximum\n            if new_cost > max_total_cost:\n                max_total_cost = new_cost\n                max_average = current_average\n                current_average = 0\n                current_cost = 0\n                current_path = []\n\n    # Check if the final path has a higher total cost than the current maximum\n    if current_average > max_average:\n        max_average = current_average\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    \n    # Initialize first row and first column of DP table\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n        \n    # Fill DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            # If current cell is a corner cell, then we don't need to consider it\n            if i == 0 and j == 0 or i == N-1 and j == N-1:\n                dp[i][j] = dp[i-1][j-1] + cost[i][j]\n            else:\n                # If current cell is not a corner cell, then we need to consider both up and left cell to reach it\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n                \n    # Find maximum average over all existing paths\n    for i in range(N):\n        for j in range(N):\n            # If current cell is a corner cell, then we don't need to consider it\n            if i == 0 and j == 0 or i == N-1 and j == N-1:\n                avg = dp[i][j]\n            else:\n                # If current cell is not a corner cell, then we need to consider both up and left cell to reach it\n                avg = (dp[i][j] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]) / 4\n                \n            # Update maximum average if current average is greater than the previous maximum\n            max_avg = max(max_avg, avg)\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Calculate the size of the matrix\n    N = len(cost)\n    \n    # Initialize variables\n    max_avg = 0\n    current_avg = 0\n    visited_cells = set()\n    \n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if the cell is visited before\n            if (i,j) not in visited_cells:\n                # Add the current cell to the visited set\n                visited_cells.add((i,j))\n                \n                # Calculate the total cost for the current path\n                current_cost = cost[i][j]\n                \n                # Calculate the average of the current path\n                current_avg += current_cost\n                \n                # Check if the current path has a higher average than the previous max average\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                \n                # Move to the next cell\n                i += 1\n                j += 1\n    \n    return max_avg / len(visited_cells)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_path_avg = float('-inf')\n    max_path = None\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_path_avg and i == N-1 and j == N-1:\n                max_path_avg = dp[i][j]\n                max_path = (i, j)\n    \n    return max_path, max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    path_sum = [[0] * N for _ in range(N)]\n    path_count = [[0] * N for _ in range(N)]\n\n    # Calculate the sum of the cost of each path starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                path_sum[i][j] = cost[i][j]\n                path_count[i][j] = 1\n            else:\n                if i > 0:\n                    path_sum[i][j] += cost[i][j]\n                    path_count[i][j] += 1\n                if j > 0:\n                    path_sum[i][j] += cost[i][j]\n                    path_count[i][j] += 1\n                if i > 0 and j > 0:\n                    path_sum[i][j] += cost[i][j]\n                    path_count[i][j] += 1\n\n    # Find the path with maximum average\n    max_average = float('-inf')\n    for i in range(1, N):\n        for j in range(1, N):\n            for k in range(N):\n                for l in range(N):\n                    path = [i, j, k, l]\n                    path_sum[i][j] = cost[i][j]\n                    path_count[i][j] = 1\n                    for cell in path:\n                        path_sum[cell][l] += cost[i][j]\n                        path_count[cell][l] += 1\n                    path_sum[j][l] = cost[j][l]\n                    path_count[j][l] = 1\n                    for cell in path:\n                        path_sum[l][cell] += cost[j][l]\n                        path_count[l][cell] += 1\n                    path_sum[k][l] = cost[k][l]\n                    path_count[k][l] = 1\n                    for cell in path:\n                        path_sum[l][cell] += cost[k][l]\n                        path_count[l][cell] += 1\n\n                    average = path_sum[i][j] / path_count[i][j]\n                    if average > max_average:\n                        max_average = average\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        # Look for paths from top-left to bottom-right cells\n        for j in range(i, N):\n            # Compute total cost and number of cells visited\n            total_cost = sum([cost[k][j] for k in range(i, N)])\n            num_cells = (N-i)*(N-j)\n            # Check if this path is better than current max\n            avg = total_cost / num_cells\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [(i, j)]\n                # Follow the path to find the longest path\n                for k in range(i, N):\n                    for l in range(j, N):\n                        if (k, l) not in max_path:\n                            max_path.append((k, l))\n                            if (k, l) == (N-1, N-1):\n                                break\n                            # Continue to next cell in the path\n                            continue\n                        else:\n                            break\n                max_path = list(set(max_path))\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[key] = value\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    # Loop through the dictionary\n    for name, info in students.items():\n        # Extract the height and weight of the current student\n        height, weight = info\n        # Check if the height and weight of the current student are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered list\n            filtered_students.append(name)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height >= h and weight >= w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n    \n    # Iterate over each student\n    for name, (height, weight) in students.items():\n        # Check if the student's height and weight are greater than the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered_students list\n            filtered_students.append(name)\n    \n    # Return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # loop through the lists and compare each element\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            # if equal, add index to a list of indices\n            indices.append(i)\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return len(same_indices)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    # Use the 'eq' function to check if the lists have the same values\n    result = [i for i in range(len(nums1)) if eq(nums1[i], nums2[i])]\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    while power > 0:\n        digit = base % 10\n        total_sum += digit\n        power -= 1\n        base //= 10\n    return total_sum\n\nprint(power_base_sum(1234, 4))"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through each digit of the base\n    for digit in str(base):\n        # Convert each digit to an integer and add it to the sum\n        total_sum += int(digit) ** power\n        \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def sum_of_digits(num):\n        '''\n        Helper function to calculate the sum of all digits of a number.\n        '''\n        return sum(int(digit) for digit in str(num))\n\n    result = 0\n    for _ in range(power):\n        result += sum_of_digits(base)\n        base *= 10\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum variable to zero\n    total_sum = 0\n    # loop through the digits of the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # calculate the power of the digit to the power of the power variable\n        power_digit = pow(digit_int, power)\n        # add the power of the digit to the total sum\n        total_sum += power_digit\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base and power to strings to allow for mathematical operations\n    base_str = str(base)\n    power_str = str(power)\n    \n    # initialize a variable to hold the sum of digits\n    digit_sum = 0\n    \n    # iterate through the digits of the base and add their value to the sum of digits\n    for digit in base_str:\n        digit_sum += int(digit)\n    \n    # calculate the sum of digits raised to the power of the specified power\n    digit_sum_to_power = 0\n    for i in range(len(base_str)):\n        digit_sum_to_power += digit_sum ** i\n    \n    # calculate the sum of digits raised to the power of the specified power\n    digit_sum_to_power = 0\n    for i in range(len(base_str)):\n        digit_sum_to_power += int(digit_sum) ** int(power_str)\n    \n    # return the sum of digits raised to the power of the specified power\n    return digit_sum_to_power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    # Calculate the sum of digits raised to the power\n    sum_digits = 0\n    for i in range(len(digits)):\n        sum_digits += int(digits[i]) ** power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable\n    sum_digits = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    # Calculate the result by raising the sum to the power and adding the final digits to it\n    result = sum_digits**(power-1)\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Iterate through each digit in the base string and calculate the sum\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    \n    # Calculate the sum of the digits raised to the power\n    result = sum ** power\n    \n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define regular expression pattern for quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use re.findall() method to extract all matches in the string\n    matches = re.findall(pattern, text1)\n    # Return list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to find all occurrences of quotation marks \" \" in the given string\n    quotation_matches = re.findall(r'\"([^\"]+)\"', text)\n    # Extract the values between quotation marks and return as a list\n    return [match.strip() for match in quotation_matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define regular expression pattern to find all the quotation marks \" \" in the string\n    pattern = r'(?<=\\s)\"(.*?)\"'\n\n    # Use re.findall() function to find all the occurrences of the pattern in the string\n    matches = re.findall(pattern, text1)\n\n    # Return the list of all the matches found\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'\"(.*?)\"')\n    result = re.findall(quotation_pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\"|\\'|\\b)(.*?)(?=\"|\\'|\\b)'\n    matches = re.finditer(pattern, text1)\n    values = []\n    for match in matches:\n        values.append(match.group())\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Removing all non-alphanumeric characters and converting to lowercase\n    text1 = re.sub('[^a-zA-Z0-9\\s]', '', text1).lower()\n    # Splitting the text into words\n    words = text1.split()\n    # Initializing empty list to store values between quotation marks\n    values = []\n    # Looping through each word in the text\n    for word in words:\n        # Checking if the word is inside quotation marks\n        if word[0] == '\"' and word[-1] == '\"':\n            # Extracting the value between quotation marks and adding it to the values list\n            values.append(word[1:-1])\n    # Returning the list of values\n    return values"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    new_tup.append(test_tup[-1] * test_tup[0])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the result tuple\n    result = ()\n\n    # Iterate through the tuple and append the product of each adjacent pair to the result tuple\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(t_i * test_tup[i+1] for i in range(N-1))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Convert the tuple to a list to make it mutable and perform the multiplication\n    result_list = list(test_tup) * 2\n    \n    # Return the tuple containing the elements of the list after multiplication\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the tuple\n    N = len(test_tup)\n    # Initialize an empty tuple of length N\n    result_tup = ()\n    # Loop over the elements of the input tuple\n    for i in range(N):\n        # Calculate the product of the i-th and (i+1)-th elements of the input tuple\n        product = test_tup[i] * test_tup[i+1]\n        # Append the product to the result tuple\n        result_tup += (product,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # define the number of elements in the tuple\n    N = len(test_tup) - 1\n    \n    # create a new tuple with the same elements as the input tuple, but multiplied by the next element\n    new_tup = [elem * (test_tup[i+1] if i < N else 1) for i, elem in enumerate(test_tup)]\n    \n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize an empty list to store the sum\n    result = []\n    # Loop through each element in the first list\n    for i in range(len(lst1)):\n        # Append the sum of the current element and the corresponding element from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby() to group the list by consecutive duplicates\n    # and yield each group separately\n    for group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Iterate over the list using a generator expression\n    for i, group in groupby(nums):\n        # Get the first element of each group\n        first = next(group)\n        # If there are more than two consecutive duplicates, remove them\n        if i > 0 and nums[i-1] == first:\n            nums.pop(i-1)\n            nums.pop(i-1)\n            nums.pop(i-1)\n        else:\n            break\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(t for t in groupby(nums) if not t[1])"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n\n    # create a dictionary to keep track of consecutive duplicates\n    consecutive_dict = {}\n\n    # iterate over the list\n    for i in range(len(nums)):\n\n        # get the current number\n        num = nums[i]\n\n        # if the number has not been seen before, add it to the dictionary with a value of 1\n        if num not in consecutive_dict:\n            consecutive_dict[num] = 1\n\n        # if the number has been seen before, increment its value in the dictionary\n        else:\n            consecutive_dict[num] += 1\n\n    # create a new list to store the unique numbers\n    unique_nums = []\n\n    # iterate over the dictionary\n    for num, count in consecutive_dict.items():\n\n        # if the number has only one occurrence, add it to the new list\n        if count == 1:\n            unique_nums.append(num)\n\n    # return the new list of unique numbers\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator object for the list of nums\n    group_nums = groupby(enumerate(nums))\n    # create a new list to store the non-consecutive duplicates\n    non_consecutive_duplicates = []\n    # loop through each group of consecutive duplicates\n    for key, group in group_nums:\n        # if the group is not empty\n        if key == 0:\n            # loop through each element in the group\n            for num in group:\n                # if the next element is not equal to the current element\n                if group.next()!= None and num!= group.next()[1]:\n                    # add the current element to the non-consecutive duplicates list\n                    non_consecutive_duplicates.append(num)\n    return non_consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by their consecutive duplicates\n    grouped_nums = groupby(nums)\n    # Create a new list with the consecutive duplicates removed\n    new_nums = [x for x, y in grouped_nums if not y]\n    return new_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    Area = 4*math.pi*r*h**2\n    LateralSurfaceArea = math.sqrt(Area)\n    return LateralSurfaceArea"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi*(r**2)*h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * r**2) + (math.pi * r**2 * h)\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given radius r and the height h.\n    \n    Parameters:\n    r (float): the radius of the cone\n    h (float): the height of the cone\n    \n    Returns:\n    float: the lateral surface area of the cone\n    '''\n    \n    # calculate the surface area of the base of the cone\n    s = math.pi * r**2\n    \n    # calculate the surface area of the apex of the cone\n    s_apex = math.pi * r**2 * h / 3\n    \n    # calculate the lateral surface area of the cone\n    lateral_s = s - s_apex\n    \n    return lateral_s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    surface_area = math.pi * r**2 * h\n    \n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*(r**2)*(h/2)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius r and height h.\n    '''\n    area = math.pi * r ** 2 * h / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = (2*r*math.sin(math.pi/6))+(2*r*math.sin(math.pi/4))+(2*r*math.sin(math.pi/3))+(2*r*math.sin(math.pi/2))+(2*r*math.sin(math.pi*5/6))+(2*r*math.sin(math.pi*7/6))\n    return lateral_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # replace spaces with colons\n    text = re.sub(r'\\s', ':', text)\n    # replace commas with colons\n    text = re.sub(r',', ':', text)\n    # replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r\"[.,\\s]\"\n    text = re.sub(pattern, \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text.replace(' ', '').replace(',', '').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with a single space\n    text = re.sub(r'[,\\.]', ':', text) # replace commas and dots with colons\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all the special characters\n    pattern = re.compile(r'[\\s,\\.]+')\n    # Replace all the matches with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = re.compile(r'[,.]')\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^\\w\\s]', '', text)\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\n\ntext = \"This is a sample text with spaces, commas and dots.\"\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with a colon\n    text = re.sub(r',+', ':', text)\n    # Replace dots with a colon\n    text = re.sub(r'\\.+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile('[,.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index of the first occurrence to -1\n    index = -1\n    \n    # iterate over the sorted array\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, update the index\n            index = i\n            # exit the loop as the element has been found\n            break\n    \n    # return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            \n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(A) - 1\n\n    # Initialize the result variable\n    result = -1\n\n    # Iterate until the left index is greater than or equal to the right index\n    while left <= right:\n        # Calculate the mid index\n        mid = (left + right) // 2\n\n        # If the mid element is equal to the target, update the result and move the left index to the left of the mid\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        # If the mid element is less than the target, move the right index to the right of the mid\n        elif A[mid] < x:\n            left = mid + 1\n        # If the mid element is greater than the target, move the left index to the left of the mid\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Binary search to find the first occurrence of x in A\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            # Found x, check if it's the first occurrence\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1  # x is not the first occurrence, so search the left half of A\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # x was not found in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize variables\n    low = 0\n    high = len(A) - 1\n    index = -1\n    \n    # check if x is present in the array\n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            index = mid\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A: A list of numbers.\n        x: A number to search for.\n\n    Returns:\n        An integer representing the index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n\n    # find the left and right indices of the first occurrence of x\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # check if x is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            # search for the next occurrence of x\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    \n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_product = [1] * n\n    for i in range(n-1):\n        subarray_product[i+1] = arr[i] * subarray_product[i]\n    \n    subarray_sum = [0] * (n+1)\n    for i in range(n):\n        subarray_sum[i+1] = subarray_sum[i] + arr[i]\n        \n    result = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            result += subarray_product[j-i] * subarray_sum[j]\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    sum_arr = [0] * n\n    max_sum = arr[0]\n\n    # Calculate sum of subarrays\n    for i in range(n):\n        sum_arr[i] = sum_arr[i-1] + arr[i]\n\n    # Calculate product of each subarray\n    product_arr = [1] * n\n    for i in range(n):\n        for j in range(i, n):\n            product_arr[j] = product_arr[j] * (sum_arr[j] - sum_arr[i-1])\n\n    # Calculate sum of products of subarrays\n    sum_prod_arr = [0] * n\n    for i in range(n):\n        for j in range(n-i-1):\n            sum_prod_arr[j] += product_arr[j] * product_arr[j+i+1]\n\n    # Calculate sum of products of all sublists\n    total_sum = sum_prod_arr[0]\n    for i in range(1, n):\n        total_sum += sum_prod_arr[i]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    sub_len = n // 2 + 1\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # calculate the sum of products of subarrays of length 1\n    for i in range(1, n + 1):\n        dp[i][i] = arr[i - 1] * arr[i - 1]\n\n    # calculate the sum of products of subarrays of length 2\n    for i in range(1, n):\n        dp[i][i + 1] = arr[i - 1] * arr[i]\n\n    # calculate the sum of products of subarrays of length k\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            dp[i][j] = dp[i][j] + dp[i + 1][j - 1] * arr[i] * arr[j]\n\n    # calculate the sum of products of subarrays of length sub_len\n    for i in range(n - sub_len + 1):\n        j = i + sub_len - 1\n        dp[i][j] = dp[i][j] + dp[i][j - 1]\n\n    # calculate the sum of products of all subarrays\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += dp[0][i]\n\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find the length of the given list\n    n = len(arr)\n\n    # Initialize the sum of products and the list of sublists\n    sum_of_products = 0\n    sublists = []\n\n    # Iterate through all possible sublists of length i\n    for i in range(1, n+1):\n\n        # Initialize the current sublist\n        current_sublist = []\n\n        # Iterate through all possible starting indices of the sublist\n        for start in range(n-i+1):\n\n            # Add the current element to the sublist\n            current_sublist.append(arr[start])\n\n            # Calculate the product of the sublist\n            current_product = 1\n            for num in current_sublist:\n                current_product *= num\n\n            # Update the sum of products\n            sum_of_products += current_product\n\n            # Append the current sublist to the list of sublists\n            sublists.append(current_sublist)\n\n    # Return the sum of products and the list of sublists\n    return sum_of_products, sublists"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    subprod = 1\n    max_prod = 1\n\n    for i in range(n):\n        subprod *= arr[i]\n        max_prod = max(max_prod, subprod)\n\n    for i in range(n-1, -1, -1):\n        subprod *= arr[i]\n        if subprod == 0:\n            continue\n        subprod //= max_prod\n        prod *= subprod\n\n    return prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        if i == 0:\n            res += arr[i]\n        else:\n            res += arr[i] * arr[i-1]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 1000000007\n\n    # calculate the cumulative sum\n    cum_sum = [0] * (n + 1)\n    cum_sum[1] = arr[0]\n\n    for i in range(1, n + 1):\n        cum_sum[i] = cum_sum[i - 1] + arr[i - 1]\n\n    # calculate the cumulative product\n    cum_prod = [1] * (n + 1)\n\n    for i in range(1, n + 1):\n        cum_prod[i] = cum_prod[i - 1] * cum_sum[i]\n\n    # calculate the product of all subarrays of size i\n    subarray_prod = [0] * n\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            subarray_prod[j - 1] += cum_prod[j] * cum_prod[j] - cum_prod[i - 1] * cum_prod[j - 1]\n\n    # calculate the sum of products\n    sum_of_prod = 0\n\n    for i in range(n):\n        sum_of_prod += subarray_prod[i]\n\n    return sum_of_prod % mod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_prod = [1] * n\n    \n    for i in range(1, n):\n        subarray_prod[i] = subarray_prod[i-1] * arr[i]\n    \n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += subarray_prod[i]\n        \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n\n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the product of the sublist\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n\n            # add the product to the result\n            result += product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i] + dp[i-1]\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            result += prod * dp[j]\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Calculate the number of set bits in n\n    count = sum(int(digit) for digit in bin(n)[2:])\n\n    # Toggle the bits except the first and the last one\n    n = n ^ ((1 << (count + 1)) - 1)\n\n    # Calculate the remaining set bits\n    remaining_count = count - 2\n\n    # Toggle the remaining set bits\n    n = n ^ ((1 << remaining_count) - 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert n to binary string\n    bin_str = format(n, '08b')\n    # remove the first and last bits\n    first_bit = bin_str[1]\n    last_bit = bin_str[-2]\n    bin_str = bin_str.replace(first_bit, '')\n    bin_str = bin_str.replace(last_bit, '')\n    # toggle all the bits except the first and the last bits\n    for i in range(len(bin_str)):\n        if i!= 0 and i!= len(bin_str)-1:\n            bin_str[i] = '1' if bin_str[i] == '0' else '0'\n    # convert binary string back to decimal integer\n    n = int(bin_str, 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    :param n: An integer\n    :return: An integer\n    \"\"\"\n\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Get the last and second to last bits\n    last_bit = n & (1 << (num_bits - 1))\n    second_to_last_bit = n & (1 << (num_bits - 2))\n\n    # Toggle the last and second to last bits\n    toggled_last_bit = (last_bit >> 1) ^ second_to_last_bit\n    toggled_second_to_last_bit = (second_to_last_bit >> 1) ^ toggled_last_bit\n\n    # Combine the toggled last and second to last bits with the original number\n    return n ^ toggled_second_to_last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    first_bit = 0b10000000 # first bit of the number (set to 1)\n    last_bit = 0b01000000 # last bit of the number (set to 1)\n    toggle_bits = 0b00111111 # toggle bits to be toggled except the first and last bits\n    \n    # Iterate through the bits of the number\n    for i in range(7, -1, -1):\n        # Check if the current bit is set to the first or last bit\n        if n & (1 << i) == first_bit or n & (1 << i) == last_bit:\n            # If the current bit is set to the first or last bit, toggle it\n            if n & (1 << i) == first_bit:\n                n = n ^ (1 << i)\n            elif n & (1 << i) == last_bit:\n                n = n ^ (1 << i) ^ (1 << (i - 1)) # toggle the next bit as well\n        elif n & (1 << i) == 0:\n            # If the current bit is not set to the first or last bit, toggle it\n            if n & (1 << i) == 0:\n                n = n ^ (1 << i) ^ (1 << (i - 1)) # toggle the next bit as well\n    \n    # Check if the first or the last bit is set to 0\n    if n & first_bit == 0 or n & last_bit == 0:\n        # If the first or the last bit is set to 0, toggle it\n        if n & first_bit == 0:\n            n = n ^ first_bit\n        elif n & last_bit == 0:\n            n = n ^ last_bit\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    # Set all the other bits to 0\n    n = n & ~(0xFFFFFFFF)\n    # Set the first and last bits to their opposite value\n    n |= (first_bit ^ last_bit)\n    # Set the middle bits to their opposite value\n    n |= (first_bit ^ 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles bits of the number except the first and the last bit.\n    '''\n    # Finding the position of the middle bits\n    middle = (n & ((n-1) ^ (n&-2))) + 1\n    \n    # Extracting the first and last bits of the number\n    first = (n >> 1) & 1\n    last = n & 1\n    \n    # Toggling the middle bits\n    middle = middle ^ (1 ^ first ^ last)\n    \n    # Reconstructing the number\n    n = first << 1\n    n |= middle << 1\n    n |= last\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & (n - 1)   # find the first set bit\n    last_bit = n & -(n - 1)   # find the last set bit\n    n = n ^ first_bit ^ last_bit   # toggle the first and last bits\n    n = n ^ first_bit   # toggle the middle bits\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (len(bin(n)) - 2))\n    \n    # Toggle the middle bits and combine them with the first and last bits\n    middle_bits = (~(n & (1 << 0)) & (1 << 1)) | \\\n                  (~(n & (1 << 1)) & (1 << 0)) | \\\n                  (~(n & (1 << 2)) & (1 << 1)) | \\\n                  (~(n & (1 << 3)) & (1 << 2)) | \\\n                  (~(n & (1 << 4)) & (1 << 3)) | \\\n                  (~(n & (1 << 5)) & (1 << 4)) | \\\n                  (~(n & (1 << 6)) & (1 << 5)) | \\\n                  (~(n & (1 << 7)) & (1 << 6)) | \\\n                  (~(n & (1 << 8)) & (1 << 7)) | \\\n                  (~(n & (1 << 9)) & (1 << 8)) | \\\n                  (~(n & (1 << 10)) & (1 << 9)) | \\\n                  (~(n & (1 << 11)) & (1 << 10)) | \\\n                  (~(n & (1 << 12)) & (1 << 11)) | \\\n                  (~(n & (1 << 13)) & (1 << 12)) | \\\n                  (~(n & (1 << 14)) & (1 << 13)) | \\\n                  (~(n & (1 << 15)) & (1 << 14)) | \\\n                  (~(n & (1 << 16)) & (1 << 15)) | \\\n                  (~(n & (1 << 17)) & (1 << 16)) | \\\n                  (~(n & (1 << 18)) & (1 << 17)) | \\\n                  (~(n & (1 << 19)) & (1 << 18)) | \\\n                  (~(n & (1 << 20)) & (1 << 19)) | \\\n                  (~(n & (1 << 21)) & (1 << 20)) | \\\n                  (~(n & (1 << 22)) & (1 << 21)) | \\\n                  (~(n & (1 << 23)) & (1 << 22)) | \\\n                  (~(n & (1 << 24)) & (1 << 23)) | \\\n                  (~(n & (1 << 25)) & (1 << 24)) | \\\n                  (~(n & (1 << 26)) & (1 << 25)) | \\\n                  (~(n & (1 << 27)) & (1 << 26)) | \\\n                  (~(n & (1 << 28)) & (1 << 27)) | \\\n                  (~(n & (1 << 29)) & (1 << 28)) | \\\n                  (~(n & (1 << 30)) & (1 << 29)) | \\\n                  (~(n & (1 << 31)) & (1 << 30))\n    \n    # Combine the first and last bits with the middle bits\n    final_number = (first_bit << 31) | (middle_bits << 1) | (last_bit >> 31)\n    \n    return final_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last set bits\n    first_set_bit_pos = None\n    last_set_bit_pos = None\n    for i in range(32):\n        if n & (1 << i):\n            if first_set_bit_pos is None:\n                first_set_bit_pos = i\n            last_set_bit_pos = i\n    \n    # Find the position of the middle bit\n    middle_bit_pos = None\n    for i in range(first_set_bit_pos + 1, last_set_bit_pos):\n        if n & (1 << i):\n            middle_bit_pos = i\n            break\n    \n    # Toggle middle bit\n    if middle_bit_pos is not None:\n        n ^= (1 << middle_bit_pos)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the given number\n    binary_num = bin(n)[2:]\n\n    # Check if the binary number contains more than one 1\n    if binary_num.count('1') > 1:\n        return None\n\n    # Check if the first and last bit are already set\n    first_bit = binary_num[0]\n    last_bit = binary_num[-1]\n\n    if first_bit == '0' and last_bit == '0':\n        return n\n\n    # Toggle the middle bit\n    middle_bit = '1' if first_bit == '1' else '0'\n    binary_num = binary_num.replace(first_bit, middle_bit)\n    binary_num = binary_num.replace(last_bit, middle_bit)\n\n    # Convert the binary representation back to an integer and return it\n    return int(binary_num, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a[:i], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use binary search to find the insertion point of x in a\n    i = bisect.bisect_left(a, x)\n    # If the value is present at the beginning of the array, return 0\n    if i == 0:\n        return 0\n    # If the value is not present in the array, find the previous element and its insertion point\n    elif x > a[i-1]:\n        # Use binary search to find the insertion point of a[i-1] in a[:i]\n        j = bisect.bisect_left(a[:i], x)\n        # If x is present at the beginning of the array, return i\n        if j == 0:\n            return i\n        # If x is not present at the beginning of the array, return j\n        else:\n            return j\n    # If the value is present at the end of the array, return i\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return -1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    This function uses the bisect module which is included in Python's standard library.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index\n    else:\n        return index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return left_insertion(a[index:], x)\n    else:\n        return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return \"The string is starting with a vowel.\"\n    else:\n        return \"The string is not starting with a vowel.\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.search(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (1 + geometric_sum(n - 1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1 + geometric_sum(n-1)) ** (1/n)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    triangular_numbers = []\n    for i in range(1, 10**n):\n        triangular_numbers.append(i*(i+1)//2)\n    triangular_numbers.sort()\n    return triangular_numbers.index(1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "Here's the Python code to implement this algorithm:"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triangular_number(n):\n        return int(\"\".join(str(i) for i in range(1, n+1)))\n\n    def count_zeros(num):\n        return num.count('0')\n\n    def triangular_number_with_n_digits(n):\n        triangular_nums = set()\n        for i in range(1, 10**(n-1) + 1):\n            triangular_nums.add(triangular_number(i))\n        return triangular_nums\n\n    smallest_triangular_number_with_n_digits = min(triangular_number_with_n_digits(n))\n    index_of_smallest_triangular_number = count_zeros(str(smallest_triangular_number_with_n_digits))\n    return index_of_smallest_triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    # Base case \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    # Recursive case \n    else: \n        # initialize two variables to keep track of the smallest triangular number and its index \n        tri_num = 1 \n        tri_index = 1 \n        # loop through all the triangular numbers with n digits \n        while True: \n            tri_num = tri_num + math.floor((n - 1) * tri_num / (n + 1)) \n            # check if the current triangular number is smaller than or equal to the previous smallest \n            if tri_num <= tri_num + 1: \n                return tri_index\n            # if the current triangular number is not smaller than the previous smallest, increment the index \n            else: \n                tri_index = tri_index + 1 "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    count = 0 \n    triangular_numbers = []\n    for i in range(1,10**n):\n        triangular_numbers.append(i)\n        if len(str(i)) == n:\n            count += 1\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # Calculate the nth triangular number\n    def nth_triangular_number(n):\n        return int(math.factorial(n) / (math.factorial(n-2) * math.factorial(2)))\n\n    # Initialize variables\n    min_triangular_num = 0\n    min_triangular_num_index = 0\n\n    # Iterate through the range of n digits\n    for i in range(1, n+1):\n        triangular_num = nth_triangular_number(i)\n        # Check if the triangular number is less than the current minimum triangular number\n        if triangular_num < min_triangular_num:\n            min_triangular_num = triangular_num\n            min_triangular_num_index = i\n\n    # Return the index of the minimum triangular number\n    return min_triangular_num_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # Define a limit n for triangular numbers \n    limit = 10**n \n\n    # Initialize a list of all triangular numbers \n    triangular_numbers = [] \n    for i in range(1, limit+1): \n        triangular_numbers.append(i*math.factorial(i)) \n\n    # Find the smallest triangular number with n digits \n    smallest_triangular = float('inf') \n    for num in triangular_numbers: \n        if str(num).isdigit() and len(str(num)) == n: \n            if num < smallest_triangular: \n                smallest_triangular = num \n\n    # Return the index of the smallest triangular number \n    index = triangular_numbers.index(smallest_triangular) \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n\n    # Find the largest integer that has n digits \n    largest = 9 * (10 ** n) - 1 \n\n    # Initialize the result variable \n    result = -1 \n\n    # Loop through all integers from 1 to the largest integer \n    for i in range(1, largest + 1): \n\n        # Check if the integer is a triangular number \n        if is_triangular(i): \n\n            # Check if the integer has n digits \n            if len(str(i)) == n: \n\n                # If it satisfies both conditions, update the result \n                result = i \n\n    # Return the result \n    return result \n\ndef is_triangular(n): \n\n    # Check if the integer is divisible by 10^n - 1 \n    if n % (10 ** n - 1) == 0: \n\n        # Check if the integer is a triangular number \n        for i in range(1, n // 2 + 1): \n\n            # Check if the integer is not divisible by the square of a number from 1 to n // 2 \n            if n % i == 0: \n                return False \n\n        # If it satisfies both conditions, it is a triangular number \n        return True \n\n    else: \n\n        # If it is not divisible by 10^n - 1, it is not a triangular number \n        return False "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the smallest triangular number\n    smallest_triangular = 0\n\n    # Loop through all the triangular numbers with n digits\n    for i in range(10**n):\n        triangular_number = smallest_triangular + i\n        smallest_triangular = triangular_number\n\n    # Find the index of the smallest triangular number\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find smallest triangular number with n digits\n    triangular_numbers = []\n    triangular_numbers.append(1)\n    triangular_number = 1\n    while len(str(triangular_number)) < n:\n        triangular_number += 1\n        triangular_numbers.append(triangular_number)\n\n    # Find the index of the smallest triangular number\n    smallest_triangular_number = min(triangular_numbers)\n    smallest_triangular_index = triangular_numbers.index(smallest_triangular_number)\n\n    return smallest_triangular_index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize empty dictionary\n    my_dict = {}\n    \n    # loop through the given tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The tuple should have an even length.\")\n        return None\n    else:\n        result_dict = {}\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            result_dict[key] = value\n        return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:\n        test_tup = (test_tup[0],) + test_tup[1:]\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    # Initialize the index for the tuple\n    i = 0\n    # Loop through each element of the tuple\n    while i < len(test_tup):\n        # Append the key-value pair to the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n        # Increment the index for the tuple\n        i += 2\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:  # empty string\n        return True\n    elif len(s) == 1:  # single character string\n        return True\n    elif s[0]!= s[1]:  # different characters\n        return False\n    else:  # same characters\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the length of the string is 1 or 0\n    if len(s) <= 1:\n        # if the length is 1 or 0, then all the characters must be same\n        return True\n    else:\n        # if the length is greater than 1, then compare the first character with the last character\n        if s[0] == s[-1]:\n            # if the first and last characters are same, then continue to compare the remaining characters\n            return all_Characters_Same(s[1:-1])\n        else:\n            # if the first and last characters are not same, then return False\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list of characters\n    char_list = list(s)\n    \n    # check if all characters are the same\n    if len(char_list) > 1 and char_list[0] == char_list[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and checks whether all the characters in the string are same or not.\n    \"\"\"\n    # Check if the length of the string is 0 or 1\n    if len(s) <= 1:\n        return True\n    # Check if all the characters are same in the string\n    elif s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Check if the string is empty\n    if len(s) == 0:\n        return True\n    \n    # Initialize the first character of the string\n    first_char = s[0]\n    \n    # Loop through the string\n    for char in s:\n        # If the character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If the loop completes, return True since all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if length of string is 0\n    if len(s) == 0:\n        return True\n\n    # iterate through the string and compare each character with the first character\n    for i in range(1, len(s)):\n        if s[0]!= s[i]:\n            return False\n\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = math.sqrt(3) / 4 * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula to calculate the area of a tetrahedron\n    # area = 1/3 * (base^2 * height^2)\n    # where base and height are the length of each side of the tetrahedron\n    base = side\n    height = side * math.sqrt(3) / 4\n    area = 1/3 * base**2 * height**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = math.sqrt(3) * half_perimeter ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n    area = 4 * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = side/3\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(3)*(side**2)/4\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/6) * side * side * side\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    \n    # reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    \n    # reverse the rest of the list\n    list[m:] = list[m:][::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list):\n        m = m % len(list)\n    \n    list = list[m:] + list[:m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    -----------\n    list: list\n        List to be rotated.\n    m: int\n        Number of items to be rotated.\n\n    Returns:\n    --------\n    list: rotated list\n    \"\"\"\n\n    # Create a copy of the original list\n    new_list = list.copy()\n\n    # Calculate the number of items to be rotated in the original list\n    n = len(new_list)\n    m = m % n\n\n    # Rotate the list by m items to the right direction\n    new_list = new_list[-m:] + new_list[:-m]\n\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n - m:] + list[:n - m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a list by m items to the right.\n\n    Args:\n        list (list): A list to be rotated.\n        m (int): The number of items to rotate to the right.\n\n    Returns:\n        The rotated list.\n    \"\"\"\n    n = len(list)\n    m %= n\n    return list[n - m:] + list[:n - m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n and rotates the list n items to the right.\n\n    Args:\n        lst (list): the list to be rotated\n        n (int): the number of items to be rotated\n\n    Returns:\n        list: the rotated list\n    \"\"\"\n    # Check if n is negative or zero\n    if n == 0 or n > len(lst):\n        return lst\n    \n    # Find the position where rotation should begin\n    pos = n % len(lst)\n\n    # Reverse the first n elements of the list\n    lst[:pos] = lst[:pos][::-1]\n\n    # Reverse the rest of the list\n    lst[pos:] = lst[pos:][::-1]\n\n    # Reverse the first n elements of the list again to get the final rotated list\n    rotated_lst = lst[:n] + lst[n:][::-1]\n\n    return rotated_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    if m == 0:\n        return list\n    \n    n = len(list)\n    k = n - m\n    list = list[k:] + list[:k]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # m is the number of items to be rotated\n    m = m % n\n    # initialize a new list\n    new_list = []\n    # add the last m items of the original list to the new list\n    for i in range(m):\n        new_list.append(list[i])\n    # add the first n-m items of the original list to the new list\n    for i in range(n-m):\n        new_list.append(list[i])\n    # return the new list\n    return new_list\n"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_every_digit(n):\n        digits = [int(d) for d in str(n)]\n        for d in digits:\n            if d == 0:\n                return False\n        return True\n\n    divisible_numbers = []\n    for n in range(startnum, endnum + 1):\n        if is_divisible_by_every_digit(n):\n            divisible_numbers.append(n)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(map(lambda y: x % y == 0, [int(digit) for digit in str(x)])) and int(str(x)) >= startnum and int(str(x)) <= endnum, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit % x == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = set(str(num))\n        return all(num % int(digit) == 0 for digit in digits)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % d == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n\n    return filter(is_divisible_by_digits, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return sorted(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) in str(num) for digit in str(num))\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(map(lambda y: x % y == 0, [int(d) for d in str(x)])) == True, range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within valid range (0 to 360 degrees)\n    if not 0 <= a <= 360:\n        return None\n    else:\n        # Convert angle to radians\n        a = a * math.pi / 180\n        # Calculate area of sector using Heron's formula\n        area = 0.5 * r * r * math.sin(a)\n        # Return area of sector\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    return dp[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Finding the length of the longest string\n    n = max(len(X), len(Y), len(Z))\n\n    # Creating a table to store the length of the LCS for substrings of X, Y and Z\n    # Initially all entries will be zero\n    L = [[0] * n for _ in range(n)]\n\n    # Traverse through the table\n    for i in range(n):\n        for j in range(n):\n            # If characters match, then length of LCS is 1 + previous length of LCS\n            if i == 0 or j == 0 or X[i - 1] == Y[j - 1] == Z[i + j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = 0\n\n    # Using dynamic programming to find the LCS\n    i, j = n - 1, n - 1\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] == Z[i + j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Returning the LCS\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Find lengths of X, Y, and Z \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # Create a table to store lengths of longest common \n    # suffixes of three strings. \n    L = [[0] * (p+1) for i in range(m+1)] \n\n    # Fill table L in bottom up fashion. \n    for i in range(1, m+1): \n        for j in range(1, p+1): \n            if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n\n    # Print the lengths of L. \n    for i in range(m+1): \n        for j in range(p+1): \n            print(L[i][j], end=\" \") \n    print()\n\n    # Print the longest common subsequence. \n    i = m \n    j = p \n    k = L[m][p] \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n    print(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the length of the three sequences\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # Initialize the LCS matrix\n    L = [[0 for j in range(o+1)] for i in range(m+1)] \n\n    # Fill the LCS matrix in bottom up manner\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Initialize the result string\n    result = \"\" \n\n    # Traverse the LCS matrix to get the final result\n    i = m \n    j = n \n    k = o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1]: \n            result = X[i-1] + result \n            i -= 1 \n            j -= 1 \n        elif L[i-1][j] >= L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Remove the extra characters from the result string\n    result = result[:-1] \n\n    # Return the final result\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    dp = [[0] * (o+1) for i in range(m+1)] \n    max_len = 0 \n    start = 0 \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1 \n                    if dp[i][j][k] > max_len: \n                        max_len = dp[i][j][k]\n                        start = i-1, j-1, k-1\n                else: \n                    dp[i][j][k] = 0 \n    return X[start[0]:start[0]+max_len], Y[start[1]:start[1]+max_len], Z[start[2]:start[2]+max_len]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Creating a 2D array to store the lengths of the longest common subsequences of X[0..i], Y[0..j], and Z[0..k]\n    dp = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # Building the dp array using the recurrence relation:\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # The length of the longest common subsequence of X, Y, and Z is stored in dp[len(X)][len(Y)]\n    return dp[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    # Build the table\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # Traverse the table to find the LCS\n    i = n\n    j = m\n    LCS = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            LCS.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    LCS.reverse()\n    return ''.join(LCS)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    # create a 2D table to store the length of LCS for all prefixes of X, Y, Z\n    table = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n\n    # fill the table\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # find the length of LCS using the table\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs_length += 1\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common subsequence of prefixes\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill table L in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Following steps will give us the lcs of prefixes of X, Y and Z\n    i = m\n    j = n\n    k = p\n    lcs = []\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # create a 3D table to store the lengths of common subsequences of all possible prefixes of X, Y, and Z\n    len_table = [[[0] * (len(Y) + 1) for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n\n    # fill in the table using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    len_table[i][j][k] = len_table[i-1][j-1][k-1] + 1\n                else:\n                    len_table[i][j][k] = max(len_table[i-1][j][k], len_table[i][j-1][k], len_table[i][j][k-1])\n\n    # reconstruct the LCS using the table\n    lcs = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif len_table[i-1][j][k] == len_table[i][j][k]:\n            i -= 1\n        elif len_table[i][j-1][k] == len_table[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(s):\n    # replace all non-word characters with spaces\n    s = re.sub(r'\\W+','', s)\n    # split the string into words and capitalize the first letter of each word\n    words = s.split()\n    capitalized_words = [word.capitalize() for word in words]\n    # join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b([A-Z])', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # join the words with spaces\n    result =''.join(words)\n    # return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Remove non-alphanumeric characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Capitalize the first letter of each word and join the words with spaces\n    capitalized_words =''.join(word.capitalize() for word in words)\n\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall(r'\\b\\w', str1)\n    new_words = []\n    for word in words:\n        if word.istitle():\n            new_words.append(''+ word)\n        else:\n            new_words.append(word)\n    return ''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all special characters and convert to lowercase\n    str1 = re.sub('[^a-zA-Z\\s]','',str1).lower()\n    # split the string into words\n    words = str1.split()\n    # capitalize the first letter of each word and join them with spaces\n    result =''.join(w.capitalize() for w in words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w', str1)\n    new_words = []\n\n    for word in words:\n        if word.isupper():\n            new_words.append(word)\n            new_words.append(' ')\n        else:\n            new_words.append(word)\n\n    return ''.join(new_words).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # create a regular expression pattern to match capital letters\n    pattern = r'[A-Z][a-z]*'\n    \n    # split the string into words\n    words = re.findall(pattern, string)\n    \n    # join the words with spaces in between\n    result =''.join(words)\n    \n    # return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match capital letters at the beginning of words\n    capital_letters_at_start = re.compile(r'^[A-Z][a-z]*')\n    \n    # Split the string into words and capitalize the first word of each group\n    words = re.findall(capital_letters_at_start, str1)\n    words = [' '.join(word.title().split()) for word in words]\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # remove special characters and split the string into words\n    words = re.findall(r'\\b[a-zA-Z]+\\b', str1)\n\n    # capitalize the first letter of each word and join them with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert the strings to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # Sort the numeric values\n    nums.sort()\n\n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert all strings to float\n    nums = [float(num) for num in nums_str]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Splitting the list of strings\n    nums_list = nums_str.split()\n\n    # Sorting the list numerically\n    nums_list.sort(key=lambda x: [int(y) if y.isdigit() else float('inf') for y in x.split('.')])\n\n    # Converting the list to a single string\n    nums_str =''.join(nums_list)\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numbers to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the numbers in ascending order\n    nums.sort()\n    # Convert all integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # Join all the strings into a single string\n    sorted_nums_str = ''.join(sorted_nums_str)\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Initialize a list to store the sorted strings\n    sorted_nums = []\n    # Loop through the input list\n    for num_str in nums_str:\n        # Check if the string is a number\n        try:\n            # If the string is a number, append it to the sorted list\n            num = float(num_str)\n            sorted_nums.append(num)\n        except ValueError:\n            # If the string is not a number, do nothing\n            pass\n    # Sort the list numerically in ascending order\n    sorted_nums.sort()\n    # Return the sorted list of numbers\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: [int(s) if s.isdigit() else float('inf') for s in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    \"\"\"\n\n    # convert strings to integers\n    nums = [int(num) for num in nums_str]\n\n    # sort the integers in ascending order\n    nums.sort()\n\n    # convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the list and tuple and assign the result back to the list\n    test_list = test_list + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Add the tuple to the list\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a binary heap or not.\n    '''\n    n = len(arr)\n\n    # Traverse through array from root to last element.\n    for i in range(n // 2 - 1, -1, -1):\n        # If any parent is greater than its child, then it is not a min heap.\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n\n    # If the array is completely traversed, then it is a min heap.\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr):\n        if i == 0:\n            return True\n        elif i == len(arr) - 1:\n            return arr[i] >= arr[i - 1]\n        else:\n            return arr[i] >= arr[i - 1] and arr[i] <= arr[i + 1]"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    \n    parent = (i - 1) // 2\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if arr[parent] > arr[i]:\n        return False\n    \n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[0]:\n            arr[i], arr[0] = arr[0], arr[i]\n            check_min_heap_helper(arr, 0)\n    return True if arr[0] == arr[-1] else False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i < 0:\n        return True\n    \n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[parent(i)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent(i))\n        \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    \"\"\"\n    Check if given array represents a binary min heap or not.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if array represents a binary min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        if arr[0] >= arr[1]:\n            return False\n        else:\n            return True\n    else:\n        for i in range(1, n // 2 + 1):\n            if arr[i] > arr[n // 2]:\n                return False\n        for i in range(n // 2 + 1, n):\n            if arr[i] < arr[n // 2]:\n                return False\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n\n    if i == 0:\n        if arr[0] >= arr[1]:\n            return False\n        return True\n\n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    if i < len(arr)-1 and arr[i] < arr[i+1]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr)//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = 1\n        lucas_num = 1\n        for i in range(n-2):\n            jacob_num = (jacob_num * (4*i+1)) // (i+3)\n            lucas_num = (lucas_num * (i+3)) // (4*i+1)\n        return jacob_num * lucas_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_prev = jacobsthal_num(n - 1)\n        if jacobsthal_num_prev % 2 == 0:\n            return 2 * jacobsthal_num_prev + 1\n        else:\n            return 2 * jacobsthal_num_prev + jacobsthal_num_prev + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_num = 1\n    jacob_num_lst = [1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            jacob_num = (2*jacob_num) % 10**9\n        else:\n            jacob_num = (3*jacob_num + 1) % 10**9\n        jacob_num_lst.append(jacob_num)\n    return jacob_num_lst"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n        c, d = d, c + d\n        print(a, end=' ')"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 2 * jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)) % 1000000"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1) - 1) // n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        jacob_prev = 0\n        jacob_curr = 1\n        for i in range(3, n+1, 2):\n            jacob_prev = jacob_curr\n            jacob_curr = jacob_prev + jacob_curr\n    else:\n        jacob_prev = 1\n        jacob_curr = 0\n        for i in range(3, n+1, 2):\n            jacob_prev = jacob_curr\n            jacob_curr = jacob_prev + jacob_curr\n    return jacob_curr"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    :param test_list: List of tuples.\n    :param K: Integer.\n    :return: The minimum K records from the test_list.\n    \"\"\"\n\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum K records to be the first K records in the list\n    min_k_records = sorted_list[:K]\n\n    # Remove the first K records from the list and return the remaining records\n    return sorted_list[K:]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input\n    and returns the minimum K records from the list\n    '''\n    # Sort the list in ascending order based on the length of the tuples\n    test_list = sorted(test_list, key=lambda x: len(x))\n\n    # Initialize an empty list to store the K records\n    k_records = []\n\n    # Iterate through the sorted list and add the K records to the list\n    for i in range(len(test_list)):\n        if len(k_records) < K:\n            k_records.append(test_list[i])\n        else:\n            # If the list of K records is already full, compare the lengths of the current record and the records in the list\n            if len(test_list[i]) < len(k_records[0]):\n                # If the current record is shorter than the smallest record in the list, replace the smallest record with the current record\n                k_records[0] = test_list[i]\n            elif len(test_list[i]) == len(k_records[0]):\n                # If the current record has the same length as the smallest record, append it to the list\n                k_records.append(test_list[i])\n\n    # Return the list of K records\n    return k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the minimum value and minimum index\n    min_value = None\n    min_index = None\n\n    # Iterate through the sorted list\n    for i in range(len(test_list)):\n\n        # If the current element is not equal to the minimum value and the kth element is the minimum value\n        if (test_list[i]!= min_value) and (i + 1 == K):\n            return test_list[i]\n\n        # If the current element is less than the minimum value\n        elif test_list[i] < min_value:\n\n            # Update the minimum value and index\n            min_value = test_list[i]\n            min_index = i\n\n    # Return the minimum value if k is greater than the length of the list\n    if K > len(test_list):\n        return min_value\n\n    # Return the minimum value and the index if k is less than or equal to the length of the list\n    else:\n        return (min_value, min_index)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum k value to be infinity\n    min_k_value = float('inf')\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list) - K + 1):\n        min_k_value = min(min_k_value, sorted_list[i][1])\n\n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K elements of the list.\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])  # Sorting the list based on the second element of each tuple\n    return sorted_list[:K]  # Returning the first K elements of the sorted list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # iterate over the sorted list, starting from the last element and moving backwards\n    min_val = float('inf')\n    for i in range(len(test_list)-K, -1, -1):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_rec = test_list[i]\n    return min_rec"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_dict = {}\n    for i in test_list:\n        if i in min_dict:\n            min_dict[i] += 1\n        else:\n            min_dict[i] = 1\n\n    min_list = sorted(min_dict.items(), key=lambda x: x[1])\n\n    min_list = min_list[:K]\n\n    result = []\n    for i in min_list:\n        result.append(i[0])\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[0])  # sort the list based on first element of tuple\n    min_k_records = []\n    for i in range(len(test_list)):\n        if i < K:\n            min_k_records.append(test_list[i])\n        else:\n            break\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    min_heap = []\n\n    for i in range(n):\n        min_heapq.heappush(min_heap, test_list[i])\n\n        if len(min_heap) > K:\n            min_heapq.heappop(min_heap)\n\n    return min_heap\n\ntest_list = [(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')]\nK = 3\nprint(min_k(test_list, K))"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K or (min(min_list, key=lambda x: x[1])[1] > test_list[i][1]):\n            min_list.append((test_list[i], i))\n            if len(min_list) == K:\n                min_list.sort(key=lambda x: x[1])\n    result = [min(min_list, key=lambda x: x[0])[0] for i in range(K)]\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function takes three lists and returns a list containing the common elements.\n    \"\"\"\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through each element in l1 and l2\n    for i in range(len(l1)):\n        # check if the element is in l1, l2, and l3\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # if the element is common, append it to the list\n            common_elements.append(l1[i])\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    This function takes three lists as input and returns a list containing all the common elements for these lists.\n    '''\n    common_elements = []\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through the first list and check if each element appears in all three lists\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    # loop through the second list and check if each element appears in all three lists\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    # loop through the third list and check if each element appears in all three lists\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    # loop through the lists and check for common elements\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n            \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = None\n    second_smallest = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest is not None and num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the numbers in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b)*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba\\w*\\b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'ab*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i][::-1] in test_list[j:]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Count the frequency of each character in the string list\n    freq = {}\n    for s in test_list:\n        for c in s:\n            if c in freq:\n                freq[c] += 1\n            else:\n                freq[c] = 1\n\n    # Sort the characters based on their frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # Initialize the count of reverse pairs\n    count = 0\n\n    # Iterate over the sorted characters and count the pairs of reverse strings\n    for c, f in sorted_freq:\n        if f % 2 == 0:  # Even frequency means it appears only once in the string list\n            continue\n        for d in sorted_freq:\n            if f % 2 == 0:  # Ignore even frequency characters\n                break\n            if c!= d[0]:  # Ignore if the characters are not the same\n                count += (f // 2) * (f // 2)  # Count the pairs of reverse strings\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if string[i:j+1] == string[j:i+1][::-1]:\n                    count += 1\n                    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Create an empty dictionary to store the count of reverse pairs\n    reverse_dict = {}\n    \n    # Loop through the string list\n    for string in test_list:\n        \n        # Convert the string to a list of characters\n        char_list = list(string)\n        \n        # Sort the characters in the list in reverse order\n        char_list.sort(reverse=True)\n        \n        # Convert the sorted list back to a string and compare it to the original string\n        reversed_string = ''.join(char_list)\n        if string!= reversed_string:\n            \n            # If the sorted list and the original string are different, then they must be reverse pairs\n            if reversed_string in reverse_dict:\n                reverse_dict[reversed_string] += 1\n            else:\n                reverse_dict[reversed_string] = 1\n                \n    # Return the count of reverse pairs\n    return reverse_dict"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_dict = {}\n    # iterate over the given string list\n    for string in test_list:\n        # iterate over the characters of the string\n        for i in range(len(string)):\n            # if the current character is the first character of a reverse string, increment the count for that string in the dictionary\n            if i > 0 and string[i] == string[i-1]:\n                reverse_dict[string] = reverse_dict.get(string, 0) + 1\n            # if the current character is the last character of a reverse string, decrement the count for that string in the dictionary\n            elif i < len(string)-1 and string[i] == string[i+1]:\n                reverse_dict[string] = reverse_dict.get(string, 0) - 1\n    # return the count of reverse pairs\n    return len([pair for pair, count in reverse_dict.items() if count > 0])"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert the list to a tuple and add it to the dictionary with its length as the key\n        counts[len(sublist)] = counts.get(len(sublist), 0) + 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to a set of tuples\n    unique_tuples = set(tuple(l) for l in list1)\n    # count the occurencies of each tuple in the original list\n    sublist_count = {}\n    for t in unique_tuples:\n        sublist_count[t] = list1.count(t)\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert all lists in list1 to tuples\n    list1 = [tuple(elem) for elem in list1]\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through all sublists of list1\n    for sublist in sublists(list1):\n        # convert sublist to tuple\n        sublist = tuple(sublist)\n        # increment the count of sublist in counts dictionary\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    \n    # loop through the original list and count the unique sublists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # add the tuple to the dictionary\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        else:\n            count_dict[sublist_tuple] += 1\n            \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple not in sublists:\n            sublists[sublist_tuple] = list1.count(sublist)\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_counts:\n            sublist_counts[sublist_tuple] = 1\n        else:\n            sublist_counts[sublist_tuple] += 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sorted(sublist))\n        if tuple_sublist in sublists:\n            sublists[tuple_sublist] += 1\n        else:\n            sublists[tuple_sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert each list to a tuple, count the occurrences and store them in a dictionary\n    counts = {}\n    for sublist in list1:\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    sublist_count = {}\n    # Loop over all lists in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # If it is, increment its value by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a value of 1\n            sublist_count[sublist_tuple] = 1\n    # Return the dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    # Iterate through each item in the list\n    for item in list1:\n        # Convert the item to a tuple and check if it exists in the dictionary\n        if tuple(item) in count_dict:\n            # If it does, increment the count by 1\n            count_dict[tuple(item)] += 1\n        # If the item doesn't exist in the dictionary, add it with a count of 1\n        else:\n            count_dict[tuple(item)] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all non-numeric characters from the input string\n    num = ''.join(e for e in num if e.isdigit())\n    \n    # Check if the length of the resulting string is 2\n    if len(num) == 2:\n        # Check if the resulting string is a decimal number with a precision of 2\n        return all(int(num[i]) <= 9 for i in range(1))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    if len(num.split('.')[1])!= 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    # define the decimal pattern\n    pattern = r'^[-+]?[0-9]+(\\.[0-9]+)?$'\n    # use regex to match the decimal pattern\n    if bool(re.match(pattern, num)):\n        # split the decimal part of the number\n        parts = num.split('.')\n        # check if the number of decimal places is less than or equal to 2\n        if len(parts) <= 2:\n            # convert the number to float\n            num_float = float(num)\n            # check if the number is a decimal number with a precision of 2\n            if num_float == int(num_float):\n                if num_float == int(num_float) and num_float % 1 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        num = float(num)\n        if num.is_integer() and num.is_finite() and num.as_integer_ratio()[1] == 1:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        for char in decimal_part:\n            if char not in '0123456789':\n                return False\n    else:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer() or round(num, 2) == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            if len(num.split('.')[1]) == 2:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        decimal_point = num.index('.')\n        int_part = num[:decimal_point]\n        frac_part = num[decimal_point+1:]\n        if int_part.isdigit() and frac_part.isdigit() and len(frac_part) <= 2:\n            if '.' in num:\n                frac_part = '.' + frac_part\n            else:\n                frac_part = ''\n            return True\n    except ValueError:\n        pass\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        num = float(num)\n        if '.' in str(num) and len(str(num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as an argument and returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n    unique = set(arr)\n    if len(unique) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    If the list contains only one distinct element, the function returns True, else False.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, else False.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    if len(count) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, else False.\n    '''\n    unique = False\n    count = 0\n    for i in arr:\n        if i not in arr[count:]:\n            count += 1\n        else:\n            unique = True\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return True\n    elif len(arr) == 2 and arr[0]!= arr[1]:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # checking if the list has only one element or not\n    if len(arr) == 1:\n        return True\n    # creating a set to store unique elements of the list\n    unique_set = set(arr)\n    # checking if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number. Please enter a number from 1 to 12.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    if monthnum3 in range(1,13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                if year % 4 == 0 and year % 100 == 0 and year % 400 == 0:\n                    if day_of_week == 1 or day_of_week == 5:\n                        return True\n                else:\n                    return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 % 2 == 0:\n            if months[monthnum3-1] == 31:\n                return True\n            else:\n                return False\n        else:\n            if months[monthnum3-1] == 30:\n                return True\n            else:\n                return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and second element\n    min_diff = arr[1] - arr[0]\n\n    # Iterate from the second element to the last element of the array\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    if n < 2:\n        return \"Array should have at least two elements\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n - 1):\n        # Calculate the difference between current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the current minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n):\n        diff = arr[n-1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference to be the difference between the last two elements of the array\n    min_diff = abs(arr[-1] - arr[-2])\n    # Traverse through the array from the second last element to the second element\n    for i in range(n-2, 0, -1):\n        # Calculate the difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its size n as input.\n    It returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two variables to store minimum difference and its indices\n    min_diff = float('inf')\n    min_idx1 = -1\n    min_idx2 = -1\n    # Loop through the array\n    for i in range(n):\n        # If the difference between the current element and its neighbor is less than the current minimum difference\n        if i < n-1 and abs(arr[i] - arr[i+1]) < min_diff:\n            # Update the minimum difference and its indices\n            min_diff = abs(arr[i] - arr[i+1])\n            min_idx1 = i\n            min_idx2 = i+1\n        # If the difference between the current element and its neighbor is equal to the current minimum difference\n        elif i < n-1 and abs(arr[i] - arr[i+1]) == min_diff:\n            # Update the minimum difference and its indices\n            min_idx1 = min(min_idx1, i)\n            min_idx2 = max(min_idx2, i+1)\n    # Return the minimum difference and its indices\n    return (min_diff, min_idx1, min_idx2)"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store minimum and maximum elements\n    min_diff = float('inf')\n    max_element = float('-inf')\n\n    # Traverse the sorted array\n    for i in range(n):\n        # Update minimum difference if the current element is greater than the maximum element\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n        # Update maximum element if the current element is greater than the previous maximum element\n        max_element = max(max_element, arr[i])\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Initialize two pointers, one starting from the first element and the other starting from the second element\n    i = 0\n    j = 1\n\n    # Iterate over the array\n    while j < n:\n        # Calculate the difference between the current element and the next element\n        diff = arr[j] - arr[i]\n\n        # If the difference is less than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # Move the pointer to the next element in the array\n        i += 1\n        j += 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and returns the count of the number of digits in the string.\n    '''\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function will find the nth polite number using the Sieve of Eratosthenes algorithm.\n    '''\n    if n == 1:\n        return 1\n\n    # create a list of integers from 2 to n (inclusive)\n    sieve = [True] * (n + 1)\n    sieve[0] = False\n    sieve[1] = False\n\n    # use the Sieve of Eratosthenes algorithm to find the nth polite number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n\n    # iterate through the list of integers and return the nth polite number\n    count = 0\n    for i in range(n + 1):\n        if sieve[i]:\n            count += 1\n            if count == n:\n                return i\n\n    # if the loop completes without finding the nth polite number, return -1 to indicate an error\n    return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # first polite number is 2\n    polite = 2\n    # loop through the range of n\n    for i in range(2, n+1):\n        # check if the current number is even or odd\n        if i % 2 == 0:\n            # if even, add 2\n            polite += 2\n        else:\n            # if odd, multiply by 3 and add 1\n            polite += 3*i\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    num = 1\n    polite_num = 1\n\n    # Check if n is even\n    if n % 2 == 0:\n        polite_num = num + 1\n\n    # Check if n is odd\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                polite_num = num + 1\n                break\n            else:\n                if i * i > n:\n                    polite_num = num + 1\n                    break\n\n    # Return the nth polite number\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return None\n\n    # define the base case\n    if n == 1: \n        return 0 \n\n    # define the recursive case\n    return math.ceil((1 + math.sqrt(5)) / 2) + n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        i = 2\n        while True:\n            if is_prime(i):\n                i += 1\n            else:\n                return i\n\n    polite_number = nth_prime(n)\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_polite_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return True\n        return False\n    \n    def nth_prime_number(n):\n        count = 0\n        i = 1\n        while count < n:\n            if is_prime(i):\n                count += 1\n            i += 1\n        return i\n    \n    return nth_prime_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    polite = 1\n    i = 1\n\n    while i <= n:\n        if is_prime(polite):\n            polite += 1\n        else:\n            polite += 2\n\n        i += 1\n\n    return polite\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        num = 1\n        i = 0\n        while i < n:\n            num += 1\n            if num % 11 == 1:\n                i += 1\n        return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    The polite numbers are the numbers that are divisible by 5 and the sum of their digits.\n    \"\"\"\n\n    def sum_of_digits(num):\n        \"\"\"\n        This function takes an integer num as input and returns the sum of its digits.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    polite_num = n\n\n    while True:\n        if polite_num % 5 == 0:\n            digits_sum = sum_of_digits(polite_num)\n            if digits_sum == polite_num:\n                return polite_num\n            else:\n                polite_num += 1\n        else:\n            polite_num += 1\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 0\n    count = 1\n    while count <= n:\n        if math.log2(count) % 1 == 0:\n            polite_count += 1\n        count += 1\n    return polite_count"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the input list.\n    '''\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            pairs.append((l1[i], l1[j]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a sum as input,\n    and returns the number of pairs whose sum is equal to the given sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes in two parameters:\n    - arr: a list of numbers\n    - sum: the target sum\n    \n    This function returns the count of such pairs in the list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all the elements that are\n    in li1 but not in li2. The order of the elements in the new list is the same as the order of the\n    corresponding elements in li1.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Check if the input lists are of equal length\n    if len(li1)!= len(li2):\n        print(\"The input lists must have equal length\")\n        return\n    \n    # Initialize an empty list to store the difference\n    diff_list = []\n    \n    # Loop through each element in the first list\n    for i in li1:\n        # Check if the element is present in the second list\n        if i not in li2:\n            # If not, add it to the difference list\n            diff_list.append(i)\n    \n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    difference = []\n    for i in li1:\n        if i not in li2:\n            difference.append(i)\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes in two lists and returns the difference between the two lists.\n    \"\"\"\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as arguments and returns the difference between them.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function calculates the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    count = 0\n    \n    while count < n:\n        num = 1\n        for i in range(1, 5):\n            num *= 3\n        sum_of_powers += num\n        count += 1\n    \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2) :\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    \n    for i in range(1, n+1, 2):\n        sum_of_powers += i**4\n    \n    return sum_of_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum variable\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # calculate fourth power of odd number and add to sum\n        sum += i ** 4\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[']:\n                if top_char!= char:\n                    return False\n            elif char in ['{', '}']:\n                if top_char!= '(' and top_char!= '[':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                if c == ')':\n                    return False\n            elif top == '{':\n                if c == '}':\n                    return False\n            elif top == '[':\n                if c == ']':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if last_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'{', '[', '('}\n    close_brackets = {'}', ']', ')'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            elif stack.pop()!= char:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return \"Not balanced\"\n            last_open = stack.pop()\n            if i - last_open!= 1:\n                return \"Not balanced\"\n    if stack:\n        return \"Not balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack to keep track of opening and closing parentheses\n    stack = deque()\n\n    # iterate through the expression string\n    for char in exp:\n\n        # if the character is an opening parenthesis, add it to the stack\n        if char == '(':\n            stack.append(char)\n\n        # if the character is a closing parenthesis, check if it matches the opening parenthesis on the top of the stack\n        elif char == ')':\n\n            # if the stack is empty, return False\n            if not stack:\n                return False\n\n            # otherwise, pop the opening parenthesis from the stack and check if it matches the closing parenthesis\n            elif stack.pop()!= '(':\n                return False\n\n    # if the stack is not empty, return False, since there are more closing parentheses than opening parentheses\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words using whitespace as delimiter\n    words = test_str.split()\n    \n    # Iterate over each word and check if its length is equal to K\n    for word in words:\n        if len(word) == K:\n            # If it is, remove it from the list of words\n            words.remove(word)\n    \n    # Join the list of words back into a string using whitespace as delimiter\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Iterate over each word and check if its length is greater than K\n    for word in words:\n        if len(word) > K:\n            # Remove the word from the list\n            words.remove(word)\n\n    # Join the remaining words into a single string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the non-K-length words\n    non_k_length_words = []\n    \n    # Loop through the words\n    for word in words:\n        # If the length of the word is not equal to K, add it to the list\n        if len(word)!= K:\n            non_k_length_words.append(word)\n    \n    # Join the non-K-length words into a string and return it\n    return''.join(non_k_length_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words_to_remove = []\n    for word in words:\n        if len(word) == K:\n            words_to_remove.append(word)\n    for word in words_to_remove:\n        words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    for match in matches:\n        text = text.replace(match, '')\n    \n    return (len(matches), text.count(pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex search to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # If matches is not empty, return a list of tuples containing the match and its position in the text\n    if matches:\n        return [(match, text.index(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use the re.findall() method to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # if there are no matches, return None\n    if not matches:\n        return None\n    \n    # create an empty dictionary to store the matches\n    matches_dict = {}\n    \n    # loop through each match and add it to the dictionary\n    for i, match in enumerate(matches):\n        matches_dict[match] = (i, matches.index(match))\n    \n    # return the dictionary of matches\n    return matches_dict"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # use re.findall to find all non-overlapping matches of pattern in text\n    matches = re.findall(pattern, text)\n    if matches:\n        # find the first match, and get its start and end positions\n        first_match = matches[0]\n        start = text.find(first_match)\n        end = start + len(first_match)\n        # return a tuple with the start and end positions\n        return (start, end)\n    else:\n        # if there is no match, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes two arguments: a text string and a pattern string. It searches for the pattern in the text and returns a tuple containing the position and occurrence of the pattern if found. If the pattern is not found, it returns None.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.group(), text)\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # checking if odd index\n            if len(set([nums[i]])) % 2 == 1: # checking if the number of odd numbers in the odd index is odd\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    - nums (list): A list of integers.\n\n    Returns:\n    - True if every odd index contains odd numbers, else False.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2):\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:  # Check if i is odd\n            if nums[i] % 2 == 0:  # Check if the number at odd index is even\n                return False  # If even number is found, return False\n    return True  # If all even numbers are checked, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for num in nums:\n        if num % 2!= 0:\n            if odd_index % 2 == 1:\n                return False\n            else:\n                odd_index += 1\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if i is even\n            if nums[i] % 2 == 0:  # check if the number at the even index is even\n                return False  # if the number at the odd index is even, the function returns False\n    return True  # if all numbers are odd, the function returns True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # Loop through the list of numbers and check each odd position\n    for i in range(1, len(nums), 2):\n        # Check if the current position contains odd numbers\n        if nums[i] % 2!= 0:\n            # If it does, return False\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i + 1] in vowels and test_str[i + 2] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Use a set to remove duplicates from the list\n    unique_list = set(arr)\n    # Initialize a variable to store the sum\n    sum_of_unique = 0\n    # Loop through the unique list and add its elements to the sum_of_unique variable\n    for num in unique_list:\n        sum_of_unique += num\n    # Return the sum of the unique list\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of all the non-repeated elements in the list.\n    '''\n    # Creating a set to store the non-repeated elements of the list\n    unique_elements = set(arr)\n\n    # Using the set() function to find the sum of the unique elements\n    sum_of_unique_elements = sum(unique_elements)\n\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements of the array\n    unique_set = set(arr)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Iterate through the unique set of elements of the array and add their values to the non_repeated_sum\n    for element in unique_set:\n        non_repeated_sum += element\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n    \n    # calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            non_repeated_sum += arr[i]\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # calculate the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num in arr:\n        if freq[num] == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # loop through the dictionary and add up the elements with a frequency of 1\n    for num in freq:\n        if freq[num] == 1:\n            sum_non_repeated += int(num)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # create a set to store unique elements\n    unique_elements = set(arr)\n\n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # loop through the unique elements and add them to the sum\n    for element in unique_elements:\n        non_repeated_sum += element\n\n    # return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the list into a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back into a list\n    unique_list = list(unique_set)\n    # Sum the non-repeated elements\n    sum_non_repeated = sum(unique_list)\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Split the list into sublists of consecutive duplicates\n    grouped_list = groupby(list(enumerate(list1)), lambda x: x[0] == x[1] - 1)\n    return [list(group) for _, group in grouped_list]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements based on their frequency using the groupby() function\n    grouped_list = groupby(list1)\n\n    # Convert the grouped list to a list of sublists by applying the list() function to the grouped_list\n    packed_list = list(grouped_list)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # use itertools.groupby to group the list based on the same value\n    grouped_list = groupby(list1)\n\n    # iterate over the grouped_list and keep track of the last value seen\n    prev_value = next(grouped_list)[0]\n    prev_sublist = []\n\n    # create sublists from consecutive duplicates of the same value\n    for value, sublist in grouped_list:\n        if value == prev_value:\n            prev_sublist.append(value)\n        else:\n            yield prev_sublist\n            prev_value = value\n            prev_sublist = [value]\n\n    # yield the last sublist if it has any values left\n    if prev_sublist:\n        yield prev_sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def is_consecutive(seq):\n        return all(next(iter(seq)) == item for item in seq)\n\n    grouped_items = groupby(sorted(list1))\n    sublists = []\n\n    for key, group in grouped_items:\n        if not is_consecutive(group):\n            sublists.append(list(group))\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for item in list1:\n        if item not in result:\n            try:\n                group = next(groupby(list1, key=lambda x: x == item))\n                result.append(list(group))\n            except StopIteration:\n                pass\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pack_consecutive_duplicates(list1):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n\n    :param list1: a list of elements\n    :return: a list of sublists, where consecutive duplicates of the same element are concatenated into one sublist\n    \"\"\"\n\n    # Group the list by the element\n    grouped = groupby(list1)\n\n    # Initialize an empty list to store the sublists\n    sublists = []\n\n    # Iterate over the groups and check if there are consecutive duplicates\n    for key, group in grouped:\n\n        # If there are no consecutive duplicates, add the sublist to the list\n        if len(list(group)) == 1:\n            sublists.append(list(group))\n        # If there are consecutive duplicates, concatenate them into one sublist\n        else:\n            sublist = list(group)\n            prev = sublist.pop(0)\n            for elem in sublist:\n                if elem == prev:\n                    sublist.remove(elem)\n                else:\n                    sublists.append(sublist)\n                    sublist = [elem]\n                    prev = elem\n\n    # Add the last sublist to the list\n    if len(sublist) > 0:\n        sublists.append(sublist)\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Use groupby to group the list elements that are consecutive duplicates\n    grouped_list = list(groupby(list1))\n\n    # Extract the consecutive duplicates sublists and return them\n    consecutive_duplicates = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            consecutive_duplicates.append(list(group))\n\n    return consecutive_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k == lst.index(g[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_counts = {}\n    for sublist in lst:\n        if sublist not in sublist_counts:\n            sublist_counts[sublist] = 1\n        else:\n            sublist_counts[sublist] += 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the unique sublists\n    sublists = {}\n    \n    # Iterate over each element in the list\n    for item in list1:\n        \n        # Convert the item to a tuple and check if it already exists in the dictionary\n        if tuple(item) in sublists:\n            sublists[tuple(item)] += 1\n        else:\n            sublists[tuple(item)] = 1\n            \n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1_tuples = []\n    for lst in list1:\n        list1_tuples.append(tuple(lst))\n    list1_dict = {}\n    for tup in list1_tuples:\n        if tup not in list1_dict:\n            list1_dict[tup] = 1\n        else:\n            list1_dict[tup] += 1\n    return list1_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of unique sublists within a list.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    dict: A dictionary where each sublist is turned into a tuple and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Count the number of unique sublists and store them in a dictionary.\n    count_dict = {}\n    for sublist in lst:\n        # Turn the sublist into a tuple and count its occurrences.\n        sublist_tuple = tuple(sublist)\n        count_dict[sublist_tuple] = count_dict.get(sublist_tuple, 0) + 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if sublist not in sublist_dict:\n            sublist_dict[sublist] = 1\n        else:\n            sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through the list and count the occurrences of each tuple\n    for i in list1:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Convert the dictionary to a list of tuples and return it\n    return list(count_dict.items())"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the unique lists and their occurrences\n    unique_dict = {}\n    # loop through the list\n    for sublist in list1:\n        # turn the list to a tuple and add it to the dictionary\n        if sublist not in unique_dict:\n            unique_dict[sublist] = 1\n        else:\n            unique_dict[sublist] += 1\n    # return the dictionary\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the number of occurrences of each tuple in the list\n    count_dict = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # If the element is a list, turn it into a tuple and add it to the dictionary\n        if isinstance(element, list):\n            count_dict[tuple(element)] = count_dict.get(tuple(element), 0) + 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        for sublist in item:\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    count_dict = {}\n    # Iterate through each element in the list\n    for element in list1:\n        # If the element is a list, turn it to a tuple and add it to the count dictionary\n        if isinstance(element, list):\n            element_tuple = tuple(element)\n            if element_tuple in count_dict:\n                count_dict[element_tuple] += 1\n            else:\n                count_dict[element_tuple] = 1\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Helper function to check if a combination is present in the list\n    def is_present(comb, lst):\n        return all(comb in tup for tup in lst)\n\n    # Find all possible combinations of sums\n    comb_sum = list(combinations(test_list, r=2))\n\n    # Check if each combination is present in the original list\n    valid_combinations = []\n    for comb in comb_sum:\n        if is_present(comb, test_list):\n            valid_combinations.append(comb)\n\n    return valid_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of tuples containing the combinations of sums of the given tuples.\n    '''\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                print(j)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(sum(test_list[k]) == test_list[i][k] for k in range(len(test_list[i]))) and all(sum(test_list[k]) == test_list[j][k] for k in range(len(test_list[j]))) and test_list[i]!= test_list[j]:\n                print(test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == total_sum:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    for i in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, i):\n            if sum(combination) == 0:\n                yield tuple(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    \"\"\"\n    def comb(lst):\n        return list(combinations(lst, len(lst)))\n    \n    def is_subset(lst1, lst2):\n        return all(x in lst2 for x in lst1)\n    \n    def has_subset(lst, subsets):\n        return any(is_subset(lst, subset) for subset in subsets)\n    \n    def check_combinations(lst):\n        subsets = comb(lst)\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i][0] + lst[j][0] == lst[i][1]:\n                    return True\n                elif lst[i][0] + lst[j][0] == lst[j][1]:\n                    return True\n        return False\n    \n    def find_combinations_helper(lst, target_sum, combinations):\n        \"\"\"\n        Recursive function to find all combinations of sums in the given list.\n        \"\"\"\n        if target_sum in lst:\n            combinations.append(target_sum)\n            lst.remove(target_sum)\n        if not lst and not combinations:\n            return\n        for num in lst:\n            find_combinations_helper(lst, target_sum - num, combinations)\n            lst.append(num)\n            \n    combinations = []\n    find_combinations_helper(test_list, sum(test_list), combinations)\n    return combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                for l in range(k + 1, len(test_list)):\n                    combinations_list.append(test_list[i] + test_list[j] + test_list[k] + test_list[l])\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize variables\n    sum_list = []\n    combinations_list = []\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Find all possible combinations of sums with the current tuple\n        for j in range(i+1, len(test_list)+1):\n            # Generate all combinations of length j and sum k\n            for k in range(len(test_list)):\n                # Check if the sum is a multiple of the current tuple\n                if sum(test_list[i:j]) % k == 0:\n                    # If the sum is a multiple of the current tuple, add it to the sum_list\n                    sum_list.append(sum(test_list[i:j]))\n                    # If the sum is a multiple of the current tuple, add the tuple to the combinations_list\n                    combinations_list.append(test_list[i:j])\n                    # Break out of the second for loop to avoid duplicate combinations\n                    break\n\n    # Return the sum_list and combinations_list\n    return sum_list, combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Create a list of tuples containing all the unique tuples from the test_list\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    \n    # Create a dictionary to store the combinations of sums with tuples\n    combination_dict = {}\n    \n    # Loop through all the unique tuples\n    for t in unique_tuples:\n        # Find all the possible combinations of sums with this tuple\n        comb = combinations(unique_tuples, len(t))\n        # Loop through all the combinations and add the sum of the combination to the dictionary\n        for c in comb:\n            combination_sum = sum(t[i] for i in c)\n            if combination_sum in combination_dict:\n                combination_dict[combination_sum].append(t)\n            else:\n                combination_dict[combination_sum] = [t]\n    \n    # Return the dictionary containing the combinations of sums with tuples\n    return combination_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # create a set of tuples from the given tuple list\n    tuples_set = set(tuple(t) for t in test_list)\n    \n    # find all possible combinations of sums\n    all_combinations = combinations(tuples_set, r=2)\n    \n    # filter out combinations with duplicate tuples\n    unique_combinations = set()\n    for combination in all_combinations:\n        if combination not in unique_combinations:\n            unique_combinations.add(combination)\n    \n    # return the list of unique combinations\n    return list(unique_combinations)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of divisors is even.\n    '''\n    divisors = set()\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            divisors.add(i)\n            n //= i\n            i += 1\n    divisors.add(n)\n    count_of_divisors = len(divisors)\n    if count_of_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def count_divisors_helper(num, count):\n        if num == 1:\n            return count\n        elif num % 2 == 0:\n            count += 1\n            return count_divisors_helper(num // 2, count)\n        else:\n            count += 1\n            return count_divisors_helper((num * 3) + 1, count)\n\n    count_divisors_list = []\n    for i in range(1, n+1):\n        count_divisors_list.append(count_divisors_helper(i, 0))\n    count_divisors_sum = sum(count_divisors_list)\n\n    if count_divisors_sum % 2 == 0:\n        print(\"Even count of divisors.\")\n    else:\n        print(\"Odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number. \n    If the count of divisors is even, it returns True, else it returns False.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return True\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given integer n.\n    \"\"\"\n    # Calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    # Return the count of even divisors\n    count = len(divisors)\n    for divisor in divisors:\n        if divisor % 2 == 1:\n            count += 1\n    \n    # Check if the count is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n\n    divisors = []\n\n    # find all prime numbers up to n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i == n//i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n\n    # add the remaining divisor to the list\n    divisors.append(n)\n\n    # count the number of even divisors\n    even_divisors = 0\n    for divisor in divisors:\n        if divisor % 2 == 0:\n            even_divisors += 1\n\n    # check if the count of even divisors is even\n    if even_divisors % 2 == 0:\n        print(\"The count of even divisors is even.\")\n    else:\n        print(\"The count of even divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # Using a loop to find all the divisors of n\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            divisors.append(n)\n            i += 1\n    # If there are no factors of 2, return True\n    if not divisors:\n        return True\n    # Check if there are any factors of 2\n    count = 0\n    for divisor in divisors:\n        if divisor == 2:\n            count += 1\n    # If there are any factors of 2, check whether they are odd or even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_divisors_helper(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0 and is_prime(i):\n                divisors.append(i)\n        return divisors\n\n    divisors = count_divisors_helper(n)\n    even_divisors = [divisor for divisor in divisors if divisor % 2 == 0]\n    if len(even_divisors) == len(divisors):\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = []\n    i = 1\n\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n\n    count = len(divisors)\n    result = True\n\n    if count % 2 == 0:\n        result = False\n\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Returns the count of divisors of a given number n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count > 0:\n        return False\n    return True\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Args:\n    arr: List of integers\n\n    Returns:\n    sum: The sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += arr[j-2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) % 2 == 0:\n        return 0\n    \n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j-i+1 % 2 == 0:\n                sum += arr[i:j]\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if k - j == j - i:\n                    subarray = arr[i:j+1]\n                    sum += sum_of_subarray(subarray)\n\n    return sum\n\ndef sum_of_subarray(arr):\n    return sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Find all odd length subarrays\n    subarrays = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray = arr[i:j+1]\n            if len(subarray) % 2 == 1:\n                subarrays.append(subarray)\n\n    # Calculate the sum of all odd length subarrays\n    sum = 0\n    for subarray in subarrays:\n        sum += sum(subarray)\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 1:\n            result += arr[i]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n    for i in range(1, n, 2):\n        sum_odd += arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum variable to 0\n    sum_odd_length = 0\n    \n    # Loop through all the subarrays in the array\n    for i in range(1, len(arr)):\n        # Check if the current subarray is odd length\n        if i % 2!= 0:\n            # Calculate the sum of the odd length subarray\n            subarray_sum = sum(arr[i-1:i+1])\n            # Add the sum to the sum_odd_length variable\n            sum_odd_length += subarray_sum\n    \n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum and count of odd length subarrays\n    sum_odd = 0\n    count_odd = 0\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        # If the current element is odd, increment the count and add to sum\n        if arr[i] % 2 == 1:\n            count_odd += 1\n            sum_odd += arr[i]\n        # If the count of odd length subarrays reaches odd, then return the sum\n        elif count_odd % 2 == 1:\n            return sum_odd\n    \n    # If the array is fully traversed and no odd length subarrays are found, return 0\n    return 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n\n    for i in range(n):\n        for j in range(i+1, min(i+5, n)+1):\n            sum_odd_length_subarrays += arr[j] - arr[i]\n\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n    \n    # Traverse through all subarrays of length 3\n    for i in range(n-2):\n        subarray = arr[i:i+3]\n        if all(x % 2 == 1 for x in subarray):\n            sum_odd += sum(subarray)\n    \n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert r, g, b from 0-255 to 0.0-1.0\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find max and min values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_value - min_value\n    \n    # Calculate value\n    value = max_value\n    \n    # Calculate saturation\n    if max_value == 0:\n        h = 0\n        s = 0\n    else:\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_value\n    \n    # Calculate hue\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    # Calculate hue\n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    # Return hsv values\n    return (h, s, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert red, green and blue values to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # If the difference is 0, then the color is gray\n    if diff == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate the hue by finding the position of the maximum value in the range 0 to 6\n        if r == max_val:\n            h = 60 * ((g - b) / diff)\n        elif g == max_val:\n            h = 60 * ((b - r) / diff + 2)\n        else:\n            h = 60 * ((r - g) / diff + 4)\n\n        # If the hue exceeds 360, make it less than 360\n        if h >= 360:\n            h = h % 360\n\n        # Calculate the saturation by finding the difference between the maximum and minimum values divided by the range of the color\n        if max_val == 0:\n            s = 0\n        else:\n            s = diff / max_val\n\n        # Calculate the value by finding the maximum value\n        v = max_val\n\n    # Return the hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: Red color value between 0 and 255.\n    :param g: Green color value between 0 and 255.\n    :param b: Blue color value between 0 and 255.\n    :return: Hue, Saturation, and Value in the range of 0 to 360, 0 to 1, and 0 to 1.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h * 60\n\n    return h, s, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h / 6\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r,g,b to float values\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    # Find the maximum and minimum values\n    max_val = max(r,g,b)\n    min_val = min(r,g,b)\n    # Find the delta between max and min values\n    delta = max_val - min_val\n    # Calculate the hue\n    if max_val == r:\n        hue = (g-b)/delta\n    elif max_val == g:\n        hue = 2 + (b-r)/delta\n    else:\n        hue = 4 + (r-g)/delta\n    hue = round(hue*60)\n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta/max_val\n    # Calculate the value\n    value = max_val\n    # Convert hue, saturation and value to percentage values\n    hue = hue/360*100\n    saturation = saturation*100\n    value = value*100\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function takes in RGB values and returns their HSV values.\n    '''\n    # Convert the RGB values to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the range of the color\n    delta = max_value - min_value\n\n    # Calculate the HSV values\n    if max_value == min_value:\n        h = s = 0\n    else:\n        if delta == 0:\n            h = 0\n        else:\n            if max_value == r:\n                h = (g - b) / delta\n            elif max_value == g:\n                h = 2 + (b - r) / delta\n            else:\n                h = 4 + (r - g) / delta\n\n            if h < 0:\n                h += 6\n\n            h = h / 6\n\n        if max_value == 0:\n            s = 0\n        else:\n            if delta == 0:\n                s = 0\n            else:\n                s = delta / max_value\n\n    # Return the HSV values\n    return [int(h*255), int(s*255), int(v*255)]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Find the maximum and minimum values in the RGB color space\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the delta value between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue value based on the RGB color space\n    if max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Scale the hue value to the range of 0 to 360 degrees\n    hue = hue * 60 if delta!= 0 else 0\n\n    # Calculate the saturation and value values based on the RGB color space\n    saturation = delta / (1 if max_value == 0 else max_value)\n    value = max_value / 255\n\n    # Return the HSV color as a tuple\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert r, g, b to floating-point values\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the difference between maximum and minimum values\n    delta = max_val - min_val\n\n    # Handle the case where max_val is 0\n    if max_val == 0:\n        h = 0\n    else:\n        # Find the hue value\n        if delta == 0:\n            h = 0\n        elif r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # Normalize the hue value to be between 0 and 1\n        h /= 6\n\n    # Handle the case where max_val is 0\n    if max_val == 0:\n        s = 0\n    else:\n        # Find the saturation value\n        s = delta / max_val\n\n    # Handle the case where max_val is 0\n    if max_val == 0:\n        v = 0\n    else:\n        # Find the value value\n        v = max_val\n\n    # Convert the values to percentages\n    h = round(h * 100)\n    s = round(s * 100)\n    v = round(v * 100)\n\n    # Return the hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    # Convert the RGB color values to integers\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    # Convert the RGB values to HSV values\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    \n    if v == r:\n        h = (g - b) / (v - min(r, g))\n    elif v == g:\n        h = 2 + (b - r) / (v - min(r, g))\n    elif v == b:\n        h = 4 + (r - g) / (v - min(r, g))\n    \n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    # Calculate the saturation and value\n    if v == 0:\n        s = 0\n    else:\n        s = (v - min(r, g, b)) / v\n    \n    # Normalize the hue to a range of 0 to 360 degrees\n    h = h if h >= 0 else h + 360\n    \n    # Convert the HSV values to a tuple\n    hsv_color = (h, s, v)\n    \n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Parameters:\n        r (int): Red value in the range [0, 255].\n        g (int): Green value in the range [0, 255].\n        b (int): Blue value in the range [0, 255].\n\n    Returns:\n        h (float): Hue value in the range [0, 360].\n        s (float): Saturation value in the range [0, 1].\n        v (float): Value value in the range [0, 1].\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * cmin - 1))\n    if s == 0:\n        v = cmax\n    else:\n        v = cmax / s\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product = num * product\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return -1\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n        else:\n            odd_product *= num\n            odd_count += 1\n            \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and first odd number of the list.\n    '''\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return \"No even or odd number found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        product *= min(even_count, odd_count)\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n            product *= i\n        else:\n            odd_count += 1\n            product *= i\n    if even_count == 0 or odd_count == 0:\n        return None\n    else:\n        return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to integer tuple\n    result = tuple(map(int, test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\")))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Initialize an empty list to hold the converted tuples\n    int_list = []\n    \n    # Loop through each string in the list and try to convert it to an integer\n    for s in str_list:\n        try:\n            int_list.append(int(s))\n        except ValueError:\n            pass\n    \n    # Return the list of converted integers as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize empty list to store the integers\n    int_list = []\n    # loop through each character in the tuple string\n    for char in test_str:\n        # if the character is an integer, append it to the integer list\n        if char.isdigit():\n            int_list.append(int(char))\n        # if the character is not an integer, raise an error\n        else:\n            raise ValueError('Tuple string contains non-integer characters.')\n    # return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    # Split the string by comma and space and create a list\n    str_list = test_str.split(', ')\n    # Convert the list of strings to integer list using map() and int()\n    int_list = list(map(int, str_list))\n    # Convert the list of integers to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    return tuple([int(x) for x in test_tuple])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by commas and spaces\n    parts = test_str.split(',')\n    parts = [part.strip() for part in parts]\n    # create an empty integer tuple\n    int_tuple = ()\n    # iterate over the parts of the string\n    for part in parts:\n        # convert the part to an integer and append it to the integer tuple\n        int_tuple += (int(part),)\n    # return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into words using whitespace as the separator\n    words = test_str.split()\n    # Convert each word to an integer and add it to the list of integers\n    integers = [int(word) for word in words]\n    # Convert the list of integers to a tuple\n    integer_tuple = tuple(integers)\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string by comma\n    str_list = test_str.split(',')\n    \n    # Initializing an empty list for integer tuple\n    int_list = []\n    \n    # Iterating through the list and converting each string to integer\n    for str_num in str_list:\n        int_num = int(str_num.strip())\n        int_list.append(int_num)\n    \n    # Converting the integer list to tuple and returning it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Check if the input string is a tuple string\n    if all(isinstance(char, str) for char in test_str) and all(char.isdigit() for char in test_str):\n        # Convert the string to integer tuple\n        int_tuple = tuple(int(char) for char in test_str)\n        return int_tuple\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma\n    str_list = test_str.split(',')\n    # Create an empty integer tuple\n    int_tuple = ()\n    # Loop through the string list and convert each string to integer\n    for str in str_list:\n        # Convert the string to integer\n        int_num = int(str.strip())\n        # Append the integer to the integer tuple\n        int_tuple = int_tuple + (int_num,)\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect to find the index where the value should be inserted\n    index = bisect.bisect_right(a, x)\n    # Check if the value already exists at the index\n    if index == len(a) or a[index]!= x:\n        # If the value does not exist, insert it at the next index\n        index += 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    index = bisect.bisect_right(a, x)\n\n    if index == len(a):\n        index = 0\n\n    while index > 0 and a[index - 1] > x:\n        index -= 1\n\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x) # bisect_left() returns the index of the insertion point\n    if index == len(a) or a[index]!= x:\n        index += 1 # increase the index if the value is not found or it is not at the end of the list\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the index where the value should be inserted\n    i = bisect.bisect_right(a, x)\n    # If the value already exists in the list, return the index\n    if i!= len(a) and a[i] == x:\n        return i\n    # Otherwise, return the index where the new value should be inserted\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the binary search algorithm to find the index where to insert the value x\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i] == x:\n        return i\n    elif a[i] < x:\n        return right_insertion(a[i:], x)\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a(b){3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1,3}b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    result = re.search(pattern, text)\n    if result:\n        print('Match found:', result.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a sentence with an abbababa.\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a+b{3}')\n    result = re.search(pattern, text)\n    return result\n\ntext = 'abbbbbbabbabb'\nmatch = text_match_three(text)\n\nif match:\n    print('Match found:', match.group())\nelse:\n    print('No match found')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a{3}b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    \n    # Join the tuple elements with the string to form a new string\n    new_string = test_str.join(str(x) for x in test_tuple)\n    \n    # Convert the new string back to a tuple\n    new_tuple = tuple(new_string)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Define a new tuple with the given string and list\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Split the list and the string into separate lists\n    list_split = test_list.split(',')\n    string_split = test_str.split(',')\n\n    # Create a new tuple by merging the two lists\n    new_tuple = tuple(list_split + string_split)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str +'' + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a new tuple\n    combined_list = test_list + (test_str,)\n    return combined_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string using the join() method\n    new_str = test_str.join(str(item) for item in test_list)\n    # Convert the concatenated string to a tuple using the tuple() function\n    new_tuple = tuple(new_str.split(','))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert string to list of characters\n    char_list = list(test_str)\n    # concatenate list of characters with list of integers from list\n    new_list = test_list + char_list\n    # convert concatenated list to tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i%2 == 1: # Check if index is odd\n            if nums[i]%2!= 0: # Check if even number is present in odd index\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if every even index contains \n    an even number, and False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i+j] % 2 == 0 for j in range(0, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a boolean variable to check whether all even indices contain even numbers\n    is_even = True\n    \n    # iterate through the list of numbers\n    for i in range(len(nums)):\n        # check if the current number is even\n        if nums[i] % 2 == 0:\n            # check if the current even index contains an even number\n            if i % 2!= 0:\n                # if it doesn't, set the boolean variable to false and break out of the loop\n                is_even = False\n                break\n    \n    # return the boolean value of whether all even indices contain even numbers\n    return is_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_indices.append(i)\n    for i in even_indices:\n        if nums[i] % 2 == 0:\n            print(f\"Index {i} contains even numbers.\")\n    if len(even_indices) == len(nums):\n        print(\"All indices contain even numbers.\")\n    else:\n        print(\"Not all indices contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum(nums[i:i+2]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for i in item:\n                if isinstance(i, tuple):\n                    new_tup.extend(i)\n                else:\n                    new_tup.append(i)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return [i for j in test_tup for i in remove_nested(j)]\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initialize an empty list to store the non-nested tuples\n    non_nested_list = []\n    \n    # loop through each element in the input tuple\n    for element in test_tup:\n        # check if the element is a tuple\n        if isinstance(element, tuple):\n            # if it is, recursively call the function on that tuple\n            remove_nested(element)\n        else:\n            # if it isn't, add it to the non-nested list\n            non_nested_list.append(element)\n    \n    # return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-tuple elements of the tuple\n    non_tuple_elems = []\n    # Loop through the elements of the given tuple\n    for elem in test_tup:\n        # If the element is not a tuple, append it to the non_tuple_elems list\n        if not isinstance(elem, tuple):\n            non_tuple_elems.append(elem)\n    # Return the non_tuple_elems list as the result of the function\n    return non_tuple_elems"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define a helper function to remove tuples from the given tuple recursively\n    def helper(nested_tup):\n        # If the nested tuple is empty, return an empty tuple\n        if not nested_tup:\n            return ()\n        # If the nested tuple is a single element, return the single element as a tuple\n        elif len(nested_tup) == 1:\n            return (nested_tup[0],)\n        # If the nested tuple is a nested tuple, return a tuple of its elements\n        else:\n            # Split the tuple into two halves\n            mid = len(nested_tup) // 2\n            left_half = nested_tup[:mid]\n            right_half = nested_tup[mid:]\n            # Recursively call the helper function on each half\n            left_half_result = helper(left_half)\n            right_half_result = helper(right_half)\n            # Combine the two results into a single tuple and return it\n            return (left_half_result + right_half_result)\n\n    # Call the helper function on the given tuple and return the result\n    return helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            remove_nested(test_tup[i])\n    new_tup = []\n    for i in range(len(test_tup)):\n        if type(test_tup[i])!= tuple:\n            new_tup.append(test_tup[i])\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    while True:\n        try:\n            if type(test_tup[0]) == tuple:\n                test_tup = test_tup[0]\n            else:\n                break\n        except IndexError:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                if subitem not in test_list:\n                    test_list.append(subitem)\n        else:\n            if item not in test_list:\n                test_list.append(item)\n    return tuple(test_list)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_lists(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input and returns the index of the last occurrence of x in the array.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform binary search on the array to find the last occurrence of the element\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # If the middle element is the last occurrence of the element, return its index\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            # If the middle element is not the last occurrence of the element, search to the right\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            # If the middle element is greater than the element to be searched, search to the right\n            left = mid + 1\n        else:\n            # If the middle element is less than the element to be searched, search to the left\n            right = mid - 1\n            \n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Check if the array is sorted\n    if arr[0] >= arr[1]:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n        return -1\n    # If the array is not sorted, sort it\n    arr.sort()\n    # Check if the element is present in the sorted array\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position as -1\n    last_position = -1\n\n    # Iterate through the array to find the last occurrence of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array using binary search.\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize variables to keep track of the last position and the target element\n    last_pos = -1\n    target = x\n    \n    # iterate over the array until the target element is found\n    for i in range(len(arr)):\n        if arr[i] == target:\n            last_pos = i\n            break\n    \n    # return the last position of the target element\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Loop through the array until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the midpoint of the current left and right pointers\n        mid = (left + right) // 2\n\n        # If the midpoint element is equal to the search element, return its index\n        if arr[mid] == x:\n            return mid\n\n        # If the midpoint element is less than the search element, update the left pointer to mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the midpoint element is greater than the search element, update the right pointer to mid - 1\n        else:\n            right = mid - 1\n\n    # If the search element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    while i < len(arr) and arr[i] < x:\n        i += 1\n    if i == len(arr):\n        return -1\n    j = len(arr) - 1\n    while j >= 0 and arr[j] > x:\n        j -= 1\n    return j"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b$'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return 'Found a match:'+ matches[0]\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(.*)b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)\\w*(?=[bB]$)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?i).*a.*b.*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    total = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    \n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    odd_sum = 0\n    \n    while l <= r:\n        if l % 2 == 1:\n            odd_sum += l\n        l += 1\n    \n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range of numbers (l and r): \").split())\n    result = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            result += i\n    return result"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Take input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # Initialize sum variable to 0\n    total = 0\n\n    # Iterate through all odd natural numbers within the range\n    for i in range(l, r+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add it to the sum variable\n            total += i\n\n    # Print the sum of all odd natural numbers within the range\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is:\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    sum = 0\n\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n\n    print(\"Sum of all odd natural numbers between\", l, \"and\", r, \"is:\", sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n # assuming n is even\n    if r % 2 == 0:\n        r += 1 # adjust r to be odd\n    \n    # initialize sum variable\n    sum = 0\n    \n    # loop through all odd natural numbers within the range [l, r]\n    for i in range(l, r, 2):\n        # add the current odd number to the sum\n        sum += i\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to 0\n    total = 0\n    \n    # iterate over odd natural numbers between 1 and n\n    for i in range(1, n+1, 2):\n        # add i to the total\n        total += i\n        \n    # return the total\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the binary number to a 32-bit integer\n    num = int(n, 2)\n\n    # Compute the number of bits to be rotated\n    n_bits = 32 - d\n\n    # Extract the least significant d bits\n    rotated_bits = (num >> n_bits) | (num << (32 - d))\n\n    # Convert the rotated bits to a binary number and return it as a string\n    return bin(rotated_bits)[2:].zfill(32)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert number to binary string\n    binary_string = bin(n)[2:].zfill(32)\n\n    # get the number of bits to rotate left by\n    rotation_bits = len(binary_string) - d\n\n    # get the bits to rotate left and the rest of the bits\n    bits_to_rotate = binary_string[:rotation_bits]\n    bits_to_remain = binary_string[rotation_bits:]\n\n    # rotate the bits\n    rotated_bits = bits_to_remain + bits_to_rotate\n\n    # convert the rotated bits to an integer\n    rotated_number = int(rotated_bits, 2)\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) & mask) | ((n & (~mask)) >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    # convert n to a binary string\n    n = bin(n)[2:]\n    # compute the number of bits in n\n    n_bits = len(n)\n    # pad n with zeros to d bits\n    if d > n_bits:\n        n = \"0\" * (d - n_bits) + n\n    elif d < n_bits:\n        n = n[-d:]\n    # compute the number of left-shifts to perform\n    shift_count = d % n_bits\n    # rotate the bits\n    rotated = n[-shift_count:] + n[:-shift_count]\n    # convert the rotated bits back to an integer\n    return int(rotated, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    num_bits = 32  # Assume 32 bits\n    num_rotations = d % num_bits\n    if d < 0:\n        d += num_bits\n\n    # Calculate the mask for the rotation\n    rotation_mask = (1 << num_rotations) - 1\n    left_mask = (1 << num_bits) - 1\n\n    # Calculate the rotated bits\n    rotated_bits = (n & rotation_mask) | ((n & left_mask) << num_rotations)\n\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF # Mask to get only the least significant d bits\n    return ((n & mask) << d) | ((n & ~mask) >> (32 - d)) # Perform the rotation"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary representation\n    binary_n = bin(n)[2:]\n    # Determine the number of bits that need to be shifted\n    shift_bits = len(binary_n) - d\n    # If the number of bits that need to be shifted is negative, rotate to the left by the negative amount\n    if shift_bits < 0:\n        return int(binary_n[d:] + binary_n[:d], 2)\n    # Rotate the number to the left by the given amount\n    else:\n        return int(binary_n[-shift_bits:] + binary_n[:-shift_bits], 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1  # Mask to get the least significant d bits\n    return (n << d) | (n >> (32 - d)) & mask  # Rotate left and mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    # convert n to a binary string\n    num_bin = bin(n)[2:]\n    \n    # compute the left shift amount\n    shift_amount = d % 32\n    \n    # compute the number of bits to be shifted\n    num_bits = len(num_bin)\n    num_shifts = (shift_amount + num_bits) % 32\n    \n    # rotate the bits\n    rotated_bin = num_bin[shift_amount:] + num_bin[:shift_amount]\n    \n    # convert the rotated bits back to an integer\n    rotated = int(rotated_bin, 2)\n    \n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match any whitespace character\n    pattern = re.compile(r'\\s+')\n    # Use the re.sub() function to remove all matches of the pattern from the text\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # remove all whitespaces from the string\n    text = re.sub('\\s+','', text)\n    # remove leading and trailing whitespaces from the string\n    text = text.strip()\n    # return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(max(x, y, z), min(x, y, z) - 1, -1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(x,y+1):\n        for j in range(y,z+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x,y,z), min(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # iterate through the array and count rotations\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the smallest element in the array\n    min_val = min(arr)\n    # Find the largest element in the array\n    max_val = max(arr)\n    # Find the mid point of the array\n    mid_point = (min_val + max_val) // 2\n    # Initialize the count variable\n    count = 0\n    # Check if the mid point is greater than the first element\n    if arr[mid_point - 1] > arr[mid_point]:\n        count += 1\n    # Check if the mid point is greater than the second element\n    if arr[mid_point - 2] > arr[mid_point]:\n        count += 1\n    # Check for the remaining elements in the array\n    for i in range(mid_point, n):\n        if arr[i] < arr[i - mid_point]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # count number of inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return \"Not a sorted array\"\n    # no inversions found, array is already sorted\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # Traverse the array and check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # If the array is already sorted, then the number of rotations required is 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    \"\"\"\n    # Initialize the count variable\n    count = 0\n\n    # Traverse through the array\n    for i in range(len(arr)):\n        # Check if the element is already in its sorted position\n        if arr[i] == arr[arr.index(min(arr[i], arr[:i]))]:\n            continue\n        else:\n            # If the element is not in its sorted position, increment the count\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # check if the array is sorted or not\n    if is_sorted(arr):\n        return 0\n    \n    # find the smallest element in the array\n    smallest = arr[0]\n    \n    # find the number of elements in the array\n    n = len(arr)\n    \n    # iterate through the array to find the smallest element\n    for i in range(1, n):\n        if arr[i] < smallest:\n            smallest = arr[i]\n            \n    # count the number of rotations required\n    count = 0\n    \n    # iterate through the array from right to left\n    for i in range(n-1, -1, -1):\n        if arr[i]!= smallest:\n            count += 1\n            \n    return count\n\ndef is_sorted(arr):\n    '''\n    Helper function to check if the array is sorted or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[n-i-1]:\n            return n - i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # Find the minimum element in the array\n    min_val = min(arr)\n    \n    # Calculate the sum of the absolute differences between adjacent elements\n    diff_sum = sum(abs(arr[i] - arr[i+1]) for i in range(len(arr)-1))\n    \n    # Calculate the total number of rotations required to generate the array\n    rotations = diff_sum // (len(arr)-1)\n    \n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array and find the first element that is greater than its right neighbor.\n    # This is the first element that will not be rotated.\n    i = 0\n    while i < n-1 and arr[i] <= arr[i+1]:\n        i += 1\n    # If no such element is found, then the array is already sorted.\n    if i == n-1:\n        return 0\n    # Find the largest element in the array.\n    max_val = arr[i]\n    # Find the index of the next element that is greater than its right neighbor.\n    j = n-1\n    while j > 0 and arr[j-1] <= arr[j]:\n        j -= 1\n    # Find the index of the next element that is greater than its right neighbor.\n    k = i\n    while k < j and arr[k] <= arr[k+1]:\n        k += 1\n    # Find the smallest element in the array.\n    min_val = arr[k]\n    # Check if the next element to the right is greater than the largest element.\n    # If yes, then the array is already sorted.\n    if arr[k+1] > max_val:\n        return 0\n    # Count the number of rotations required to generate the sorted array.\n    rotations = (k-i+1) // 2\n    return rotations"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is less than 0 or not an integer\n    if type(n)!= int or n < 0:\n        return False\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # Check if the number is even\n    if n % 2 == 0:\n        # Check if the square root of the number is an integer\n        root = int(n ** 0.5)\n        if n == root * root:\n            return True\n    # Check if the square root of the number is odd\n    else:\n        # Check if the square root of the number minus 1 is an integer\n        root = int((n - 1) ** 0.5)\n        if n == root * root + 1:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(n ** 0.5) # calculate the square root of n\n    if sqrt_n ** 2 == n: # check if the square of sqrt_n is equal to n\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check for even cases\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    # Check for odd cases\n    else:\n        # Calculate square root using integer division\n        root = n // 2\n        while root * root!= n:\n            root += 1\n        return root == 1"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    root = int(n ** 0.5) + 1\n    while root * root > n:\n        root -= 1\n    while root * root < n:\n        root += 1\n    return root * root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, else it returns False.\n    \"\"\"\n    # Check if the given number is less than 0 or greater than 2147483647\n    if n < 0 or n > 2147483647:\n        return False\n\n    # Calculate the square root of the given number using the math library in Python\n    import math\n    root = math.sqrt(n)\n\n    # Check if the square root is an integer and not a floating point number\n    if root.is_integer() == False:\n        return False\n\n    # If the above conditions are satisfied, the number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Square root of the number\n    sqrt_n = n ** 0.5\n\n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        # Square root is an integer, so it is a perfect square\n        return True\n    else:\n        # Square root is not an integer, so it is not a perfect square\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, else False.\n    \"\"\"\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, else False.\n    \"\"\"\n    # Base case: if n is less than or equal to 0, return False\n    if n <= 0:\n        return False\n    \n    # Use the Newton-Raphson method to check if n is a perfect square\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If n is not a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # check for square root first\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        # if not square root, check for factors\n        for i in range(1, sqrt_n + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks if the given number is a perfect square or not.\n\n    Args:\n    n (int): Input number.\n\n    Returns:\n    bool: True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Iterate over the array and multiply the current element with the product variable\n    for i in arr:\n        product *= i\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    \n    for num in arr: \n        product *= num\n        \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of numbers as input and checks whether their product is even or not.\n    '''\n\n    # initialize variables\n    product = 1\n    is_even = True\n\n    # iterate over the list of numbers\n    for num in arr:\n        # update the product of all numbers\n        product *= num\n\n        # check if the product is even or odd\n        if product % 2 == 0:\n            is_even = True\n        else:\n            is_even = False\n            break\n\n    # return the result as a boolean value\n    return is_even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return arr[0] % 2 == 0\n    else:\n        product = arr[0] * is_product_even(arr[1:])\n        if product % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize a variable to store the product of the numbers in the list\n    product = 1 \n\n    # loop through each number in the list\n    for num in arr: \n        # update the product with the current number\n        product *= num \n\n    # check whether the product is even or not\n    if product % 2 == 0: \n        # if the product is even, return True\n        return True \n    else: \n        # if the product is odd, return False\n        return False "
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(len(lists[i])):\n                if k!= j:\n                    current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [[lists[i][j]]]\n            elif current_sum == max_sum:\n                result.append(lists[i][j])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum to 0\n    max_sum = 0\n    \n    # Iterate through each list in the list of lists\n    for i in range(len(lists)):\n        # Initialize current_sum to 0\n        current_sum = 0\n        \n        # Iterate through each element in the list\n        for j in range(len(lists[i])):\n            # Add the element to the current_sum\n            current_sum += lists[i][j]\n            \n            # If the current_sum is greater than max_sum, update max_sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                \n    # Return the list whose sum of elements is the highest\n    return [lists[i] for i in range(len(lists)) if lists[i][0] == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Create a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Loop through each list in the list of lists\n    for i in range(len(lists)):\n        # Create a variable to store the sum of the current list\n        current_sum = 0\n\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the sum\n            current_sum += lists[i][j]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Create a list to store the indices of the maximum sum in each list\n    max_indices = []\n\n    # Loop through each list in the list of lists\n    for i in range(len(lists)):\n        # Create a variable to store the sum of the current list\n        current_sum = 0\n\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the sum\n            current_sum += lists[i][j]\n\n        # If the current sum is equal to the maximum sum so far, append the index to the list of indices\n        if current_sum == max_sum:\n            max_indices.append(i)\n\n    # Loop through each list in the list of lists and find the corresponding element with the maximum sum\n    max_elements = []\n    for i in range(len(lists)):\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # If the index of the current element is in the list of indices, add it to the list of maximum elements\n            if j in max_indices:\n                max_elements.append(lists[i][j])\n\n    # Return the list of maximum elements in the list of lists\n    return max_elements"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Loop through each list in the input list of lists\n    for list in lists:\n        # Initialize a variable to store the current sum\n        current_sum = 0\n\n        # Loop through each element in the list\n        for element in list:\n            # Add the element to the current sum\n            current_sum += element\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Create a list of lists to hold the maximum sum list\n    max_sum_list = []\n\n    # Loop through each list in the input list of lists\n    for list in lists:\n        # Initialize a variable to store the current sum\n        current_sum = 0\n\n        # Loop through each element in the list\n        for element in list:\n            # Add the element to the current sum\n            current_sum += element\n\n        # If the current sum is equal to the maximum sum, add the list to the max_sum_list\n        if current_sum == max_sum:\n            max_sum_list.append(list)\n\n    # Return the max_sum_list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_sum_list = i\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    # Initialize variables to keep track of the maximum sum and the list of lists that sum up to that maximum\n    max_sum = float('-inf')\n    max_lists = None\n    # Loop through each list of lists in the input list\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        # If the sum is greater than the current maximum sum, update the maximum sum and the list of lists\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_lists = sublist\n    # Return the list of lists that sum up to the maximum sum\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n                current_list = [lists[i][j]]\n            else:\n                current_sum = current_sum + lists[i][j]\n                current_list.append(lists[i][j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = current_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == j:\n                continue\n            current_sum = lists[i][j] + lists[j][i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [[lists[i][j], lists[j][i]]]\n            elif current_sum == max_sum:\n                max_list.append([lists[i][j], lists[j][i]])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input, and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the max_sum variable to zero\n    max_sum = 0\n    \n    # Loop through each list in the input list of lists\n    for i in lists:\n        # Initialize the current_sum variable to zero\n        current_sum = 0\n        \n        # Loop through each element in the current list\n        for j in i:\n            # Add the current element to the current_sum\n            current_sum += j\n            \n            # Check if the current_sum is greater than max_sum so far\n            if current_sum > max_sum:\n                # Update max_sum to the current_sum\n                max_sum = current_sum\n                \n    # Return the list in the input list of lists whose sum of elements is the highest\n    return lists[max_sum_index]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    current_run = \"\"\n    for char in test_str:\n        if char.isupper():\n            current_run += char\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_run = current_run\n            current_run = \"\"\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase = True\n        else:\n            if uppercase:\n                current_run += 1\n                if current_run > max_run:\n                    max_run = current_run\n            else:\n                current_run = 0\n            uppercase = False\n    \n    if uppercase:\n        current_run += 1\n        if current_run > max_run:\n            max_run = current_run\n        \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run count\n        else:\n            current_run = 0\n\n        # Update the maximum run if the current run count is greater\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    current_char = ''\n\n    # Iterate through the string\n    for char in test_str:\n        # If the current character is uppercase and the previous character was lowercase,\n        # update the run length and start a new run\n        if char.isupper() and not current_char.isupper():\n            run_length += 1\n        else:\n            # If the current run is longer than the maximum run found so far, update the maximum run\n            if run_length > max_run:\n                max_run = run_length\n\n            # Reset the run length and start a new run\n            run_length = 1\n\n        # Update the current character\n        current_char = char\n\n    # If the last character was uppercase and the run length is greater than the maximum run, update the maximum run\n    if run_length > max_run:\n        max_run = run_length\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # If the current run is greater than the maximum run\n            if current_run > max_run:\n                # Update the maximum run\n                max_run = current_run\n            # Reset the current run\n            current_run = 1\n        else:\n            # If the current character is not uppercase\n            # Add 1 to the current run\n            current_run += 1\n            \n    # If the last run was longer than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n        \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    current_run = ''\n    for char in test_str:\n        if char.isupper():\n            current_run += char\n        else:\n            if len(current_run) > run_length:\n                run_length = len(current_run)\n            current_run = ''\n    if len(current_run) > run_length:\n        run_length = len(current_run)\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to store the maximum run length and the start index of the run\n    max_run = 0\n    start = 0\n\n    # Loop through the string and update the maximum run length and start index if a run of uppercase characters is found\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # Check if the current character is part of a run of uppercase characters\n            if i == len(test_str) - 1 or test_str[i+1].isupper():\n                # If it is, update the maximum run length and start index\n                max_run = max(max_run, i - start + 1)\n                start = i\n\n    # Return the maximum run length and start index\n    return max_run, start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    is_upper = False\n    \n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count and set the is_upper flag to True\n        if char.isupper():\n            current_run += 1\n            is_upper = True\n        # If the character is not uppercase and the is_upper flag is True, increment the max_run count and reset the is_upper flag\n        elif is_upper:\n            max_run = max(max_run, current_run)\n            current_run = 1\n            is_upper = False\n        # If the character is not uppercase and the is_upper flag is False, increment the current run count and do nothing\n        else:\n            current_run += 1\n    \n    # If the is_upper flag is True, update the max_run count\n    if is_upper:\n        max_run = max(max_run, current_run)\n    \n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            uppercase_count -= 1\n            if uppercase_count < 0:\n                uppercase_count = 0\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # initialize the odd_num variable to None\n    odd_num = None\n    \n    # loop through the list of numbers\n    for num in nums:\n        # if the number is odd, set the odd_num variable to the number and break the loop\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # return the odd_num variable\n    return odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list. If there is no odd number in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for t in test_tup:\n        if len(t)!= K:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 1:\n        return False\n    elif len(test_tup) == 2:\n        if test_tup[0] == K or test_tup[1] == K:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(test_tup)-1):\n            if test_tup[i] == K:\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K or test_tup[1] in K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 0:\n        return False\n    if len(test_tup) < K:\n        return False\n    if K == 1:\n        if test_tup[0] in (0, 1):\n            return True\n        else:\n            return False\n    else:\n        for i in range(K):\n            if test_tup[i] in (0, 1):\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    for i in test_tup:\n        if i in K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for tup in test_tup:\n        if tup[K-1] == K:\n            k_count += 1\n    if k_count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                print(\"The element at index\", i, \"of the second tuple is smaller than its corresponding element in the first tuple.\")\n                return False\n        print(\"All elements of the second tuple are smaller than or equal to their corresponding elements in the first tuple.\")\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Iterate through the tuples and check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of equal length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]