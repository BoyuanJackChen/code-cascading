[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    # Loop through the first tuple\n    for i in test_tup1:\n        # Check if the current element exists in the second tuple\n        if i in test_tup2:\n            # If it does, add it to the common elements list\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared.append(test_tup1[i])\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item1 in test_tup1:\n        if item1 in test_tup2:\n            shared_elements.append(item1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1 & set2\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of common elements from both tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if n is less than 2\n    if n < 2:\n        return True\n\n    # Check if n is equal to 2 or 3\n    if n == 2 or n == 3:\n        return False\n\n    # Check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # Check odd numbers up to the square root of n\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n\n    # If n is not divisible by 2, 3, or an odd number up to the square root of n, it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it's not a prime number, False otherwise.\n    A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns True if the number is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the given list of numbers\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n        # Keep only the n largest elements\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Use max heap to store the n largest integers\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    \n    # Return the largest integers from the heap\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    nums = set(nums)\n\n    # create a min-heap of the unique numbers in descending order\n    heap = [num for num in nums]\n    hq.heapify(heap)\n\n    # extract the n largest numbers from the heap in descending order\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max-heap of the first n elements of the list\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Iterate over the remaining elements of the list\n    for num in nums[n:]:\n        # If the current number is greater than the maximum element in the heap,\n        # remove the maximum element from the heap and replace it with the current number\n        if num > hq.heappop(max_heap):\n            hq.heappush(max_heap, num)\n\n        # If the heap has at least n elements, pop the smallest element\n        if len(max_heap) == n:\n            hq.heappop(max_heap)\n\n    # Return the elements in the heap in descending order\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n\n    # Extract the n largest integers from the heap\n    result = [hq.heappop(heap) for _ in range(n)]\n\n    # Convert the heap to a list\n    result = [abs(num) for num in result]\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # convert the list of numbers to a heap\n    nums_heap = nums[0:n]\n    hq.heapify(nums_heap)\n    \n    # remove the smallest n elements from the heap and add the remaining elements\n    largest_nums = hq.heappop(nums_heap) * n\n    hq.heappush(nums_heap, largest_nums)\n    \n    # convert the heap back to a list and return it\n    return list(nums_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min heap\n    nums = -nums  # make the heap min-heap\n    hq.heapify(nums)\n\n    # Extract the n largest integers from the heap\n    largest = []\n    while len(largest) < n:\n        largest.append(hq.heappop(nums))\n\n    # Convert the list of largest integers back to a list\n    largest = -largest\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function finds the n largest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a power of 2 or not\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x % 2 == 0:\n        x //= 2\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x - 1) # bitwise XOR to find the bit position where x and (x-1) differ\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    while x!= 1:\n        if x & 1 == 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given number to binary string\n    bin_str = bin(x)[2:]\n\n    # Check if the length of the binary string is a power of 2\n    if len(bin_str) == 1:\n        return False\n\n    # Find the number of leading zeros in the binary string\n    leading_zeros = len(bin_str) - bin_str[::-1].index('0') - 1\n\n    # Check if the number of leading zeros is one less than the power of 2\n    if leading_zeros < len(bin_str) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x > 1:\n        x = x >> 1\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out any words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    # Return the filtered list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-word characters and split into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = text.split()\n    # create a regular expression pattern to match words of length at least 4\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # find all words in the text which match the pattern\n    matches = re.findall(pattern, text)\n    # return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [x**2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Calculate the square of the current element and append it to a new list\n        square_list.append(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    max_count = 0\n    max_str = str\n    \n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j+1, n):\n                sub_str = str[i:j+1] + str[j+1:k] + str[k:]\n                if sub_str == str:\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                        max_str = sub_str\n                        \n    return max_count, max_str"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Calculate the frequency of each character in the string\n    freq = [0] * 26\n    for c in str:\n        freq[ord(c) - ord('a')] += 1\n    # Check if the length of the frequency array is greater than 0 (all characters are the same)\n    if all(freq[i] == 1 for i in range(26)):\n        return 0\n    # Calculate the length of the longest substring that contains the same frequency as the first character\n    maxLength = 1\n    for i in range(1, n):\n        if freq[ord(str[i]) - ord('a')] == freq[ord(str[0]) - ord('a')]:\n            maxLength = max(maxLength, i - maxLength + 1)\n    # Calculate the minimum number of rotations required to get the same string\n    minRotations = 0\n    for i in range(1, maxLength):\n        if freq[ord(str[0]) - ord('a')] > freq[ord(str[maxLength - i]) - ord('a')]:\n            minRotations += maxLength - i\n    # Return the minimum number of rotations required to get the same string\n    return minRotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables\n    n = len(str)\n    count = 0\n    \n    # Check for rotations\n    while n > 0:\n        # Rotate the string\n        s = str[n-1] + str[:n-1]\n        \n        # Check if the rotated string is equal to the original string\n        if s == str:\n            count += 1\n            str = s\n        else:\n            break\n        \n        n = len(str)\n    \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0 if str[0] == str[1] else 1\n\n    # initialize variables\n    min_rotations = float('inf')\n    start = 0\n    end = n - 1\n\n    # perform binary search to find the minimum number of rotations\n    while start <= end:\n        mid = (start + end) // 2\n        rotations = 0\n        left = str[mid:] + str[:mid]\n        right = str[mid+1:] + str[:mid+1]\n\n        # check if the left and right strings are the same\n        if left == right:\n            min_rotations = min(min_rotations, mid)\n        elif str[mid] == str[0]:\n            rotations = mid\n            min_rotations = min(min_rotations, rotations)\n        else:\n            rotations = mid + 1\n            min_rotations = min(min_rotations, rotations)\n\n        # update the search range\n        if left < right:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n < 2:\n        return 0\n    elif n == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    else:\n        # check if the string is already in reverse order\n        if str == str[::-1]:\n            return 0\n        # check if the string has any characters in it that are not in the alphabet\n        else:\n            for i in range(n):\n                if str[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n                    return 0\n            # check if the string has a single character that repeats\n            char_set = set(str)\n            if len(char_set) == 1:\n                return 0\n            # check if there is a character that appears twice in the string\n            count = [0] * 26\n            for c in str:\n                count[ord(c) - ord('a')] += 1\n                if count[ord(c) - ord('a')] > 1:\n                    return 0\n            return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n\n    # Initialize a variable to store the minimum number of rotations required\n    minRotations = n\n\n    # Loop through each character in the string\n    for i in range(n):\n        # Initialize a temporary string for comparison\n        temp = str[i:] + str[:i]\n\n        # If the temporary string is the same as the original string, increment the counter\n        if temp == str:\n            minRotations = min(minRotations, n-i)\n\n    # Return the minimum number of rotations required to get the same string\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Find all the possible rotations\n    rotations = []\n    for i in range(n):\n        rotations.append(str[n-i-1:n-1:-1])\n    # Find the minimum number of rotations required to get the same string\n    min_rot = n\n    for rotation in rotations:\n        if rotation == str:\n            min_rot = min(min_rot, n-str.index(rotation))\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # First, check if the string has a single character\n    if n == 1:\n        return 0\n\n    # If the string has more than two characters, perform an iterative binary search\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        # If the substring to the left of the midpoint has a smaller length, move the right pointer to the midpoint\n        if str[0:mid] + str[mid:] == str:\n            left = mid + 1\n        # If the substring to the right of the midpoint has a larger length, move the left pointer to the midpoint\n        elif str[0:mid] + str[mid+1:] == str:\n            right = mid - 1\n        # If the substring to the left and right of the midpoint have the same length, check if they are equal\n        else:\n            if str[0:mid] == str[mid:]:\n                return mid\n            else:\n                return mid + 1\n\n    # The string does not have a single character and is not equal to itself, so the minimum number of rotations is the length of the string\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Check if all characters are same\n    if n == 1:\n        return 0\n    elif n == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    else:\n        # Find the first occurrence of a character that is different from the next character\n        i = 1\n        while i < n and str[i] == str[i+1]:\n            i += 1\n        # If there are no such characters, return 0\n        if i == n:\n            return 0\n        # Find the last occurrence of the same character in the remaining part of the string\n        j = i\n        while j < n and str[j] == str[j-1]:\n            j += 1\n        # Calculate the minimum number of rotations required to reverse the string\n        min_rot = min(find_Rotations(str[:i]), find_Rotations(str[j:]))\n        # Reverse the string and calculate the minimum number of rotations required to get the reversed string\n        min_rot += find_Rotations(str[i:j][::-1])\n        return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Find the length of the given string\n    n = len(str)\n\n    # Find the number of rotations required to get the string in sorted order\n    rotations = 0\n    while n > 1:\n        n = n // 2\n        rotations += 1\n\n    # Return the minimum number of rotations required\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments - string s and character ch.\n    It removes the first occurrence of character ch from the string s and returns the modified string.\n    If the character ch is not found in the string, it returns the original string unchanged.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        # find the first and last occurrence of the character\n        first_occurrence = s.find(ch)\n        last_occurrence = s.rfind(ch)\n        # check if first and last occurrence are equal\n        if first_occurrence == last_occurrence:\n            return s.replace(ch, '')\n        else:\n            # return the string with the first occurrence removed and the last occurrence replaced with an empty string\n            return s[:first_occurrence] + ch + s[last_occurrence+1:]\n    else:\n        # character not found in the string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two parameters, string's' and character 'ch'.\n    It removes the first occurrence of 'ch' from the string and the last occurrence of 'ch' from the string.\n    \"\"\"\n    # if the character 'ch' is not present in the string, return the original string\n    if ch not in s:\n        return s\n    \n    # create a new string by removing the first occurrence of 'ch' and the last occurrence of 'ch'\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', -1)\n    \n    # return the new string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function removes the first and last occurrence of a given character from a string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        # splitting the string into list of characters\n        s = list(s)\n        # finding the first occurrence of the character\n        index = s.index(ch)\n        # removing the first occurrence\n        del s[index]\n        # finding the last occurrence of the character\n        index = s.rindex(ch)\n        # removing the last occurrence\n        del s[index]\n        # joining the list of characters back into a string\n        s = ''.join(s)\n    else:\n        print(\"Character not found in the string\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return \"Character not present in the string\"\n    else:\n        return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a copy of the matrix to avoid modifying the original\n    M = list(map(list, M))\n    # sort each row of the matrix\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    # sort the matrix based on the sum of its rows\n    return sorted(M, key=lambda x: sum(x))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row in the matrix\n    for row in range(len(M)):\n        # Initialize a variable to keep track of the minimum value in the row\n        min_val = M[row][0]\n        # Loop through each value in the row\n        for i in range(1, len(M[row])):\n            # If the current value is less than the minimum value, update the minimum value\n            if M[row][i] < min_val:\n                min_val = M[row][i]\n        # Loop through each value in the row again and swap them with the minimum value\n        for i in range(len(M[row])):\n            if M[row][i] < min_val:\n                M[row][i], M[row][min_val_row] = M[row][min_val_row], M[row][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if M[j][0] < M[i][0] + M[j][1]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i] + M[j][j]:\n                # swap rows i and j\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sorted matrix and the sum of rows\n    sorted_M = []\n    sum_rows = 0\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Check if the sum of the current row is greater than the sum of rows\n        if sum_rows + sum(row) > sum_rows:\n            # If yes, append the current row to the sorted matrix\n            sorted_M.append(row)\n            # Update the sum of rows with the sum of the current row\n            sum_rows += sum(row)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # loop through each row of the matrix\n    for i in range(n):\n        # create a temporary list to store the row sum\n        row_sum = []\n        # loop through each element of the row\n        for j in range(n):\n            # add the element to the row sum\n            row_sum.append(M[i][j])\n        # sort the row using bubble sort\n        for j in range(n-1):\n            for k in range(n-j-1):\n                if row_sum[k] > row_sum[k+1]:\n                    # swap the elements if they are in the wrong order\n                    row_sum[k], row_sum[k+1] = row_sum[k+1], row_sum[k]\n        # add the sorted row to the matrix\n        for j in range(n):\n            M[i][j] = row_sum[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sorted matrix with the original matrix\n    sorted_M = M\n    \n    # Sort the rows of the sorted matrix in ascending order\n    for i in range(len(sorted_M)):\n        sorted_M[i] = sorted(sorted_M[i])\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    rows = []\n    for row in M:\n        row_sum = sum(row)\n        rows.append((row_sum, row))\n\n    # Sort the rows in ascending order of their sum\n    rows.sort()\n\n    # Create a new matrix with the sorted rows\n    sorted_M = []\n    for row_sum, row in rows:\n        sorted_row = [0] * len(M[0])\n        for i, col in enumerate(row):\n            sorted_row[i] = col\n        sorted_M.append(sorted_row)\n\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters - l, b, and h - representing the length, width, and height of the triangular prism respectively.\n    It returns the volume of the triangular prism.\n    '''\n    volume = l * b * h / 6.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three arguments, l (length of base), b (length of height), and h (height) and returns the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h # formula for volume of triangular prism\n    print(\"The volume of the triangular prism is:\",V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns the volume of the prism.\n    '''\n    # Calculate the volume of the prism\n    volume = l * b * h\n    \n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width and height of a triangular prism and returns its volume.\n    '''\n    # calculate the volume using the formula V = (1/2)(lwh)\n    V = (1/2)*(l*w*h)\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b([a-z])\\w*\\1_'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z_]*[a-z][a-z_]*$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z][a-z]+')  # matches any sequence of lowercase letters joined with an underscore\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<!\\w)([a-z]+)(?!\\w)\"\n    return bool(re.findall(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])[a-z](?=[a-z])|[A-Z](?=[A-Z])\"\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z_]*[a-z]$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]{2,}_[a-z]+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regular expression pattern to match lowercase letters\n    pattern = re.compile(r'[a-z]+')\n\n    # Use the re.findall() method to find all matches in the input string\n    matches = pattern.findall(text)\n\n    # Check if there are any matches and return the result\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<!_)([a-z])(?![a-z])')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    new_string = \"\"\n    for char in range(NO_OF_CHARS):\n        if char not in char_set:\n            new_string += chr(char)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a set of characters in the second string\n    set_chars = set(string)\n    \n    # create an empty list to store the characters to be removed\n    remove_chars = []\n    \n    # loop through each character in the first string\n    for char in string:\n        # check if the character is present in the set of characters in the second string\n        if char not in set_chars:\n            remove_chars.append(char)\n            \n    # loop through each character in the first string and remove the characters in the remove_chars list\n    for i in range(len(string)):\n        if string[i] in remove_chars:\n            string = string[:i] + string[i+1:]\n            \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert string to a list of characters\n    string_list = list(string)\n    # Create an empty list to store the final result\n    result_list = []\n    # Loop through the characters of the first string\n    for char in string_list:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # Append the character to the result list\n            result_list.append(char)\n    # Convert the result list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i in char_set:\n            string = string.replace(chr(i), '')\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_set = set(string)\n    \n    for char in char_list:\n        if char in char_set:\n            char_list.remove(char)\n    \n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string\n    second_string = \"aeiouAEIOU\"\n    result = \"\"\n    for char in first_string:\n        if char not in second_string:\n            result += char\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    for char in string:\n        if char not in char_set:\n            string = string.replace(char, \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    string_list = list(string)\n    for char in string_list:\n        if char in string:\n            string_list.remove(char)\n            no_of_chars -= 1\n            if no_of_chars == 0:\n                break\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    # Create an empty list\n    result = []\n    # Loop through the string\n    for char in string:\n        # Check if the character is not in the second string\n        if char not in string:\n            # Append the character to the result list\n            result.append(char)\n    # Return the result list\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_set = set(string)\n    for char in char_list:\n        if char in char_set:\n            char_list.remove(char)\n    modified_string = ''.join(char_list)\n    return modified_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n\n    # Create a set to store the unique elements of the array\n    unique_nums = set()\n\n    # Iterate through the array and add each element to the set only if it is not already there\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n        else:\n            return True\n\n    # If the loop completes without returning True, it means that there are no duplicates in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_nums = set()\n    \n    # Loop through each element of the array\n    for num in arraynums:\n        # If the element is already in the set, it means there's a duplicate\n        if num in unique_nums:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_nums.add(num)\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements of the array\n    unique_dict = {}\n    \n    # iterate through the array and add unique elements to the dictionary\n    for num in arraynums:\n        if num not in unique_dict:\n            unique_dict[num] = True\n            \n    # check if the dictionary has any key-value pairs\n    if len(unique_dict)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the list to a set to remove duplicates\n    setnums = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(setnums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    else:\n        for i in range(len(arraynums)-1):\n            if arraynums[i] == arraynums[i+1]:\n                return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    # Loop through the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # Loop through the dictionary and check if any element has a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    return len(num_set)!= len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in count_dict:\n            return True\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # If no duplicate elements were found in the array, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty dictionary to store the indices of elements\n    indices = {}\n    \n    # loop through the array and store the indices of the elements in the dictionary\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            return True\n        indices[num] = i\n    \n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return '0 is not a woodball'\n    elif x % 2 == 0:\n        return '2 is a woodball'\n    elif x % 3 == 0:\n        return '3 is a woodball'\n    elif x % 5 == 0:\n        return '5 is a woodball'\n    else:\n        return 'Not a woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1000000:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define a list of possible outcomes\n    outcomes = ['Woodball', 'Not a Woodball']\n\n    # Check if the number is divisible by 4\n    if x % 4 == 0:\n        # If it is, return the corresponding outcome\n        return outcomes[0]\n    else:\n        # If it's not, return the corresponding outcome\n        return outcomes[1]"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 100 or x > 900: \n        return False\n    elif x < 500: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    This function will return True if the given number is woodball, else it will return False.\n    '''\n    if x < 1000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 13 or x == 29 or x == 42:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num + 1 == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_int = int(reversed_str)\n    # Check if the reversed integer is one less than twice the original number\n    if reversed_int < (2 * num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    # convert the input number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # calculate the difference between the original number and its reversed form\n    difference = int(num) - int(reversed_num)\n    # check if the difference is one less than twice its reverse\n    return difference <= 2 * difference"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # convert the reversed number back to an integer\n    rev_rev_num = int(rev_num)\n    # check if the original number is one less than twice its reverse\n    if num == rev_rev_num - 1:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    return reverse == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n\n    if num == reverse:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    \n    # Calculate the sum of the reversed number and the original number\n    reversed_sum = int(reverse_num) + num\n    \n    # Check if the reversed sum is one less than twice the original number\n    return reversed_sum == num*2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    # Check if the input number is one less than twice its reverse\n    if num < 2 * rev_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = int(str(num)[::-1])\n    # check if the number is one less than twice its reverse\n    if num < 2*rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num % 2 == 0:\n        return False\n    else:\n        rev_num = 0\n        while num > 0:\n            rev_num = rev_num * 10 + num % 10\n            num //= 10\n        return num == rev_num and rev_num!= 0 and (num + 1) * 2 == rev_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort() # Sorting the given list of digits\n    n = len(arr)\n    max_num = 0\n    for i in range(n-1, -1, -1): # Traversing the sorted list in reverse order\n        max_num = max_num*10 + arr[i] # Updating the max_num value\n        if max_num < 10: # Checking if the max_num value is less than 10\n            break\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    arr.sort()\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_num = max(max_num, arr[i]*arr[j])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(i+1):\n            num = num * 10 + arr[j]\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr, reverse=True)\n    result = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                result += (arr[i] * arr[j])\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize the maximum number to be formed with the first digit of the list\n    max_num = arr[0]\n    \n    # Loop through the remaining digits of the list\n    for i in range(1, len(arr)):\n        # Get the current digit\n        curr_digit = arr[i]\n        \n        # Initialize the current number to be formed with the current digit and the maximum number formed so far\n        curr_num = curr_digit + max_num\n        \n        # Check if the current number is greater than the maximum number so far\n        if curr_num > max_num:\n            # If it is, update the maximum number to be formed with the current number\n            max_num = curr_num\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) # number of digits\n    max_num = 0\n\n    # form all possible numbers\n    for i in range(2**n):\n        num = 0\n        for j in range(n):\n            if (i & (1 << j))!= 0:\n                num += arr[j]\n        if num > max_num:\n            max_num = num\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the list of digits in ascending order\n    arr.sort()\n    # initialize the max number to be formed with the first digit\n    max_num = arr[0]\n    # loop through the list of digits\n    for i in range(1, len(arr)):\n        # calculate the current number with the next digit\n        curr_num = arr[i] + arr[i-1]\n        # update the max number if the current number is greater than the max number\n        if curr_num > max_num:\n            max_num = curr_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list of digits in descending order\n    arr = sorted(arr, reverse=True)\n    # Initialize the maximum number to be formed as 0\n    max_num = 0\n    # Traverse through the sorted list and check if the current digit can be formed with the remaining digits\n    for digit in arr:\n        if max_num + digit > 9:\n            # If the current digit cannot be formed with the remaining digits, update the maximum number\n            max_num = max_num + digit - 9\n        else:\n            # If the current digit can be formed with the remaining digits, update the maximum number\n            max_num = max_num + digit\n    # Return the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x >= 0 and y >= 0) or (x <= 0 and y <= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    Parameters:\n        x: An integer\n        y: An integer\n\n    Returns:\n        True if the two integers have opposite sign, False otherwise.\n    \"\"\"\n    if x * y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0: #both negative numbers\n        return True\n    elif x>0 and y>0: #both positive numbers\n        return True\n    elif x<0 and y>0: #x negative, y positive\n        return True\n    elif x>0 and y<0: #x positive, y negative\n        return True\n    elif x==0 and y==0: #both are zero\n        return True\n    else: #neither positive nor negative\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check whether x and y have opposite signs or not\n    if x*y < 0: \n        print(\"The two integers have opposite signs.\")\n    else: \n        print(\"The two integers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return \"Both are positive\"\n    elif x < 0 and y < 0:\n        return \"Both are negative\"\n    elif x > 0 and y < 0:\n        return \"x is positive and y is negative\"\n    elif x < 0 and y > 0:\n        return \"x is negative and y is positive\"\n    else:\n        return \"Both have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    # check if both integers are positive or negative\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i**3)\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        octagonal = 1\n        while octagonal <= n:\n            triangular = 1\n            while triangular <= octagonal:\n                octagonal += triangular\n                triangular += 1\n        return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n + 1):\n        octagonal_number = 16 * i * i\n        if octagonal_number == n:\n            return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    limit = (n ** 2) + 1\n    for i in range(1, limit):\n        if i % 10 == 0:\n            print(i)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 10\n    c = 100\n    d = 1000\n    while n > 0:\n        if n % 2 == 0:\n            print(a)\n            n -= 2\n        else:\n            print(a+b)\n            n -= 4\n        a = a + c\n        b = b + d\n        c = c + 10\n        d = d + 100"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 1) ** 2\n\ndef find_nth_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 1:\n        print(1)\n    else:\n        print(is_octagonal(n - 1) + 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function checks whether the given number is an octagonal number or not.\n    \"\"\"\n\n    # check if n is odd\n    if n % 2 == 1:\n        return False\n\n    # calculate the square root of n\n    sqrt_n = int(n**0.5) + 1\n\n    # check if square root is an octagonal number\n    for i in range(sqrt_n, 1, -1):\n        if i * i == n:\n            return True\n\n    # check if the square root is an integer\n    if sqrt_n * sqrt_n == n:\n        return True\n\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_octagon_number(n):\n        # Initialize variables\n        octagon_count = 1\n        sum_of_squares = 1\n\n        while octagon_count < n:\n            octagon_count += 1\n            sum_of_squares += 4 * octagon_count - 3\n\n        return sum_of_squares\n\n    return get_octagon_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_numbers = [0]\n    i = 0\n    while i * (3 * i - 1) <= n:\n        octagonal_numbers.append(i * (3 * i - 1))\n        i += 1\n    return octagonal_numbers[-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the function\n    def octagon(n):\n        return (n * (3 * n - 1)) ** 2\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer.\")\n\n    # Check if n is less than or equal to 0\n    elif n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    # Calculate the nth octagonal number\n    else:\n        return octagon(n)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the count of substrings with each length\n    count_dict = defaultdict(int)\n    \n    # iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            \n            # extract the substring and compute its sum of digits\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # check if the sum of digits is equal to its length\n            if digit_sum == len(substring):\n                count_dict[len(substring)] += 1\n    \n    # return the count of substrings with sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with a given digit sum\n    digit_sum_substrings = defaultdict(int)\n\n    # Iterate through all the substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n\n            # Check if the digit sum is equal to the length of the substring\n            if substring_sum == len(s[i:j+1]):\n                # Increment the count for the substring with the given digit sum\n                digit_sum_substrings[substring_sum] += 1\n\n    # Return the count of substrings with the given digit sum\n    return digit_sum_substrings[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[ord(char)] += 1\n    count = 0\n    for length in range(1, len(s) + 1):\n        total = sum(digit_count[ord(s[i])] for i in range(len(s) - length + 1))\n        count += total\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings with the given sum of digits\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings of the string s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count_dict[substring] += 1\n\n    # Return the count of substrings with the given sum of digits\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(x) for x in s[i:j]) == len(str(len(s))):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            digits_sum = sum(digits)\n            if digits_sum == len(digits):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, s[i:j+1])) == j-i+1:\n                count[j] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize an empty dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n    \n    # Iterate over each substring of the input string\n    for i in range(len(s)):\n        # Extract the substring\n        substring = s[i:i+len(str(len(s)))]\n        \n        # Check if the substring has a sum of digits equal to its length\n        if sum(int(d) for d in substring) == len(substring):\n            # Increment the count of substrings\n            count_dict[substring] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(c) for c in s[i:j+1]) == j-i+1:\n                dp[j] += 1\n    return dp[n-1]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest_num to the first element of the list\n    smallest_num = xs[0]\n    # loop through the rest of the list\n    for i in range(1, len(xs)):\n        # if the current element is smaller than the smallest_num, update smallest_num\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    # return the smallest_num\n    return smallest_num"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first number in the list\n    smallest = xs[0]\n    # Loop through the rest of the list\n    for num in xs[1:]:\n        # If the current number is smaller than the smallest number, update it\n        if num < smallest:\n            smallest = num\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list and returns it.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize a variable to store the maximum difference\n    max_diff = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current tuple and the next tuple\n        diff = test_list[i][1] - test_list[i+1][0]\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort(key=lambda x: x[0]-x[1])\n    return pairs[-1][0]-pairs[0][0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    diff_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff_list.append(abs(test_list[i][1] - test_list[j][1]))\n    return max(diff_list)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return None\n    \n    # initialize variables\n    max_diff = float('-inf')\n    min_val = test_list[0]\n    \n    # iterate through the list and find the maximum difference and minimum value\n    for i in range(n):\n        if i == 0:\n            if min_val < test_list[i+1][0]:\n                min_val = test_list[i+1][0]\n        elif i == n-1:\n            if min_val < test_list[i-1][0]:\n                min_val = test_list[i-1][0]\n        else:\n            if min_val < test_list[i][0]:\n                min_val = test_list[i][0]\n        \n        if min_val > max_diff:\n            max_diff = min_val - test_list[i-1][0]\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a list to store the minimum values\n    min_list = []\n\n    # Iterate over the given list of tuples\n    for i in range(len(test_list)):\n        # Check if the minimum value is greater than the current value\n        if min_list == [] or min_list[-1] > test_list[i][0]:\n            min_list.append(test_list[i][0])\n\n        # Check if the minimum value is greater than the next value\n        if min_list[-1]!= test_list[i][1] and min_list[-1] < test_list[i][1]:\n            min_list.pop()\n            min_list.append(test_list[i][1])\n\n    # Calculate the maximum difference between the minimum values\n    max_diff = min_list[-1] - min_list[0]\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf') # Initialize the max difference to negative infinity\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    # return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        return [item for sublist in lst for item in flatten(sublist)] if isinstance(lst, list) else [lst]\n\n    def sum_elements(lst):\n        return sum(flatten(lst))\n\n    return sum_elements(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError('Input must be a list')\n    if not data_list:\n        return 0\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        '''\n        Helper function to flatten a list recursively.\n        '''\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            result.append(lst)\n\n    result = []\n    flatten(data_list)\n    return sum(result)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements recursively.\n    '''\n    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = set(range(1, n+1))\n    ways = 0\n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            bell_set.remove(i)\n            ways += len(bell_set)\n            bell_set.add(i)\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        raise ValueError('Negative Bell numbers are not allowed.')\n\n    bell_numbers = [0, 1] + [0] * (n - 1)\n\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            bell_numbers[j] += bell_numbers[i - 1] * bell_numbers[j - 1]\n\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Bell numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55,...\n    bell_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    num_ways = 1\n\n    # Find the number of ways to partition a set of Bell numbers\n    for i in range(1, n+1):\n        num_ways *= (i*i) // (2*bell_numbers[i-1])\n\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize variables to store the number of ways and the number of partitions\n    ways = 0\n    partitions = 1\n    \n    # Iterate over each digit of n (from right to left)\n    for digit in str(n):\n        # Calculate the number of ways to partition the current digit\n        ways += (partitions * int(digit))\n        # Increment the number of partitions for the next iteration\n        partitions *= (int(digit) + 1)\n    \n    # Return the final value of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the count of ways to partition to zero\n    ways = 0\n    # loop through all possible values of i from 0 to n\n    for i in range(n+1):\n        # loop through all possible values of j from 0 to i\n        for j in range(i+1):\n            # if i and j form a valid partition, add 1 to the count of ways to partition\n            if j == 0 or i == j:\n                ways += 1\n    # return the count of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    ways = 0\n    bell_count = 0\n    max_bell = 0\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the Bell number for each number i\n        bell = int(i*(n-i+1)//2)\n        \n        # If the current Bell number is greater than the current maximum, update the maximum\n        if bell > max_bell:\n            max_bell = bell\n        \n        # If the current Bell number is equal to the current maximum, increment the ways\n        elif bell == max_bell:\n            ways += 1\n        \n        # If the current Bell number is less than the current maximum, increment the bell count\n        else:\n            bell_count += 1\n    \n    # Return the total number of ways to partition the set of Bell numbers\n    return ways - bell_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables to store the number of ways to partition the set of Bell numbers\n    ways = [1] * (n + 1)\n    ways[0] = 1\n    ways[1] = 1\n\n    # Iterate through the set of Bell numbers from 2 to n\n    for i in range(2, n + 1):\n        # Count the number of ways to partition the current set of Bell numbers\n        ways[i] = sum([ways[j] * ways[i - j] for j in range(1, i + 1)])\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers\n    num_ways = 1\n    # Iterate over all possible indices of the set of Bell numbers\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers up to index i\n        ways = 0\n        # Iterate over all possible ways to partition the set of Bell numbers up to index i\n        for j in range(i+1):\n            # If the sum of the two parts is equal to the Bell number itself, increment the ways counter\n            if i+j == j:\n                ways += 1\n        # Multiply the current ways counter by the number of ways to partition the set of Bell numbers up to index i\n        num_ways *= ways\n    # Return the final number of ways to partition the set of Bell numbers\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    # Helper function to calculate the number of ways to partition a set of Bell numbers\n    def count_partitions(balls, target):\n        if target == 0:\n            return 1\n        if target < 0:\n            return 0\n        if target == 1:\n            return balls + 1\n        return sum(count_partitions(balls, target - i) for i in range(1, balls+1))\n    \n    # Calculate the sum of the first n Bell numbers\n    bell_numbers = [i for i in range(1, n+1)]\n    total_sum = sum(bell_numbers)\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return count_partitions(len(bell_numbers), total_sum)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = 0\n    \n    # Iterate over the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Initialize the number of ways to partition the current Bell number\n        curr_ways = 0\n        \n        # Iterate over the numbers from 1 to i-1\n        for j in range(1, i):\n            \n            # Check if the current number can be formed by adding the current Bell number to it\n            if i % j == 0:\n                \n                # Increment the number of ways to partition the current Bell number\n                curr_ways += 1\n                \n        # Add the number of ways to partition the current Bell number to the total number of ways to partition the set\n        ways += curr_ways\n    \n    # Return the total number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic or False otherwise.\n    A monotonic array is an array where any adjacent elements are either all increasing or all decreasing.\n    '''\n    if len(A) < 2: # check if array has at least two elements\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]: # check if current element is greater than next element\n            return False\n        elif A[i] < A[i+1]: # check if current element is less than next element\n            return True\n    \n    return True # if all elements are either increasing or decreasing, return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    \n    # Check if the array has at least two elements\n    if len(A) < 2: \n        return False\n    \n    # Iterate over the array and compare each element with the previous element\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    \n    # If we reach this point, the array is monotonic and we return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    # If the array is already sorted, check if it is monotonic or not.\n    if A[0] < A[-1]: # if it is ascending order\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]: # check if the array is monotonic\n                return False\n        return True\n    elif A[0] > A[-1]: # if it is descending order\n        for i in range(len(A)-1):\n            if A[i] < A[i+1]: # check if the array is monotonic\n                return False\n        return True\n    else: # if the array is not sorted\n        A.sort()\n        if A[0] < A[-1]: # if it is ascending order\n            for i in range(len(A)-1):\n                if A[i] > A[i+1]: # check if the array is monotonic\n                    return False\n            return True\n        elif A[0] > A[-1]: # if it is descending order\n            for i in range(len(A)-1):\n                if A[i] < A[i+1]: # check if the array is monotonic\n                    return False\n            return True\n        else: # if the array is neither ascending nor descending order\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    else:\n        if A[0] <= A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] > A[i+1]:\n                    return False\n            return True\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] < A[i+1]:\n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    \n    elif A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    \n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    # initialize variables\n    n = len(A)\n    inc = 1\n    dec = 1\n\n    # check if the array is increasing or decreasing\n    for i in range(n-1):\n        if A[i] >= A[i+1]:\n            inc = 0\n        elif A[i] <= A[i+1]:\n            dec = 0\n\n    # return the result based on the initial values\n    if inc and dec:\n        return \"Increasing and Decreasing\"\n    elif not inc and not dec:\n        return \"Neither Increasing nor Decreasing\"\n    elif inc and not dec:\n        return \"Increasing\"\n    else:\n        return \"Decreasing\""
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n\n    :param A: The array to be checked for monotonicity\n    :return: True if the array is monotonic, False otherwise.\n    \"\"\"\n\n    if len(A) <= 1:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and checks whether it is monotonic or not.\n\n    It returns True if the array is monotonic, False otherwise.\n\n    A monotonic array is one in which the elements are either increasing or decreasing.\n\n    If the array is monotonic, then for all i, j, and k, we have:\n\n    - If i < j and A[i] < A[j], then A[i] < A[k] for all k >= i.\n    - If i > j and A[i] > A[j], then A[i] > A[k] for all k <= i.\n\n    Example:\n\n    A = [1, 2, 2, 3, 4]\n    is_Monotonic(A)\n    # Output: True\n\n    A = [6, 5, 4, 3, 2]\n    is_Monotonic(A)\n    # Output: False\n\n    A = [1, 1, 1]\n    is_Monotonic(A)\n    # Output: True\n\n    A = [1, 2, 4, 8]\n    is_Monotonic(A)\n    # Output: False\n    '''\n\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if array is empty\n    if len(A) == 0:\n        return True\n    \n    # Check if array contains only one element\n    if len(A) == 1:\n        return True\n    \n    # Check if array is monotonic\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    n = len(Input)\n    for i in range(n):\n        if len(Input[i])!= n:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples in the list have the same length and False otherwise.\n    '''\n    # Check if the list is empty or not\n    if len(Input) == 0:\n        return True\n    \n    # Initialize a variable to store the length of the first tuple\n    length = len(Input[0])\n    \n    # Iterate over the list of tuples\n    for i in range(1, len(Input)):\n        # Check if the current tuple has the same length as the first tuple\n        if len(Input[i])!= length:\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have the same length\n    all_lengths_equal = all(len(t) == len(Input[0]) for t in Input)\n    # Return the result\n    return all_lengths_equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple\n    length = len(Input[0])\n    \n    # Loop through all the tuples in the input list\n    for tup in Input:\n        # Check if the length of each tuple is equal to the length of the first tuple\n        if len(tup)!= length:\n            # If not, return False\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function checks whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(Input) == 0:\n        return True\n    if len(set(len(x) for x in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = len(nums) // 2\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n // 2\n\n    # Main loop\n    while gap > 0:\n        # Insertion sort for every gap\n        for i in range(gap, n):\n            key = nums[i]\n            j = i\n            while j >= gap and nums[j-gap] > key:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = key\n\n        # Decrease gap\n        gap //= 1\n\n    # Print the sorted array\n    print(\"Sorted array is: \", nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    gap = len(nums) // 2\n    while gap > 0:\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n        if sorted:\n            break\n        gap = len(nums) // 2\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        sorted = True\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n\n        if sorted:\n            break\n\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    while gap > 1 or gap < n:\n        if gap == n:\n            gap = 1\n        else:\n            gap = n // gap\n        for i in range(gap, n):\n            for j in range(i):\n                if nums[j] > nums[j + gap]:\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    count = 0\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        swapped = False\n\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        count += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    step = 1\n\n    while swapped:\n        swapped = False\n\n        for i in range(step, n):\n            if nums[i] < nums[i - step]:\n                nums[i], nums[i - step] = nums[i - step], nums[i]\n                swapped = True\n\n        step *= 1.3\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # To check if n is a difference of two squares\n    i = 1\n    while i*i <= n:\n        if n == i*i + i*i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n**0.5)\n    b = n - a**2\n    if a**2 == b:\n        print(a, \"can be represented as the difference of two squares\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n ** 0.5) + 1):\n        if i ** 2 + i ** 2 == n:\n            return True\n        elif i ** 2 + i ** 2 < n:\n            for j in range(i + 1, int(n ** 0.5) + 1):\n                if j ** 2 + j ** 2 == n - i ** 2:\n                    return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the given number is divisible by 4\n    if n % 4 == 0:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if n is even\n    if n % 2 == 0:\n        return False\n\n    # find the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # check if sqrt_n can be represented as the difference of two squares\n    for i in range(2, sqrt_n):\n        if n % i == 0 and i!= sqrt_n:\n            return False\n        if n % (i ** 2) == 0 and i!= sqrt_n:\n            return False\n\n    # if n can be represented as the difference of two squares, then it must be a square\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    square = int(n**0.5)\n    return ((square - 1)**2 == n) or ((square + 1)**2 == n)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return False\n\n    # Find the square of the number\n    square = n * n\n\n    # Check if the square is a perfect square\n    if square == int(square ** 0.5 + 0.5):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a power of 2 or not\n    def is_power_of_two(num):\n        return (num & (num-1)) == 0\n\n    # Check if n is a square or not\n    def is_square(num):\n        return (num & (num-1)) == 0\n\n    # Check if the difference of the squares of n and its multiples of 4 is a square or not\n    def is_diff_of_squares(num):\n        square = (num & (num-1)) == 0\n        multiples_of_4 = (num & (num-2)) == 0\n        return square and multiples_of_4\n\n    # Check if n is a power of 2 and a square or not\n    def is_power_of_two_and_square(num):\n        power_of_two = is_power_of_two(num)\n        square = is_square(num)\n        return power_of_two and square\n\n    # Check if n can be represented as the difference of two squares or not\n    if is_power_of_two_and_square(n):\n        return True\n    elif is_diff_of_squares(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # take input from user\n    num = int(input(\"Enter a number: \"))\n    # loop to check for divisibility of 2\n    for i in range(2, num):\n        if num % i == 0:\n            break\n    else:\n        # if loop completes without breaking, then the number is not divisible by 2\n        print(\"The given number is not divisible by 2.\")\n        return\n    # loop to check for divisibility of square of i\n    for j in range(2, num):\n        if i**2 % j == 0:\n            break\n    else:\n        # if loop completes without breaking, then the number is divisible by both 2 and square of i\n        print(\"The given number can be represented as the difference of two squares.\")\n        return\n    # if the above two loops completed without returning, then the number cannot be represented as the difference of two squares\n    print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Loop through all the numbers from 1 to n/2\n    for i in range(1, n//2+1):\n        # Calculate the square of i\n        square = i*i\n        # Check if the difference of square and n is equal to any number in the range [i+1, n]\n        if square+n in range(i+1, n):\n            return True\n        # Check if the difference of square and n is equal to any number in the range [n-i, n]\n        if square+n in range(n-i, n):\n            return True\n    # If no such difference is found, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the lengths of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize variables\n    prev_color = None\n    count = 0\n\n    # Loop through the patterns array and compare each color to the previous color\n    for pattern in patterns:\n        if pattern == prev_color:\n            count += 1\n        else:\n            prev_color = pattern\n            count = 1\n\n        # Check if the count exceeds the length of the colors array\n        if count > len(colors):\n            return False\n\n    # If the loop completes without returning False, it means the colors follow the patterns array\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i]!= colors[i+1] and patterns[i]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes in a list of colors and a list of patterns and returns True if all\n    patterns are the same length and all elements of each pattern are present in the list of colors.\n\n    Example:\n    colors = ['red', 'blue', 'green', 'yellow', 'orange']\n    patterns = [['red', 'green', 'blue'], ['blue', 'green', 'yellow'], ['orange']]\n    Output: True\n    \"\"\"\n\n    if len(patterns) == 0:\n        return False\n\n    if len(patterns[0])!= len(colors):\n        return False\n\n    for pattern in patterns:\n        if not all(color in colors for color in pattern):\n            return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # check if lengths of colors and patterns match\n    if len(colors)!= len(patterns):\n        return False\n    \n    # iterate through colors and patterns\n    for i in range(len(colors)):\n        \n        # check if colors[i] is in patterns[i]\n        if colors[i] not in patterns[i]:\n            return False\n        \n        # remove colors[i] from patterns[i]\n        patterns[i].remove(colors[i])\n    \n    # if all checks pass, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of the colors array matches the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if each color in the colors array matches one of the patterns in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize a dictionary to store the frequency of each color in the colors list\n    color_freq = {}\n    for color in colors:\n        if color in color_freq:\n            color_freq[color] += 1\n        else:\n            color_freq[color] = 1\n\n    # iterate through the patterns array and check if it follows the sequence\n    for pattern in patterns:\n        # initialize a variable to store the current color count in the pattern\n        curr_color_count = 0\n        # iterate through the pattern and count the current color frequency\n        for color in pattern:\n            if color in color_freq:\n                curr_color_count += color_freq[color]\n            else:\n                return False\n\n        # if the current pattern has less than 1 color in it, it doesn't follow the sequence\n        if curr_color_count < 1:\n            return False\n\n        # decrement the count of the current color from the frequency dictionary\n        for color in pattern:\n            if color in color_freq:\n                color_freq[color] -= 1\n            else:\n                return False\n\n    # if the function has made it this far, it means the pattern sequence is valid\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a set of the first K elements from each tuple in the list\n    tuples_dict = {}\n    for i in range(len(test_list)):\n        key = tuple(test_list[i][:K])\n        if key in tuples_dict:\n            tuples_dict[key].append(i)\n        else:\n            tuples_dict[key] = [i]\n    \n    # Create a set of all the indices for tuples with all elements divisible by K\n    result_set = set()\n    for key, indices in tuples_dict.items():\n        if all(test_list[i][j] % K == 0 for i in indices for j in range(K)):\n            result_set.update(indices)\n    \n    # Return the set of indices for the resultant tuples\n    return result_set"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a set to store the elements of each tuple\n    element_set = set()\n    # Loop through each tuple in the list\n    for i in test_list:\n        # Get the set of elements in the tuple\n        tuple_set = set(i)\n        # Check if the intersection of the two sets is equal to the set of elements divisible by k\n        if tuple_set.intersection(element_set) == set(range(1, K+1)):\n            return i\n        # Add the elements in the tuple to the set of elements\n        element_set.update(tuple_set)\n    return None"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list of tuples): A list of tuples.\n    K (int): A number which all elements of the tuples should be divisible by.\n\n    Returns:\n    list of tuples: A list of tuples which have all elements divisible by K.\n    \"\"\"\n    result = []\n    for i in test_list:\n        count = 0\n        for j in i:\n            if j % K!= 0:\n                count += 1\n                break\n        if count == len(i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as inputs, and returns a list of tuples \n    which have all elements divisible by K from the input list.\n    \n    Args:\n    - test_list: a list of tuples\n    - K: an integer\n    \n    Returns:\n    - a list of tuples which have all elements divisible by K from the input list\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input.\n    It returns a list of tuples where all elements in each tuple are divisible by K from the given list of tuples.\n    '''\n    # initialize an empty list to store the valid tuples\n    valid_tuples = []\n    \n    # loop through each tuple in the test list\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # if all elements are divisible by K, add the tuple to the valid_tuples list\n            valid_tuples.append(tup)\n    \n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input and returns a list of tuples which have all elements divisible by K from the input list.\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through the input list of tuples\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If the tuple is divisible by K, add it to the result list\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples that meet the criteria\n    matching_tuples = []\n\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the current tuple\n        for j in range(len(test_list[i])):\n            # check if the current element is divisible by K\n            if test_list[i][j] % K!= 0:\n                # if the current element is not divisible by K, skip to the next element in the tuple\n                continue\n            # if the current element is divisible by K, check if all other elements in the tuple are also divisible by K\n            else:\n                is_divisible = True\n                for k in range(len(test_list[i])):\n                    if k!= j and test_list[i][k] % K!= 0:\n                        is_divisible = False\n                        break\n                # if all other elements in the tuple are also divisible by K, append the tuple to the matching_tuples list\n                if is_divisible:\n                    matching_tuples.append(test_list[i])\n                    break\n\n    return matching_tuples"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        print(\"The number\", n, \"is divisible by 11.\")\n    else:\n        print(\"The number\", n, \"is not divisible by 11.\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is divisible by 11, else False.\n    \"\"\"\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Iterate over the words and check their lengths\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n        else:\n            return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into a list of words\n    words = s.split()\n\n    # loop through each word in the list\n    for word in words:\n\n        # check the length of the word\n        if len(word) % 2!= 0:\n            print(f\"{word} has an odd length\")\n        else:\n            print(f\"{word} has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    words = s.split() # split the sentence into words\n    for word in words: # iterate through each word\n        if len(word) % 2 == 0: # check if length of word is even\n            return False\n    return True # if all the words have odd length, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} has an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n\n    # Iterate through each word and calculate the length of the word\n    for word in words:\n        word_len = len(word)\n        # If the length of the word is odd, return True\n        if word_len % 2!= 0:\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 0: # check if the length of the word is even\n            return False # if the length of the word is even, return False\n    return True # if all the words have odd length, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split() \n    count = 0 \n    for i in word: \n        count += len(i) \n    if count % 2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the sentence into words\n    for word in words:\n        if len(word) % 2!= 0:  # check if the length of the word is odd\n            return False  # if it is, return False\n        else:\n            continue  # if it isn't, continue with the next word\n    return True  # if the loop completes without finding an odd word, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    # split the input string into words\n    words = s.split()\n\n    # iterate over each word and check its length\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            print(\"The length of the word '{}' is odd.\".format(word))\n        else:\n            print(\"The length of the word '{}' is even.\".format(word))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else False.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    # Calculate the nth tetrahedral number\n    while n > 0:\n        # Increment the value of a\n        a += 1\n\n        # Find the number of steps to go from a^2 + b^2 + c^2 to d^2\n        steps = 0\n        while a*a + b*b + c*c < d*d:\n            steps += 1\n\n        # Increment the value of a by steps\n        a += steps\n\n        # Increment the value of b by 2\n        b += 2\n\n        # Increment the value of c by 1\n        c += 1\n\n        # Decrement the value of d by 1\n        d -= 1\n\n        # Decrement n by 1\n        n -= 1\n\n    # Return the value of d\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return 2 * n * (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4*n*(n-1)*(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) - tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 20\n    elif n == 3:\n        return 64\n    else:\n        return 256 * tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def cube(x):\n        return x*x*x\n\n    def cubed(x):\n        return cube(x) * x\n\n    return 1 + 8*n*n*n + 27*cubed(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4*n + 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables for the sum and number of pairs\n    sum = 0\n    count = 0\n    \n    # Iterate through the values of n\n    for i in range(1, n+1):\n        # Calculate the sum of the i-th tetrahedral number\n        # and add it to the sum\n        sum += (i * (i-1)) // 2\n        \n        # Add 1 to the count if the i-th tetrahedral number is even\n        if i % 2 == 0:\n            count += 1\n    \n    # Return the sum divided by the count\n    return sum / count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t_num = 1\n    while True:\n        if is_tetrahedral(t_num):\n            return t_num\n        t_num += 1\n        \ndef is_tetrahedral(num):\n    '''\n    Write a function to check if a number is a tetrahedral number.\n    '''\n    a, b, c, d = 0, 1, 2, 3\n    while d <= num:\n        a += 1\n        b *= 2\n        c *= 3\n        d *= 4\n    return a * b * c * d == num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    else:\n        return 4 * n - 1"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Convert radius from meters to centimeters\n    r = r * 100\n    \n    # Calculate the volume using formula: V = 4/3 * pi * r^3\n    volume = (4 / 3) * math.pi * (r ** 3)\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the volume of the sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function calculates the volume of a sphere with a given radius.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    # Calculate the volume of a sphere using the formula: V = (4/3) * pi * r^3\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = sum([ord(char) for char in strr]) % 26\n    char = chr(ascii_val + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char %= 26\n    return chr(char + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for i in range(len(strr)):\n        char_val += ord(strr[i])\n    return chr((char_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum([ord(c) for c in strr])\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values of characters\n    sum_of_ASCII = 0\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ASCII_val = ord(char)\n        # Add the ASCII value to the sum\n        sum_of_ASCII += ASCII_val\n\n    # Return the character made by adding ASCII values of all characters modulo 26\n    return chr((sum_of_ASCII % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0  \n    for char in strr:  \n        result = (result + ord(char)) % 26  \n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in range(len(strr)):\n        ascii_value += ord(strr[i])\n\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    result %= 26\n    if result < 10:\n        result = chr(65 + result)\n    else:\n        result = chr(97 + result - 10)\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # convert the string to a list of characters\n    char_list = list(strr)\n    # initialize the sum variable to 0\n    char_sum = 0\n    # loop through the list and add the ASCII value of each character to the sum\n    for char in char_list:\n        char_sum += ord(char)\n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sum(sequence[-2:]) + sequence[-1])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        if (i % 2 == 0):\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "We can start the sequence with F(0) = 0 and F(1) = 1, and use this formula to calculate the next number in the sequence. We can initialize a variable 'a' to store the previous two numbers in the sequence and initialize a variable 'b' to store the current number in the sequence. Finally, we can return the value of 'b' at the end of the loop. Here's the Python code for this:"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] + 2 * sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway = [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with the first two terms\n    sequence = [0, 1]\n    # loop through the remaining terms\n    for i in range(2, n + 1):\n        # calculate the next term\n        next_term = (sequence[i-1] + sequence[i-2]) % 2\n        # add the next term to the sequence\n        sequence.append(next_term)\n    # return the nth term of the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            a = a + b\n            b = 0\n        else:\n            b = a + b\n            a = 0\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers\n    sequence = [1, 2]\n\n    # Loop through the sequence n-1 times\n    for i in range(2, n):\n        # Generate the next number in the sequence\n        next_number = (sequence[i-1] + sequence[i-2]) % 2\n\n        # Add the next number to the sequence\n        sequence.append(next_number)\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Define the surface area of a sphere\n    surface_area = 4 * math.pi * r ** 2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r**2)\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(2, n+1):\n        a = a + 6*b\n        c = c + 2*a + 1\n        b = b + 2*c\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    num = 1\n    center = 1\n    hexagonal_number = 1\n\n    # Loop through the nth centered hexagonal number\n    for i in range(n):\n        # Add the current centered hexagonal number to the total\n        hexagonal_number += num\n        # Divide the number by 2 to move to the next centered hexagonal number\n        num += 2\n        # If the number is greater than the center, divide by 2 again to move to the next center\n        if num > center:\n            num //= 2\n            center += 1\n\n    # Return the nth centered hexagonal number\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Base case: if n = 1, return 1\n    if n == 1:\n        return 1\n    \n    # Calculate the previous centered hexagonal number\n    previous_centered_hexagonal_number = centered_hexagonal_number(n-1)\n    \n    # Calculate the next centered hexagonal number\n    next_centered_hexagonal_number = (previous_centered_hexagonal_number*3)//2 + previous_centered_hexagonal_number\n    \n    return next_centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (3*n - 1) ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function finds the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The index of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    # The formula for centered hexagonal numbers is:\n    # Cn = 2*n*(2*n-1) - 1\n    # We first calculate the formula for the first centered hexagonal number:\n    # C1 = 2*1*(2*1-1) - 1 = 2\n    # Then we calculate the formula for the nth centered hexagonal number using the formula:\n    # Cn = 2*n*(2*n-1) - 1\n    # We can calculate the formula for Cn using a nested loop, where we iterate through the numbers from 1 to n.\n    # We start by initializing Cn to 2, since C1 is already known.\n    # We then calculate the formula for Cn using the formula: Cn = 2*n*(2*n-1) - 1\n    # We start by multiplying n by 2 to get the value of 2n.\n    # We then subtract 1 from the value of 2n to get the value of (2n-1).\n    # We add 2 to get the value of 2(2n-1), since the formula for centered hexagonal numbers states that each Cn is centered on a hexagon.\n    # Finally, we subtract 1 to get the value of Cn.\n    centered_hexagonal = 2\n    for i in range(2, n+1):\n        centered_hexagonal = 2 * centered_hexagonal * (centered_hexagonal - 1) - 1\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Calculate the base number\n    base = 2 * n - 1\n\n    # Calculate the number of rows\n    rows = (base * (base + 1)) // 2\n\n    # Calculate the number of spaces\n    spaces = (rows - n) // 2\n\n    # Print the centered hexagonal number\n    print(' '*spaces + '1'*(base*n//2))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    The centered hexagonal number is defined as:\n\n    Hn = n^2 + 2n + 1\n\n    where n is an integer.\n\n    This function uses the formula Hn = n^2 + 2n + 1 to compute the nth centered hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the number of rows and columns in the centered hexagonal grid\n    rows = n // 2\n    cols = n - rows * 2\n    \n    # Initialize the counter variable\n    count = 1\n    \n    # Iterate through each row and column in the centered hexagonal grid\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the value of the current centered hexagonal number\n            val = (2 * (i + j)) + 1\n            \n            # If the value is greater than n, return n\n            if val > n:\n                return n\n            \n            # Add the value to the counter variable\n            count += val\n    \n    # If the counter variable is less than n, return the counter variable\n    if count < n:\n        return count\n    \n    # If the counter variable is equal to n, return n\n    else:\n        return n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = 0\n    centered_hexagonal_num = 0\n    \n    if n == 1:\n        return 1\n    \n    for i in range(1, n+1):\n        hexagonal_num += 2**(i-1)\n    \n    centered_hexagonal_num = hexagonal_num - 2**(n-1)\n    \n    return centered_hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1]\n    i = 1\n    while len(hexagonal_numbers) < n:\n        if i % 2 == 0:\n            hexagonal_numbers.append(2 * hexagonal_numbers[-1])\n        else:\n            hexagonal_numbers.append(3 * hexagonal_numbers[-1])\n        i += 1\n    return hexagonal_numbers[-1]"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries as input and returns a single dictionary that contains all the key-value pairs from all three dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n\n    # Merge the three dictionaries into a single dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries into a new dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    # Merge the merged dictionary with the third dictionary\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine all dictionaries into one using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy() # Make a copy of the first dictionary\n    merged_dict.update(dict2) # Update the merged dictionary with the second dictionary\n    merged_dict.update(dict3) # Update the merged dictionary with the third dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary that maps each element in the list\n    to its frequency in the list.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through the list and update the frequency dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # return the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements of the list and the values are their frequency in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n            \n    # return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    closest = nums[0]\n    for num in nums:\n        if num < closest:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # initialize variables\n    smaller = N\n    larger = N + 1\n    closest = N\n    \n    # loop through all numbers between N and N+9\n    for num in range(N-9, N+10):\n        # if the current number is smaller, update smaller\n        if num < smaller:\n            smaller = num\n            closest = num - 1\n            \n        # if the current number is larger, update larger\n        elif num > larger:\n            larger = num\n            closest = num + 1\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function finds the closest smaller number than n using binary search algorithm.\n    \"\"\"\n    left, right = 1, N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid < N:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    # find the minimum number in the given list\n    min_num = min(N)\n\n    # loop through the list to find the closest smaller number\n    closest_num = min_num\n    for num in N:\n        if num < min_num:\n            closest_num = num\n            min_num = num\n\n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while n > 1:\n        n = (n + 1) // 2\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N+1))\n    closest_num = min(nums)\n    for num in nums:\n        if num < closest_num:\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n\n    # Iterate through all numbers from 1 to n-1\n    for num in range(1, N):\n        # If the current number is smaller than the smallest number found so far, update both smallest and closest\n        if num < smallest:\n            smallest = num\n            closest = num\n        # If the current number is between the smallest and the closest numbers, update only closest\n        elif num - closest >= smallest - closest:\n            closest = num\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf') # initialize smallest to infinity\n    for i in range(1, N+1):\n        if abs(i - N) < abs(smallest - N):\n            smallest = i # update smallest if current number is closer\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        print(n)\n        if n-1 <= 0:\n            return n\n        elif n-2 <= 0:\n            return n-1\n        else:\n            n -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for num in range(N-1, -1, -1):\n        if num < closest:\n            closest = num\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in list1:\n        if len(i) > longest:\n            longest = len(i)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list as input and returns the length of the longest word in the list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for i in list1:\n        words.append(i.split())\n    longest = max(len(word) for word in words)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list) or not isinstance(sub_str, str):\n        return False\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list to a set to remove duplicate values\n    str1 = set(str1)\n    # Convert the substring to a set to remove duplicate values\n    sub_str = set(sub_str)\n    # Loop through each string in the list\n    for item in str1:\n        # Check if the substring is present in the current string\n        if sub_str.issubset(set(item)):\n            return True\n    # If the substring is not found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # check if sub_str is a substring of str1\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = [str1]\n    for item in lst:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Parameters:\n    str1 (list): List of strings to check for a substring in.\n    sub_str (str): String to search for in the list of strings.\n\n    Returns:\n    bool: True if the string is found in the list, False otherwise.\n    \"\"\"\n    for string in str1:\n        if string.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if i**2 == n:\n                return True\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return \"The number is odd.\"\n    else:\n        return \"The number is even.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1 or n == 2:\n        return True\n    else:\n        return is_undulating(n-1) and is_undulating(n-2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check for even number of digits\n    if len(str(n)) % 2 == 0:\n        return \"The number is not undulating.\"\n    else:\n        # Convert the number to a string and count the number of digits\n        count = sum(1 for _ in str(n))\n        # Check if the count is odd or even\n        if count % 2 == 0:\n            return \"The number is undulating.\"\n        else:\n            return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: \n        return \"Number should be greater than zero.\"\n    elif n == 1: \n        return \"Number is undulating.\"\n    else: \n        return \"Number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if it is undulating, and False otherwise.\n\n    An undulating number is a positive integer that is a multiple of 3 or 5. \n    For example, 15 is undulating because it is divisible by both 3 and 5, but 14 is not because it is divisible only by 3.\n    \"\"\"\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) * power(a, b // 2)\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    minimum_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum_value:\n            index = i\n            minimum_value = test_list[i][1]\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Extract the first value of the smallest tuple\n    minimum = sorted_list[0][0]\n\n    return minimum"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sorting the list of tuples based on the second element of each tuple using the sorted() function\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Returning the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_val = float('inf')\n    for i, (val1, val2) in enumerate(test_list):\n        if val2 < min_val:\n            min_val = val2\n            min_index = i\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize a variable to store the minimum length found so far\n    min_length = float('inf')\n\n    # loop through each sub-list in the list of lists\n    for sub_list in lst:\n        # find the length of the current sub-list\n        length = len(sub_list)\n        # update the minimum length if necessary\n        if length < min_length:\n            min_length = length\n\n    # return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list of lists.\n    '''\n\n    min_length = float('inf')\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the smallest length found so far\n    smallest_length = float('inf')\n\n    # Loop through each list in the input list\n    for sublist in lst:\n        # If the length of the current sublist is smaller than the current smallest length, update the smallest length\n        if len(sublist) < smallest_length:\n            smallest_length = len(sublist)\n\n    # Return the smallest length found\n    return smallest_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # initializing the count variable to 0\n    count = 0\n\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # check if the number i is divisible by n\n        if n % i == 0:\n\n            # if it is, increment the count variable\n            count += 1\n\n    # return the count variable as the result\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n\n    Args:\n        n (int): the integer whose divisors we want to find\n\n    Returns:\n        int: the number of divisors of n\n    \"\"\"\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i*i == n:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [num for sublist in list1 for num in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for num in flat_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency\n    frequency = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in frequency:\n            frequency[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            frequency[element] = 1\n\n    # Return the frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for i in list1:\n        # check if the element is already in the dictionary\n        if i in freq_dict:\n            # increment the frequency count of the element\n            freq_dict[i] += 1\n        else:\n            # if the element is not in the dictionary, add it with a frequency count of 1\n            freq_dict[i] = 1\n    \n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for item in list1:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    else:\n        return numbers[0] * multiply_num(numbers[1:])"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    # divide the result with the length of the list\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal number to binary using bitwise operators\n    binary = \"\"\n    while n > 0:\n        binary = str(n & 1) + binary\n        n = n >> 1\n    \n    # Remove leading zeros and return the binary string\n    binary = binary.lstrip(\"0\")\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0' \n    else: \n        binary = '' \n        while n > 0: \n            binary = str(n % 2) + binary \n            n = n // 2 \n        return binary "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Reverse the digits of the number to find its palindrome\n    reverse_num = int(str(num)[::-1])\n    reverse_str = str(reverse_num)\n    \n    # Calculate the difference between the original number and its reverse\n    diff = abs(num - reverse_num)\n    \n    # Check if the difference is even or odd\n    if diff % 2 == 0:\n        # If the difference is even, find the next even number greater than the original number\n        next_num = num + 2\n    else:\n        # If the difference is odd, find the next odd number greater than the original number\n        next_num = num + 1\n        \n    # Convert the next number to a string and return the integer value\n    next_str = str(next_num)\n    return int(next_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_palindrome(n):\n        if is_palindrome(n):\n            return n + 1\n        else:\n            return next_palindrome(n + 1)\n\n    def next_prime(n):\n        if n == 2:\n            return 3\n        else:\n            return next_prime(n + 2)\n\n    if is_palindrome(num):\n        return num + 1\n    else:\n        return next_palindrome(num)\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Check if the number is even or odd\n    if num % 2 == 0:\n        # If even, find the next odd number\n        next_num = num + 1\n    else:\n        # If odd, find the next even number\n        next_num = num - 1\n        \n    # Convert the next number to a string and reverse it\n    next_num_str = str(next_num)\n    reversed_next_num_str = next_num_str[::-1]\n    \n    # Convert the reversed next number back to an integer and return it\n    return int(reversed_next_num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Remove all non-numeric characters from the string\n    num_str = ''.join(c for c in num_str if c.isdigit())\n    # Check if the string is a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, return the next largest palindrome\n        return int(num_str + str(9*(int(num_str)+1)))\n    # Otherwise, return the next smallest palindrome\n    return int(str(9*(int(num_str)+1)) + num_str[::-1])"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer,\n    returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Check if a number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    # Check if the input number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n\n    # Check if the input number is smaller than 10^4\n    if num < 10**4:\n        # Generate all palindromes between 10^4 and 10^6 (inclusive)\n        for i in range(10**4, 10**6):\n            # Check if the generated palindrome is smaller than the input number\n            if is_palindrome(i) and i < num:\n                return i\n\n    # Check if the input number is larger than 10^6\n    if num > 10**6:\n        # Generate all palindromes between 10^4 and 10^6 (inclusive)\n        for i in range(10**6, 10**8):\n            # Check if the generated palindrome is larger than the input number\n            if is_palindrome(i) and i > num:\n                return i\n\n    # If no palindrome found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        s = str(num)\n        for i in range(len(s)//2):\n            if s[i]!= s[-i-1]:\n                return False\n        return True\n\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_palindrome(num):\n        '''\n        Helper function to generate a palindrome.\n        '''\n        while True:\n            s = str(num)\n            new_num = 0\n            for i in s:\n                new_num *= 10\n                new_num += int(i)\n            if new_num > num:\n                break\n            num = new_num\n        return num\n\n    def is_valid_next_palindrome(num):\n        '''\n        Helper function to check if a number is a valid next palindrome.\n        '''\n        next_num = generate_palindrome(num)\n        if is_palindrome(next_num) and is_prime(next_num):\n            return True\n        return False\n\n    def next_valid_palindrome(num):\n        '''\n        Main function to find the next smallest valid palindrome.\n        '''\n        next_num = generate_palindrome(num)\n        while not is_valid_next_palindrome(next_num):\n            next_num = generate_palindrome(next_num)\n        return next_num\n\n    return next_valid_palindrome(num)\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        try:\n            num = int(sys.argv[1])\n        except ValueError:\n            print(\"Error: argument must be an integer.\")\n            sys.exit(1)\n    else:\n        num = 100\n    print(\"Next smallest palindrome:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input is a palindrome\n    if str(num) == str(num)[::-1]:\n        # if the input is a palindrome, get the next smallest palindrome starting from num+1\n        next_num = num + 1\n    else:\n        # if the input is not a palindrome, get the smallest palindrome starting from 1000\n        next_num = 1000\n\n    while True:\n        # check if the next smallest palindrome is greater than the input\n        if next_num > num:\n            # if it is, return the next smallest palindrome\n            return next_num\n        # if it is not, increase next_num by 10\n        next_num += 10"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    \n    # Function to check if a number is palindrome or not\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Find the next smallest palindrome by checking all possible palindromes of the given number\n    for i in range(10, 100):\n        for j in range(10, 100):\n            if i * j == num and is_palindrome(i * j):\n                return (i * j)\n            elif j * i == num and is_palindrome(j * i):\n                return (j * i)\n    \n    # If no palindrome is found, return -1 to indicate that no palindrome exists\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return next_smallest_palindrome(num*10)\n    else:\n        digits = [int(d) for d in str(num)]\n        n = len(digits)\n        k = 0\n        while n > 1:\n            k += n - 1\n            n -= 1\n            if digits[k] < digits[n]:\n                break\n        k += 1\n        if digits[k] > 9:\n            digits[k] = 0\n            k += 1\n        for i in range(k, n):\n            digits[i] += 1\n            if digits[i] < 10:\n                break\n        else:\n            digits[n] -= 1\n        n += 1\n        while n > 1:\n            if digits[n-1] == 0:\n                digits.pop(n-1)\n                n -= 1\n            else:\n                break\n        else:\n            digits[0] -= 1\n        return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Determine whether a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef is_valid_palindrome(num, target_length):\n    '''\n    Check whether a palindrome is within the specified length.\n    '''\n    return len(str(num)) <= target_length and is_palindrome(num)\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Ensure the input is a non-negative integer\n    num = abs(num)\n\n    # Find the smallest palindrome within the input range\n    if num % 10 == 0:\n        max_palindrome = num\n    else:\n        max_palindrome = num + 1\n\n    while not is_valid_palindrome(max_palindrome, 5):\n        max_palindrome += 1\n\n    # Find the next smallest palindrome after the max palindrome\n    min_palindrome = max_palindrome + 1\n    while not is_valid_palindrome(min_palindrome, 5):\n        min_palindrome += 1\n\n    return min_palindrome\n\ndef main():\n    input_num = int(input(\"Enter a non-negative integer: \"))\n    next_smallest = next_smallest_palindrome(input_num)\n    print(f\"Next smallest palindrome of {input_num} is {next_smallest}.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # Check if k is within the range of 1 to n\n    if k < 1 or k > n:\n        return \"Invalid index\"\n    # Use binary search to find the kth element\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return \"Invalid index\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid index.\")\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    for i in range(n):\n        if i == k - 1:\n            return arr[i]\n        elif i < k - 1 and i < n - 1:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input! k is greater than the length of the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = n-1\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] < arr[right]:\n                right = mid\n            else:\n                left = mid+1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if k == mid + 1:\n                return arr[mid]\n            elif k < mid + 1:\n                right = mid\n            else:\n                left = mid + 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty\n    if not arr:\n        return None\n    \n    # find the length of the array\n    n = len(arr)\n    \n    # check if the k is within the range of the array\n    if k < 1 or k > n:\n        return None\n    \n    # create a dictionary to store the frequencies of the elements in the array\n    freq = {}\n    for i in range(1, n+1):\n        freq[i] = arr.count(i)\n    \n    # find the kth smallest element using a min heap\n    min_heap = [(0, 1)]\n    for i in range(2, n+1):\n        if freq[i] > 0:\n            min_heap.append((i, freq[i]))\n    \n    # remove the kth smallest element from the min heap and return it\n    for i in range(k-1):\n        min_heap.pop(0)\n    return min_heap[0][0]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_words = []\n    for word in words:\n        if word.isupper():\n            camel_words.append(word)\n        else:\n            camel_words.append(word.capitalize())\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = []\n    word_list = word.split('_')\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case.append(word_list[i].lower())\n        else:\n            camel_case.append(word_list[i].capitalize())\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into individual parts using underscores as delimiters\n    parts = word.split('_')\n    \n    # Capitalize the first letter of each part and join them into a camel case string\n    camel_case_word = ''.join(part.capitalize() for part in parts)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    camel_case_words = []\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case_words.append(word.capitalize())\n        else:\n            camel_case_words.append(word.capitalize())\n    \n    # Join the words into a camel case string\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    capitalize = False\n    for char in word:\n        if char.isupper():\n            camel_case += char.lower()\n        else:\n            if capitalize:\n                camel_case += char.upper()\n            else:\n                camel_case += char.lower()\n                capitalize = True\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char =''\n    for char in word:\n        if char == '_':\n            prev_char = ''\n        else:\n            camel_case += prev_char.lower() + char.upper()\n            prev_char = char.lower()\n    camel_case = camel_case.capitalize()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the first column and the last row\n    a = [1] * (n + 1)\n    a[0] = 0\n\n    # Initialize the first row and the first column\n    b = [1] * (m + 1)\n    b[0] = 0\n\n    # Fill the rest of the matrix\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i] += a[i - 1] * b[j - 1]\n            b[j] += a[i - 1] * b[j - 1]\n\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of paths in the graph\n    paths = n * m\n    # Calculate the number of ways to reach each vertex\n    ways = (n - 1) * n + (m - 1) * m + n * m - n\n    # Calculate the Eulerian number\n    return paths / ways"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1 and m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # base cases\n    if n == 1 or m == 1:\n        return 1\n\n    # recursive case\n    else:\n        a = eulerian_num(n-1, m)\n        b = eulerian_num(n, m-1)\n        return a + b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif m == 0:\n        return 1\n    else:\n        return 4*n*m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of positions for each player\n    p1 = sum([i*m**i for i in range(n+1)])\n    p2 = sum([i for i in range(m+1)])\n\n    # Calculate the product of two numbers\n    product = p1 * p2\n\n    # Calculate the sum of the two numbers\n    sum_numbers = n * m\n\n    # Calculate the Eulerian number\n    eulerian = product // sum_numbers\n\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    # Step 1\n    sum_squares = (n * (n + 1) // 2) * ((n + 1) * (n + 2) // 2)\n    # Step 2\n    sum_cubes = (m * (m + 1) // 2) * ((m + 1) * (m + 2) // 2)\n    # Step 3\n    euler_num = sum_cubes - sum_squares\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are positive integers\n    if not isinstance(n, int) or not isinstance(m, int) or n < 1 or m < 1:\n        raise ValueError('Both n and m must be positive integers.')\n\n    # Calculate a(n, m) using the formula a(n, m) = n^m\n    return n ** m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the variables\n    a = 0\n    b = 1\n\n    # Find the number of steps\n    for i in range(1, n+1):\n        a += b\n        b = a + m * (b - a)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n == 1 and m == 1:\n        return 1\n    elif n == 0 and m == 0:\n        return 0\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort each sublist\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist of strings in the input list\n    for sublist in input_list:\n        # sort the sublist using sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i is True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = list(test_tup)\n    test_tup.extend(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the given list to the given tuples\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # Append the list to the tuple\n    test_tup.append(test_list)\n\n    # Convert the tuple back to a tuple\n    test_tup = tuple(test_tup)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and tuples\n    new_list = test_list + list(test_tup)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert lists to tuples\n    test_tup = tuple(test_list)\n    # Append list to tuple\n    test_tup += tuple(test_list)\n    # Return new tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the test_list to a set to remove duplicates\n    test_list = set(test_list)\n    # Convert the test_list to a tuple\n    test_list = tuple(test_list)\n    # Append the test_list to the test_tup\n    test_tup += test_list\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Add the list to the tuple\n    test_tup = tuple(test_list + list(test_tup))\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of all three input lists\n    input_list = [num1, num2, num3]\n\n    # use heapify to convert the list into a max heap\n    heapq.heapify(input_list)\n\n    # create an empty list to hold the merged list\n    merged_list = []\n\n    # use heapq.heappop() to extract the maximum element from the heap\n    while input_list:\n        merged_list.append(heapq.heappop(input_list))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Use a min heap to keep track of the smallest elements in the three lists\n    min_heap = [float('-inf')] * (len(num1) + len(num2) + len(num3))\n    heapq.heapify(min_heap)\n    \n    # Add the elements of the three lists to the min heap\n    heapq.heappush(min_heap, num1[0])\n    heapq.heappush(min_heap, num2[0])\n    heapq.heappush(min_heap, num3[0])\n    \n    # Merge the sorted lists by popping the smallest element from the min heap\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create a list of tuples of the three lists\n    lst = [(num1[i] if i < len(num1) else None, num2[i] if i < len(num2) else None, num3[i] if i < len(num3) else None) for i in range(max(len(num1), len(num2), len(num3)))]\n\n    # use heapq to merge the tuples\n    heapq.heapify(lst)\n    merged_list = []\n    while lst:\n        item = heapq.heappop(lst)\n        if item[0] is not None:\n            merged_list.append(item[0])\n        if item[1] is not None:\n            merged_list.append(item[1])\n        if item[2] is not None:\n            merged_list.append(item[2])\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge num1 and num2\n    merged = num1 + num2\n    \n    # Create a min heap with num3\n    min_heap = []\n    heapq.heapify(min_heap)\n    heapq.heappush(min_heap, num3)\n    \n    # Merge the two heaps\n    merged = heapq.merge(merged, min_heap)\n    \n    # Convert the merged list back to a string and return it\n    return ''.join(map(str, merged))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two lists and sort them\n    merged_list = sorted(num1 + num2)\n    # Merge the sorted lists and sort them\n    merged_and_sorted_list = sorted(merged_list + num3)\n    return merged_and_sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    all_lists = num1 + num2 + num3\n    \n    # Use heapq to find the k smallest numbers from each list\n    smallest_num = heapq.nsmallest(3, all_lists)\n    \n    # Combine the three smallest numbers into a single sorted list\n    sorted_list = []\n    for num in smallest_num:\n        if num not in sorted_list:\n            sorted_list.append(num)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Create a min-heap from the combined list\n    heap = list(heapq.nsmallest(len(combined_list), combined_list))\n\n    # Combine the min-heap elements back into the original order\n    result = [heap.pop(0)]\n    while heap:\n        result.append(heap.pop(0))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Sort the lists\n    sorted_list = sorted(num1 + num2 + num3)\n\n    # Return the merged list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the merged list in ascending order\n    heapq.heapify(merged_list)\n    \n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # creating a list of all three lists\n    all_lists = [num1, num2, num3]\n    \n    # finding the maximum element in each list\n    max_list = [heapq.nsmallest(1, num) for num in all_lists]\n    \n    # merging the three lists by iterating over max_list and adding each element to a new list\n    merged_list = []\n    for num in max_list:\n        merged_list.extend(num)\n    \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to list of binary digits\n    digits = list(map(str, bin(int(s, 2))[2:]))\n    # Rotate the binary string the given number of times\n    digits.rotate(n)\n    # Count the number of odd digits in the rotated binary string\n    count = sum([1 for digit in digits if digit == '1'])\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize count to zero\n    count = 0\n    # convert the string to a binary string\n    binary_s = bin(int(s))[2:]\n    # if the binary string is odd length, add the first number to the end\n    if len(binary_s) % 2 == 1:\n        binary_s += '0'\n    # iterate through the string and count the odd numbers\n    for i in range(n):\n        # find the leftmost odd number in the string\n        leftmost_odd = 0\n        for j in range(len(binary_s)):\n            if int(binary_s[j]) % 2 == 1:\n                leftmost_odd = j\n                break\n        # shift the odd numbers to the right by one position\n        for j in range(len(binary_s)-leftmost_odd, leftmost_odd, -1):\n            binary_s = binary_s[:j] + '1' + binary_s[j+1:]\n        # count the number of odd numbers in the string\n        count += len(binary_s) - len(binary_s.replace('0', ''))\n    # return the count of odd numbers after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes two parameters: the binary string s and the number of rotations n.\n    It returns the number of odd numbers in the binary string after rotating it n times.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character in the binary string\n    for char in s:\n\n        # Check if the character is odd\n        if int(char) % 2!= 0:\n\n            # Increment the count variable\n            count += 1\n\n    # Return the count of odd numbers after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        temp = \"\"\n        for j in s:\n            temp += j\n        s = temp\n        if \"1\" in s:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    binary = list(map(int, bin(int(s, 2))[2:]))\n\n    # Rotate the list of digits n times\n    for _ in range(n):\n        temp = binary[0]\n        binary.insert(0, binary.pop())\n        binary.append(temp)\n\n    # Count the number of odd numbers in the rotated list of digits\n    count = sum(1 for num in binary if num % 2 == 1)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize an empty list to store the odd numbers\n    odd_nums = []\n\n    # rotate the binary string s n times\n    for i in range(n):\n        s = s[-1:] + s[:-1]\n\n    # iterate through the binary string s\n    for bit in s:\n        # if the bit is 1, add it to the odd_nums list\n        if bit == '1':\n            odd_nums.append(int(bit))\n\n    # return the number of odd numbers in odd_nums\n    return len(odd_nums)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # initialize an empty list to store the odd values\n    odd_list = []\n    \n    # initialize a variable to keep track of the count of odd values\n    count = 0\n    \n    # loop through each character in the binary string\n    for char in s:\n        \n        # convert the current character to an integer\n        current_char = int(char)\n        \n        # if the current character is odd, add it to the odd_list and increment the count variable\n        if current_char % 2!= 0:\n            odd_list.append(current_char)\n            count += 1\n            \n    # if the binary string has an odd number of characters, add the last odd value to the odd_list\n    if count % 2!= 0:\n        odd_list.append(odd_list[-1])\n        \n    # rotate the odd_list the given number of times\n    for i in range(n):\n        odd_list = odd_list[-len(odd_list):]\n        \n    # return the number of odd values in the rotated list\n    return len(odd_list)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # create an empty string to store the rotated binary string\n    rotated_binary = \"\"\n    # loop n times to rotate the binary string\n    for i in range(n):\n        # append the last character of the original binary string to the rotated binary string\n        rotated_binary += s[-1]\n        # remove the last character of the original binary string\n        s = s[:-1]\n    # loop through the rotated binary string and count the number of odd values\n    count = 0\n    for i in range(len(rotated_binary)):\n        if int(rotated_binary[i]) % 2!= 0:\n            count += 1\n    # return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    binary_list = [int(x) for x in s]\n    \n    # Use the modulo operator to rotate the binary list the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n    \n    # Count the number of odd digits in the rotated list\n    count = 0\n    for digit in binary_list:\n        if digit % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables to keep track of odd and even values\n    odd = 0\n    even = 0\n    \n    # loop through the binary string n times\n    for _ in range(n):\n        # convert the string to a list of binary digits\n        binary_list = [int(x) for x in list(s)]\n        \n        # rotate the list by 1 position to the left\n        binary_list = binary_list[1:] + [0]\n        \n        # convert the rotated list back to a binary string\n        s = ''.join([str(x) for x in binary_list])\n        \n        # count the number of odd values\n        odd += sum(1 for x in s if x == '1')\n    \n    # return the total number of odd values\n    return odd"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert all lists to sets to remove duplicates\n    nestedlist = set(item for sublist in nestedlist for item in sublist)\n    # Find the intersection of the sets\n    common = set.intersection(*nestedlist)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Step 1: Flatten the nested lists to a single list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n\n    # Step 2: Remove duplicates from the flattened list\n    unique_list = list(set(flat_list))\n\n    # Step 3: Sort the unique list in ascending order\n    unique_list.sort()\n\n    # Step 4: Return the first element of the unique list\n    return unique_list[0]"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        set2 = set(nestedlist[i])\n        set1 &= set2\n    return list(set1)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n\n    for i in range(len(nestedlist)):\n        for j in range(i + 1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common.append((nestedlist[i], nestedlist[j]))\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a list of lists as input, and returns a list of common elements in the nested lists.\n    \"\"\"\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        common_set.update(sublist)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] not in common:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_set = set()\n    for sublist in nestedlist:\n        for item in sublist:\n            common_set.add(item)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n\n    common_elements = []\n\n    for sublist in nestedlist:\n        if len(common_elements) == 0:\n            common_elements = sublist\n        else:\n            common_elements = list(set(common_elements) & set(sublist))\n\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove all non-numeric characters from the string\n    text = ''.join(e for e in text if e.isdigit())\n\n    # If the string is empty, return True (indicating that the input is an integer)\n    if not text:\n        return True\n\n    # Check if the string is a valid integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(d, dict) and not d for d in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            for key, value in item.items():\n                if value:\n                    return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item.keys()) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a string and concatenate all its elements\n    num_str = ''.join(str(x) for x in nums)\n    # Convert the string to an integer using the `int()` function\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    # Loop through the tuple and add each element to the total\n    for num in nums:\n        total += num\n    # Return the final total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums)!= tuple:\n        print(\"Error: Input should be a tuple.\")\n        return None\n    \n    # Convert tuple to list\n    nums_list = list(nums)\n    \n    # Initialize result variable\n    result = 0\n    \n    # Iterate over list and add each element to result\n    for num in nums_list:\n        if type(num)!= int or num < 1:\n            print(\"Error: All elements in the tuple should be positive integers.\")\n            return None\n        else:\n            result += num\n    \n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and converts it into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Convert each element in the list to an integer\n    nums_list = [int(num) for num in nums_list]\n    # Convert the list of integers to a single integer\n    result = sum(nums_list)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list\n    nums_list = list(nums)\n    # initialize sum of elements to 0\n    sum_of_elements = 0\n    # loop through the list and add each element to the sum\n    for num in nums_list:\n        sum_of_elements += num\n    # return the sum of elements\n    return sum_of_elements"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = None"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                sublist[test_list.index(sublist)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        if isinstance(i, (int, float)):\n            new_list.append(float(i))\n        elif isinstance(i, list):\n            new_list.append(list_to_float(i))\n        else:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Define a function to check if a variable can be converted to a float\n    def can_be_converted_to_float(var):\n        try:\n            float(var)\n            return True\n        except ValueError:\n            return False\n\n    # Loop through each element in the list of lists\n    for inner_list in test_list:\n        # Loop through each element in the inner list\n        for var in inner_list:\n            # Check if the element can be converted to a float\n            if can_be_converted_to_float(var):\n                # Convert the element to a float and add it to the inner list\n                inner_list.append(float(var))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for elem in row:\n            try:\n                elem = float(elem)\n            except ValueError:\n                continue"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert the string to a list\n    string_list = string.split()\n    # Return the list\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string and converts it to a list of strings separated by the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string by space and convert each substring to a string\n    return [str(x) for x in string.split()]"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return arr[0]\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n            else:\n                return arr[i]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    n = len(arr)\n    count = [0] * 100\n\n    for i in range(n):\n        count[arr[i]] += 1\n\n    for i in range(100):\n        if count[i] == 1:\n            return i\n\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize count as 0 and current_elem as the first element of the array\n    count = 0\n    current_elem = arr[0]\n    # traverse the array and increment count if the current element is equal to the previous element\n    for i in range(1, len(arr)):\n        if arr[i] == current_elem:\n            count += 1\n        else:\n            # if count becomes greater than 1, we have found the element that appears only once\n            if count > 1:\n                return current_elem\n            # reset count and current_elem for the next iteration\n            count = 0\n            current_elem = arr[i]\n    # if the array ends with a repeated element, return it\n    if count > 1:\n        return current_elem\n    # if the array doesn't have repeated elements, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Find the first occurrence of the element in the array\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers, one at the beginning of the array and one at the end\n    left = 0\n    right = len(arr) - 1\n    # Initialize a set to store unique elements\n    unique_elements = set()\n    # Iterate through the array until the pointers meet in the middle\n    while left < right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        # If the element at the middle index is already in the set, it means it appears only once, so return it\n        if arr[mid] in unique_elements:\n            return arr[mid]\n        # Otherwise, add the element at the middle index to the set and move the left pointer to the right\n        else:\n            unique_elements.add(arr[mid])\n            left = mid + 1\n    # If the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"The array contains duplicates\"\n    else:\n        for i in range(len(arr)):\n            if i == 0 or arr[i]!= arr[i-1]:\n                return arr[i]\n        return \"The element appears only once in the array\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the element that appears only once in the array\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"There are multiple elements that appear only once in the array.\"\n    else:\n        for i in range(len(arr)):\n            if arr[i]!= i:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n\n    # Initialize a variable'seen' to False\n    seen = False\n\n    # Initialize a variable'result' to None\n    result = None\n\n    # Traverse the array\n    for i in range(n):\n        # If we have seen the element before, return the element and mark seen to True\n        if arr[i]!= arr[i+1] and seen == False:\n            result = arr[i]\n            seen = True\n\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the maximum product and the maximum absolute product\n    max_product = float('-inf')\n    max_absolute_product = float('-inf')\n\n    # Iterate over the list and calculate the product of numbers in pairs\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute value of the product and compare it to the current maximum absolute product\n            absolute_product = abs(list1[i] * list1[j])\n            if absolute_product > max_absolute_product:\n                max_absolute_product = absolute_product\n\n            # Calculate the product of the numbers in pairs and compare it to the current maximum product\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n\n    # Return the maximum absolute product\n    return max_absolute_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    pairs = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pairs.append((list1[i], list1[j]))\n    for pair in pairs:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, return the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product\n    between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][0], list1[j][1])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    max_pair = float('-inf')\n    min_pair = float('inf')\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            current_product = lst[i][0] * lst[j][1]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (lst[i], lst[j])\n            elif current_product < min_pair:\n                min_pair = current_product\n\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n\n\ndef is_amicable(num):\n    '''\n    Check if a given number is amicable or not.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a number as input and returns the sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    # Initialize a list to store the amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num == sum_of_divisors(num):\n            amicable_numbers.append(num)\n\n    # Calculate the sum of all amicable numbers\n    sum_amicable_numbers = sum(amicable_numbers)\n\n    return sum_amicable_numbers\n\n\ndef sum_of_divisors(num):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors (including the number itself).\n    \"\"\"\n    # Initialize a variable to store the sum of all divisors\n    divisor_sum = 0\n\n    # Loop through all numbers from 1 to the number itself\n    for i in range(1, num + 1):\n        # Check if the number is a divisor of the input number\n        if num % i == 0:\n            divisor_sum += i\n\n    return divisor_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for i in range(1, limit):\n        if i == sum_of_amicable:\n            continue\n        if i % 2 == 0:\n            if i % 3 == 0:\n                continue\n            sum_of_amicable += i\n        else:\n            if i % 5 == 0:\n                continue\n            sum_of_amicable += i\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Check if the given number is amicable or not.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if n is amicable, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n\n    sum_of_proper_divisors = sum(proper_divisors(n))\n    return sum_of_proper_divisors == n\n\n\ndef proper_divisors(n):\n    \"\"\"\n    Calculate the proper divisors of the given number.\n\n    Args:\n    n (int): The number for which to calculate the proper divisors.\n\n    Returns:\n    set: The set of proper divisors of n.\n    \"\"\"\n    divisors = set()\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.add(i)\n    return divisors\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n\n    Args:\n    limit (int): The number up to which amicable numbers are to be considered.\n\n    Returns:\n    int: The sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if i == 1:\n            sum_of_amicable_numbers += i\n        elif i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\nlimit = 10000\nprint(\"The sum of amicable numbers from 1 to\", limit, \"is:\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        if num < 10:\n            return False\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    \n    amicable_sum = sum(amicable_numbers)\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Returns True if num is an amicable number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable_number(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    sum_of_square = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum_of_square += i**2 + num**2 - 2*i*num\n    return sum_of_square == num**2"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize the amicable numbers list\n    amicable_numbers = []\n\n    # loop through numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if i == sum(get_divisors(i)):\n            # if it is, add it to the amicable numbers list\n            amicable_numbers.append(i)\n\n    # return the sum of all the amicable numbers\n    return sum(amicable_numbers)\n\n\ndef get_divisors(num):\n    \"\"\"\n    Get all the divisors of a specified number.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i!= num // i:\n                divisors.append(num // i)\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the sum of two numbers that are both divisible by 2\n    amicable_dict = {}\n    # Iterate through the numbers from 1 to the specified limit\n    for i in range(1, limit):\n        # Check if the current number is divisible by any number in the range from 1 to the square root of the current number\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0 and i % (2*j) == 0:\n                # If the current number is divisible by both i and 2j, add the sum of the current number and the other number to the dictionary\n                amicable_dict[i+j] = i+j\n    # Return the sum of all amicable numbers from 1 to the specified limit\n    return sum(amicable_dict.values())"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # get the magnitude and phase of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n    arg = cmath.phase(a + b*1j)\n    \n    # convert the phase to degrees\n    angle = arg * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle.real\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = cmath.angle(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # initialize the length of the longest sub-string to 0\n    max_diff = 0\n\n    # loop through all possible sub-strings of the string\n    for i in range(len(string)):\n        # loop through all possible sub-strings of the rest of the string\n        for j in range(i+1, len(string)+1):\n            # count the number of 0s and 1s in the current sub-string\n            count_0s = sum(c == '0' for c in string[i:j])\n            count_1s = sum(c == '1' for c in string[i:j])\n\n            # calculate the difference between the counts\n            diff = count_0s - count_1s\n\n            # update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    if n % 2 == 1:\n        string = '0' + string\n    dp = [[0] * (n + 1) for _ in range(2)]\n    for i in range(1, n + 1):\n        dp[0][i] = dp[0][i - 1]\n        dp[1][i] = dp[1][i - 1]\n        for j in range(1, 2):\n            if string[i - 1] == '0':\n                dp[j][i] = max(dp[j][i - 1], dp[1 - j][i - 1])\n            else:\n                dp[j][i] = max(dp[j][i - 1], dp[1 - j][i])\n    return dp[1][n]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Convert the string to a binary string\n    binary_string = bin(int(string, 2))[2:]\n    \n    # Initialize variables to store the current length and the maximum difference\n    current_length = 0\n    max_diff = 0\n    \n    # Loop through each character in the binary string\n    for char in binary_string: \n        # If the character is 0, increment the current length\n        if char == '0': \n            current_length += 1\n        # If the character is 1, reset the current length to 1 and calculate the difference between the current and maximum lengths\n        else: \n            current_length = 1\n            diff = current_length - max_diff\n            if diff > max_diff: \n                max_diff = diff\n                \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero - count_one > max_diff:\n            max_diff = count_zero - count_one\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0 for j in range(n+1)] for i in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    dp[0][1] = 1\n    dp[1][1] = 0\n\n    for i in range(2, n+1):\n        for j in range(i):\n            if string[i-1] == '0':\n                dp[i%2][j] = max(dp[(i-1)%2][j+1], dp[i%2][j])\n            else:\n                dp[i%2][j] = max(dp[(i-1)%2][j], dp[i%2][j+1])\n\n    return dp[(n-1)%2][0]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize the variables for storing the number of 0s and 1s in each sub-string\n    num_0s = [0] * len(string)\n    num_1s = [0] * len(string)\n    # Initialize the variables for storing the maximum difference between the number of 0s and number of 1s in each sub-string\n    max_diff = 0\n    \n    # Loop through each sub-string of the binary string\n    for i in range(len(string)):\n        # Increment the number of 0s in the sub-string\n        num_0s[i] = string.count('0', i, i+1)\n        # Increment the number of 1s in the sub-string\n        num_1s[i] = string.count('1', i, i+1)\n        # Calculate the maximum difference between the number of 0s and number of 1s in the sub-string\n        diff = abs(num_0s[i] - num_1s[i])\n        # Update the maximum difference if the current difference is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the maximum difference between the number of 0s and number of 1s in any sub-string of the binary string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of 0s and 1s in each sub-string\n    freq = {}\n    for i in range(len(string)):\n        if string[i] == '0':\n            freq[i] = 0\n        elif string[i] == '1':\n            freq[i] = 1\n    \n    # Find the maximum difference between the number of 0s and number of 1s in any sub-string\n    max_diff = 0\n    for i in range(len(string)):\n        if i > 0:\n            diff = abs(freq[i] - freq[i-1])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    n = len(string)\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n        \n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # function to find common divisors of two numbers\n    def common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num1 + 1):\n            if num1 % i == 0 and num2 % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # find the common divisors of two numbers\n    div1 = common_divisors(a, b)\n    div2 = common_divisors(b, a)\n\n    # find the sum of common divisors\n    sum_div = sum(div1 + div2)\n\n    return sum_div\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two positive integers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of their common divisors.\n    '''\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if a is even\n    if a % 2 == 0:\n        a += 1\n    \n    # Check if b is even\n    if b % 2 == 0:\n        b += 1\n    \n    # Calculate the greatest common divisor using Euclidean algorithm\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    # Find the sum of common divisors using the formula sum(a) + sum(b) - gcd(a, b)\n    return sum(a) + sum(b) - gcd(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize variables to store common divisors and their multiplicities\n    common_divisors = set()\n    common_multiplicities = {}\n\n    # find common divisors and their multiplicities\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n            if i in common_multiplicities:\n                common_multiplicities[i] += 1\n            else:\n                common_multiplicities[i] = 1\n\n    # sum common divisors and multiply by their multiplicities\n    return sum(common_divisors) * sum(common_multiplicities.values())"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_set = set()\n    divisors_list = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors_set.add(i)\n            divisors_list.append(i)\n    return sum(divisors_list)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # function to find common divisors of two numbers\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two numbers using Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # find common divisors of a and b\n    a_div = gcd(a, b)\n    b_div = gcd(b, a)\n\n    # find sum of common divisors\n    sum_div = a_div + b_div\n\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # finding common divisors of two given numbers\n    div_list = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            div_list.append(i)\n    # finding sum of common divisors\n    sum_div = 0\n    for num in div_list:\n        sum_div += num\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    divisors = []\n    \n    for num in range(1, min(a, b) + 1):\n        if a % num == 0 and b % num == 0:\n            common_divisors.append(num)\n    \n    for num in common_divisors:\n        divisors.append(a//num)\n        divisors.append(b//num)\n    \n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes in two numbers as inputs and returns their sum of their common divisors.\n    \"\"\"\n    # Finding the set of common divisors of a and b\n    common_divisors = set(divisors(a) & divisors(b))\n    # Finding the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n    return sum_common_divisors\n\ndef divisors(n):\n    \"\"\"\n    This function takes in a number as input and returns a set of its divisors.\n    \"\"\"\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    return divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        remainder = x % y\n        x = y\n        y = remainder\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    for i in range(y):\n        product += x\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    result = [] # create an empty list to store the words that are longer than n characters\n    \n    for word in words: # iterate over each word in the list\n        if len(word) > n: # if the length of the word is longer than n\n            result.append(word) # add the word to the result list\n        \n    return result # return the result list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The maximum length of words that we want to find.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix is not a square matrix.\"\n    \n    # Check if the matrix has all unique elements\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return \"The matrix has duplicate elements.\"\n    \n    # Check if the matrix is a magic square\n    magic_square = [[0 for j in range(len(my_matrix))] for i in range(len(my_matrix))]\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_square[i][j] = my_matrix[i][j]\n    for i in range(len(magic_square)):\n        for j in range(len(magic_square)):\n            if magic_square[i][j]!= (i+j+1):\n                return \"The matrix is not a magic square.\"\n    return \"The matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the elements in the rows is the same as the sum of the diagonal elements\n    for row in my_matrix:\n        if sum(row)!= diagonal_sum:\n            return False\n\n    # Check if the sum of the elements in the columns is the same as the sum of the diagonal elements\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[j][i] for j in range(len(my_matrix)))!= diagonal_sum:\n            return False\n\n    # Check if the sum of the elements in the main diagonals is the same as the sum of the diagonal elements\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i][i])!= diagonal_sum:\n            return False\n\n    # Check if the sum of the elements in the secondary diagonals is the same as the sum of the diagonal elements\n    for i in range(len(my_matrix) - 1, -1, -1):\n        if sum(my_matrix[i][len(my_matrix) - i - 1])!= diagonal_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the rows and columns\n    row_sum = sum(my_matrix[i] for i in range(len(my_matrix)))\n    col_sum = sum(my_matrix[i] for i in range(len(my_matrix[0])))\n\n    # Calculate the diagonal sum\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Check if the sum of the rows and columns equals the diagonal sum\n    if row_sum == diagonal_sum and col_sum == diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of all elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the first row is the same as the sum of the first column\n    if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == total:\n        return True\n    # Check if the sum of the second row is the same as the sum of the second column\n    elif my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] == total:\n        return True\n    # Check if the sum of the third row is the same as the sum of the third column\n    elif my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] == total:\n        return True\n\n    # Check if the sum of the first diagonal is the same as the sum of the last diagonal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == total:\n        return True\n    # Check if the sum of the second diagonal is the same as the sum of the second last diagonal\n    elif my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0] == total:\n        return True\n    # Check if the sum of the third diagonal is the same as the sum of the third last diagonal\n    elif my_matrix[0][0] + my_matrix[1][2] + my_matrix[2][1] == total:\n        return True\n\n    # If none of the above conditions are satisfied, then it is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and checks whether it is a magic square or not.\n    A magic square is a square matrix with all the elements except the diagonal sum to zero.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n!= len(set(my_matrix)):\n        return False\n    \n    # Calculate the sum of the elements in each row\n    row_sums = [sum(row) for row in my_matrix]\n    # Check if the sum of elements in each row is zero\n    if any(row_sum!= 0 for row_sum in row_sums):\n        return False\n    \n    # Calculate the sum of the elements in each column\n    col_sums = [sum(my_matrix[i][j] for j in range(n)) for i in range(n)]\n    # Check if the sum of elements in each column is zero\n    if any(col_sum!= 0 for col_sum in col_sums):\n        return False\n    \n    # Check if the elements in the main diagonal sum to zero\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    if diagonal_sum!= 0:\n        return False\n    \n    # Check if the elements in the secondary diagonal sum to zero\n    diagonal_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum!= 0:\n        return False\n    \n    # If all the checks passed, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(set(my_matrix)):\n        return False\n    \n    # check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        if row_sum!= col_sum or row_sum!= n * (n + 1) // 2 or col_sum!= n * (n + 1) // 2:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for value in row:\n            if not isinstance(value, int):\n                return False\n    # Check if the matrix is a magic square\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum!= n * n:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for rows and columns of length 3\n    for row in my_matrix:\n        if len(row)!= 3 or not all(isinstance(x, int) for x in row):\n            return False\n    # Check for diagonals of length 3\n    for i in range(3):\n        if my_matrix[i][i]!= my_matrix[i][2-i] or my_matrix[i][i]!= my_matrix[2-i][i]:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check for magic squares of length 2\n    if n == 2 and all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix):\n        return True\n    # check for magic squares of length 3\n    if n == 3 and all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])):\n        return True\n    # check for magic squares of length 4\n    if n == 4 and all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])):\n        return True\n    # check for magic squares of length 5\n    if n == 5 and all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])):\n        return True\n    # check for magic squares of length 6\n    if n == 6 and all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix) for row in my_matrix) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix)) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])) or all(sorted(row) == sorted(my_matrix[::-1])):\n        return True\n    # check for magic squares of length "
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix has a size of 3x3\n    if len(my_matrix)!= 3:\n        return False\n\n    # Check if each row and each column has the same sum\n    for i in range(3):\n        row_sum = 0\n        col_sum = 0\n        for j in range(3):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum:\n            return False\n\n    # Check if each diagonal has the same sum\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(3):\n        diagonal_sum1 += my_matrix[i][i]\n        diagonal_sum2 += my_matrix[i][2-i]\n    if diagonal_sum1!= diagonal_sum2:\n        return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n    max_freq = max(frequency_dict.values())\n    max_item = None\n    for key, value in frequency_dict.items():\n        if value == max_freq:\n            max_item = key\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through each item in the list\n    for num in nums:\n        # Increment the frequency count for each item in the list\n        freq[num] += 1\n\n    # Find the item with the maximum frequency count\n    max_item = max(freq, key=freq.get)\n\n    # Return the maximum frequency count of the item\n    return freq[max_item]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Given a list of integers, returns the item with the maximum frequency.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Given a list of numbers, return the number and item that appears the most times.\n    \"\"\"\n\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    \n    max_num = 0\n    max_count = 0\n    \n    for num, count in counts.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_count = max(freq.values())\n    max_num = None\n\n    for num, count in freq.items():\n        if count == max_count:\n            max_num = num\n            break\n\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    str1_list = list(str1)\n\n    for i in range(len(str1_list)):\n        if str1_list[i] not in vowels_list:\n            str1_list[i], str1_list[-1-i] = str1_list[-1-i], str1_list[i]\n\n    return ''.join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_str = ''.join(vowels)\n    result = ''\n    for char in str1:\n        if char not in vowels_str:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    vowels_list = sorted(vowels_set)\n    reverse_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels_list:\n            reverse_str += str1[i]\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            if char.isupper():\n                new_str += char.lower()\n            else:\n                new_str += char.upper()\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(string):\n    vowels = \"AEIOUaeiou\"\n    reversed_string = \"\"\n    for char in string:\n        if char not in vowels:\n            reversed_string += char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    return vowels_list[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            vowel_reverse += str1[i]\n    return vowel_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    result = \"\"\n    for char in str1:\n        if char in vowels_set:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for elem in tup1:\n        string += str(elem)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the str() function\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Converting the tuple to a string using the join() method\n    str_tuple = ','.join(map(str, tup1))\n    return str_tuple"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_1 = str(tup1[0])\n    str_2 = str(tup1[1])\n    str_3 = str(tup1[2])\n    str_4 = str(tup1[3])\n    return str_1 + str_2 + str_3 + str_4"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 + n * (2*n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n * n + 1) // 3\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2 * n * (n+1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * (n ** 2)) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-1) + 6*hexagonal_num(n-1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Function to calculate the nth hexagonal number\n    def nth_hexagonal(n): \n        '''\n        Helper function to calculate the nth hexagonal number.\n        '''\n        if n == 0:\n            return 1\n        return nth_hexagonal(n-1) + nth_hexagonal(n-2) + 1\n\n    # Call the helper function to get the nth hexagonal number\n    return nth_hexagonal(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n\n    non_zeros_count = len(nums) - len(zeros)\n    zero_count = len(zeros)\n\n    if zero_count == 0:\n        return 0\n\n    return float(zero_count) / non_zeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert array to list for easier manipulation\n    nums_list = nums.tolist()\n\n    # Create an array with the same length as the input array\n    result = array('i', [0] * len(nums_list))\n\n    # Iterate through the input array\n    for i in range(len(nums_list)):\n        # Check if the current element is zero\n        if nums_list[i] == 0:\n            # Increment the result by 1\n            result[i] = 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    total_count = len(nums_list)\n    zero_count = sum(result)\n    ratio = zero_count / total_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize two arrays to store the number of zeroes and non-zeroes\n    zero_count_array = array('i')\n    non_zero_count_array = array('i')\n\n    # Iterate through the input array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count_array.append(1)\n        else:\n            non_zero_count_array.append(1)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = sum(zero_count_array)\n    non_zero_count = sum(non_zero_count_array)\n    ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * 2)\n\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n\n    return count[0] / count[1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    if nonzeros == 0:\n        return None\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * (max(nums) + 1))  # create an array to count the occurrences of each number\n    for num in nums:\n        count[num] += 1  # increment the count of the number in the array\n\n    zero_count = 0  # initialize the count of zeroes to 0\n    for i in range(len(count)):\n        if count[i] == 0:\n            zero_count += 1  # increment the count of zeroes in the array\n\n    non_zero_count = 0  # initialize the count of non-zeroes to 0\n    for i in range(len(count)):\n        if count[i] > 0:\n            non_zero_count += 1  # increment the count of non-zeroes in the array\n\n    ratio = non_zero_count / zero_count  # calculate the ratio of zeroes to non-zeroes\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    \n    # Iterate through each element of the array\n    for num in nums:\n        # If the element is 0, increment the zero count\n        if num == 0:\n            num_zeros += 1\n        # If the element is 1, increment the one count\n        elif num == 1:\n            num_ones += 1\n    \n    # Return the ratio of zeroes to non-zeroes\n    return num_zeros / num_ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to count the number of non-zeroes and zeroes\n    count_list = [nums.count(0), nums.count(1)]\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count_list[0] / (count_list[0] + count_list[1])\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    This function takes in an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    '''\n    arr = array('i', nums)  # Convert array to integer array\n    count_zero = 0\n    count_non_zero = 0\n    \n    for i in arr:\n        if i == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    \n    ratio = count_zero / count_non_zero\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num!= 0:\n            non_zeros[nums.index(num)] += 1\n    zero_ratio = []\n    for i in range(len(nums)):\n        if zeros[i] > 0:\n            zero_ratio.append(zeros[i] / non_zeros[i])\n        else:\n            zero_ratio.append(0)\n    return sum(zero_ratio) / len(zero_ratio)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: # base case for 0 and negative numbers\n        return False\n\n    for i in range(1, int(n**0.5)+1): # iterate through all the numbers from 1 to sqrt(n)\n        if n%i == 0 and n/i!= 1: # if the number is divisible by i and is not 1\n            if ((n//i)**i) == n: # and its square is equal to the original number\n                return True\n\n    return False # if none of the above conditions are met, then the number cannot be represented as the sum of non-zero powers of 2\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    while n:\n        if n & 1 == 1:\n            if power == 0:\n                return False\n            if power > 0:\n                power -= 1\n        else:\n            power += 1\n        n >>= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    def is_pow_of_two(num):\n        \"\"\"\n        Helper function to check if a given number is a power of 2 or not.\n        \"\"\"\n        return (num & (num - 1)) == 0\n\n    def sum_of_powers_of_two(num):\n        \"\"\"\n        Helper function to find the sum of all non-zero powers of 2 in a given number.\n        \"\"\"\n        total = 0\n        while num > 0:\n            if is_pow_of_two(num):\n                total += num\n            num >>= 1\n        return total\n\n    if sum_of_powers_of_two(n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check for base case\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    \n    # check for odd numbers\n    if n % 2 == 1:\n        return False\n    \n    # check for sum of powers of 2\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if is_Sum_Of_Powers_Of_Two(n//i):\n                return True\n    \n    # if we reach this point then n cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Initialize variables\n    is_sum_of_powers_of_two = False\n    power = 1\n    \n    # Check if the number is already a power of 2\n    if n == 1:\n        return True\n    \n    # Iterate through all possible powers of 2\n    while n!= 1:\n        if n & 1 == 1:\n            # Check if the current number is a power of 2\n            if power == 1:\n                # If it is, check if the sum of powers of 2 is a power of 2\n                if (n // power) * power == n:\n                    is_sum_of_powers_of_two = True\n                    break\n            else:\n                # If it's not, increment the power and continue iterating\n                power *= 2\n        else:\n            # If the current number is even, divide it by 2\n            n = n >> 1\n        \n        # Check if the sum of powers of 2 is a power of 2\n        if (n // power) * power == n:\n            is_sum_of_powers_of_two = True\n            break\n    \n    # Return the result\n    return is_sum_of_powers_of_two"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if (1 << i) & n:\n            count += 1\n        else:\n            break\n    return count == n // 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    \n    i = 0\n    while n > 1:\n        if n % 2 == 0:\n            i += 1\n            n //= 2\n        else:\n            i -= 1\n            n = 3*n + 1\n    \n    return i >= 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the number is a power of 2\n    if n & (n - 1) == 0: \n        return True\n    \n    # check if the number can be expressed as sum of non-zero powers of 2\n    i = 0\n    while n > 1:\n        if n & 1 == 1:\n            if 2**i == n:\n                return True\n        i += 1\n        n >>= 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Iterate through the binary string and check if the number can be represented as sum of non-zero powers of 2\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            power = 0\n            while i+power < len(binary_str) and binary_str[i+power] == '1':\n                power += 1\n                \n            if power == 0:\n                return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2) and n//2!= 0\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # pi * radius\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # Using the formula for the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2*3.14159*r # using the formula for the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    def flatten(lst):\n        return [num for sublist in lst for num in sublist]\n\n    return flatten(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Parameters:\n    test_list (list): A list of lists, where each sublist contains numbers.\n\n    Returns:\n    set: A set of numbers in the flattened list.\n    \"\"\"\n    # Initialize an empty set to store the flattened numbers\n    flattened = set()\n\n    # Loop through each sublist in the list\n    for sublist in test_list:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # Add the number to the flattened set\n            flattened.add(num)\n\n    # Return the flattened set\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty set\n    result = set()\n    # loop through each list in the input list of lists\n    for sublist in test_list:\n        # loop through each element in the sublist and add it to the result set\n        for element in sublist:\n            result.add(element)\n    # return the set of numbers\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Helper function to flatten a nested list\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list of lists using the helper function\n    flat_list = flatten(test_list)\n\n    # Convert the flattened list into a set to remove duplicates\n    unique_numbers = set(flat_list)\n\n    return list(unique_numbers)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Convert the list to a list of tuples (index, value)\n    num_tuples = [(i, nums[i]) for i in range(len(nums))]\n    \n    # Sort the list of tuples by value in ascending order\n    num_tuples.sort(key=lambda x: x[1])\n    \n    # Convert the sorted list of tuples back to a list of values\n    sorted_nums = [num for i, num in num_tuples]\n    \n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the maximum element with the last element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # reverse the unsorted part\n        start = i\n        end = n-1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element in the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the sorted part of the list\n        for j in range(i, n-i-1, -1):\n            nums[i+j], nums[n-1-j] = nums[n-1-j], nums[i+j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # find the largest element and swap it with the element at i-th position\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i-1], nums[max_idx] = nums[max_idx], nums[i-1]\n        # print the sorted array\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # get the length of the list\n    n = len(nums)\n    \n    # loop through all possible pancakes\n    for i in range(n):\n        # find the index of the largest element in the remaining pancakes\n        largest_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest_index]:\n                largest_index = j\n        \n        # swap the largest element with the element at the current index\n        nums[i], nums[largest_index] = nums[largest_index], nums[i]\n        \n        # print the sorted array after each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a copy of the input list to avoid modifying it\n    nums_copy = nums[:]\n    \n    # Loop through each element in the list\n    for i in range(len(nums_copy)):\n        # Find the index of the largest element to its right\n        max_index = i\n        for j in range(i+1, len(nums_copy)):\n            if nums_copy[j] > nums_copy[max_index]:\n                max_index = j\n        \n        # If the largest element is not at the current index, swap them\n        if max_index!= i:\n            nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n        \n        # Reverse the sublist between i and the max index\n        for j in range(i, max_index, -1):\n            nums_copy[i], nums_copy[j] = nums_copy[j], nums_copy[i]\n    \n    # Return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Generate a list of numbers from 1 to n\n    for i in range(n, 0, -1):\n        # Reverse the entire list\n        nums.reverse()\n        # Find the index of the largest number\n        index = 0\n        max_num = nums[index]\n        for j in range(1, i):\n            if nums[j] > max_num:\n                max_num = nums[j]\n                index = j\n        # Swap the largest number with the first number\n        nums[0], nums[index] = nums[index], nums[0]\n        # Reverse the entire list\n        nums.reverse()\n        # Print the sorted list\n        print(\"Sorted list:\", nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Create a copy of the list to avoid modifying the original\n    nums_sorted = nums.copy()\n    \n    # Sort the list using the bubble sort algorithm\n    for i in range(len(nums_sorted)-1, 0, -1):\n        for j in range(i):\n            if nums_sorted[j] > nums_sorted[j+1]:\n                nums_sorted[j], nums_sorted[j+1] = nums_sorted[j+1], nums_sorted[j]\n    \n    # Return the sorted list\n    return nums_sorted"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list and create a list of indices for swapping\n    n = len(nums)\n    indices = list(range(n))\n\n    # Iterate through the list in reverse order\n    for step in range(n-1, 0, -1):\n        # Find the index of the largest element in the current step\n        max_index = indices[0]\n        for i in range(1, step+1):\n            if nums[indices[i]] > nums[max_index]:\n                max_index = indices[i]\n\n        # If the largest element is not at the end of the list, swap it with the last element\n        if max_index!= indices[step]:\n            nums[max_index], nums[indices[step]] = nums[indices[step]], nums[max_index]\n\n        # Reverse the part of the list that was swapped in the previous step\n        for i in range(step, n):\n            indices[i], indices[i-step] = indices[i-step], indices[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is a variation of the bubble sort algorithm that works by sorting a list of\n    elements in decreasing order using a series of pancakes. The pancakes are arranged in a circle in\n    ascending order, with each pancake starting from the end of the list and working its way towards the\n    beginning. The algorithm works by repeatedly swapping adjacent elements until the list is sorted. The\n    time complexity of the pancake sort algorithm is O(n^2), but it can be improved by using other sorting\n    algorithms like merge sort or quick sort.\n\n    Parameters:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the end of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the sublist starting from the end of the sorted part\n        for j in range(i-1, 0, -1):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number of identical items in the same position of three given lists.\n\n    Parameters:\n    list1 (list): The first list to compare\n    list2 (list): The second list to compare\n    list3 (list): The third list to compare\n\n    Returns:\n    int: The number of identical items in the same position of three lists.\n    \"\"\"\n\n    # Initialize the count to zero\n    count = 0\n\n    # Loop through each item in the first list\n    for item in list1:\n        # Check if the item is identical in the same position in all lists\n        if item == list2[list1.index(item)] and item == list3[list1.index(item)]:\n            # Increment the count if the item is identical\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum absolute difference between any two elements in the given array.\n\n    Args:\n    arr (list): A list of integers\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the given array\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr)-min(arr), max(arr)+min(arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum absolute difference between any two elements in the given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x0 = 0\n    y0 = n // a // b\n    x = x0\n    y = y0\n    while True:\n        if x * a + y * b == n:\n            return (x0, y0)\n        x0 = x\n        y0 = y\n        x = (x0 * a + y0 * b) // b\n        y = x0 - x // a"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables for x and y\n    x = 0\n    y = 0\n    \n    # loop through all possible values for x\n    while y!= n:\n        # check if y is in the correct quadrant\n        if (y < 0 and y < x*b) or (y >= 0 and y > x*b):\n            # increment x and try again\n            x += 1\n            y = a*x + b\n        else:\n            # y is in the correct quadrant, return the solution\n            return (x, y)\n    \n    # no solution found\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize two variables to store the current values of x and y\n    x, y = 0, 0\n    # Initialize a variable to store the remainder of the division by the gcd(a, b)\n    remainder = n\n    \n    # Iterate until we have found a solution or reach the maximum number of iterations\n    for i in range(1000000000):\n        # Compute the next value of x and y by solving the equation for x and y\n        next_x = (remainder * b - y * a) // gcd(a, b)\n        next_y = (remainder * a - x * b) // gcd(a, b)\n        # Check if the new values satisfy the equation and are different from the previous ones\n        if next_x!= x or next_y!= y:\n            # If so, update x, y and break out of the loop\n            x, y = next_x, next_y\n            break\n        # Otherwise, update the remainder and continue iterating\n        remainder = (remainder * a - x * b) // gcd(a, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = -n/b\n        y = a*x\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # find the coefficients of the quadratic equation\n    d = b**2 - 4*a*n\n    \n    # check if there is a solution\n    if d < 0:\n        return None\n    elif d == 0:\n        x = -b / (2*a)\n        return (x, x)\n    else:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) such that ax + by = n, or None if there is no such solution.\n    \"\"\"\n    # check if there exists a solution\n    if b == 0:\n        return None\n    \n    # check if the solution is negative\n    if a < 0:\n        x = -((-n) // b)\n        y = -(x * b)\n    else:\n        x = (n // b)\n        y = (x * b)\n        \n    # check if the solution is within the range of values allowed by the input parameters\n    if x >= a and x <= a and y >= a and y <= a:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None, -n // b\n    elif b == 0:\n        return None, -n // a\n    else:\n        x1 = -n // b\n        x2 = -n // a\n        y1 = a * x1 + b * x1\n        y2 = a * x2 + b * x2\n        if y1 == y2:\n            return (x1, y1)\n        elif y1 < y2:\n            return (x1, y1), (x2, y2)\n        else:\n            return (x2, y2), (x1, y1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Use quadratic formula to check if the given equation has a solution\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a):\n        if n - a*x - b*x*x >= 0:\n            y = (n - a*x - b*x*x) // b\n            if y >= 0:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = int((-b + n) // a)\n    y = int((-a + n) // b)\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set from the second list to speed up the search for elements in the first list\n    set2 = set(list2)\n    # iterate over the first list and remove all elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            del list1[i]\n    # return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the unique elements\n    unique_list = []\n    # Loop through the elements of the first list\n    for i in list1:\n        # If the element is not in the second list, add it to the unique list\n        if i not in list2:\n            unique_list.append(i)\n    # Return the unique list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    # Use a set to store unique elements from list1\n    unique_elements = set(list1)\n    # Use set intersection to find the unique elements present in both lists\n    result = list(unique_elements.intersection(set(list2)))\n    # Return the result list\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2 * n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([n - 2*i for i in range(n//2)])\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i < n//2:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2, using the sum formula.\n\n    Args:\n        n (int): The value of n to calculate the sum series for.\n\n    Returns:\n        int: The sum of the series from 0 to n // 2.\n\n    Examples:\n        >>> sum_series(10)\n        25\n        >>> sum_series(20)\n        66\n        >>> sum_series(50)\n        1625\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    return int(n / 2 * (n - 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while i < n // 2:\n        total += (n - 2*i)\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n - 2*sum_series(n-2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return sum_series(n-2) + n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l**2 - l + 1)\n    return area\n\ndef main():\n    '''\n    This is the main function where we can test our function.\n    '''\n    s = 2\n    l = 3\n    print(f\"The area of the polygon is: {area_polygon(s, l)}\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360/l\n    \n    for i in range(l):\n        x = s*tan(angle*i/180)\n        y = s*(1-tan(angle*i/180))\n        area += x*y\n    \n    return area*s*s/2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s / (2 * i + 1)\n    area = area * s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l) * math.sin(2*math.pi/l*i)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Use the formula for the area of a regular polygon to calculate the area\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter (s) and the area (A) of the polygon\n    s = l * s / (2 * pi)\n    A = 0.5 * s * (tan(pi / l) + tan(pi / l))\n    return A"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def divisors(num):\n        \"\"\"\n        Return a list of all the divisors of a given number.\n        \"\"\"\n        divs = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divs.append(i)\n                if num // i!= i:\n                    divs.append(num // i)\n        return divs\n\n    def div_sum_helper(num1, num2):\n        \"\"\"\n        Helper function to find the sum of divisors of two numbers.\n        \"\"\"\n        div1 = divisors(num1)\n        div2 = divisors(num2)\n        div1_sum = sum(div1)\n        div2_sum = sum(div2)\n        if div1_sum == div2_sum:\n            return True\n        else:\n            return False\n\n    # Function to determine if the sum of divisors is the same for two numbers\n    def div_sum_checker(num1, num2):\n        \"\"\"\n        Main function to check if the sum of divisors of two numbers are the same.\n        \"\"\"\n        if div_sum_helper(num1, num2):\n            print(\"The sum of divisors of\", num1, \"and\", num2, \"are the same.\")\n        else:\n            print(\"The sum of divisors of\", num1, \"and\", num2, \"are not the same.\")\n\n    # Call the function to check if the sum of divisors is the same for two numbers\n    div_sum_checker(10, 20)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find all the divisors of n\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n\n    # Check if the sum of the divisors of n and n is the same\n    return n == div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n \n    divisors_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    return divisors_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def factors(n):\n        '''\n        Function to get all the factors of a number.\n        '''\n        factors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n//i)\n        return factors\n    \n    def sum_factors(factors):\n        '''\n        Function to calculate the sum of all the factors.\n        '''\n        return sum(factors)\n    \n    # get the factors of n1\n    factors1 = factors(n)\n    # get the factors of n2\n    factors2 = factors(n)\n    \n    # sort the factors of n1 and n2 in ascending order\n    factors1.sort()\n    factors2.sort()\n    \n    # compare the sorted factors of n1 and n2 to see if their sum is the same\n    if sum_factors(factors1) == sum_factors(factors2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    div2 = sum([i for i in range(n+1, int(math.sqrt(n))+1) if n % i == 0])\n\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the divisors of n\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    sum_of_divisors = sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\n    # Check if the sum of the divisors of n is equal to n\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_count = {}\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i in div_count:\n                div_count[i] += 1\n            else:\n                div_count[i] = 1\n    return div_count"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # get the divisors of n\n    divs = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n\n    # calculate the sum of the divisors\n    s = sum(divs)\n\n    # check if the sum is the same as n\n    if s == n:\n        print(\"The sum of the divisors of\", n, \"is\", s)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not the same as\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Get the sum of divisors of n \n    sum_divisors = sum(math.divisors(n)) \n\n    # Get the sum of divisors of the square of n \n    square_n = n * n \n    sum_square_divisors = sum(math.divisors(square_n)) \n\n    # Check if the sum of the divisors of n and the square of n are the same \n    if sum_divisors == sum_square_divisors: \n        return True \n    else: \n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n                \n    # Loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # If the character is already in the dictionary, add its count to the total count\n        if chr(i) in char_count:\n            char_count[' '] += char_count[chr(i)]\n        # If the character is not in the dictionary, add a count of 0\n        else:\n            char_count[chr(i)] = 0\n                \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the position of each character in the alphabet\n    char_pos = {}\n    for i, char in enumerate(str1):\n        if char in char_pos:\n            char_pos[char].append(i)\n        else:\n            char_pos[char] = [i]\n    \n    # count the number of characters in the string that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in char_pos:\n        if char.isupper():\n            for pos in char_pos[char]:\n                if ord(char) - 65 == pos:\n                    count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the input string to lowercase\n    str1 = str1.lower()\n\n    # initialize variables\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    # iterate through each character in the input string\n    for char in str1:\n        # check if the character is in the English alphabet\n        if char in alphabet:\n            # get the position of the character in the alphabet\n            pos = alphabet.index(char)\n            # check if the position is the same as the previous character\n            if pos == count % 26:\n                # increment the count if it is the same position\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(65+i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase and remove spaces\n    str1 = str1.lower().replace(\" \", \"\")\n\n    # initialize an empty dictionary to store the position counts\n    position_count = {}\n\n    # iterate through the characters in the string\n    for i, char in enumerate(str1):\n        # check if the current character is in the English alphabet (case insensitive)\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            # if it is, check if it has a corresponding character in the English alphabet (case insensitive)\n            if str1[i] == str1[i].lower():\n                # if it does, increment the position count for the corresponding character\n                if str1[i] in position_count:\n                    position_count[str1[i]] += 1\n                else:\n                    position_count[str1[i]] = 1\n\n    # return the position count dictionary\n    return position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for i in range(26):\n        if str1.lower().count(english_alphabet[i].lower()) > 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1[i].lower() in str1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Loop through each character in string\n    for char in str1:\n\n        # Check if character is in English alphabet\n        if char.isalpha():\n\n            # Check if character is at the same position in the alphabet\n            if char == chr(ord('a') + count):\n\n                # Increment count\n                count += 1\n\n    # Return count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # Check if the character is in the dictionary\n        if char in char_count:\n            # Increment the count of the character\n            char_count[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n\n    # Loop through the dictionary to count the number of characters at each position in the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # Convert the ASCII code of the current letter to a character\n        char = chr(i)\n\n        # Check if the character is in the dictionary\n        if char in char_count:\n            # Increment the count of the character at the current position in the English alphabet\n            char_count[char] -= 1\n\n            # If the count is now zero, remove the character from the dictionary\n            if char_count[char] == 0:\n                del char_count[char]\n\n    # Return the final dictionary containing the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    # Initialize a variable to keep track of the number of even pairs\n    even_pairs = 0\n    \n    # Loop through the list of integers\n    for i in range(len(A)):\n        # Loop through the remaining integers\n        for j in range(i+1, len(A)):\n            # Check if the xor of the two integers is even\n            if A[i] ^ A[j] == 0:\n                # If so, increment the even_pairs variable\n                even_pairs += 1\n    \n    # Return the number of even pairs\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Count the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    i = 0\n    while i <= n:\n        i *= 2\n    \n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # make sure n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    # find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n\n    # Loop until we reach the next power of 2\n    while power_of_2 < n:\n        power_of_2 *= 2\n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to the input.\n    \"\"\"\n    while n & (n - 1):  # If n is not a power of 2\n        n = n + 1  # Increment n by 1\n    return n  # Return the smallest power of 2 greater than or equal to n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    i = 1\n    while i < n:\n        i *= 2\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        i = 1\n        while i <= n:\n            i <<= 1\n        return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # find the lowest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # return the next power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # loop through all possible powers of 2 until we find the first power of 2 greater than or equal to n\n    while n & (n-1)!= 0:\n        n = n | (n & -n) # set the least significant bit of n to 1\n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # Use binary search to find the smallest power of 2 greater than or equal to n\n        left, right = 1, n\n        while left < right:\n            mid = (left + right) // 2\n            if mid == 1:\n                right = mid\n            else:\n                left = mid\n        return left"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0  # initialize count to zero\n\n    for i in a:  # iterate over the list\n        if i == x:  # if the current element is equal to the given number\n            count += 1  # increment the count\n\n    return count  # return the count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list `a` and a number `x` as input and returns the count of the number `x` in the list `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list of numbers and a number x as input.\n    It returns a dictionary where the keys are the unique values in the list and the values are the number of times each value appears in the list.\n    '''\n    # create an empty dictionary to store the frequency of each value\n    freq_dict = {}\n    \n    # iterate over the elements of the list and update the frequency dictionary\n    for num in a:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the frequency dictionary and append the values to the result list\n    for key in freq_dict:\n        if key == x:\n            result.append(freq_dict[key])\n    \n    # return the result list as the output of the function\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        raise ValueError(\"m should be less than or equal to n\")\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum\n    total_sum = 0\n    # Loop through the list from the first index to the second index (inclusive)\n    for i in range(m, n+1):\n        # Add the current element to the total sum\n        total_sum += list1[i]\n    # Return the total sum\n    return total_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i-m]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            continue\n        else:\n            total += list1[i]\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Convert the side length to radians\n    rad_a = a * math.pi / 180.0\n    \n    # Calculate the perimeter of the pentagon using the formula:\n    # pi * r^2 = 5 * a^2\n    perimeter = 5 * a ** 2\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n\n    # Formula to find the perimeter of a regular pentagon\n    perimeter = 5 * a\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    import math\n    return 5*a + 5*math.sqrt(3)*a**2"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if not test_tuple:\n        return True\n    # first element of tuple\n    first_element = type(test_tuple[0])\n    # check if all elements in tuple have same data type or not\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    # if all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a list to store the data types of each element in the tuple\n    data_types = []\n\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # append the data type of each element to the list\n        data_types.append(type(element))\n\n    # check if all the elements have the same data type\n    if len(set(data_types)) == 1:\n        # return True if all the elements have the same data type\n        return True\n    else:\n        # return False if not all the elements have the same data type\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # Loop through the rest of the elements in the tuple\n    for item in test_tuple[1:]:\n        # If the data type of any element in the tuple is not the same as the first element, return False\n        if type(item)!= data_type:\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all the elements in a tuple have the same data type or not.\n\n    Args:\n        test_tuple (tuple): A tuple of any size.\n\n    Returns:\n        bool: True if all elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n\n    # Get the first element of the tuple\n    first_element = type(test_tuple[0])\n\n    # Iterate over the remaining elements of the tuple\n    for element in test_tuple[1:]:\n        # If the current element has a different data type than the first element, return False\n        if type(element)!= first_element:\n            return False\n\n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Loop through each element in the tuple\n    for i in test_tuple:\n        # Get the data type of the current element\n        element_type = type(i)\n        # Check if all elements have same data type or not\n        if element_type!= type(test_tuple[0]):\n            return False\n    # If all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Calculate the count of the element in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Check if the count is more than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize variables for counting occurrences of x and majority\n    count_x = 0\n    majority = None\n    \n    # Loop through array and count occurrences of x and majority\n    for i in range(n):\n        if arr[i] == x:\n            count_x += 1\n        if count_x > n//2 and majority is None:\n            majority = x\n        elif count_x > n//2 and arr[i]!= majority:\n            return False\n    \n    # If there's a majority, return True\n    if majority is not None:\n        return True\n    \n    # If there's no majority, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= (n-1) # clears the least significant bit set to 1 \n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str (str): A string.\n\n    Returns:\n        str: A string with the characters at odd index values removed.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with the odd index values removed.\n    \"\"\"\n    # Initialize an empty string to store the new string without odd index values\n    new_string = \"\"\n    # Loop through each character in the input string\n    for i in range(len(string)):\n        # If the index of the current character is odd, append it to the new string\n        if i % 2 == 1:\n            new_string += string[i]\n    # Return the new string\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    :param str: the input string\n    :type str: str\n    :return: the modified string with the characters at odd index removed\n    :rtype: str\n    \"\"\"\n\n    result = []\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    odd_indices = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_indices.append(i)\n    result = \"\"\n    for i in range(len(odd_indices)):\n        result += str[odd_indices[i]]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    count = 0\n\n    # Iterate over all bits in the given range\n    for i in range(l, r + 1):\n        # If the bit is set, increment the count\n        if n & (1 << i):\n            count += 1\n\n    # If all bits are unset, return True, else return False\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the input numbers to binary strings\n    bin_n = bin(n)[2:]  # remove \"0b\" prefix\n    bin_l = bin(l)[2:]\n    bin_r = bin(r)[2:]\n\n    # Check whether all the bits are unset in the given range or not\n    for i in range(len(bin_n)):\n        if bin_n[i] == '1' and (bin_l[i] == '1' or bin_r[i] == '1'):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # calculate the number of bits set in the range [l, r]\n    num_set = sum([1 for i in range(l, r+1)])\n    # calculate the number of bits in n\n    num_bits = len(bin(n)[2:])\n    # check if num_set == num_bits\n    if num_set == num_bits:\n        # all bits are set in the range [l, r]\n        return True\n    else:\n        # at least one bit is unset in the range [l, r]\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0:\n        return (n & ((1 << r) - 1)) == 0\n    else:\n        return all_Bits_Set_In_The_Given_Range(n >> l, l - 1, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if l < 0 or l >= r or r > n:\n        return \"Invalid Input\"\n\n    if l == 0:\n        for i in range(l, r):\n            if bin(i)[2:]!= \"0\" * (r - l):\n                return False\n        return True\n    else:\n        for i in range(l, r):\n            if bin(i)[2:]!= \"0\" * (r - l):\n                return False\n        return all_Bits_Set_In_The_Given_Range(n, 0, l - 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Using bitwise operators to check if all the bits are unset in the given range or not\n    if (n & (1 << (l - 1))) == 0 and (n & (1 << r)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the given range (l, r) to a binary string\n    binary_string = bin(r)[2:]\n\n    # count the number of unset bits in the binary string\n    unset_bits = binary_string.count('0')\n\n    # check whether all the bits are set or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a list to store the bits set in the given range\n    bit_set_list = []\n\n    # Loop through each bit in the given range\n    for i in range(l, r + 1):\n        # Check if the current bit is set in the given number\n        if (n & (1 << i))!= 0:\n            # If it is set, append it to the bit_set_list\n            bit_set_list.append(i)\n\n    # Check if all bits are unset in the given range\n    if len(bit_set_list) == 0:\n        # If all bits are unset, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): The number to be checked.\n        l (int): The lower bound of the range to be checked.\n        r (int): The upper bound of the range to be checked.\n\n    Returns:\n        bool: True if all bits are set in the given range, False otherwise.\n\n    Examples:\n        >>> all_Bits_Set_In_The_Given_Range(10, 0, 3)\n        True\n        >>> all_Bits_Set_In_The_Given_Range(10, 0, 10)\n        True\n        >>> all_Bits_Set_In_The_Given_Range(10, 1, 5)\n        False\n    \"\"\"\n    # Calculate the number of bits in the given range\n    num_bits = r - l + 1\n\n    # Iterate over each bit in the number and check if it's set or not\n    for i in range(num_bits):\n        # Check if the bit at position i is set or not\n        bit_mask = (1 << i)\n        if bit_mask & n:\n            # If the bit is set, return False\n            return False\n\n    # If all the bits are set, return True\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create a dictionary to store the count of negative and positive elements\n    count_dict = {}\n    for num in arr[:n]:\n        if num < 0:\n            count_dict[num] = count_dict.get(num, 0) + 1\n        else:\n            count_dict[num] = count_dict.get(num, 0) - 1\n\n    # create a list to store the elements in the required order\n    required_list = []\n    for i in range(n):\n        if i < len(arr) and arr[i] < 0:\n            required_list.append(arr[i])\n        if i < len(arr) and arr[i] > 0:\n            required_list.append(arr[i])\n\n    # re-arrange the elements in the required order\n    for num in required_list:\n        if num < 0:\n            count_dict[num] += 1\n        else:\n            count_dict[num] -= 1\n\n    # update the elements in the array\n    arr[:n] = []\n    for i in range(n):\n        if i < len(required_list) and required_list[i] < 0:\n            arr.append(required_list[i])\n        if i < len(required_list) and required_list[i] > 0:\n            arr.append(required_list[i])\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    negatives = []\n    positives = []\n    while i < n:\n        if arr[i] < 0:\n            negatives.append(arr[i])\n            i += 1\n        else:\n            positives.append(arr[i])\n            i += 1\n\n    while j < n:\n        if negatives:\n            arr[j] = negatives.pop(0)\n        else:\n            arr[j] = positives.pop(0)\n            j += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # check if array has at least n elements\n    if len(arr) < n:\n        return \"Error: Input array does not have at least n elements\"\n    \n    # initialize variables for positive and negative elements\n    positive = 0\n    negative = 0\n    \n    # iterate through array and count positive and negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative += 1\n        else:\n            positive += 1\n    \n    # check if there are any negative elements\n    if negative == 0:\n        return \"Error: Input array already contains only positive elements\"\n    \n    # re-arrange positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            j = negative\n            while j >= 0 and arr[j] < 0:\n                j -= 1\n            if j >= 0:\n                arr[j], arr[i] = arr[i], arr[j]\n    \n    # re-arrange negative elements\n    for i in range(n):\n        if arr[i] > 0:\n            j = positive\n            while j >= 0 and arr[j] > 0:\n                j -= 1\n            if j >= 0:\n                arr[j], arr[i] = arr[i], arr[j]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg_count = 0\n    pos_count = 0\n    pos_index = 0\n    result = []\n    \n    # Iterate over the array and count the number of negative and positive elements\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # If the array has fewer than n positive elements, return the original array\n    if pos_count < n:\n        return arr\n    \n    # If the array has more than n negative elements, return the original array\n    elif pos_count > n:\n        return arr\n    \n    # If the array has exactly n positive elements, re-arrange the elements based on their sign\n    else:\n        # Initialize the negative index to be n, and the positive index to 0\n        neg_index = n\n        for i in range(n):\n            # If the current index is negative, add it to the result array and decrement the negative index\n            if neg_index > 0:\n                result.append(arr[neg_index - 1])\n                neg_index -= 1\n            # If the current index is positive, add it to the result array and increment the positive index\n            else:\n                result.append(arr[pos_index])\n                pos_index += 1\n        \n        # Add any remaining negative elements to the result array\n        for i in range(neg_count):\n            result.append(arr[neg_index - 1])\n            neg_index -= 1\n        \n        # Add any remaining positive elements to the result array\n        for i in range(pos_count):\n            result.append(arr[pos_index])\n            pos_index += 1\n        \n        # Return the re-arranged array\n        return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Step 1: Separate the positive and negative elements in two separate lists\n    positive = [x for x in arr if x > 0]\n    negative = [x for x in arr if x < 0]\n\n    # Step 2: Sort the positive elements in descending order\n    positive.sort(reverse=True)\n\n    # Step 3: Merge the positive and negative lists\n    result = positive + negative\n\n    # Step 4: Return the result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is negative, append it to the negative list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # If the current element is positive, append it to the positive list\n        else:\n            pos.append(arr[i])\n\n    # Reverse the negative list\n    neg.reverse()\n\n    # Combine the negative and positive lists and return the result\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers, one at the beginning and one at the end\n    i, j = 0, len(arr) - 1\n    \n    # iterate through the array while the pointers are still within bounds\n    while i < j:\n        # if the current element is negative, swap it with the next element and move the pointer forward\n        if arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            i += 1\n        \n        # if the current element is positive, swap it with the previous element and move the pointer backward\n        elif arr[j] > 0:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n            \n    # return the re-arranged array\n    return arr[:n] + arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two empty lists to store the negative and positive elements\n    negative_list = []\n    positive_list = []\n    \n    # iterate over the array and add elements to the negative_list and positive_list\n    for num in arr:\n        if num < 0:\n            negative_list.append(num)\n        else:\n            positive_list.append(num)\n    \n    # merge the two lists into a single list\n    rearranged_list = negative_list + positive_list\n    \n    # shuffle the list using the Fisher-Yates shuffle algorithm\n    for i in range(len(rearranged_list)):\n        j = i + randint(0, len(rearranged_list)-1)\n        rearranged_list[i], rearranged_list[j] = rearranged_list[j], rearranged_list[i]\n    \n    # truncate the list to the first n elements\n    rearranged_list = rearranged_list[:n]\n    \n    # return the rearranged list\n    return rearranged_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store positive and negative elements\n    pos = []\n    neg = []\n    \n    # Iterate through the array and append positive and negative elements to their respective lists\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    \n    # Create a list to store the re-arranged elements\n    re_arr = []\n    \n    # Iterate through the negative elements and append them to the re-arranged list in reverse order\n    for i in range(len(neg)-1, -1, -1):\n        re_arr.append(neg[i])\n    \n    # Iterate through the positive elements and append them to the re-arranged list\n    for i in range(n):\n        re_arr.append(pos[i])\n    \n    # Return the re-arranged array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # initialize the positive and negative indices\n    pos_indices = list(range(n))\n    neg_indices = list(range(n, len(arr)))\n    # shuffle the positive and negative indices\n    shuffle(pos_indices)\n    shuffle(neg_indices)\n    # rearrange the array by swapping the elements at the corresponding indices\n    arr[pos_indices], arr[neg_indices] = arr[neg_indices], arr[pos_indices]\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # replace all blank spaces in the string with the character\n    str2 = str1.replace(\" \", char)\n    # return the modified string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the modified string.\n    \"\"\"\n    # replace blank spaces with the character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Remove all blank spaces in the string\n    str2 = str1.replace(\" \", \"\")\n    # Replace all blank spaces with the given character\n    str3 = str2.replace(\"\",char)\n    # Return the modified string\n    return str3"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use heapq to sort the list in descending order\n    heapq.heapify(list1)\n    result = []\n    for _ in range(n):\n        # Remove the largest element from the heap and add it to the result list\n        result.append(heapq.heappop(list1))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # using heapq module to find the n largest numbers from the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # converting the heap to a list and returning it\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # Create a min heap and insert the first n items from the list\n    min_heap = []\n    for item in list1[:n]:\n        heapq.heappush(min_heap, item)\n\n    # Extract the n largest items from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        # create a min heap of n largest items\n        max_heap = []\n        for i in range(n):\n            heapq.heappush(max_heap, -heapq.heappushpop(list1))\n        # extract and return the n largest items from the heap\n        return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * r * h\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    area = (math.pi * r**2) + (math.pi * r**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*(r**2+h)\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n\n    \"\"\"\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = (2*math.pi*r*h)/3\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * (r ** 2 + h ** 2)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3 # calculate volume of cube\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n_binary = bin(n)[2:] # Convert integer to binary string\n    even_bits = \"\" # Empty string to store even bits\n    for bit in n_binary:\n        if int(bit) % 2 == 0: # Check if bit is even\n            even_bits += bit # Append even bit to even_bits string\n    return int(even_bits, 2) # Convert even_bits string to integer"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the number with even bits set\n    even_set_number = 0\n\n    # iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set it to 1\n        if int(bit) == 0:\n            even_set_number |= (1 << (len(bin(n)[2:]) - int(bit)))\n\n    # return the even_set_number\n    return even_set_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    for i in range(1, n+1):\n        if i & 1 == 0: # check if i is even\n            n |= (1 << i) # set the corresponding bit to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1) & ~(n & 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    for i in range(32):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n |= n >> 1 # Bitwise OR with one shifted right\n    n |= n >> 2 # Bitwise OR with two shifted right\n    n |= n >> 4 # Bitwise OR with four shifted right\n    n |= n >> 8 # Bitwise OR with eight shifted right\n    n |= n >> 16 # Bitwise OR with sixteen shifted right\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(8):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to keep track of the number of even bits\n    count = 0\n    \n    # Iterate over each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set its value to 1 and increment count\n        if int(bit) == 0:\n            n = n ^ 1 << count\n            count += 1\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initializing the even bit set to 0\n    even_bit_set = 0\n    # Looping through each bit in the given number\n    for i in range(32):\n        # If the current bit is even\n        if n & 1 == 0:\n            # Setting the corresponding bit in the even_bit_set to 1\n            even_bit_set |= 1 << i\n    # Returning the even_bit_set\n    return even_bit_set"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of occurrences of each tuple\n    count_dict = {}\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # If the tuple is already in the count_dict, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the count_dict with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Iterate over the tuples in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter class from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n    for item in test_list:\n        # Use Counter to count the number of occurrences of each tuple\n        count_dict[tuple(item)] = Counter(item)[tuple(item)]\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to get unique tuples\n    unique_tuples = set(test_list)\n    # Use Counter to count the occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n    # Convert the Counter dictionary to a normal dictionary\n    final_dict = count_dict.to_dict()\n    return final_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    # loop through the test list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # increment the count of the tuple\n            count_dict[tup] += 1\n        else:\n            # add the tuple to the dictionary and set its count to 1\n            count_dict[tup] = 1\n    # return the dictionary of count of each tuple\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Start and end indices of current substring\n        start = i\n        end = i\n        \n        # Move end index to the next character if the current character is not a letter\n        while not str[end].isalpha():\n            end += 1\n            \n        # Move start index to the previous character if the current character is not a letter\n        while not str[start-1].isalpha():\n            start -= 1\n            \n        # Check if the substring is non-empty\n        if end > start:\n            count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize variables\n    count = 0\n    # Loop through all substrings of the string\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            # Check if the substring is not empty\n            if j > i and str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    # Initialize count to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the character is a vowel\n        if string[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            # Check if the character is at the beginning or end of the substring\n            if i == 0 or i == len(string) - 1:\n                # If it's at the beginning or end, count it as 1\n                count += 1\n            else:\n                # Otherwise, count the number of times it occurs in the substring\n                count += string.count(string[i])\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(string):\n    substrings = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)+1):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as an input and returns the number of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j] and len(str[i:j]) > 0: \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    # Initialize a counter for non-empty substrings\n    count = 0\n    # Iterate over all possible substrings of the input string\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            # Check if the substring is non-empty\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 1\n    prev_element = 0\n    for i in range(1, m):\n        if i >= 2 * prev_element and i <= m:\n            total_sequences *= (i - prev_element) // 2\n        prev_element = i\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the total number of sequences to 0\n    total_sequences = 0\n\n    # Initialize the first element of the sequence\n    prev_element = 0\n\n    # Loop through all possible values of i\n    for i in range(2,m+1):\n\n        # Initialize the current element of the sequence\n        current_element = 2*prev_element\n\n        # Check if the current element is within the range of [2*prev_element, m]\n        if 2*prev_element <= m and 2*prev_element <= i and i < m:\n\n            # Increment the total number of sequences\n            total_sequences += 1\n\n            # Check if the current element is the last element of the sequence\n            if current_element == m:\n                total_sequences += 1\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    sequence = [0]\n    while sequence[-1] < m:\n        sequence.append(sequence[-1] + 1)\n        if len(sequence) == n:\n            total_number_of_sequences += 1\n            sequence = [0]\n    return total_number_of_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev_num = 0\n    for i in range(1, n+1):\n        num = prev_num + 2 * prev_num\n        if num <= m:\n            count += 1\n        prev_num = num\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        previous_element = sequence[0]\n        for element in sequence[1:]:\n            if element < previous_element * 2 or element > m:\n                return False\n            previous_element = element\n        return True\n\n    total_sequences = 0\n    for i in range(1, m + 1):\n        sequence = [i]\n        while len(sequence) < n:\n            next_element = sequence[-1] + 1 if next(i) <= m else 2\n            sequence.append(next_element)\n            if is_valid_sequence(sequence):\n                total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m + 1):\n        if i >= 2 * i and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    for i in range(1,m+1):\n        next_num = max(2*i,2*i-m)\n        if next_num <= n:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize a dictionary to store the count of sequences\n    seq_count = {}\n    \n    # Initialize the count of sequences as 0\n    seq_count[0] = 0\n    \n    # Iterate over all possible values of the previous element\n    for i in range(1, m+1):\n        # Calculate the next element of the sequence\n        next_elem = 2*i\n        \n        # Check if the next element is greater than or equal to twice the previous element and less than or equal to m\n        if next_elem >= 2*i and next_elem <= m:\n            # If the next element is valid, increment the count of sequences of length n\n            seq_count[n] = seq_count.get(n, 0) + seq_count.get(next_elem, 0)\n    \n    # Return the total count of sequences\n    return sum(seq_count.values())"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    last = 0\n    # Loop through all possible sequences\n    for i in range(m, 2*m, 2):\n        if i < n:\n            if i <= last + 2 and i >= 2*last:\n                count += 1\n        last = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers, m and n, and returns the total number of sequences of length n, where each element is a positive integer greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m * (m - 1) // 2\n    elif n == 2:\n        return 2 * m * (m - 1) // 6\n    else:\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 1, n - 1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1[-1] = list2\n        return replace_list(list1[:-1], list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Calculate the length of the list1\n    length = len(list1)\n\n    # If the length of list1 is 1, replace the last element with list2\n    if length == 1:\n        list1[0] = list2\n    # If the length of list1 is greater than 1, replace the last element with the concatenation of list2 and the last elements of list1\n    else:\n        list1[-1] = list2 + list1[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1] + list1[-1]\n    list1.pop()\n    list1.pop()\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the second list is longer than the first list\n    if len(list2) > len(list1):\n        # replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n        print(\"First list after replacement: \", list1)\n    else:\n        print(\"Second list is longer than the first list.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = len(str1)\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for char in str1:\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n\n    def is_square(num):\n        \"\"\"\n        This function takes a positive integer num and returns True if num is a perfect square, False otherwise.\n        \"\"\"\n        root = math.sqrt(num)\n        return root == int(root) and root!= 0\n\n    def next_square(num):\n        \"\"\"\n        This function takes a positive integer num and returns the next perfect square greater than num.\n        \"\"\"\n        root = math.sqrt(num)\n        square = int(root) + 1\n        while square ** 2 <= num:\n            square += 1\n        return square\n\n    if N > 1:\n        if is_square(N):\n            while N % is_square(N)!= 0:\n                N -= 1\n        else:\n            N = next_square(N)\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n  \n    # function to check whether a number is a perfect square or not \n    def isPerfectSquare(num): \n        root = int(math.sqrt(num)) \n        return (num == int(num)**2 and root*root == num) \n  \n    # initialize variables \n    i = N + 1 \n    while True: \n        if i * i > N: \n            return i - 1 \n        if isPerfectSquare(i): \n            return i \n  \n    # function to find next perfect square greater than N \n    def next_perfect_square(N): \n  \n        # check for perfect square greater than N \n        for i in range(N, -1, -1): \n            if isPerfectSquare(i): \n                return i \n  \n        # if no perfect square is found, return N \n        return N \n  \n    # test the function \n    print(next_perfect_square(10)) # Output: 11"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Compute the square root of N\n    sqrtN = math.sqrt(N)\n    sqrtN_int = math.ceil(sqrtN)\n\n    # Check if the square root of N is an integer\n    if sqrtN_int == sqrtN:\n        # If the square root of N is an integer, we have the next perfect square\n        return sqrtN_int**2\n\n    else:\n        # If the square root of N is not an integer, we need to round up to the next integer\n        return (sqrtN_int + 1)**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function calculates the next perfect square greater than a given number N.\n    \"\"\"\n    # converting N to float to avoid integer division\n    N = float(N)\n    # initializing a variable to keep track of the current square\n    current_square = N\n    # initializing a variable to keep track of the next perfect square\n    next_square = N\n    \n    # calculating the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # loop to iterate from 0 to sqrt_N\n    for i in range(sqrt_N):\n        # calculating the next perfect square\n        next_square = current_square + (current_square - 1) // 2\n        # checking if the next perfect square is greater than N\n        if next_square > N:\n            # returning the next perfect square\n            return next_square\n        # updating the current square to the next perfect square\n        current_square = next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Initialize the result to the first perfect square\n    result = 1\n    \n    # Check if the given number is a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        # If it is, return the next perfect square\n        result = int(math.sqrt(N) + 1) * int(math.sqrt(N) + 1)\n    else:\n        # Otherwise, continue until the next perfect square is greater than the given number\n        while result <= N:\n            result *= 2\n    \n    # Return the next perfect square\n    return result"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    # Find the square root of sqrt_N\n    sqrt_sqrt_N = int(math.sqrt(sqrt_N))\n    # Calculate the next perfect square by adding sqrt_sqrt_N to the sqrt_N\n    next_N = sqrt_sqrt_N + sqrt_N\n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Find the square root of the input number\n    sqrt_N = math.sqrt(N)\n\n    # Find the integer part of the square root\n    int_part = int(sqrt_N)\n\n    # Find the square of the integer part\n    square_int_part = int_part**2\n\n    # Find the difference between the input number and the square of the integer part\n    diff = N - square_int_part\n\n    # If the difference is less than or equal to 0, then the input number is already a perfect square\n    if diff <= 0:\n        return N\n\n    # Find the square root of the difference\n    sqrt_diff = math.sqrt(diff)\n\n    # Check if the difference is even or odd\n    if sqrt_diff % 1 == 0:\n        # If the difference is even, then the next perfect square is the square of the integer part plus the square root of the difference\n        next_psq = square_int_part + sqrt_diff\n    else:\n        # If the difference is odd, then the next perfect square is the square of the integer part plus one plus the square root of the difference\n        next_psq = square_int_part + 1 + sqrt_diff\n\n    # Return the next perfect square\n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n    perfect_square = math.isqrt(sqrt_N**2) + sqrt_N\n    \n    if perfect_square**2 == N:\n        return perfect_square\n    \n    while perfect_square**2 <= N:\n        sqrt_N += 1\n        perfect_square = math.isqrt(sqrt_N**2) + sqrt_N\n        \n        if perfect_square**2 == N:\n            return perfect_square\n    \n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        a = N + 1\n        b = math.sqrt(a)\n        if a == b*b:\n            return a\n        else:\n            N = b"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \n    If N is already a perfect square, the function returns N itself.\n    \"\"\"\n    # Check if N is a perfect square\n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N * sqrt_N == N:\n        return N\n    \n    # Find the next greater perfect square\n    sqrt_N -= 1\n    next_sqrt_N = int(math.sqrt(sqrt_N)) + 1\n    next_perfect_square = next_sqrt_N * next_sqrt_N\n    \n    # Check if the next perfect square is greater than N\n    while next_perfect_square > N:\n        next_sqrt_N -= 1\n        next_perfect_square = next_sqrt_N * next_sqrt_N\n    \n    return next_perfect_square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = dp[i - 1] - arr[i]\n\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Check if the array is bitonic\n    if is_bitonic(arr):\n        return arr[0]\n\n    # Find the maximum sum of a subsequence ending at each index\n    max_sum_left = float('-inf')\n    max_sum_right = float('-inf')\n    max_sum = float('-inf')\n\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum_left = max(arr[i], max_sum_left + arr[i])\n            max_sum = max(max_sum, max_sum_left)\n        else:\n            max_sum_right = max(arr[i], max_sum_right + arr[i])\n            max_sum = max(max_sum, max_sum_right)\n\n    return max_sum\n\n\ndef is_bitonic(arr):\n    \"\"\"\n    Check if the array is bitonic.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return False\n\n    if arr[0] < arr[1]:\n        return False\n\n    if n == 2:\n        return True\n\n    if arr[n-1] > arr[n-2]:\n        return False\n\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            return False\n        if arr[i] > arr[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n\n    # Find the left and right extremes of the array\n    left = arr[0]\n    right = arr[-1]\n\n    # Initialize the maximum sum of the left and right subarrays\n    left_sum = 0\n    right_sum = 0\n\n    for i in range(1, len(arr)-1):\n        # Update the left subarray\n        if arr[i] > arr[i-1]:\n            left_sum += arr[i]\n        else:\n            left_sum = max(left_sum - arr[i], left_sum)\n\n        # Update the right subarray\n        if arr[i] > arr[i+1]:\n            right_sum += arr[i]\n        else:\n            right_sum = max(right_sum - arr[i], right_sum)\n\n    return max(left_sum, right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables to store the maximum sum and the sum of the subsequence that is increasing and decreasing\n    max_sum_inc = 0\n    max_sum_dec = 0\n    # Initialize a variable to store the current sum\n    curr_sum = 0\n    # Traverse through the array\n    for i in range(n):\n        # If the current element is increasing, add it to the sum and check if it is greater than the maximum sum of the increasing subsequence\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n            if curr_sum > max_sum_inc:\n                max_sum_inc = curr_sum\n        # If the current element is decreasing, subtract it from the sum and check if it is greater than the maximum sum of the decreasing subsequence\n        elif arr[i] < arr[i-1]:\n            curr_sum -= arr[i]\n            if curr_sum > max_sum_dec:\n                max_sum_dec = curr_sum\n    # Return the maximum sum of the bitonic subsequence\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    i = 0\n    n = len(arr)\n    bitonic_sum = 0\n\n    # Traverse the array and find the maximum sum of a bitonic subsequence\n    while i < n-1:\n        if arr[i] < arr[i+1]: # Check if the current element is increasing\n            bitonic_sum += arr[i+1]\n            i += 1\n        else: # If the current element is decreasing, check if the sum is greater than the current maximum sum\n            if bitonic_sum > max_sum:\n                max_sum = bitonic_sum\n            bitonic_sum = arr[i]\n            i += 1\n\n    # Check if the last bitonic subsequence is greater than the current maximum sum\n    if bitonic_sum > max_sum:\n        max_sum = bitonic_sum\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    max_left = arr[0]\n    max_right = arr[n-1]\n    max_sum = max(max_left, max_right)\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            max_sum = max(max_sum + arr[i], max_left)\n        else:\n            max_sum = max(max_sum, max_left)\n        max_left = max(max_left, max_right)\n        max_right = max(max_right, arr[n-1])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    # Check if the array is increasing or decreasing\n    if arr[0] < arr[1]:\n        direction = 1\n    else:\n        direction = -1\n    \n    # Initialize variables\n    left_sum = 0\n    right_sum = 0\n    max_sum = 0\n    left_start = 0\n    right_start = 0\n    \n    # Traverse the array from left to right\n    for i in range(1, n):\n        # If the current element is increasing, add the element to the left sum\n        if arr[i] > arr[i-1]:\n            left_sum += arr[i]\n        # If the current element is decreasing, subtract the element from the right sum\n        else:\n            right_sum += arr[i]\n        \n        # Update the maximum sum if the left sum is larger than the right sum\n        if left_sum > right_sum:\n            max_sum = max(max_sum, left_sum)\n            left_start = i\n        # Update the maximum sum if the right sum is larger than the left sum\n        else:\n            max_sum = max(max_sum, right_sum)\n            right_start = i\n        \n        # Change the direction of the array if it's not bitonic anymore\n        if left_sum < right_sum:\n            direction *= -1\n    \n    # If the maximum sum is still 0, the array is not bitonic\n    if max_sum == 0:\n        return 0\n    \n    # Find the maximum subarray of increasing or decreasing elements\n    left_subarray = []\n    right_subarray = []\n    left_start = 0\n    right_start = 0\n    \n    for i in range(left_start, right_start+1):\n        if arr[i] > arr[i-1]:\n            left_subarray.append(arr[i])\n        else:\n            right_subarray.append(arr[i])\n    \n    # Calculate the maximum sum of the subarray\n    left_sum = 0\n    right_sum = 0\n    for i in range(len(left_subarray)):\n        if left_subarray[i] > left_subarray[i-1]:\n            left_sum += left_subarray[i]\n        else:\n            left_sum -= left_subarray[i]\n    \n    for i in range(len(right_subarray)-1, -1, -1):\n        if right_subarray[i] > right_subarray[i+1]:\n            right_sum += right_subarray[i]\n        else:\n            right_sum -= right_subarray[i]\n    \n    return max(left_sum, right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize the variables to store the maximum sum of increasing subsequence and maximum sum of decreasing subsequence\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n\n    # Iterate over the array and calculate the maximum sum of increasing subsequence and maximum sum of decreasing subsequence\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n        else:\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], arr[i])\n\n    # Calculate the maximum sum of the two subsequences\n    max_sum_bitonic = max(max_sum_increasing, max_sum_decreasing)\n\n    return max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    inc = 0\n    dec = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            inc += arr[i]\n        elif arr[i] > arr[i-1]:\n            dec += arr[i]\n        else:\n            continue\n        if inc > dec:\n            max_sum = max(max_sum, inc)\n            inc = 0\n        else:\n            max_sum = max(max_sum, dec)\n            dec = 0\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    n = len(arr) \n    dp = [0] * n \n    max_sum = float('-inf') \n    start = 0 \n    end = 1 \n\n    while end < n: \n        if arr[start] < arr[end]: \n            dp[end] = dp[start] + arr[end] \n        else: \n            dp[end] = arr[end] \n\n        if dp[end] > max_sum: \n            max_sum = dp[end] \n\n        if arr[end] < arr[start]: \n            start += 1 \n        else: \n            end += 1 \n\n    return max_sum "
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number/x) / 2\n    while abs(x - y) > 0.0001:\n        x = y\n        y = (x + number/x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute square root of a number using the babylonian method.\n    \n    :param number: the number for which we want to compute the square root\n    :return: the square root of the input number\n    \"\"\"\n    # Babylonian method:\n    # 1. Initialize two variables: a and b, such that a^2 <= number and b^2 > number.\n    # 2. Compute the square root of b using the formula b^(1/2) = (a+b)/(2a).\n    # 3. Update the values of a and b using the formula a^2 = b^2 + 4ab.\n    # 4. Repeat steps 2 and 3 until the difference between a^2 and number is less than a small epsilon.\n    # 5. Return the computed square root.\n    # Note that this implementation assumes that the input number is positive.\n    \n    # initialize two variables a and b\n    a = 1\n    b = number\n    \n    # stop criterion: difference between a^2 and number is less than epsilon\n    epsilon = 1e-10\n    \n    # repeat until the difference between a^2 and number is less than epsilon\n    while abs(a**2-number) > epsilon:\n        # compute the square root of b using the formula b^(1/2) = (a+b)/(2a)\n        b_new = (a+b)/(2*a)\n        \n        # update the values of a and b using the formula a^2 = b^2 + 4ab\n        a_new = b_new**2 + 4*b_new*a\n        \n        # update the values of a and b\n        a, b = a_new, b_new\n        \n    # return the computed square root\n    return b"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square roots using the babylonian method.\n    \"\"\"\n    x = number\n    y = 0\n    for _ in range(100):\n        x_new = (x + number // x) // 2\n        y = x\n        x = x_new\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    while abs(x * x - number) > 0.00001:\n        x = (x + number / x) / 2.0\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number, precision=1e-10, max_iterations=1000):\n    '''\n    Write a function for computing square roots using the babylonian method.\n\n    Args:\n        number (float): the number to compute the square root of\n        precision (float): the precision to stop the Newton-Raphson method at (default 1e-10)\n        max_iterations (int): the maximum number of iterations to perform (default 1000)\n\n    Returns:\n        float: the square root of the input number using the babylonian method\n    '''\n    # initial guess\n    x = 1.0\n\n    # loop until the difference between the previous and current values of x is less than the precision\n    for i in range(max_iterations):\n        fx = x * x - number\n        dx = 2 * x\n\n        if abs(fx) < precision:\n            break\n\n        x -= fx / dx\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return 'Number must be non-negative.'\n\n    # initialize the guess\n    guess = number / 2.0\n\n    # perform the iterations\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2.0\n\n    # return the result\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # check if input is a float\n    if not isinstance(number, float):\n        raise TypeError(\"Input must be a float.\")\n    # check if input is negative\n    if number < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    # initialize variables\n    x = number\n    y = (x + number / x) / 2\n    # iterate until x and y are the same\n    while abs(x - y) > 1e-10:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    x = 1\n    y = number\n    \n    # Calculate initial guess using babylonian method\n    while True:\n        x_prev = x\n        x = (x + y/x) / 2\n        if abs(x - x_prev) < 1e-10:\n            break\n    \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    last_guess = 0\n    i = 0\n    while abs(last_guess - guess) >= 0.0001:\n        last_guess = guess\n        guess = (guess + number/guess) / 2\n        i += 1\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize the current guess of the square root\n    guess = number / 2\n\n    # initialize the number of iterations\n    count = 0\n\n    # loop until the difference between the current guess and the square root is less than a certain threshold\n    while abs(guess**2 - number) > 0.00001:\n        # update the guess by the average of the current and previous guesses\n        guess = (guess + number / guess) / 2\n\n        # update the count of iterations\n        count += 1\n\n    # print the square root and the number of iterations\n    print(\"The square root of\", number, \"is approximately\", guess)\n    print(\"It took\", count, \"iterations to converge.\")"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    # Create a 2D array to store all possible lengths of palindrome subsequences\n    L = [[0] * len(str) for i in range(len(str))]\n    \n    # Initialize the first row and first column with 1\n    for i in range(len(str)):\n        L[i][i] = 1\n    \n    # Fill the rest of the array using dynamic programming\n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                L[i][j] = 2 + L[i+1][j-1]\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n    \n    # Return the length of the longest palindrome subsequence\n    return L[0][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # create a table to store the length of longest palindromic subsequence ending at each position in the string\n    t = [[0 for j in range(n)] for i in range(n)]\n\n    # fill the table in bottom-up manner\n    for i in range(n):\n        t[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                t[i][j] = t[i+1][j-1] + 2\n            else:\n                t[i][j] = max(t[i+1][j], t[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last position in the string\n    return t[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [0] * n\n        for i in range(n):\n            if str[i] == str[i]:\n                dp[i] = 2\n            else:\n                dp[i] = 1\n        for i in range(2, n):\n            if str[i-1] == str[i]:\n                dp[i] = dp[i-1] + 2\n            else:\n                dp[i] = max(dp[i-1], dp[i])\n        return dp[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 1\n    start = 0\n\n    for i in range(1, len(str)):\n        # Check if the substring starting from i is a palindrome\n        if str[i] == str[i - 1]:\n            # If it is, check if its length is longer than the previous longest palindrome\n            if i - start + 1 > max_len:\n                max_len = i - start + 1\n                start = i - max_len + 1\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Find the length of the longest palindrome substring\n    def is_palindrome(substring):\n        return substring == substring[::-1]\n\n    longest_palindrome = \"\"\n    max_length = 0\n    for i in range(len(str)):\n        # Check if the substring from i to the end of the string is a palindrome\n        if is_palindrome(str[i:]):\n            # Update the longest palindrome found so far\n            if len(str[i:]) > max_length:\n                longest_palindrome = str[i:]\n                max_length = len(str[i:])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table of size (n+1) x (n+1)\n    lps_table = [[0]*(n+1) for _ in range(n+1)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n+1):\n        lps_table[i][0] = 0\n        lps_table[0][i] = 0\n\n    # Fill in the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1]:\n                lps_table[i][j] = lps_table[i-1][j-1] + 1\n            else:\n                lps_table[i][j] = max(lps_table[i-1][j], lps_table[i][j-1])\n\n    return lps_table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def longest_palindrome_subsequence(s):\n    n = len(s)\n    # create a 2D array to store the length of longest palindrome subsequence for all prefixes of s\n    lps = [[0 for j in range(n)] for i in range(n)]\n    # length of longest palindrome subsequence for odd length strings is 2\n    for i in range(n):\n        lps[i][i] = 1\n    # fill in the 2D array using dynamic programming\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                lps[i][j] = lps[i + 1][j - 1] + 2\n            else:\n                lps[i][j] = max(lps[i][j - 1], lps[i + 1][j])\n    # return the length of longest palindromic subsequence\n    return lps[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize variables\n    n = len(str)\n    max_length = 1\n    start = 0\n\n    # Check for odd length strings\n    if n % 2 == 1:\n        start = 1\n        max_length = 2\n\n    # Check for palindromes\n    for i in range(start, n):\n        # Check for odd length palindromes\n        if i == n - 1 or (i < n - 1 and str[i] == str[i + 1]):\n            length = 2\n            while i - length >= 0 and i + length < n and (str[i - length] == str[i + length]):\n                length += 2\n            if length > max_length:\n                max_length = length\n                start = i - length\n\n    # Return the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    n = len(str)\n    # Initialize the length of longest palindromic subsequence\n    max_len = 1\n\n    # Initialize the table to store the lengths of longest palindromic subsequences\n    # for substrings of length i\n    lps_table = [[0 for j in range(n)] for i in range(n)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n):\n        for j in range(i, n):\n            # If the characters at the current indices are same\n            if str[i] == str[j]:\n                # If the length of the current palindrome subsequence is greater than the\n                # length of the longest palindrome subsequence found so far, update the value\n                if j - i + 1 > lps_table[i][j - i]:\n                    lps_table[i][j] = j - i + 1\n                    max_len = max(max_len, j - i + 1)\n            # If characters at the current indices are not same\n            else:\n                # If the length of the current palindrome subsequence is greater than the\n                # length of the longest palindrome subsequence found so far, update the value\n                if j - i > lps_table[i][j]:\n                    lps_table[i][j] = j - i\n                    max_len = max(max_len, j - i)\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0]*n for i in range(n)]\n    maxLength = 0\n    start = 0\n    end = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > maxLength:\n                    maxLength = dp[i][j]\n                    start = i\n                    end = j\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return s[start:end+1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1 / i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1 using the formula (1/n) + (1/n-1) +... + (1/1)\n    harmonic_sum = 1.0 / n\n    for i in range(2, n):\n        harmonic_sum += 1.0 / (i - 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (1/2) * (1/harmonic_sum(n-1) + 1/harmonic_sum(n-2))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    sum = 0\n\n    for i in range(1, n):\n        sum += 1 / i\n\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Calculate the harmonic sum using the formula:\n    # harmonic_sum = 1/n * sum(1/k for k in range(1, n+1))\n    harmonic_sum = 1/n * sum(1/i for i in range(1, n+1))\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # create a set from array_nums1 and then convert to list\n    set_nums1 = list(set(array_nums1))\n    # create another set from array_nums2 and then convert to list\n    set_nums2 = list(set(array_nums2))\n    # find the intersection of the two sets\n    intersection = set_nums1 & set_nums2\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersect_set = set1.intersection(set2)\n    return list(intersect_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the intersection of the arrays\n    intersection = set()\n\n    # Iterate over the first array\n    for num in array_nums1:\n        # If the number is also present in the second array, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of the second array\n    set_nums2 = set(array_nums2)\n\n    # create an empty set to store the intersection of the first and second arrays\n    intersection_set = set()\n\n    # iterate over the first array\n    for num in array_nums1:\n        # if the number is in the second array and not already in the intersection set, add it\n        if num in set_nums2 and num not in intersection_set:\n            intersection_set.add(num)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n    \n    # Iterate through the second array and check if the frequency of each element is present in the first array\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    # Return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns a list of the intersection of two arrays.\n    \"\"\"\n    # First, we create a dictionary to store the frequency of each element in the second array\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Now, we iterate through the first array and check if each element appears in the frequency dictionary\n    result = []\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            result.append(num)\n            freq_dict[num] -= 1\n\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create dictionaries to store the counts of each element in both arrays\n    count_dict1 = {}\n    count_dict2 = {}\n    for num in array_nums1:\n        count_dict1[num] = count_dict1.get(num, 0) + 1\n    for num in array_nums2:\n        count_dict2[num] = count_dict2.get(num, 0) + 1\n    # Find the intersection of the two dictionaries using set intersection\n    intersection_set = set(count_dict1.keys()) & set(count_dict2.keys())\n    # Convert the set back to a list and return the intersection\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    # create a set of the first array\n    set_nums1 = set(array_nums1)\n    # loop through the second array and check if each element is in the set of the first array\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2 and num1 not in intersection:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    # Create a set of the unique elements in array_nums1\n    set1 = set(array_nums1)\n    # Create a set of the unique elements in array_nums2\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Return a list of the elements in the intersection set\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and returns the number of times the element appears in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0, element)\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n            result.append(list[i])\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    # create a new list to hold the updated list with the element inserted before each element in the original list\n    result = []\n    # loop through each element in the original list\n    for item in list:\n        # insert the element before the current item in the result list\n        result.insert(0, item)\n    # add the element to the end of the result list\n    result.append(element)\n    # return the updated result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        a = num.real\n        b = num.imag\n        r = cmath.sqrt(a**2 + b**2)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # split the complex number into real and imaginary parts\n        real = num.real\n        imag = num.imag\n        # calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        # create a new complex number with polar coordinates\n        polar = complex(magnitude, angle)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    # iterate through each complex number in the list\n    for number in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n\n        # calculate the magnitude (absolute value) of the complex number\n        mag = cmath.sqrt(real ** 2 + imag ** 2)\n\n        # calculate the angle (phase) of the complex number in radians\n        if mag == 0:\n            angle = 0\n        else:\n            angle = cmath.phase(number)\n\n        # create a tuple of the magnitude and angle\n        polar_tuple = (mag, angle)\n\n        # print the polar representation of the complex number\n        print(polar_tuple)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    result = []  \n    for num in numbers:  \n        # convert the complex number to polar coordinates  \n        r = cmath.sqrt(num.real**2 + num.imag**2)  \n        theta = cmath.phase(num)  \n        # add the polar coordinate to the result list  \n        result.append((r, theta))  \n    return result  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert the complex numbers to polar coordinates\n    polar_numbers = []\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_numbers.append((magnitude, angle))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imaginary = number.imag\n        magnitude = cmath.sqrt(real**2 + imaginary**2)\n        angle = cmath.phase(number)\n        print(\"Magnitude:\", magnitude)\n        print(\"Angle (rad):\", angle)\n        print(\"Angle (deg):\", angle * 180/cmath.pi)\n        print()"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        if isinstance(number, complex):\n            polar = cmath.polar(number)\n            result.append(polar)\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            real = abs(number)\n            imag = cmath.phase(number)\n            print(f\"({real:.2f}, {imag:.2f})\")\n        else:\n            print(number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = cmath.abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((modulus, angle))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green', 'yellow']\n    for i in range(2, n+1):\n        for comb in combinations_with_replacement(colors, i):\n            yield tuple(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n-1):\n            combinations.append(tuple(l[i:i+n]))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green', 'yellow', 'purple']\n    return list(combinations_with_replacement(colors, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = set(['red', 'green', 'blue']) # set of possible colors\n\n    # generate all combinations of colors with length n\n    combinations = combinations_with_replacement(colors, n)\n\n    # create a list with a tuple for each combination\n    combinations_list = [(c,) * n for c in combinations]\n\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Create an empty list to store the combinations\n    combinations_list = []\n    \n    # Loop through the list of colors and generate all combinations with repetition\n    for color in l:\n        for comb in combinations_with_replacement(color, n):\n            # Add the combination to the list of combinations\n            combinations_list.append(tuple(comb))\n    \n    return combinations_list"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2,i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    i = 2\n    while i < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    count = 0\n\n    # Check all numbers from 2 to n-1\n    for num in range(2, n):\n        is_prime = True\n\n        # Check if num is prime\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        # If num is prime, add it to list of primes and increment count\n        if is_prime:\n            primes.append(num)\n            count += 1\n\n    return count, primes"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # check if the input is a positive integer\n    if n < 1:\n        return \"Input should be a positive integer greater than or equal to 1.\"\n    \n    # initialize count variable to 0\n    count = 0\n    \n    # initialize list of primes\n    primes = []\n    \n    # loop through numbers from 2 to n-1\n    for num in range(2, n):\n        # check if the number is prime\n        is_prime = True\n        for prime in primes:\n            if prime > num:\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n        # if the number is prime, add it to the list and increment count\n        if is_prime:\n            primes.append(num)\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2,n):\n        if all(i % j!= 0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1 if max(test_tup1) > max(test_tup2) else test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Compare the lengths of the tuples\n    if len1 > len2:\n        return test_tup1\n    elif len2 > len1:\n        return test_tup2\n    else:\n        # If the lengths are equal, compare the elements\n        for i in range(len1):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2\n            else:\n                pass  # If the elements are equal, do nothing\n            \n"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    # maximize each element of the two tuples\n    max_tup1 = [max(x1, x2) for x1, x2 in zip(test_tup1, test_tup2)]\n    max_tup2 = [max(x1, x2) for x1, x2 in zip(test_tup1, test_tup2)]\n    # check if the max values of the two tuples are equal\n    if max(max_tup1) == max(max_tup2):\n        return max_tup1\n    else:\n        return max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # create an empty list to store the maximum values\n    max_values = []\n\n    # loop through the two tuples\n    for tup in [test_tup1, test_tup2]:\n\n        # loop through each element in the tuple and compare it to the current maximum values in the list\n        for element in tup:\n            if element not in max_values or element > max_values[-1]:\n                max_values.append(element)\n\n    # return the maximum values\n    return max_values"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        if test_tup1 > test_tup2:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Find the maximum length tuple\n    max_tup = None\n    if len1 > len2:\n        max_tup = test_tup1\n    elif len2 > len1:\n        max_tup = test_tup2\n    else:\n        # Check if the tuples are equal in length\n        for i in range(len1):\n            if test_tup1[i] > test_tup2[i]:\n                max_tup = test_tup1\n                break\n            elif test_tup1[i] < test_tup2[i]:\n                max_tup = test_tup2\n                break\n            else:\n                continue\n        \n        if max_tup == None:\n            max_tup = test_tup1\n            \n    # Return the maximum tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples should have the same length.\")\n\n    # Check if the input tuples have different types\n    if not all(isinstance(x, int) for x in test_tup1) or not all(isinstance(x, int) for x in test_tup2):\n        raise TypeError(\"The input tuples should have only integer elements.\")\n\n    # Check if the input tuples have negative values\n    if any(x < 0 for x in test_tup1) or any(x < 0 for x in test_tup2):\n        raise ValueError(\"The input tuples should have only non-negative elements.\")\n\n    # Create a list of tuples to store the max values\n    max_list = []\n\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Add the element to the max_list if it's greater than the max element in the list\n        if test_tup1[i] > max_list[-1][0]:\n            max_list.append((test_tup1[i], i))\n        # If the element is not greater than the max element, check if it's greater than the max element in the list\n        elif test_tup1[i] > max_list[-1][0] and test_tup2[i] > max_list[-1][0]:\n            max_list.append((max(test_tup1[i], test_tup2[i]), i))\n\n    # Iterate through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # Add the element to the max_list if it's greater than the max element in the list\n        if test_tup2[i] > max_list[-1][0]:\n            max_list.append((test_tup2[i], i))\n        # If the element is not greater than the max element, check if it's greater than the max element in the list\n        elif test_tup2[i] > max_list[-1][0] and test_tup1[i] > max_list[-1][0]:\n            max_list.append((max(test_tup1[i], test_tup2[i]), i))\n\n    # Sort the max_list in ascending order of the values\n    max_list.sort(key=lambda x: x[0])\n\n    # Return the max_list\n    return max_list"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # create empty lists to store the max values\n    max_tup1 = []\n    max_tup2 = []\n\n    # iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n\n        # get the current element from the tuple\n        curr_elem = test_tup1[i]\n\n        # compare the current element to the max values from the previous tuples\n        if curr_elem > max_tup1[i]:\n            max_tup1[i] = curr_elem\n        if curr_elem > max_tup2[i]:\n            max_tup2[i] = curr_elem\n\n    # check if the current max values from the previous tuples are greater than 0\n    if max_tup1[0] > 0 and max_tup2[0] > 0:\n        # if they are, return the max values as a new tuple\n        return (max_tup1[0], max_tup2[0])\n    elif max_tup1[0] > 0:\n        # if max_tup1 is greater than 0 but max_tup2 is 0, return max_tup1 as a new tuple\n        return max_tup1\n    elif max_tup2[0] > 0:\n        # if max_tup2 is greater than 0 but max_tup1 is 0, return max_tup2 as a new tuple\n        return max_tup2\n    else:\n        # if both max_tup1 and max_tup2 are 0, return a new empty tuple\n        return ()"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 3\n    while i <= n:\n        if is_prime(i):\n            return i\n        i += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    This function takes an integer n as input and returns the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        for i in range(3, n+1): \n            if is_prime(i): \n                return i\n\ndef is_prime(n): \n    '''\n    This function checks if a number is prime or not.\n    '''\n    if n < 2: \n        return False\n    for i in range(2, int(n**0.5)+1): \n        if n % i == 0: \n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return None\n            i += 2\n        return i\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the count variable and the next prime number to 2\n    count = 0\n    next_prime = 2\n\n    # Iterate until n newman\u2013shanks\u2013williams primes are found\n    while count < n:\n        # Check if the next prime number is prime\n        if is_prime(next_prime):\n            # If it is, increment the count and update the next prime number\n            count += 1\n            next_prime += 1\n        else:\n            # If it isn't, increment the next prime number\n            next_prime += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return next_prime - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    prime_count = 0\n    current_num = 2\n\n    # Loop until we have found n primes\n    while prime_count < n:\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, current_num):\n            if current_num % i == 0:\n                is_prime = False\n                break\n        # If the current number is prime, increment the count and move on to the next number\n        if is_prime:\n            prime_count += 1\n            current_num += 1\n        else:\n            current_num += 1\n\n    return current_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    prime_count = 0\n    prev_prime = 2  # First prime number is 2\n    is_prime = [True] * (n + 1)  # List to keep track of prime numbers\n\n    # Check if 2 is a prime number\n    if is_prime[2]:\n        prime_count += 1\n        is_prime[2] = False\n\n    # Check for the next prime number\n    for i in range(3, n + 1):\n        if is_prime[i]:\n            # Check if the next number is a prime number\n            j = i * i\n            while j < n + 1:\n                is_prime[j] = False\n                j += i\n\n            prime_count += 1\n            prev_prime = i\n\n    return prev_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a boolean variable to keep track of whether a number is prime or not\n    is_prime = True\n\n    # Loop through all numbers between 2 and n\n    for i in range(2, n+1):\n\n        # Check if the number is a prime number\n        if i > 1 and all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            is_prime = False\n            break\n\n    # If the number is a prime number, return its value\n    if is_prime:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize the list of prime numbers\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # find the nth newman\u2013shanks\u2013williams prime number\n    nth_prime = prime_list[n-1]\n\n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def sieve_of_eratosthenes(n):\n        \"\"\"\n        Returns a list of prime numbers up to n\n        \"\"\"\n        primes = [True] * (n+1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(n**0.5)+1):\n            if primes[i]:\n                for j in range(i*i, n+1, i):\n                    primes[j] = False\n        return [i for i in range(2, n+1) if primes[i]]\n\n    primes = sieve_of_eratosthenes(n)\n    return primes[n-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(float(i)/j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the two input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have the same length.\")\n        return None\n    \n    # create an empty list to store the result of division\n    result_list = []\n    \n    # loop through each element in both input tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division operation on the corresponding elements\n        result = test_tup1[i] / test_tup2[i]\n        # append the result to the result list\n        result_list.append(result)\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have equal length.\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero.\")\n            return\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(None)\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length.\")\n    # Initialize an empty list to store the result\n    result_list = []\n    # Iterate over the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform element-wise division operation and append the result to the result list\n        result_list.append(test_tup1[i] / test_tup2[i])\n    # Return the result list as the result of the function\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            division_result.append(test_tup1[i] / test_tup2[i])\n        else:\n            division_result.append(float('inf'))\n    return division_result"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1)//2\n    part1 = list1[:half]\n    part2 = list1[half:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # check if the length of the input list is greater than L\n    if len(lst) > L:\n        # split the input list into two parts where the length of the first part is L\n        part1 = lst[:L]\n        part2 = lst[L:]\n        # return the resulting lists in a tuple\n        return (part1, part2)\n    else:\n        # return the input list if the length of the input list is not greater than L\n        return lst"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None, None\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is less than or equal to 0\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        raise ValueError(\"L must be less than or equal to the length of the list\")\n    \n    # Split the list into two parts and return the resulting lists in a tuple\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort()\n    n = len(list1)\n    if L > n:\n        L = n\n    mid = n // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n < L:\n        raise ValueError(\"The length of the list is less than L.\")\n    elif n == L:\n        return list1[:], []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the given list is less than the desired length of the first part.\")\n    \n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L <= length:\n        return (list1[:L], list1[L:])\n    else:\n        return ('List is too small to split into two parts.', list1)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create two empty lists\n    list_1 = []\n    list_2 = []\n    \n    # loop through the original list and add elements to list_1 until its length is equal to L\n    for i in range(len(list1)):\n        list_1.append(list1[i])\n        if len(list_1) == L:\n            break\n    \n    # loop through the original list starting from the index of the end of list_1 and add elements to list_2\n    for i in range(len(list1)-L, len(list1)):\n        list_2.append(list1[i])\n    \n    # return the two resulting lists in a tuple\n    return (list_1, list_2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert human age to dog's age in dog's years\n    dog_age = h_age * 7\n\n    # return the dog's age in dog's years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    # Step 1: Convert the input age from hours to days.\n    days_age = h_age / 24\n    \n    # Step 2: Calculate the dog's age in days.\n    dog_age_in_days = days_age\n    \n    # Step 3: Calculate the dog's age in dog years using the formula: dog_years = dog_age_in_days / 365.\n    dog_years = dog_age_in_days / 365\n    \n    # Step 4: Return the dog's age in dog years.\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age # 7 is the number of years a dog lives in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age * 7)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the split lists\n    split_lists = []\n    # loop through the list, splitting it every nth element\n    for i in range(0, len(S), step):\n        # create a new list that contains only the nth element\n        split_list = S[i:i+step]\n        # add the new list to the split_lists list\n        split_lists.append(split_list)\n    # return the split_lists list\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)] + [S[len(S)-1-i:len(S)-1] for i in range(0, len(S)-len(S)%step, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Check if the step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError('The step must be a positive integer.')\n    \n    # Check if the list is not empty\n    if not S:\n        raise ValueError('The list must not be empty.')\n    \n    # Create an empty list to store the resulting lists\n    result = []\n    \n    # Split the list for every nth element\n    for i in range(0, len(S), step):\n        # Create a new list with the nth element\n        new_list = S[i:i+step]\n        # Add the new list to the result list\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    i = 0\n    while i < len(S):\n        if i % n == 0:\n            result.append(S[i:i+n])\n        i += 1\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Initialize a variable to keep track of the current index in S\n    current_index = 0\n    # Loop through the list S and split it every nth element\n    while current_index < len(S):\n        # Append a new list to the result list with a slice of S from current_index to (current_index+n-1)\n        result.append(S[current_index:current_index+step])\n        # Update the current index to the next element after the nth element\n        current_index += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if isinstance(S, list):\n        L = []\n        for i in range(0, len(S), step):\n            L.append(S[i:i+step])\n        return L\n    else:\n        raise TypeError(\"S must be a list\")"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    surface = 6 * l ** 2\n    print(\"Lateral surface area of the cube is:\", surface)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (l * 12)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l * l + 24 * l * l + 3 * l + 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area of the cube using the formula: lateral_surface = 6 * l^2\n    lateral_surface = 6 * l ** 2\n\n    # Return the lateral surface area of the cube\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l + 6 * l * l + 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid Input\"\n    else:\n        sum = 0\n        i = 1\n        while i <= n:\n            sum += i*i\n            i += 2\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # iterate over first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate square of i\n        square = i ** 2\n        # add square to sum\n        sum += square\n\n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count * count\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum_of_squares += i**2\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += (2 * i - 1) * (2 * i - 2) // 2\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number string\n    star_num_str = \"\"\n    \n    # loop through each digit of the given number\n    for i in range(1, n + 1):\n        # concatenate each digit to form a new star number string\n        star_num_str += str(i) + \"*\"\n    \n    # return the final star number string\n    return star_num_str"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1 or n > 100:\n        return \"Invalid input. Please enter a number between 1 and 100.\"\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num = num * (i*2 - 1)\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize variables\n    count = 0\n    result = 0\n\n    # iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the number to the result if it's a multiple of 2\n        if i % 2 == 0:\n            result += i\n            count += 1\n\n    # return the result divided by the number of stars\n    return result // count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return '*'\n    else: \n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a list of star numbers from 1 to n\n    star_nums = [1] * n\n    # Initialize a variable to keep track of the current star number\n    current_star_num = 1\n    # Iterate over the list of star numbers\n    for i in range(1, n+1):\n        # If the current number is even, multiply it by 2 and subtract 1 from it\n        if i % 2 == 0:\n            current_star_num = (current_star_num * 2) - 1\n        # If the current number is odd, add it to the list of star numbers\n        else:\n            star_nums[i-1] = current_star_num\n            # Increment the current star number\n            current_star_num += 1\n    # Return the nth star number\n    return star_nums[-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return n * find_star_num(n-1) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to store the star number\n    star_num = 1\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1): \n        # Add the i'th power of 2 to the star number\n        star_num += i**2\n    \n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    result = \"\"\n    i = 1\n\n    # loop untiln'th star has been found\n    while i <= n:\n        # add a star to the result string\n        result += \"*\"\n\n        # increment i by 1\n        i += 1\n\n    # return the result string\n    return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104,\n        'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112,\n        'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120,\n        'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72,\n        'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88,\n        'Y': 89, 'Z': 90\n    }\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower() # convert the string to lowercase for case-insensitivity\n    if len(k) == 1: # check if the string has only one character\n        return ord(k) # return the ascii value of the character\n    else: # the string has more than one character\n        return None # return None if the string has more than one character"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even_at_even_position = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_at_even_position += arr[i]\n    return sum_even_at_even_position"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n        if count % 2 == 0 and i % 2 == 0:\n            return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n        arr (list): a list of integers.\n\n    Returns:\n        int: the sum of even numbers at even positions.\n    \"\"\"\n\n    # initialize the sum of even numbers at even positions to 0\n    sum_even_index = 0\n\n    # loop through the list\n    for i in range(len(arr)):\n\n        # check if the current number is even and at even position\n        if arr[i] % 2 == 0 and i % 2 == 0:\n\n            # add the even number to the sum of even numbers at even positions\n            sum_even_index += arr[i]\n\n    # return the sum of even numbers at even positions\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n        if even_index == len(arr)//2:\n            break\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the list\n    for i in range(len(arr)):\n\n        # check if the current element is even\n        if arr[i] % 2 == 0:\n\n            # check if the current position is even\n            if i % 2 == 0:\n\n                # add the current element to the sum\n                sum += arr[i]\n\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0 \n    for i in range(2, n+1, 2): \n        sum_even_power += i ** 5\n    return sum_even_power \n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize variables\n    power = 5\n    total = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the power of the number and add it to the total sum\n        total += i**power\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initializing a variable to store the sum of the raised even numbers\n    sum_even_raised_to_fifth = 0\n    \n    # iterating through the first n natural numbers\n    for i in range(2, n+1):\n        # checking if the current number is even\n        if i % 2 == 0:\n            # raising the current number to the fifth power and adding it to the sum\n            sum_even_raised_to_fifth += i ** 5\n    \n    # returning the sum of the raised even numbers\n    return sum_even_raised_to_fifth"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to hold the rear elements\n    rear_list = []\n    \n    # Loop through each tuple in the list\n    for item in test_list:\n        # Get the rear element of the tuple\n        rear = item[-1]\n        \n        # Add the rear element to the rear list\n        rear_list.append(rear)\n    \n    # Return the rear list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize an empty list to store the results\n    results = []\n\n    # loop through the elements of the first tuple\n    for num1 in test_tup1:\n        # loop through the elements of the second tuple\n        for num2 in test_tup2:\n            # check if the current indices match and subtract the elements\n            if num1 == num2:\n                result = num1 - num2\n                results.append(result)\n\n    # return the list of results\n    return results"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        else:\n            continue\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must have the same length.')\n\n    # loop through the tuples and subtract the corresponding elements\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same number of elements.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n        # If the even index binomial coefficient is even, add it to the sum\n        if i % 2 == 0:\n            sum += coeff\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeffs = [1]\n    for i in range(1, n+1):\n        coeff = (i * coeffs[-1]) // (i-1)\n        coeffs.append(coeff)\n\n    # Find the sum of even index binomial coefficients\n    even_coeffs = [coeffs[i] for i in range(1, len(coeffs), 2)]\n    return sum(even_coeffs)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n and returns the sum of the even-indexed binomial coefficients of n.\n    '''\n    coeffs = []\n    for i in range(1, n+1):\n        coeffs.append(math.comb(n, i-1))\n    even_coeffs = [x for x in coeffs if x%2 == 0]\n    return sum(even_coeffs)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1):\n            if i % 2 == 0 and j % 2 == 0:\n                sum_even_binomial += math.comb(i, j)\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # Initialize sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Loop through even numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n        \n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # Add the even coefficient to the sum\n            even_sum += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += math.comb(n, i)\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of the even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            term = math.comb(n, i)\n            sum_even += term\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum to zero\n    sum_even_binomial = 0\n\n    # loop through each even index i\n    for i in range(0, n, 2):\n        # calculate the even index binomial coefficient\n        binomial_coeff = math.comb(n, i)\n\n        # check if the coefficient is even\n        if binomial_coeff % 2 == 0:\n            # add the even index binomial coefficient to the sum\n            sum_even_binomial += binomial_coeff\n\n    # return the sum of even index binomial coefficients\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    even_binomial_coeff_sum = 0\n    for i in range(1, n+1):\n        coeff = math.binomial(n, i)\n        if i % 2 == 0:\n            even_binomial_coeff_sum += coeff\n    return even_binomial_coeff_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculating the volume of the cylinder\n    volume = (3/5) * pi * r**2 * h\n    \n    # Returning the volume of the cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume of the cylinder using the formula: V = (1/3) * \u03c0 * r^2 * h\n    V = (1/3) * 3.141592653589793 * (r**2) * (h)\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (3/5) * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Initialize variables\n    decagonal = 1\n    row = 1\n\n    # Loop through each row\n    while row <= n:\n        # Loop through each column\n        while decagonal <= n:\n            # Add the current number to the decagonal variable\n            decagonal += row\n\n            # Increment the row\n            row += 1\n\n        # Reset the decagonal variable and decrement the row\n        decagonal -= (row ** 2)\n        row -= 1\n\n    # Check if the decagonal number is divisible by 10\n    if decagonal % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define a function to convert a number to a string\n    def num_to_string(num):\n        # Initialize an empty string\n        result = ''\n        # Loop through the digits of the number and append them to the string\n        while num > 0:\n            result = str(num % 10) + result\n            num = num // 10\n        return result\n    \n    # Define a function to find the nth decagonal number\n    def decagonal_number(n):\n        # Initialize the starting number\n        num = 1\n        # Loop through the range of n+1 numbers and check if the current number is a decagonal number\n        for i in range(1, n+1):\n            # Convert the current number to a string and check if it's a decagonal number\n            if num_to_string(num) == str(int(num_to_string(num))**2):\n                return num\n            # Increment the starting number\n            num += 1\n    \n    # Call the decagonal_number function with the input n\n    return decagonal_number(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Function to calculate nth decagonal number\n    def nth_decagonal(n): \n        return (n * (3 * n - 1)) / 2\n    \n    # Check if n is within range\n    if n < 1 or n > 20: \n        return False\n    \n    # Calculate nth decagonal number\n    decagonal = nth_decagonal(n)\n    \n    # Return result\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i * (i+1) / 2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # initialize the sum of decagonal numbers\n    dec_sum = 0\n\n    # iterate through all possible decagonal numbers\n    for i in range(n):\n        # calculate the decagonal number\n        dec = (i * (2*i - 1))\n\n        # add it to the sum\n        dec_sum += dec\n\n    # check if the sum is equal to the nth decagonal number\n    if n == 1:\n        dec_num = dec\n    else:\n        dec_num = dec_sum - (n * (n - 1))\n\n    # return the decagonal number\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 1\n    \n    for i in range(1, n+1):\n        decagonal_num = (i * (2 * i - 1)) + (count * (2 * count - 1))\n        count += 1\n        \n        if decagonal_num == n:\n            return True\n    \n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * (n - 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Check if a given number is a decagonal number.\n    \"\"\"\n    # Check if the number is greater than 1\n    if n <= 1:\n        return False\n    \n    # Calculate the first term of the sequence\n    term = (n * (n + 1)) // 2\n    \n    # Calculate the square root of the term\n    sqrt_term = int(term ** 0.5)\n    \n    # Check if the square root of the term is an integer\n    if sqrt_term ** 2!= term:\n        return False\n    \n    # Check if the square root of the term is greater than or equal to the square root of n\n    if sqrt_term < int(n ** 0.5):\n        return False\n    \n    # Check if the sum of the sequence up to the square root of n is equal to the square root of n\n    if (sqrt_term * (sqrt_term + 1)) // 2!= sqrt_term ** 2:\n        return False\n    \n    return True"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a counter variable\n    counter = 0\n    \n    # Loop from 1 to n\n    while counter < n:\n        # Increment the counter by the product of the counter and 2\n        counter += counter * 2\n    \n    # Return True if the counter is equal to n, otherwise False\n    if counter == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # iterate through the array\n    for i in range(len(dlist)):\n        # if the element is found, return a tuple with the boolean True and the index position\n        if dlist[i] == item:\n            return (True, i)\n    # if the element is not found, return a tuple with the boolean False and the index position -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(list(set(test_list)))\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements in the list are unique, otherwise False.\n    '''\n    test_set = set(test_list)\n    return len(test_list) == len(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        else:\n            unique_list.append(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('Both lists must have the same length.')\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have same length.\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must be of equal length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # Check if the integer is valid or not\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return False\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Traverse through each digit of the integer and update the frequency of that digit in the dictionary\n    while n > 0:\n        digit = n % 10  # Get the last digit of the integer\n        freq[digit] = freq.get(digit, 0) + 1  # Increment the frequency of the digit if it is already in the dictionary, else add it with a frequency of 1\n        n //= 10  # Remove the last digit from the integer\n\n    # Traverse through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            print(\"Invalid input. Please enter an integer with frequency of each digit less than or equal to the digit itself.\")\n            return False\n\n    # If the function completes without returning False, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10  # Initialize an array of size 10 to store the frequency of each digit\n    for i in range(len(str(n))):\n        count[int(str(n)[i])] += 1  # Increment the frequency of the digit in the array\n    for i in range(10):\n        if count[i] > 0 and count[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of digits\n    digit_freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its count\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Loop through the digits in the integer and check if their frequency is greater than or equal to their value\n    for digit in str(n):\n        if digit_freq[digit] < int(digit):\n            return False\n\n    # If no errors are detected, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit of the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through the dictionary to check if the frequency of each digit is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # if the loop completes without returning False, the integer satisfies the criteria\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    # Count the frequency of each digit in the integer\n    for i in range(10):\n        digit_freq[i] = 0\n    for digit in str(n):\n        digit_freq[int(digit)] += 1\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # create a list of frequency of each digit\n    while n > 0:\n        freq[n % 10] += 1  # increment the frequency of the last digit\n        n //= 10  # remove the last digit from the number\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq_dict = {}\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # If the digit is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[digit] = 1\n    # Iterate through the digits in the integer again and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in str(n):\n        # If the frequency of the digit in the dictionary is less than or equal to the digit itself, return True\n        if freq_dict[digit] <= int(digit):\n            return True\n    # If no digit in the integer satisfies the condition, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # loop through each digit in the dictionary\n    for digit, count in freq.items():\n        # if the frequency of the digit is greater than the digit itself, return False\n        if count > int(digit):\n            return False\n\n    # if we reach this point, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the digit has already been counted in the dictionary\n        if digit in freq:\n            # increment the frequency count of the digit\n            freq[digit] += 1\n        else:\n            # add the digit to the dictionary and set its frequency count to 1\n            freq[digit] = 1\n    \n    # loop through each digit in the integer again\n    for digit in str(n):\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] > digit:\n            # return False as the frequency of each digit is not less than or equal to the digit itself\n            return False\n    \n    # if all digits have a frequency less than or equal to their own value, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    Parameters:\n    list: list - a list of items to check\n    element: any - the element to check against\n\n    Returns:\n    bool - True if all items in the list are equal to the given element, otherwise False\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if all items in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    # If we made it this far, all items in the list are equal to the given element\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'\\ba\\w{2,3}b\\w*\\b')\n    matches = pattern.findall(text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(b{2,3})?'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)\\2*[bB]{2,3}(?=\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?=.*ab)(?=.*(ab){2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?i)a(?:(?!\\1b{2,}).)*b{2,}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        sub_sum = 0\n        for j in range(k):\n            sub_sum += a[i]\n        max_sum = max(max_sum, sub_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the sum of the original array\n    original_sum = sum(a)\n    # create a modified array by repeating the original array k times\n    modified_array = [a[i] for i in range(k)] + a[:k]\n    # find the sum of the modified array\n    modified_sum = sum(modified_array)\n    # calculate the difference between the two sums\n    difference = abs(modified_sum - original_sum)\n    # find the maximum subarray sum using dynamic programming\n    max_subarray_sum = a[0]\n    for i in range(1, n):\n        if max_subarray_sum < a[i]:\n            max_subarray_sum = a[i]\n    # find the largest sum of the repeated array\n    largest_sum = max_subarray_sum * (k + 1)\n    # return the largest sum of the repeated array\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_sum_ending_here = float('-inf')\n    \n    for i in range(n - k + 1):\n        max_sum_ending_here += a[i]\n        if max_sum_ending_here > max_sum:\n            max_sum = max_sum_ending_here\n        \n        max_sum_ending_here -= a[i + k - 1]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a copy of the original array\n    modified_array = a.copy()\n\n    # Repeat the given array k times\n    for i in range(k):\n        modified_array.extend(a)\n\n    # Initialize variables for the maximum sum and its index\n    max_sum = float('-inf')\n    max_sum_index = -1\n\n    # Iterate through the modified array and find the maximum sum\n    for i in range(n):\n        current_sum = modified_array[i]\n        for j in range(i+1, n):\n            current_sum += modified_array[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = i\n\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Copy the given array to the modified array\n    modified_array = a.copy()\n\n    # Repeat the modified array k times\n    for _ in range(k):\n        modified_array.extend(a)\n\n    # Initialize variables for the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array and find the maximum subarray sum\n    for num in modified_array:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum to be 0\n    max_sum = 0\n    # Loop through the array\n    for i in range(n):\n        # Add the current element to the maximum sum\n        max_sum = max(max_sum, a[i])\n        # Subtract the minimum element from the maximum sum\n        max_sum = max(max_sum, a[i] - min(a[i:i+k]))\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the array\n    arr = a.copy()\n\n    # Repeat the array k times\n    for _ in range(k):\n        arr.extend(arr)\n\n    # Calculate the sum of the modified array\n    modified_sum = sum(arr)\n\n    # Initialize the maximum sum and the starting index of the maximum sum\n    max_sum = arr[0]\n    start = 0\n\n    # Iterate through the modified array\n    for i in range(n):\n        # Calculate the sum of the current subarray and the sum of the rest of the array\n        current_sum = sum(arr[start:i+1])\n\n        # Update the maximum sum and the starting index if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the given array k times\n    modified_array = [a[i] for i in range(k)] + a + [a[i] for i in range(k)]\n    \n    # Initialize variables for maximum subarray sum and current subarray sum\n    max_sum = max_subarray_sum = a[0]\n    \n    # Loop through the modified array\n    for i in range(n):\n        # Update current subarray sum\n        current_sum = modified_array[i]\n        \n        # If current subarray sum is greater than maximum subarray sum, update maximum subarray sum\n        if current_sum > max_subarray_sum:\n            max_subarray_sum = current_sum\n        \n        # If current subarray sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n        \n        # Update modified array with current subarray sum\n        modified_array[i] = current_sum\n    \n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the given array\n    given_sum = sum(a)\n    # Create a list of arrays of length k, where each array contains the kth repeated element of the original array\n    kth_repeated_arrays = [a[i:i+k] for i in range(0, n-k+1, k)]\n    # Calculate the sum of all the kth repeated arrays\n    kth_repeated_sum = sum(sum(arr) for arr in kth_repeated_arrays)\n    # Calculate the sum of the modified array formed by repeating the given array k times\n    modified_sum = given_sum * k\n    # Find the maximum sum of a contiguous array in the modified array\n    max_sum = max(kth_repeated_sum, modified_sum)\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the max_sum with the first element of the array\n    max_sum = a[0]\n    \n    # Create a new list with the first element repeated k times\n    repeated_array = [a[0]] * k\n    \n    # Iterate through the array\n    for i in range(1, n):\n        \n        # Calculate the sum of the current element and the repeated element\n        curr_sum = a[i] + repeated_array[-1]\n        \n        # Update the max_sum if the current sum is greater than the max_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # Remove the first element from the repeated_array and add the current element\n        repeated_array.pop(0)\n        repeated_array.append(a[i])\n    \n    # Return the max_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initializing sum of squares to 0\n    sum_of_squares = 0\n\n    # iterating from 2 to n, adding each square to the sum_of_squares\n    for i in range(2, n+1):\n        sum_of_squares += i*i\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**2\n            count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        sum_of_squares += count**2\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(2,n+1,2)]  \n    return sum([x**2 for x in even_numbers])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of squares of first\", n, \"even natural numbers is:\", square_Sum(n))"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        max_length = max(len(list1[i]))\n        max_length_list.append(max_length)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length of each sublist\n    max_lengths = []\n    # Loop through each sublist in the given list\n    for sublist in list1:\n        # Initialize a variable to store the length of the current sublist\n        current_length = len(sublist)\n        # Check if the current sublist has a greater length than the current maximum length\n        if current_length > max(max_lengths) or (current_length == max(max_lengths) and current_length > len(sublist)):\n            # Append the current length to the list of maximum lengths\n            max_lengths.append(current_length)\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a list containing the length of each list in the input list.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Find the maximum length of a list of lists.\n\n    Args:\n        list1 (list[list]): a list of lists to find the maximum length of\n\n    Returns:\n        int: the maximum length of the list\n    \"\"\"\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist[0] > max_lengths[0]):\n            max_lengths = [sublist]\n        elif len(sublist) == len(max_lengths) and sublist[0] <= max_lengths[0]:\n            max_lengths.append(sublist)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        lengths = [len(j) for j in list1[i]]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return max(lst, key=len)\n\ndef max_length_recursive(lst, max_length_so_far=0):\n    if len(lst) == 0:\n        return max_length_so_far\n    else:\n        if len(max_length_so_far) < len(lst[0]):\n            max_length_so_far = lst[0]\n        return max_length_recursive(lst[1:], max_length_so_far)\n\nlst = [[1, 2, 3], [4, 5], [6], [], [7, 8]]\nprint(max_length_recursive(lst))  # Output: 8"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize an array to store the number of ways for each number of colors\n    ways = [1] * k\n\n    # Iterate over the remaining numbers of colors\n    for i in range(2, n+1):\n        # Calculate the number of ways by considering the current color and the remaining colors\n        ways[i] = sum(ways[:i])\n\n    # Return the number of ways of painting the fence\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a 2D array to store the number of ways for each combination of colors\n    ways = [[0] * (k+1) for _ in range(n+1)]\n    \n    # base case: if the fence is empty, there is only one way to paint it\n    ways[0][0] = 1\n    \n    # fill in the rest of the array recursively\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == j or i+j == n:\n                ways[i][j] = ways[i-1][j-1]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # return the answer\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    def paint_fence(arr):\n        if len(arr) == 0:\n            return 0\n        elif len(arr) == 1:\n            return 1 if arr[0] == k else 0\n        else:\n            count = 0\n            for i in range(n):\n                if arr[i] == k:\n                    count += paint_fence(arr[:i] + arr[i+1:])\n            return count\n    \n    return paint_fence(range(k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an array to store the number of ways for each color\n    ways = [0] * k\n    # Initialize a boolean variable to store the count of 2 adjacent posts having the same color\n    same_color_count = 0\n    # Loop through all the possible combinations of colors\n    for i in range(2**k):\n        # Convert the integer to binary string and split it into 1's and 0's\n        color_str = bin(i)[2:]\n        # If there are at most 2 adjacent posts having the same color, increment the count of same_color_count\n        if same_color_count <= 2 and color_str.count('1') == 1:\n            same_color_count += 1\n        # Add the count of same_color_count to the count of ways for each color\n        for j in range(k):\n            ways[j] += same_color_count if color_str[j] == '1' else 0\n    # Return the count of ways for each color\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 0\n        for i in range(1, k+1):\n            count += count_no_of_ways(n-1, k-i)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize a 2D array to store the number of ways of painting the fence for each combination of colors\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base cases:\n    # If there is only one post, it can be painted in any color\n    ways[1][1] = 1\n\n    # If there are two posts, they cannot be painted in any color\n    ways[2][1] = 0\n\n    # If there are three posts, they can be painted in any color\n    ways[3][1] = 1\n\n    # Fill the remaining cells in the 2D array\n    for i in range(4, n + 1):\n        for j in range(1, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i - 1][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Check if n is a multiple of 2 and k is a multiple of 2\n    if n % 2!= 0 or k % 2!= 0:\n        return 0\n\n    # Initialize count to 0\n    count = 0\n\n    # Initialize an array to store the colors\n    colors = [0] * k\n\n    # Loop through all possible combinations of colors\n    for i in range(n):\n        # Check if the colors have already been used for two adjacent posts\n        if i > 0 and colors[i-1] == colors[i]:\n            continue\n\n        # Check if there are any available colors for this post\n        if colors.count(0) == 0:\n            return 0\n\n        # If there are available colors, add the post to the count and update the colors array\n        count += 1\n        colors[colors.index(0)] = i + 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 1 or k < 1 or n < k:\n        return 0\n\n    # initialize the result\n    result = 0\n\n    # iterate through all possible combinations of colors\n    for i in range(1, k+1):\n        # initialize the count of the same color\n        count = 0\n\n        # iterate through all possible positions\n        for j in range(1, n+1):\n            # if the current position and previous position have the same color, increment the count\n            if i >= 2 and j >= 2 and j % 2 == 0 and i % 2 == 0:\n                count += 1\n\n            # add the count of the same color to the result\n            result += count\n\n    # return the result\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a boolean array to store whether each post has been painted\n    painted = [False] * (n+1)\n    # Initialize a counter to store the number of ways of painting the fence\n    ways = 0\n    # Loop through all the ways of painting the fence\n    for i in range(2**k):\n        # Convert the binary string to an integer\n        binary = bin(i)[2:]\n        # Loop through the binary string and update the painted array\n        for j in range(len(binary)):\n            painted[int(binary[j])] = True\n        # Check if the fence is painted\n        if sum(painted) <= 2:\n            ways += 1\n    # Return the number of ways of painting the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1 or k == 1:\n        return 1\n    else:\n        ways = [0] * (k + 1)\n        ways[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, k + 1):\n                if j >= i:\n                    ways[j] += ways[j - i]\n        return ways[k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError('Cannot divide by zero!')\n    else:\n        quotient = int(n / m)\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: First number.\n    :param m: Second number.\n    :return: The quotient of n and m.\n    \"\"\"\n\n    # Calculate the quotient by dividing the larger number by the smaller number and rounding down\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate the quotient by using integer division and floor division\n    quotient = n // m\n\n    # if the remainder is not zero, then add 1 to the quotient\n    if n % m!= 0:\n        quotient += 1\n\n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return round(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers n and m as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n    '''\n    # calculate the square root of the sum of the squares of the lengths of the two sides\n    sqrt_sum = math.sqrt(w**2 + h**2)\n\n    # calculate the third side of the right angled triangle\n    third_side = sqrt_sum * math.sin(math.pi/3)\n\n    # round off the result to two decimal places\n    third_side = round(third_side, 2)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function will find the third side of a right angled triangle.\n\n    Parameters:\n    w (float): The length of the first side of the right angled triangle\n    h (float): The length of the second side of the right angled triangle\n\n    Returns:\n    float: The length of the third side of the right angled triangle\n    '''\n    return math.sqrt(w ** 2 + h ** 2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Args:\n        w (float): The length of the base of the triangle.\n        h (float): The height of the triangle.\n\n    Returns:\n        float: The third side of the right angled triangle.\n    \"\"\"\n    # Calculate the semi-perimeter\n    s = (w+h)**2/4\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s*(s-w)*(s-h)*(s-w*h))\n\n    # Calculate the other side of the triangle\n    o_s = math.sqrt(w*w + h*h - area)\n\n    return o_s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function finds the third side of a right angled triangle, given the length of two of its sides.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2) # the semi-perimeter of the triangle\n    # the length of the hypotenuse of the right triangle\n    a = (w**2 + h**2 - s**2) / (2*w) # the length of the hypotenuse of the right triangle\n    # the length of the hypotenuse of the left triangle\n    b = (w**2 + h**2 + s**2) / (2*w) # the length of the hypotenuse of the left triangle\n    # the length of the other side of the right triangle\n    c = (w**2 + h**2 - a**2) / (2*h) # the length of the other side of the right triangle\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n\n    # Using the formula for the semi-perimeter\n    semi_perimeter = (w ** 2 + h ** 2) ** 0.5\n\n    # Using the formula for the area of a right angled triangle\n    area = 0.5 * w * h\n\n    # Using the formula for the height of a right angled triangle\n    height = math.sqrt(semi_perimeter ** 2 - area)\n\n    # The third side of the right angled triangle is the height\n    third_side = height\n\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    s = (w+h)/2\n    return a*math.tan(math.acos(s))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function calculates the third side of a right angled triangle given the length of two sides.\n    '''\n\n    # Calculate the second side of the triangle using the formula: sqrt(w^2 + h^2)\n    s = math.sqrt(w**2 + h**2)\n\n    # Calculate the third side of the triangle using the formula: sqrt(w^2 + s^2)\n    t = math.sqrt(w**2 + s**2)\n\n    return t"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if max_value < listval[i]:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError(\"Empty list\")\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]  # initialize maximum value to the first value in the list\n    for val in listval:\n        if val > max_num:\n            max_num = val  # if a new value is found, update the maximum value\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        return \"Input is not a list.\"\n    else:\n        max_value = listval[0]\n        for val in listval:\n            if val > max_value:\n                max_value = val\n        return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n    # Iterate through the list and compare each element with the maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\nprint(sum_div(28)) # Output: 6"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize sum to zero\n    sum_divisors = 0\n    \n    # Loop over the numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # If the number is divisible by the current number, add it to the sum of divisors\n        if number % i == 0:\n            sum_divisors += i\n    \n    # Add the last divisor to the sum (if any)\n    if number > 1:\n        sum_divisors += number\n    \n    # Return the sum of divisors\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(left, mid, right):\n        \"\"\"\n        Merge two sorted arrays and return a new sorted array.\n        \"\"\"\n        n1 = mid - left + 1\n        n2 = right - mid\n\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(0, n1):\n            L[i] = arr[left + i]\n\n        for j in range(0, n2):\n            R[j] = arr[mid + 1 + j]\n\n        i = 0\n        j = 0\n        k = left\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    def merge_sort(left, right):\n        \"\"\"\n        Merge sort algorithm to sort an array.\n        \"\"\"\n        if left < right:\n            mid = (left + right) // 2\n            merge_sort(left, mid)\n            merge_sort(mid + 1, right)\n            merge(left, mid, right)\n\n    n = len(arr)\n    merge_sort(0, n - 1)\n\n    inv_count = 0\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            inv_count += n - i\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n\n    # Count inversions in each half separately\n    left_count = 0\n    right_count = 0\n    inv_count = 0\n\n    for i in range(mid):\n        if arr[i] > arr[mid + i]:\n            left_count += 1\n\n    for i in range(mid, n):\n        if arr[i] > arr[mid + i - mid]:\n            right_count += 1\n\n    inv_count = left_count + right_count\n\n    return inv_count + left_inv + right_inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    # Traverse the array twice and keep track of the inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        # Select a pivot element from the array\n        pivot = arr[i]\n        # Initialize two pointers i and j of the array\n        i, j = i + 1, n - 1\n\n        # Iterate over the array from i to j\n        while i <= j:\n            # If the element at i is greater than the pivot, increment i\n            if arr[i] > pivot:\n                i += 1\n                count += j - i + 1\n            # If the element at j is less than or equal to the pivot, decrement j\n            elif arr[j] <= pivot:\n                j -= 1\n            # If the element at i is less than the pivot, decrement j and increment count\n            else:\n                j -= 1\n                count += j - i + 1\n\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Finding the maximum element in the array. \n    max_element = arr[0] \n    for i in range(1, n): \n        if arr[i] > max_element: \n            max_element = arr[i] \n    # Sorting the array in non-decreasing order. \n    for i in range(n-1): \n        j = i+1 \n        while j < n and arr[j] > max_element: \n            j += 1 \n        arr[i], arr[j] = arr[j], arr[i] \n    # Counting the inversions. \n    count = 0 \n    for i in range(n-1): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += n - j \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as an input and returns the number of inversions in the array.\n    '''\n    n = len(arr) \n    # count number of inversions \n    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += n-j-1 \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array. \n    '''\n    n = len(arr) \n    # Find the maximum element in the array \n    max_val = arr[0] \n    for i in range(1, n): \n        if arr[i] > max_val: \n            max_val = arr[i] \n\n    # Count the inversions using counting sort \n    count = 0 \n    inv_count = 0 \n    inv_count_arr = [0] * n \n    for i in range(n): \n        inv_count_arr[i] = count \n        if arr[i] > max_val: \n            count += 1 \n\n    # Iterate through the array and count inversions \n    for i in range(1, n): \n        for j in range(i, n): \n            if arr[i] < arr[j]: \n                inv_count += inv_count_arr[j] - inv_count_arr[i - 1] \n\n    # Return the final count of inversions \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)  # get the length of the array\n    inv_count = 0  # initialize the count of inversions to 0\n    \n    for i in range(n-1):  # iterate over all possible subarrays of length 2 to n-2\n        for j in range(i+1, n):  # iterate over all possible subarrays of length i+1 to n-1\n            if arr[i] > arr[j]:  # check if the subarrays are sorted in descending order\n                inv_count += n - j  # increment the count of inversions by n-j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    # initialize a variable to store the number of inversions \n    inv_count = 0 \n\n    # sort the array in non-decreasing order \n    arr.sort() \n\n    # use two pointers, one at the beginning and one at the end of the array \n    i = 0 \n    j = len(arr) - 1 \n\n    # iterate over the array and count inversions \n    while i < j: \n        if arr[i] > arr[j]: \n            # if the current element is greater than the next element, we have found a pair of elements that need to be swapped \n            inv_count += j - i \n            i += 1 \n            j -= 1 \n        elif arr[i] < arr[j]: \n            # if the current element is smaller than the next element, we don't need to swap anything, so move both pointers towards each other \n            i += 1 \n        else: \n            # if the current element is equal to the next element, we don't need to swap anything, so move both pointers towards each other \n            i += 1 \n            j -= 1 \n\n    # return the number of inversions found in the array \n    return inv_count "
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    Parameters:\n    lst (list): the nested list structure to flatten.\n\n    Returns:\n    list: the flattened list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # create a defaultdict to store the maximum aggregate for each group\n    max_aggs = defaultdict(int)\n    \n    # iterate through the list of tuples\n    for name, price in stdata:\n        # calculate the maximum aggregate for the current group\n        agg = max(price)\n        # update the max_aggs dictionary with the new maximum aggregate\n        max_aggs[name] = agg\n    \n    # return the maximum aggregate from the max_aggs dictionary\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggs = defaultdict(float)\n    for item in stdata:\n        customer, product, price, quantity = item\n        agg = price * quantity\n        max_aggs[customer] = max(max_aggs[customer], agg)\n    max_agg = max(max_aggs.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of tuples and update the frequency of each item\n    for item, freq_item in stdata:\n        freq[item] += freq_item\n\n    # Calculate the maximum aggregate value by iterating through the dictionary and finding the maximum value\n    max_agg = 0\n    for count in freq.values():\n        if count > max_agg:\n            max_agg = count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to keep track of maximum aggregate seen so far for each customer\n    max_agg = defaultdict(int)\n\n    for i in range(len(stdata)):\n        # Update max aggregate for each customer\n        max_agg[stdata[i][1]] += stdata[i][2]\n\n    # Find the maximum aggregate for each customer\n    for k, v in max_agg.items():\n        max_agg[k] = max(v, max_agg[k])\n\n    # Find the maximum aggregate across all customers\n    max_agg_max = max(max_agg.values())\n\n    return max_agg_max"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the aggregate of each group\n    max_aggregate_dict = defaultdict(int)\n\n    # iterate through the list of tuples and calculate the maximum aggregate\n    for group, aggregate in stdata:\n        max_aggregate_dict[group] = max(max_aggregate_dict[group], aggregate)\n\n    # find the maximum aggregate for all groups\n    max_aggregate_all = max(max_aggregate_dict.values())\n\n    # return the maximum aggregate for all groups\n    return max_aggregate_all"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    stdata (list of tuples): A list of tuples, where each tuple represents a transaction, \n    consisting of a product ID and a price.\n\n    Returns:\n    float: The maximum aggregate.\n    '''\n\n    # Use a defaultdict to store the price for each product ID\n    product_prices = defaultdict(float)\n\n    # Loop through each transaction and update the price for each product ID\n    for product, price in stdata:\n        product_prices[product] = price\n\n    # Find the maximum price for each product ID\n    max_prices = {product: max(prices) for product, prices in product_prices.items()}\n\n    # Calculate the maximum aggregate\n    max_agg = max(max_prices.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for tup in stdata:\n        customer = tup[0]\n        product = tup[1]\n        price = tup[2]\n        aggregate[customer][product] = price\n    max_agg = max(aggregate.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (student_name, score) as input and\n    returns the maximum aggregate of all students in the list.\n\n    Args:\n    stdata (list): A list of tuples (student_name, score)\n\n    Returns:\n    int: The maximum aggregate of all students in the list\n    '''\n    students_scores = defaultdict(int)\n    for student, score in stdata:\n        students_scores[student] += score\n\n    max_aggregate = max(students_scores.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the frequency of each product\n    freq = defaultdict(int)\n\n    # Iterate through the list of tuples and update the frequency of each product\n    for item in stdata:\n        freq[item[0]] += item[1]\n\n    # Create a list of tuples with the frequency of each product and the maximum frequency\n    max_freq = [(max(freq[k], key=freq[k].get), k) for k in freq.keys()]\n\n    # Sort the list of tuples by the maximum frequency and return the product of the product and maximum frequency\n    return max_freq[0][0] * max_freq[0][1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize an empty dictionary to store the maximum aggregate for each transaction\n    max_agg_dict = defaultdict(int)\n    \n    # Iterate through each transaction in the list of tuples\n    for transaction in stdata:\n        # Calculate the aggregate of the transaction and update the corresponding value in the dictionary\n        agg = sum(transaction)\n        max_agg_dict[transaction[0]] = agg\n        \n    # Find the maximum aggregate in the dictionary and return it\n    max_agg = max(max_agg_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Calculate the sum of all binary numbers of length n\n    total_sum = 0\n    for i in range(2**n):\n        total_sum += bin(i)[2:].zfill(n)\n    \n    # Initialize the count of binary sequences\n    count = 0\n    \n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits and the last n bits of the current binary sequence\n        first_n = i & ((1<<n)-1)\n        last_n = i >> n & ((1<<n)-1)\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if first_n == total_sum - last_n:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n):\n        binary = bin(i)[2:]\n        first_half = binary[:n]\n        last_half = binary[n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 0\n    while i <= 2**(2*n):\n        first_sum = 0\n        last_sum = 0\n        for j in range(2*n):\n            if i & 1:\n                first_sum += 2**(2*n-1-j)\n            else:\n                last_sum += 2**(2*n-1-j)\n            i = i >> 1\n        if first_sum == last_sum:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        sum_i = sum(int(digit) for digit in bin(i)[2:])\n        if sum_i == sum(int(digit) for digit in bin(2**n-1-i)[2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bit_sum = i\n        for j in range(n):\n            bit_sum += i & 1\n            i = i >> 1\n        if bit_sum == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    for i in range(2 ** n):\n        seq = bin(i)[2:].zfill(n*2)\n        if seq[n-1] == seq[-n]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**n+2**n): \n        x = bin(i)[2:]\n        y = x[::-1]\n        if x.startswith(y) and x.endswith(y): \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    count = 0\n    # loop through all binary numbers of length 2n\n    for i in range(2**n):\n        # extract the first n bits\n        first_bits = bin(i)[2:].zfill(n)\n        # extract the last n bits\n        last_bits = bin(i)[-2:].zfill(n)\n        # check if the sum of first and last bits is same\n        if int(first_bits) + int(last_bits) == i:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if sum(binary[:n]) == sum(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter to 0\n    depth = 0\n    # loop through the dictionary\n    for key in d:\n        # increment depth counter if the value is a dictionary\n        if isinstance(d[key], dict):\n            depth += 1\n            # recursively call the function on the nested dictionary\n            dict_depth(d[key])\n    # return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value)) + 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            current_depth += 1\n        depth = max(depth, current_depth)\n        current_depth = 0\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(v) for v in d.values()])\n    elif isinstance(d, list):\n        depth = max([dict_depth(v) for v in d])\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth += 1 + dict_depth(d[key])\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): a list of integers\n    ranges (list): a list of tuples containing the range of the integers\n    rotations (int): the number of rotations required to find the element\n    index (int): the index of the element to be found\n\n    Returns:\n    int: the element at the given index after rotations.\n    \"\"\"\n    # Initialize the maximum and minimum value\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Find the maximum and minimum value after rotations\n    for _ in range(rotations):\n        max_val = max(arr, key=lambda x: max(ranges, key=lambda y: (x - y[0]) % (y[1] - y[0])))\n        min_val = min(arr, key=lambda x: min(ranges, key=lambda y: (x - y[0]) % (y[1] - y[0])))\n\n    # Initialize the current and previous values\n    current_val = arr[index]\n    prev_val = arr[index - 1]\n\n    # Find the element at the given index after rotations\n    for _ in range(rotations):\n        # Find the previous value using the current and maximum values\n        prev_val = max(ranges, key=lambda y: (current_val - y[0]) % (y[1] - y[0]))\n\n        # Find the current value using the current, previous and minimum values\n        current_val = min(ranges, key=lambda y: (prev_val + y[0]) % (y[1] - y[0]))\n\n    return current_val"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): list of integers representing the array\n    ranges (list): list of integers representing the ranges of rotations\n    rotations (int): number of rotations to perform\n    index (int): index of the element to find\n\n    Returns:\n    int: element at the given index after rotations\n    \"\"\"\n\n    # Initialize the result variable\n    result = 0\n\n    # Perform the rotations required\n    for i in range(rotations):\n        # Determine the range of the current rotation\n        current_range = ranges[i]\n        # Find the index of the current rotation in the list of ranges\n        current_range_index = ranges.index(current_range)\n\n        # Calculate the new index after the rotation\n        new_index = index + current_range + (current_range_index * rotations)\n\n        # Check if the new index is outside the range of the array\n        if new_index < 0 or new_index >= len(arr):\n            # If it is, wrap around to the beginning or end of the array\n            if new_index < 0:\n                new_index = len(arr) - 1\n            else:\n                new_index = 0\n        # Calculate the element at the new index\n        result = arr[new_index]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    if index >= len(arr) or index < 0:\n        return \"Element not found\"\n\n    for i in range(ranges):\n        for j in range(ranges):\n            # apply rotations in x and y directions\n            arr = arr[::-1]\n            arr = [arr[i][j] for i in range(len(arr))]\n            arr = [[arr[i][j] for i in range(len(arr))] for j in range(len(arr))]\n            arr = arr[::-1]\n\n    return arr[index][index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # find the number of rotations required to reach the desired index\n    n = index - 1\n    for i in range(rotations):\n        n = (n + ranges[-1]) % ranges[-1]\n\n    # find the index of the element at the end of the rotations\n    n = (n + ranges[-1] - 1) % ranges[-1]\n\n    return arr[n]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = arr.copy()\n    for i in range(rotations):\n        for j in range(len(ranges)):\n            start = ranges[j][0]\n            end = ranges[j][1]\n            if i % 2 == 0:\n                # Find the element in the even-rotated array\n                for k in range(start, end):\n                    rotated_arr[k] = arr[(k + end) % len(arr)]\n            else:\n                # Find the element in the odd-rotated array\n                for k in range(start, end):\n                    rotated_arr[k] = arr[(k + start) % len(arr)]\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the given list of elements, number of rotations and the index of the element to be found.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Calculate the difference between the index and the last element in the list\n    diff = len(arr) - index\n\n    # Find the final index of the element after rotating the list\n    final_index = index - diff % rotations\n\n    # Check if the final index is within the bounds of the list\n    if final_index < 0 or final_index >= len(arr):\n        return None\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if index < 0 or index >= n:\n        return 'Invalid index'\n\n    rotations = rotations % n\n\n    if rotations == 0:\n        return arr[index]\n\n    i = index\n    j = 0\n\n    while j < n:\n        if i >= 0 and i < n:\n            arr[i], arr[j] = arr[j], arr[i]\n            i -= 1\n            j += 1\n\n        if j >= 0 and j < n:\n            arr[j], arr[n - 1 - (j - i)] = arr[n - 1 - (j - i)], arr[j]\n            j += 1\n\n        i = i - j + n - 1\n\n    for _ in range(rotations):\n        i = 0\n        j = n - 1\n\n        while i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # loop through rotations and update index\n    for i in range(rotations):\n        new_index = index + ranges[i]\n        # check if new index is within the range of array\n        if new_index >= len(arr):\n            new_index = new_index % len(arr)\n        index = new_index\n    \n    # return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a certain number of rotations.\n    '''\n\n    # Calculate the number of elements to be rotated\n    rot_elements = len(ranges)\n\n    # Calculate the number of elements to be rotated modulo the number of elements\n    rot_mod = rot_elements % rotations\n\n    # Find the index of the first element to be rotated\n    first_rot_index = rot_elements - rot_mod\n\n    # Find the index of the last element to be rotated\n    last_rot_index = first_rot_index + rotations - 1\n\n    # If the index of the first element to be rotated is greater than the index passed, return the element at that index\n    if first_rot_index > index:\n        return arr[index]\n\n    # If the index of the last element to be rotated is less than or equal to the index passed, return the element at that index\n    elif last_rot_index <= index:\n        return arr[index]\n\n    # If the index of the first element to be rotated is less than the index passed, find the element at that index\n    else:\n        # Calculate the index of the last element to be rotated modulo the length of the array\n        mod_index = last_rot_index % len(arr)\n\n        # Calculate the index of the first element to be rotated modulo the length of the array\n        mod_first_index = first_rot_index % len(arr)\n\n        # Calculate the index of the last element to be rotated modulo the number of elements to be rotated modulo the length of the array\n        mod_last_index = (last_rot_index + rot_mod) % len(arr)\n\n        # Calculate the sum of the elements from the index of the first element to be rotated to the index of the last element to be rotated\n        sum_elements = arr[mod_first_index:mod_last_index].sum()\n\n        # Find the element at the index passed\n        element = arr[index]\n\n        # Calculate the sum of the elements from the index of the first element to be rotated to the index of the index passed\n        mod_sum_elements = arr[mod_first_index:index].sum()\n\n        # If the sum of the elements from the index of the first element to be rotated to the index of the index passed is less than the sum of the elements from the index of the last element to be rotated to the index of the index passed, return the element at the index passed\n        if mod_sum_elements < sum_elements:\n            return element\n\n        # If the sum of the elements from the index of the first element to be rotated to the index of the index passed is greater than the sum of the elements from the index of the last element to be rotated to the index of the index passed, return the element at the first element to be rotated modulo the length of the array\n        else:\n            return arr[mod_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables to keep track of the current element and the element after rotations\n    current = arr[index]\n    rotated = arr[(index + rotations) % len(arr)]\n\n    # Loop through each possible range of rotations\n    for i in range(len(ranges)):\n        # Calculate the index of the element after rotations in the current range\n        new_index = (index + ranges[i] + rotations) % len(arr)\n\n        # If the new index falls within the range, return the element at the new index\n        if new_index >= ranges[i]:\n            return arr[new_index]\n\n        # If the new index is less than the range, return the current element\n        elif new_index < ranges[i]:\n            return current\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    result = re.findall(pattern, words)\n    if result:\n        return result[0] +'' + result[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = pattern.findall(words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return \"No two words starting with 'p' were found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i-1], words[i]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return (words[i], words[i+1])\n    return ('', '')"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p\\w+(\\s\\w+)?$')\n    \n    # loop through each word in the list\n    for word in words:\n        # check if the word matches the pattern using the re.match() function\n        match = re.match(pattern, word)\n        \n        # if the word matches the pattern, return the two words\n        if match:\n            return match.groups()\n    \n    # if no words match the pattern, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.search(\"^p\", word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p[a-z]*')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    max_sum = 0\n    \n    # Check for all elements in the prefix of the given index\n    for i in range(index, -1, -1):\n        if a[i] > a[k-1] and i+1 < index:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > n:\n        return float('-inf')\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        if i <= k:\n            dp[i] = a[i - 1]\n        else:\n            dp[i] = max(dp[i - 1], dp[i - k - 1]) + a[i - 1]\n        if i == index:\n            return dp[i]\n    return float('-inf')"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n\n    curr_sum = a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    max_sum = max(curr_sum, max_sum_increasing_subseq(a, n, index+1, k-1))\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i], dp[i - 2] + a[i])\n        if a[i] >= k:\n            dp[i] = max(dp[i], dp[i - 1] + a[i])\n    return dp[n]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum and the last element of the subsequence\n    max_sum = float('-inf')\n    last_element = float('-inf')\n\n    # Initialize the sum and the last element of the prefix sum\n    prefix_sum = [0] * n\n    prefix_sum[0] = a[0]\n    last_element = a[0]\n\n    # Iterate through the array from 1 to n-1\n    for i in range(1, n):\n        # If the element is greater than the kth element and if the sum is greater than the current max sum, update the max sum and the last element of the subsequence\n        if a[i] > k and prefix_sum[i-1] + a[i] > max_sum:\n            max_sum = prefix_sum[i-1] + a[i]\n            last_element = a[i]\n\n        # If the element is less than or equal to the kth element, add it to the prefix sum\n        elif a[i] <= k:\n            prefix_sum[i] = max(prefix_sum[i-1] + a[i], prefix_sum[i])\n\n    # Return the last element of the subsequence\n    return last_element"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Create an array to store the sum of increasing subsequence up to each index\n    dp = [0] * n\n\n    # Initialize the first index to 0\n    dp[0] = a[0]\n\n    # Loop through all the other indices\n    for i in range(1, n):\n        # If the current element is greater than or equal to k\n        if a[i] >= k:\n            # Find the maximum sum of increasing subsequence ending at i-1 and including the current element\n            dp[i] = max(dp[i-1], a[i])\n        else:\n            # If the current element is less than k, then the maximum sum of increasing subsequence ending at i-1 and including the current element is dp[i-1]\n            dp[i] = dp[i-1]\n\n    # Initialize the maximum sum to be the value of the last element in the array\n    max_sum = dp[n-1]\n\n    # Loop through the array from the last to the second last index and find the maximum sum of increasing subsequence ending at each index and including the kth element\n    for i in range(n-2, -1, -1):\n        if a[i] >= k:\n            max_sum = max(max_sum, dp[i], dp[i] + a[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize variables\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            dp[i] = max(dp[i], dp[index] + a[i])\n        elif a[i] == a[index]:\n            dp[i] = max(dp[i], dp[index])\n\n    # Initialize variables for kth element\n    kth_index = -1\n    kth_sum = 0\n\n    for i in range(n):\n        if a[i] == a[k]:\n            kth_index = i\n\n    if kth_index == -1:\n        return 0\n\n    for i in range(kth_index + 1, n):\n        if a[i] > a[k]:\n            kth_sum = max(kth_sum, dp[i])\n        elif a[i] == a[k]:\n            kth_sum = max(kth_sum, dp[i])\n\n    return kth_sum + dp[kth_index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_sum_ending_at_i = 0\n\n    # Iterate through the array and check if the current element is greater than kth element\n    for i in range(n):\n        if i < index and a[i] > k:\n            max_sum_ending_at_i += a[i]\n\n    # Calculate the maximum sum of increasing subsequence from prefix until ith index\n    for i in range(index, n):\n        current_sum = max(max_sum_ending_at_i, a[i]) + a[i]\n        max_sum = max(max_sum, current_sum)\n        max_sum_ending_at_i = current_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize an empty list to store the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    max_sum = []\n\n    # Initialize an empty list to store the maximum sum of increasing subsequence from prefix until ith index\n    max_sum_until_i = []\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until i\n    max_sum_until_i_max = 0\n    \n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until i and including kth element\n    max_sum_until_i_max_k = 0\n    \n    # Loop through the given array to find the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    for i in range(index, n):\n        # If the value of the kth element is greater than i, then the maximum sum of increasing subsequence from prefix until i and including kth element would be equal to the maximum sum of increasing subsequence from prefix until i and including k-1\n        if a[i] > a[k-1]:\n            max_sum_until_i_max_k = max(max_sum_until_i_max_k, max_sum_until_i_max)\n        else:\n            max_sum_until_i_max_k = max(max_sum_until_i_max_k, max_sum_until_i_max + a[i])\n        max_sum_until_i_max = max_sum_until_i_max_k\n        max_sum_until_i.append(max_sum_until_i_max)\n    \n    # Loop through the maximum sum of increasing subsequence from prefix until i and find the maximum sum of increasing subsequence from prefix until ith index\n    for i in range(index, n):\n        # If the maximum sum of increasing subsequence from prefix until i is greater than the current maximum sum of increasing subsequence from prefix until ith index, update the maximum sum of increasing subsequence from prefix until ith index\n        if max_sum_until_i[i] > max_sum_until_i_max:\n            max_sum = max_sum_until_i[:i+1]\n            max_sum_until_i_max = max_sum_until_i[i]\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return max_sum_until_i_max"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return max(0, a[index] - a[0])\n    elif index == n:\n        return 0\n\n    max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] - a[index - 1])\n    if k == index:\n        return max(max_sum, 0)\n    else:\n        return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # creating a copy of the original tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # getting the length of the tuple\n    length = len(tuplex_copy)\n\n    # finding the index of the last element\n    last_index = length - 1\n\n    # getting the middle index\n    middle_index = length // 2\n\n    # setting the middle element to None\n    tuplex_copy[middle_index] = None\n\n    # getting the first m elements\n    first_m = tuplex_copy[:m]\n\n    # setting the first m elements to 0\n    first_m = [0] * m\n\n    # setting the first m elements of the colon to the first m elements of the original tuple\n    for i in range(m):\n        tuplex_copy[i] = first_m[i]\n\n    # setting the rest of the elements of the colon to None\n    for i in range(m, n):\n        tuplex_copy[i] = None\n\n    # returning the colon of the tuple\n    return tuple(tuplex_copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    for i in range(len(new_tuplex)):\n        if i % m == 0 and i!= 0:\n            new_tuplex[i] = \":\",new_tuplex[i]\n        elif i % n == 0 and i!= 0:\n            new_tuplex[i] = \":\",new_tuplex[i]\n        else:\n            new_tuplex[i] = new_tuplex[i]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # making a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # getting the length of the tuple\n    length = len(new_tuplex)\n    # getting the number of colon required\n    colon_num = m//n\n    # getting the remainders of the number of colon and the length of the tuple\n    rem_col = m%n\n    # getting the number of tuples to be added to the colon\n    col_len = int(colon_num+rem_col/float(n))\n    # adding tuples to the colon\n    for i in range(col_len):\n        for j in range(n):\n            # adding the j-th element of the i-th tuple to the colon\n            new_tuplex.insert(j*col_len+i,new_tuplex[i*n+j])\n    # getting the number of tuples added to the colon\n    num_add = col_len*n\n    # returning the new colon of the tuple\n    return tuple(new_tuplex[length-num_add:])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[:i] + (new_tuplex[i], new_tuplex[i+1]) + new_tuplex[i+2:]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the new tuple\n    length = len(new_tuplex)\n    # Calculate the range of indices to be used in the colon\n    start = 0\n    stop = m\n    step = 1\n    if n > 0:\n        start = m\n        stop = m+n\n        step = -1\n    # Set the values in the colon\n    for i in range(start, stop, step):\n        new_tuplex[i] = 1\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) < m:\n        return None\n    col_tuplex = []\n    for i in range(m):\n        row_tuplex = []\n        for j in range(n):\n            row_tuplex.append(tuplex[i][j])\n        col_tuplex.append(row_tuplex)\n    return col_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: a tuple\n    :param m: the number of rows in the colon\n    :param n: the number of columns in the colon\n    :return: a colon of the given tuple\n    \"\"\"\n    colon = []\n    if m > len(tuplex):\n        m = len(tuplex)\n    for i in range(m):\n        colon.append(deepcopy(tuplex[(i*n):((i+1)*n)]))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Define a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Reverse the copy of the tuple\n    tuplex_copy = tuplex_copy[::-1]\n    # Calculate the position of the colon\n    colon_position = m * n - m\n    # Get the colon\n    colon = tuplex_copy[colon_position:colon_position+n]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex) # make a copy of the tuple\n    col = []\n    for i in range(n):\n        col.append(tuplex[i::n])\n    col = [','.join(str(x) for x in c) for c in zip(*col)]\n    col = '\\n'.join(col)\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n\n    Parameters:\n    tuplex -- tuple to get a colon from\n    m -- number of elements to get on each line\n    n -- number of lines to print\n\n    Returns:\n    list -- list of lines representing the colon\n    '''\n    # get a deepcopy of the tuple\n    tuplex = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex)\n\n    # calculate the number of elements per line\n    elements_per_line = length // m\n\n    # calculate the remaining elements\n    remaining_elements = length % m\n\n    # initialize the list of lines\n    lines = []\n\n    # loop through the lines\n    for line_index in range(n):\n        # initialize the list of elements in this line\n        line_elements = []\n\n        # loop through the elements in this line\n        for element_index in range(elements_per_line):\n            # get the index of this element in the tuple\n            element_index_in_tuple = elements_per_line * line_index + element_index\n\n            # add the element to the list of elements in this line\n            line_elements.append(tuplex[element_index_in_tuple])\n\n        # add the remaining elements to the end of the list of elements in this line\n        for remaining_element_index in range(remaining_elements):\n            # get the index of this remaining element in the tuple\n            remaining_element_index_in_tuple = elements_per_line * line_index + element_index + remaining_element_index\n\n            # add the element to the list of elements in this line\n            line_elements.append(tuplex[remaining_element_index_in_tuple])\n\n        # add the list of elements in this line to the list of lines\n        lines.append(' '.join([str(element) for element in line_elements]))\n\n    # return the list of lines representing the colon\n    return lines"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables for the largest products found so far\n    largest1 = float('-inf')\n    largest2 = float('-inf')\n\n    # loop through the first N elements of each list\n    for i in range(N):\n        # calculate the product of the largest i elements from both lists\n        product = nums1[i] * nums2[i]\n\n        # update the largest products found so far\n        largest1 = max(largest1, product)\n        largest2 = max(largest2, product)\n\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n\n    largest_products = []\n    i = j = 0\n\n    while len(largest_products) < N:\n        if i < len(nums1_sorted) and j < len(nums2_sorted):\n            if nums1_sorted[i] * nums2_sorted[j] > 0:\n                largest_products.append(nums1_sorted[i] * nums2_sorted[j])\n                i += 1\n                j += 1\n            elif nums1_sorted[i] * nums2_sorted[j] < 0:\n                if nums1_sorted[i] > 0:\n                    i += 1\n                else:\n                    j += 1\n            else:\n                i += 1\n                j += 1\n        elif i < len(nums1_sorted):\n            if nums1_sorted[i] > 0:\n                largest_products.append(nums1_sorted[i])\n                i += 1\n            else:\n                i += 1\n        elif j < len(nums2_sorted):\n            if nums2_sorted[j] > 0:\n                largest_products.append(nums2_sorted[j])\n                j += 1\n            else:\n                j += 1\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    \n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1: list of integers\n    nums2: list of integers\n    N: integer\n\n    Returns:\n    list of integers\n    \"\"\"\n\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists must have the same length.\")\n    elif N > len(nums1):\n        raise ValueError(\"N must be less than or equal to the length of the first input list.\")\n\n    products = []\n    for i in range(N):\n        product1 = nums1[i]\n        product2 = nums2[i]\n        products.append(product1 * product2)\n\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max_product1 = nums1[i]\n                max_product2 = nums2[j]\n    print('The largest product is:', max_product)\n    print('The largest product from list 1:', max_product1)\n    print('The largest product from list 2:', max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    for i in range(N):\n        max_product1 = max(max_product1, nums1[i] * nums2[i])\n        max_product2 = max(max_product2, nums2[i] * nums1[i])\n    return max(max_product1, max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    selected_nums1 = []\n    selected_nums2 = []\n    for i in range(N):\n        max_product1 = float('-inf')\n        max_product2 = float('-inf')\n        selected1 = float('-inf')\n        selected2 = float('-inf')\n        for num1 in nums1:\n            if selected1 < num1:\n                for num2 in nums2:\n                    if num1 * num2 > max_product1 and num1 * num2 > max_product2:\n                        max_product1 = num1 * num2\n                        selected1 = num1\n        for num2 in nums2:\n            if selected2 < num2:\n                if num1 * num2 > max_product1 and num1 * num2 > max_product2:\n                    max_product2 = num1 * num2\n                    selected2 = num2\n        if max_product2 > max_product:\n            max_product = max_product2\n            selected_nums1 = [selected1] * N\n            selected_nums2 = [selected2] * N\n\n    return selected_nums1, selected_nums2, max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product1 = max(nums1) * max(nums1[:i+1])\n        product2 = max(nums2) * max(nums2[:i+1])\n        products.append(max(product1, product2))\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the largest products\n    largest1 = 0\n    largest2 = 0\n\n    # Loop through the sorted lists\n    for i in range(N):\n        # Calculate the product of the i-th largest number from nums1 and the i-th largest number from nums2\n        product = nums1[i] * nums2[i]\n\n        # Update the largest products if the current product is larger\n        if product > largest1:\n            largest1 = product\n        if product > largest2:\n            largest2 = product\n\n    # Return the two largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of those numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    str1 (str): A string.\n\n    Returns:\n    tuple: A tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given number. \n    The function returns the modified number.\n    '''\n    while n & 1 == 0: \n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the first set bit\n    for i in range(32):\n        if (n & (1 << i)):\n            break\n    \n    # Set the leftmost bit\n    n |= (1 << i)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # if the current bit is 1, then set the result to 1\n        if bit == '1':\n            result = 1\n            break\n\n    # return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer n.\n    '''\n    # Initialize a variable to keep track of the set bits in the binary representation of n\n    set_bits = 0\n    # Loop through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # If the bit is set, set set_bits to 1\n        if n & (1 << i):\n            set_bits = 1\n            break\n    # Return set_bits\n    return set_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variables\n    count = 0\n    bit = 1\n    \n    # Count the number of set bits in the binary representation of n\n    while (n & bit) == 0:\n        count += 1\n        bit <<= 1\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << (count - 1))\n    \n    # Return the updated binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # initialize the leftmost unset bit to -1\n    left_most_unset_bit = -1\n    \n    # loop through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # check if the ith bit is set to 1\n        if n & (1 << i):\n            # if it is, check if the i-th bit is already set to 1\n            if n & (1 << (i-1)):\n                # if it is, set the leftmost unset bit to the i-th bit\n                left_most_unset_bit = i\n                \n                # break out of the loop\n                break\n    \n    # return the leftmost unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n\n        # Calculate the binary representation of the leftmost unset bit\n        unset_bit = (1 << i) - 1\n\n        # Check if the bit is set in n\n        if unset_bit & n:\n            # Set the bit in n\n            n |= unset_bit\n            # Return the updated value of n\n            return n\n\n    # If all bits are set to 1, return n unchanged\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the leftmost unset bit to be the leftmost bit\n    leftmost_unset_bit = 1\n\n    # Iterate through the bits of the given number\n    while leftmost_unset_bit & n:\n        leftmost_unset_bit <<= 1\n\n    # Set the leftmost unset bit to 1\n    n = n & ~(leftmost_unset_bit - 1)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to binary representation\n    binary = bin(n)[2:]\n    # Loop through each bit position and set the corresponding bit to 1\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n            break\n    # Convert the binary back to an integer\n    n = int(binary, 2)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index variable to -1\n    i = -1\n    # Iterate through the binary number backwards\n    for j in range(len(bin(n)[2:])): \n        # If a 0 is encountered, set the index variable to j\n        if bin(n)[2:][j] == '0':\n            i = j\n            break\n    # If the index variable is still -1, all bits are already set\n    if i == -1:\n        print(\"All bits are set\")\n    else:\n        # If the index variable is not -1, set the leftmost unset bit to 1\n        n = bin(int(bin(n)[2:][i+1:]) + 1)[2:].zfill(len(bin(n)[2:]))\n        # Print the updated binary number\n        print(\"The updated binary number is:\", n)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n    \n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone and returns its volume.\n    \"\"\"\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with given base radius r and height h.\n\n    :param r: base radius of the cone\n    :type r: float\n    :param h: height of the cone\n    :type h: float\n    :return: volume of the cone\n    :rtype: float\n    '''\n\n    volume = math.pi * r ** 2 * h / 3  # formula for the volume of a cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r * r * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * r**2 * math.pi * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    # Calculate the volume of the cone using the formula V = \u03c0r\u00b2h\n    volume = math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 1\n    highest = 1\n    \n    # Loop through the powers of 2 up to the square root of n\n    while highest <= n:\n        # Check if the current power of 2 is greater than the current highest power of 2\n        if highest * highest > n:\n            # If it is, update the highest power of 2\n            highest = highest * 2\n        else:\n            # If not, move on to the next power of 2\n            highest = highest * 2\n            \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    highest = 0\n    \n    # Loop through all possible powers of 2\n    for i in range(1, n+1): \n\n        # If i is a power of 2, set highest to i\n        if i == 2**j:\n            highest = i\n    \n    # Return highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        if n & (n-1) == 0:\n            return n\n        n >>= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the highest power of 2 that is less than or equal to `n`.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 2 ** highest_Power_of_2(n-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n >>= 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n % 2 == 0:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Use binary search to find the highest power of 2 less than or equal to n\n    lo = 1\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if mid * mid <= n:\n            lo = mid + 1\n        else:\n            hi = mid\n    # Return the highest power of 2 that is less than or equal to n\n    return lo"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize max_power to 0\n    max_power = 0\n    # Loop through the numbers from 1 to n-1\n    for i in range(1, n): \n        # Check if the power of 2 i is greater than the current max_power\n        if i * i <= n: \n            max_power = i\n            break\n    # Return the highest power of 2 less than or equal to n\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 as 1\n    highest_power = 1\n    \n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        \n        # Check if the current number is a power of 2\n        if num & (num - 1) == 0:\n            \n            # If it is, update the highest power of 2\n            if num > highest_power:\n                highest_power = num\n    \n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas_numbers = [2]\n    for i in range(2, n+1):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n    return lucas_numbers[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # loop through each element in the list\n    for i in range(len(list_)):\n        # apply the format string to the element\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(element) for element in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, list_ in enumerate(lists):\n        if i == 0:\n            for item in list_:\n                result[item] = {}\n        elif i == 1:\n            for item in list_:\n                result[item]['value'] = []\n        else:\n            for item in list_:\n                result[item]['value'].append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert first list to dictionary\n    d1 = {i: l1[i] for i in range(len(l1))}\n    # Convert second list to dictionary\n    d2 = {i: l2[i] for i in range(len(l2))}\n    # Convert third list to dictionary\n    d3 = {i: l3[i] for i in range(len(l3))}\n    # Combine dictionaries into a nested dictionary\n    result = {**d1, **d2, **d3}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert multiple lists to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            key = f\"{i}_{j}\"\n            if isinstance(item, dict):\n                result.update(item)\n            else:\n                result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize the empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Iterate over each element in the first list\n    for item in l1:\n        # Check if the item is already a dictionary\n        if isinstance(item, dict):\n            # If it is, merge it with the current nested dictionary\n            nested_dict.update(item)\n        else:\n            # If not, create a new dictionary with a single key-value pair\n            nested_dict[item] = {}\n    # Iterate over each element in the second list\n    for item in l2:\n        # Check if the item is already a dictionary\n        if isinstance(item, dict):\n            # If it is, merge it with the current nested dictionary\n            nested_dict.update(item)\n        else:\n            # If not, create a new dictionary with a single key-value pair\n            nested_dict[item] = []\n    # Iterate over each element in the third list\n    for item in l3:\n        # Check if the item is already a dictionary\n        if isinstance(item, dict):\n            # If it is, merge it with the current nested dictionary\n            nested_dict.update(item)\n        else:\n            # If not, create a new dictionary with a single key-value pair\n            nested_dict[item] = item\n    # Return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, arg in enumerate(args):\n        if isinstance(arg, list):\n            for j, sub_arg in enumerate(arg):\n                if isinstance(sub_arg, tuple):\n                    for k, sub_sub_arg in enumerate(sub_arg):\n                        if isinstance(sub_sub_arg, (list, tuple)):\n                            for l, sub_sub_sub_arg in enumerate(sub_sub_arg):\n                                if isinstance(sub_sub_sub_arg, dict):\n                                    for key, value in sub_sub_sub_arg.items():\n                                        if key in result:\n                                            if isinstance(result[key], list):\n                                                result[key].append(value)\n                                            elif isinstance(result[key], tuple):\n                                                result[key] = (result[key], value)\n                                            else:\n                                                result[key] = [result[key], value]\n                                        else:\n                                            result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    d = {}\n    for i in range(len(l1)):\n        key = str(l1[i])\n        if key in d:\n            d[key].append(l2[i])\n        else:\n            d[key] = [l2[i]]\n    for i in range(len(l3)):\n        key = str(l3[i])\n        if key in d:\n            d[key].append(l1[i])\n        else:\n            d[key] = [l1[i]]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and converts them to a nested dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each element in the list\n        for j in range(len(l2[i])):\n            # Append the element to the corresponding key in the nested dictionary\n            nested_dict[l1[i][j]] = l2[i][j]\n\n        # Loop through each nested list and append it to the corresponding key in the nested dictionary\n        for k in range(len(l3[i])):\n            # Append the nested list to the corresponding key in the nested dictionary\n            nested_dict[l1[i][k]] = l3[i][k]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes multiple lists as input and converts them to nested dictionaries.\n    \n    Args:\n        *args: A list of lists containing values to be converted to a dictionary.\n    \n    Returns:\n        A nested dictionary containing the converted values.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(args):\n        for j, item in enumerate(lst):\n            if i == 0:\n                key = item\n            else:\n                result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # create an empty dictionary to hold the nested dictionary\n    nested_dict = {}\n    \n    # loop through each list\n    for i in range(len(l1)):\n        \n        # create an empty dictionary to hold the values for each key\n        sub_dict = {}\n        \n        # loop through each key value pair and add to sub_dict\n        for key, value in l1[i].items():\n            sub_dict[key] = value\n            \n        # add the sub_dict to the nested_dict\n        nested_dict[l2[i]] = sub_dict\n        \n    # return the nested_dict\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    The function takes in three lists: l1, l2, and l3. Each list contains a list of values.\n    The function creates a dictionary with keys as the first element of each list, and values as the second element of each list.\n    The function then creates a new list with the nested dictionary as an element.\n\n    The function returns the new list of nested dictionaries.\n\n    Example:\n    l1 = [1, 2, 3]\n    l2 = ['a', 'b', 'c']\n    l3 = [True, False, True]\n    result = convert_list_dictionary(l1, l2, l3)\n    print(result)\n    # Output: [{'1': 1, '2': 2, '3': True}, {'a': 'b', 'b': 'c', 'c': True}]\n    '''\n\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        l3[i] = {'true': l3[i]}\n    \n    result = [nested_dict]\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # initialize variables\n    max_sum = 0\n    prev_max_sum = 0\n    current_sum = 0\n    \n    # calculate sum for first n elements\n    current_sum = n\n    prev_max_sum = current_sum\n    \n    # calculate sum for remaining elements\n    for i in range(2, n+1):\n        if i % 5 == 0:\n            current_sum = max(current_sum, prev_max_sum + i)\n        else:\n            current_sum = max(current_sum, prev_max_sum)\n        if current_sum > max_sum:\n            max_sum = current_sum\n        prev_max_sum = current_sum\n    \n    # return maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        max_sum = max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    f1 = get_max_sum(n/2)\n    f2 = get_max_sum(n/3)\n    f3 = get_max_sum(n/4)\n    f4 = get_max_sum(n/5)\n    \n    return max(f1 + f2 + f3 + f4, n)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The maximum sum possible using the given equation is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case: if n is 1, return n\n    if n == 1:\n        return n\n    \n    # Recursive case: calculate the sum of f(n/2) and f(n/3) using integer division\n    if n % 2 == 0:\n        return get_max_sum(n/2) + n\n    else:\n        return get_max_sum(n/2) + n + n/2"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n, curr_sum):\n        if n == 1:\n            return n\n        else:\n            curr_sum += n\n            return max(helper(n//2, curr_sum), n)\n    \n    return helper(n, 0)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # Recursive case: calculate the sum of the first n-1 terms\n    # and add the last term (n)\n    return get_max_sum(n-1) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    \n    a = get_max_sum(n/2)\n    b = get_max_sum(n/3)\n    c = get_max_sum(n/4)\n    d = get_max_sum(n/5)\n    \n    return max(max(a, b), max(c, d), n)\n\nn = int(input(\"Enter the number for which you want to find the maximum sum: \"))\nprint(\"The maximum sum possible for the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is:\", get_max_sum(n))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for item in input_list:\n        length_list.append(len(item))\n    return max(length_list)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    return [input_list[i] for i in range(len(input_list)) if len(input_list[i]) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list)\n    max_length = length\n    max_list = input_list\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            longest_list = i\n\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function checks if given tuple contains no duplicates.\n\n    :param test_tup: A tuple to be checked for duplicates.\n    :type test_tup: tuple\n    :return: True if the tuple does not contain duplicates, False otherwise.\n    :rtype: bool\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set and then back to a list\n    test_set = list(set(test_tup))\n    # check if the length of the list is equal to the length of the tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # check if the length of the unique_tup is equal to the length of the test_tup\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert string to list\n    str1 = list(str1)\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    # loop through each character in the list\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n    # loop through each character in the list again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # if the loop completes without finding a non-repeated character, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    Args:\n    str1: A string containing only lowercase English letters.\n\n    Returns:\n    The first non-repeated character in the string, or None if there is no such character.\n    \"\"\"\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate over the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    first_non_repeating = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_non_repeating = char\n            break\n    \n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate over the keys of the dictionary and find the first non-repeating character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # if all characters have frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the dictionary and find the first character that has a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character with frequency 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n\n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in that string.\n\n    Args:\n        str1 (str): The input string.\n\n    Returns:\n        (str): The first non-repeated character in the string.\n\n    Example:\n        first_non_repeating_character('abracadabra') # Output: 'c'\n    \"\"\"\n    char_count = {}\n\n    # Count the number of occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(string):\n    # Initialize two empty lists to store the unique characters and their counts\n    unique_chars = []\n    count = []\n\n    # Iterate through the string and count the number of occurrences of each character\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.append(char)\n            count.append(1)\n        else:\n            # If the character is already in the list, increment its count\n            index = unique_chars.index(char)\n            count[index] += 1\n\n    # Find the first character with count 1 and return it as the result\n    for i in range(len(unique_chars)):\n        if count[i] == 1:\n            return unique_chars[i]\n\n    # If no character is found with count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    if a >= b and a >= c:\n        median = a\n    elif b >= a and b >= c:\n        median = b\n    else:\n        median = c\n\n    if a + b > c and b + c > a:\n        median = (a + b) / 2.0\n    elif a + c > b and c + b > a:\n        median = (a + c) / 2.0\n    else:\n        median = (b + c) / 2.0\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    a = sorted([a, b, c])[1]\n    b = sorted([a, b, c])[1]\n    c = sorted([a, b, c])[1]\n\n    # Calculate the median\n    median = a if (a + b) > c else b if (b + c) > a else c\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    sorted_numbers = sorted(numbers)\n    middle_index = len(sorted_numbers) // 2\n\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle two numbers\n    middle_index = len(sorted_numbers) // 2\n    middle_numbers = sorted_numbers[middle_index - 1:middle_index + 2]\n\n    # Find the median\n    median = (middle_numbers[0] + middle_numbers[1]) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and finds their median.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index of the sorted numbers\n    mid_index = len(sorted_numbers) // 2\n\n    # If the number of elements is odd, the median is the middle element\n    if len(sorted_numbers) % 2 == 1:\n        median = sorted_numbers[mid_index]\n\n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        median = (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median based on the length of the list\n    if len(nums) % 2 == 0:\n        # If the length of the list is even, take the average of the two middle numbers\n        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = nums[len(nums)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    length = len(num_list)\n    if length % 2 == 0:\n        median = (num_list[length//2-1] + num_list[length//2])/2\n    else:\n        median = num_list[length//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Determine if the median is the middle number or the average of the middle two\n    if len(sorted_numbers) % 2 == 0:\n        # If the numbers are even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If the numbers are odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the sum to 0\n    total_sum = 0\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # iterate over each digit in the string\n        for digit in num_str:\n            # convert the digit to an integer\n            digit_int = int(digit)\n            # add the integer to the total sum\n            total_sum += digit_int\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number in a given list.\n    \"\"\"\n    # loop over the numbers in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # initialize a running sum of digits to 0\n        digit_sum = 0\n        # loop over each character in the string\n        for char in num_str:\n            # convert each character to an integer and add it to the running sum\n            digit_sum += int(char)\n        # print the sum of digits for each number\n        print(f\"The sum of digits of {num} is {digit_sum}.\")"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        sum_of_digits = sum(digits)\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits of each number\n    sum_digits = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Add up the digits and append the result to the list\n        sum_digits.append(sum(digits))\n        \n    # Return the list of sums of digits\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Loop through each character in the string and add its digit value to a running total\n        total = 0\n        for char in num_str:\n            digit = int(char)\n            total += digit\n        # Print the running total for each number\n        print(\"Sum of digits for number:\", num, \"=\", total)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables for the sum and carry\n    sum = 0\n    carry = 0\n\n    # Iterate through each tuple element\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation and add the sum and carry to the variables\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        sum = xor_result ^ carry\n        carry = (test_tup1[i] & test_tup2[i]) | ((test_tup1[i] ^ test_tup2[i]) & carry)\n\n    # Return the final sum and carry\n    return sum, carry"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize a result tuple with the length of the smaller tuple\n    result_len = min(len(test_tup1), len(test_tup2))\n    \n    # Create a result list with the same length as the result tuple\n    result = [0] * result_len\n    \n    # Perform the bitwise xor operation across the tuples\n    for i in range(result_len):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Loop through the tuples and perform bitwise xor on each element\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # initialize the result tuple with zeros\n    result_tup = (0, 0)\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation on the current elements\n        current_bit = test_tup1[i] ^ test_tup2[i]\n\n        # add the result to the result tuple\n        result_tup[i] = current_bit\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize an empty tuple to store the result\n    result = ()\n    \n    # Iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Get the elements from the two tuples and perform the bitwise xor operation\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # Append the result to the result tuple\n        result += (xor_result,)\n        \n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the current elements\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the modified tuples\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Use collections.Counter to count the frequency of unique tuples in the list\n    freq_dict = collections.Counter(test_list)\n    # Return the total number of unique tuples in the list\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for elem in test_list:\n        if elem not in freq_dict:\n            freq_dict[elem] = 0\n        freq_dict[elem] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    # creating an empty set to store unique tuples\n    unique_tuples = set()\n    # iterating over the list and adding unique tuples to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    # returning the length of the unique_tuples set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Convert the list into a set to remove duplicates\n    unique_set = set(test_list)\n    # Return the number of unique tuples\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if tuple(elem) in freq_dict:\n            freq_dict[tuple(elem)] += 1\n        else:\n            freq_dict[tuple(elem)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the first tuple is not equal to the length of the second tuple.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    \n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements of the first and second tuple\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n\n    # Initialize a new tuple to store the sum of elements\n    result_tup = ()\n\n    # Loop through both tuples and add the corresponding elements\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # Return the sum tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n\n    # Initialize a new tuple with the same number of elements as the original tuples\n    new_tup = []\n\n    # Iterate through each element of the tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two tuples and append the result to the new tuple\n        new_tup.append(test_tup1[i] + test_tup2[i])\n\n    # Return the new tuple as the result of the function\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize the result tuple with the same size as the input tuples\n    result = ()\n    # Loop through the input tuples and add their elements at each index\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(\"The minimum of\",a,\"and\",b,\"is\",a)\n    else:\n        print(\"The minimum of\",a,\"and\",b,\"is\",b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes in two numbers as arguments and returns the minimum of those two numbers.\n    \"\"\"\n    return a if a < b else b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    for i in tuplex:\n        if i in tuple1:\n            print(i, \"exists in tuple1\")\n            break\n    else:\n        print(\"All elements in tuplex exists in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in a tuple of tuples and a tuple as arguments.\n    The function checks if the element exists within the tuple of tuples.\n    \"\"\"\n    for tup in tuplex:\n        if tuple1 in tup:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if element in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two parameters:\n    - tuplex: a tuple of elements to be searched for\n    - tuple1: the tuple containing all the elements that will be searched\n    \n    It returns a boolean value indicating whether the element exists within the tuple or not.\n    '''\n    \n    for element in tuplex:\n        if element in tuple1:\n            return True\n    \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: #if the number is even, parity is even\n        return False\n    else: #if the number is odd, parity is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1\n    if x < 0:\n        parity = -1\n        x = abs(x)\n    while x!= 0:\n        if x % 2 == 0:\n            parity = 0\n            break\n        x //= 2\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if x is even\n    if x % 2 == 0:\n        # If x is even, return True\n        return True\n    else:\n        # If x is odd, return False\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even \n        print(x, \"is even\") \n    else: # if x is odd\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    if x % 2 == 0:\n        parity = 1\n    return parity"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    while n >= 10:\n        # get the rightmost digit and move it to the leftmost position\n        digit = n % 10\n        n = (n - digit) // 10\n        \n        # keep track of the new position of the digit\n        new_position = 0\n        while new_position < len(str(n)) and str(n)[-1-new_position] == str(digit):\n            new_position += 1\n        \n        # move the digit to the new position\n        new_n = n\n        for i in range(new_position, len(str(n))):\n            new_n = new_n * 10 + int(str(n)[-1-i])\n        \n        n = new_n\n    \n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Initialize the result to the input number\n    result = n\n\n    # Iterate over the digits of the input number\n    for digit in str(n):\n        # Calculate the value of the digit multiplied by 10 raised to its position\n        next_digit = int(digit) * (10 ** (len(str(n)) - int(digit) - 1))\n        # If the result is smaller than the next digit, update the result\n        if result < next_digit:\n            result = next_digit\n\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # define a helper function to swap two digits in a given number\n    def swap_digits(num, i, j):\n        digit1 = str(num)[i]\n        digit2 = str(num)[j]\n        num = int(str(num)[:i] + digit2 + str(num)[i+1:j] + digit1 + str(num)[j+1:])\n        return num\n\n    # create a list of digits from the given number\n    digits = [int(d) for d in str(n)]\n\n    # find the index of the largest digit\n    max_index = digits.index(max(digits))\n\n    # find the index of the second largest digit\n    second_max_index = digits.index(max(digits[:max_index]))\n\n    # swap the largest and second largest digits\n    digits[max_index], digits[second_max_index] = digits[second_max_index], digits[max_index]\n\n    # concatenate the digits to form the new number\n    result = int(''.join(map(str, digits)))\n\n    # return the new number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # remove any leading zeroes\n    rev_str = rev_str.lstrip('0')\n    # convert the string back to an integer\n    rev_int = int(rev_str)\n    # find the next bigger number\n    next_bigger = rev_int + 1\n    # convert the next bigger number to a string\n    next_bigger_str = str(next_bigger)\n    # find the length of the next bigger number's string\n    next_bigger_len = len(next_bigger_str)\n    # create a new string with the same number of digits as the next bigger number\n    new_str = next_bigger_str * (next_bigger_len + 1)\n    # set the last digit to 1 and the remaining digits to the digits of the original number\n    for i in range(next_bigger_len):\n        new_str[-(i + 1)] = num_str[-(i + 1)]\n    # convert the new string back to an integer\n    new_num = int(new_str)\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Initialize an empty list to store the digits of the number\n    digits = []\n\n    # Loop through each digit of the number and append it to the list\n    for digit in num_str:\n        digits.append(int(digit))\n\n    # Initialize an empty list to store the digits of the next bigger number\n    next_digits = []\n\n    # Loop through the digits of the current number, starting from the rightmost digit\n    for digit in reversed(digits):\n        # If the current digit is zero, then we can't rearrange it further, so we append it to the list\n        if digit == 0:\n            next_digits.append(digit)\n        # If the current digit is a non-zero digit, then we can rearrange it further by adding 1 to it\n        else:\n            next_digits.append(digit + 1)\n\n    # Convert the list of digits back to a string\n    next_num_str = ''.join(str(digit) for digit in next_digits)\n\n    # Convert the next number to an integer and return it\n    return int(next_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    num_list = list(str(n))\n    # Reverse the order of digits\n    num_list.reverse()\n    # Initialize the result variable\n    result = 0\n    # Multiply the reversed digits by 10 to get their product\n    product = 1\n    for digit in num_list:\n        result += int(digit) * product\n        product *= 10\n    # Add 1 to the result to get the next bigger number\n    result += 1\n    # Convert the result to a string and return it\n    return str(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    result = ''\n    for i in range(len(num_str)-1, -1, -1):\n        if num_str[i] == '9':\n            result = '0' + result\n        else:\n            result = str(int(num_str[i])+1) + result\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize an empty string to store the rearranged digits\n    rearranged_digits = ''\n\n    # Extract the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Rearrange the digits in the rearranged_digits string\n    for digit in sorted_digits:\n        rearranged_digits += str(digit)\n\n    # Convert the rearranged_digits string to an integer\n    rearranged_number = int(rearranged_digits)\n\n    # Return the rearranged number\n    return rearranged_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # initialize the next bigger number to None\n    next_bigger = None\n    # iterate through the digits of the given number\n    for digit in num_str:\n        # check if the current digit is the smallest digit\n        if next_bigger is None:\n            # if it is, set the next bigger number to the original number\n            next_bigger = int(num_str)\n        # find the digit with the smallest value that comes after the current digit\n        elif int(digit) < int(num_str[digit.index(min(digit, next_bigger))]):\n            # if it exists, add the digit and the value of the current digit to the next bigger number\n            next_bigger += int(digit) * int(num_str[digit.index(min(digit, next_bigger))])\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Initialize a variable to store the digits of the input number\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n\n    # Sort the digits in decreasing order\n    digits.sort(reverse=True)\n\n    # Initialize a variable to store the result\n    result = 0\n    for i in range(len(digits)):\n        result += (digits[i] * (10 ** i))\n\n    # Return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a list of tuples (nums1[i], nums2[j]) where i goes from 0 to len(nums1) - 1 and j goes from 0 to len(nums2) - 1\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    # sort the pairs in ascending order\n    pairs.sort()\n    # create a min-heap with the first k elements of the pairs\n    min_heap = []\n    for pair in pairs[:k]:\n        heapq.heappush(min_heap, pair)\n    # for the remaining (k+1) elements, find the pair that minimizes the difference between the smallest element in the min-heap and the current element\n    for pair in pairs[k:]:\n        diff = pair[0] - heapq.heappop(min_heap)\n        heapq.heappush(min_heap, pair)\n        if len(min_heap) == k:\n            break\n    # return the pairs with the smallest difference\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Using a min heap to store the smallest k elements\n    min_heap = []\n    result = []\n\n    # Iterate over the first array and find the k smallest elements\n    for num1 in nums1:\n        while len(min_heap) < k and len(result) < k:\n            heapq.heappush(min_heap, num1)\n        if len(result) == k:\n            break\n        for num2 in nums2:\n            if num1 < num2:\n                heapq.heappop(min_heap)\n\n    # Extract the k smallest elements from the min heap and store them in the result list\n    for i in range(k):\n        num1, num2 = heapq.heappop(min_heap)\n        result.append((num1, num2))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def merge_lists(nums1, nums2):\n        '''\n        Merge two sorted lists into a single list.\n        '''\n        merged_list = []\n        i = j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                merged_list.append(nums1[i])\n                i += 1\n            else:\n                merged_list.append(nums2[j])\n                j += 1\n        merged_list += nums1[i:]\n        merged_list += nums2[j:]\n        return merged_list\n\n    def partition(arr, low, high):\n        '''\n        Partition the array around a pivot element.\n        '''\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i + 1\n\n    def k_smallest_pairs_helper(nums1, nums2, k, low, high):\n        '''\n        Helper function to find k number of smallest pairs in the given range.\n        '''\n        if k == 0:\n            return []\n        if low == high:\n            return [(nums1[low], nums2[low])]\n        mid = partition(nums1, low, high)\n        left_pairs = k_smallest_pairs_helper(nums1, nums2, k, low, mid)\n        right_pairs = k_smallest_pairs_helper(nums1, nums2, k, mid+1, high)\n        return merge_lists(left_pairs, right_pairs)\n\n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2)\n    merged_list = merge_lists(sorted_nums1, sorted_nums2)\n    return k_smallest_pairs_helper(merged_list, merged_list, k, 0, len(merged_list))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of numbers\n    heap = []\n    # Iterate through each number in the first array\n    for i in range(len(nums1)):\n        # Iterate through each number in the second array\n        for j in range(len(nums2)):\n            # Calculate the sum of the current pair of numbers\n            pair_sum = nums1[i] + nums2[j]\n            # Check if the sum is already in the min heap\n            if pair_sum not in heap:\n                # If it's not, add the pair to the heap\n                heapq.heappush(heap, (pair_sum, (i, j)))\n                # If the heap has more than k elements, remove the smallest element\n                if len(heap) > k:\n                    heapq.heappop(heap)\n    # Extract the k smallest pairs from the heap\n    return heapq.nsmallest(k, heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Initialize a min heap to store the k smallest pairs\n    min_heap = []\n    \n    # Iterate through both arrays and maintain a map to store the index of each element in the array\n    index_map = {}\n    for i, num in enumerate(nums1):\n        index_map[num] = i\n    \n    # Iterate through both arrays and push each element onto the min heap if the size of the heap is less than k\n    for j, num in enumerate(nums2):\n        if j in index_map and len(min_heap) < k:\n            min_heap.append((num, index_map[j]))\n    \n    # Initialize a list to store the result\n    result = []\n    \n    # Iterate through the min heap until the heap is empty\n    while min_heap:\n        # Pop the minimum pair from the heap\n        pair = heapq.heappop(min_heap)\n        \n        # Add the pair to the result list and update the min heap\n        result.append((pair[0], nums1[pair[1]]))\n        if len(min_heap) < k:\n            for i in range(len(nums1)):\n                if i!= pair[1] and i not in index_map:\n                    heapq.heappush(min_heap, (nums1[i], i))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: List of integers\n    nums2: List of integers\n    k: Integer\n\n    Returns:\n    A list of tuples, where each tuple contains two elements: a number from nums1 and a number from nums2, and the difference between the two elements.\n\n    \"\"\"\n    # Create a min heap to store the elements of nums1\n    min_heap1 = []\n    # Create a min heap to store the elements of nums2\n    min_heap2 = []\n    # Initialize the result list\n    result = []\n\n    # Add all the elements of nums1 to the min heap\n    for num in nums1:\n        heapq.heappush(min_heap1, num)\n        # If the size of the result list is equal to k, add the minimum element of nums2 to the result list and remove it from nums1\n        if len(result) == k:\n            result.append(heapq.heappop(min_heap1))\n\n    # Add all the elements of nums2 to the min heap\n    for num in nums2:\n        heapq.heappush(min_heap2, num)\n        # If the size of the result list is equal to k, add the minimum element of nums1 to the result list and remove it from nums2\n        if len(result) == k:\n            result.append(heapq.heappop(min_heap2))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if abs(nums1[i] - nums2[j]) <= k:\n            pair = (nums1[i], nums2[j])\n            result.append(pair)\n            if len(result) == k:\n                break\n            if nums1[i] < nums1[i+1]:\n                i += 1\n            else:\n                j += 1\n        elif nums1[i] < nums1[i+1]:\n            i += 1\n        else:\n            j += 1\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n            else:\n                smallest_cost, smallest_pair = heapq.heappop(heap)\n                new_cost = num1+num2\n                if new_cost < smallest_cost:\n                    heapq.heappush(heap, (new_cost, (num1, num2)))\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    \n    # iterate through nums1 and insert each element in heap\n    for num in nums1:\n        heapq.heappush(heap, (-num, 0))\n        \n    # initialize k-1 variables to empty lists\n    res = [[], [], [], [], [], [], []]\n    \n    # iterate through nums2 and remove the smallest element from each heap and insert in res\n    for i, num in enumerate(nums2):\n        if k > 0 and len(res[i]) < k:\n            min_cost, _ = heapq.heappop(heap)\n            if min_cost > num:\n                heapq.heappush(heap, (-min_cost, i))\n                res[i].append((-min_cost, 0))\n            else:\n                res[i].append((min_cost, 1))\n                k -= 1\n        else:\n            heapq.heappop(heap)\n    \n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            else:\n                smallest = heapq.heappop(heap)\n                if num1 + num2 > smallest[0]:\n                    heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    return heap"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize minimum product variable and initialize a boolean flag to True\n    min_product = None\n    flag = True\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the list of tuples again, starting from the next index\n        for j in range(i+1, len(list1)):\n            # Check if the product of the current tuple and the next tuple is less than the minimum product\n            if list1[i][0] * list1[j][1] < min_product:\n                # If it is, update the minimum product and set the flag to False\n                min_product = list1[i][0] * list1[j][1]\n                flag = False\n    \n    # If the flag is True, the minimum product is the product of the first two tuples\n    if flag:\n        min_product = list1[0][0] * list1[1][1]\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the tuples\n    in the list.\n    '''\n\n    # Find the maximum value in the list\n    max_value = max(list1)\n\n    # Initialize the minimum product to be the maximum value\n    min_product = max_value\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the maximum value\n        product = list1[i][0] * max_value\n\n        # Check if the product is smaller than the minimum product\n        if product < min_product:\n            min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables for the minimum and maximum product\n    min_product = float('inf')\n    max_product = float('-inf')\n    \n    # Loop through the list of tuples\n    for pair in list1:\n        # Find the product of the pair and update the minimum and maximum products accordingly\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n        if product > max_product:\n            max_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                count = 1\n            elif product == min_product:\n                count += 1\n    return min_product, count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize minimum product as infinity\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i] * list1[j]\n\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                # Update the minimum product\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the list of tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if necessary\n            min_product = min(min_product, product)\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        list1: list of tuples\n\n    Returns:\n        minimum product of any pair of tuples from the list\n    \"\"\"\n    # initialize variables for the minimum product and the count of pairs\n    min_product = float('inf')\n    count = 0\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the pairs\n            product = list1[i][0] * list1[j][1]\n\n            # update the count and minimum product if the product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n                count = 1\n            elif product == min_product:\n                count += 1\n\n    # return the minimum product and count of pairs\n    return min_product, count"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # initialize minimum value to the first element of the list\n    min_value = listval[0]\n\n    # loop through the list and compare each element with minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n\n    # return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to be the first value in the list\n    min_value = listval[0]\n\n    # Loop through the rest of the values in the list\n    for value in listval[1:]:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if value < min_value:\n            min_value = value\n\n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n    # Loop through the list and find the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element in the list\n    min_value = listval[0]\n    # Loop through the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # If the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_value:\n            min_value = listval[i]\n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value\n    min_val = listval[0]\n    \n    # iterate through the list\n    for i in range(1, len(listval)):\n        # check if current value is smaller than minimum value\n        if listval[i] < min_val:\n            # if yes, update the minimum value\n            min_val = listval[i]\n    \n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    for i in range(len(words)):\n        if i > 0:\n            words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words back into a single string with the first letter lowercase\n    return words[0].lower() + ''.join(words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert to lowercase\n    word = word.lower()\n    # Remove the underscore at the end of the string\n    if word.endswith('_'):\n        word = word[:-1]\n    # Split the string into words\n    words = word.split('_')\n    # Convert the first letter to uppercase and the rest to lowercase\n    camel_word = words[0]\n    for word in words[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake_case to CamelCase\n    camel_case = re.sub(r'_(.?)(?=[A-Z])', lambda m: m.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = r\"(?<!_)([A-Z])\"\n    sub = r\"_\\1\"\n    return re.sub(regex, sub, word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # convert snake_case to CamelCase\n    camel_case = re.sub(r'_(.)', r'_\\1', word)\n    # capitalize the first letter\n    camel_case = re.sub(r'^_', '', camel_case)\n    # remove underscores after digits\n    camel_case = re.sub(r'(?<!\\d)\\d', '', camel_case)\n    # remove leading and trailing underscores\n    camel_case = re.sub(r'(_\\w)', r'\\1', camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove any leading or trailing underscores\n    word = word.strip('_')\n    \n    # Convert underscores to spaces\n    words = re.findall(r'(?<=[a-z0-9])[A-Z]|(?<=\\A)[A-Z](?=[a-z0-9])', word)\n    \n    # Capitalize the first letter of each word and join them with underscores\n    result = ''.join(words).lower()\n    \n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n    # Capitalize the first letter of the camel case string\n    return camel_case[0].upper() + camel_case[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case = ''.join([words[0].capitalize()] + [word.capitalize() for word in words[1:]])\n    # Convert the camel case string to lowercase\n    camel_case = camel_case.lower()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the given word into words separated by underscores\n    words = re.findall(r'\\b[a-z]+\\b', word)\n\n    # Convert the first word to lowercase and add a leading underscore\n    result = \"_\" + words[0].lower()\n\n    # Convert the rest of the words to camel case and add an underscore in between\n    for i in range(1, len(words)):\n        result += \"_\" + words[i].title()\n\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case by splitting the word by underscores and capitalizing the first letter of each group\n    camel_case = ''.join([word[0].upper()] + [word[i:i+1].capitalize() for i in range(1, len(word))])\n    # remove any non-alphanumeric characters from the camel case string using regular expressions\n    camel_case = re.sub(r'[^a-zA-Z0-9]+', '', camel_case)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create a new list to store the even numbers\n    new_list = []\n    # Loop through each element in the original list\n    for num in l:\n        # If the number is even, append it to the new list\n        if num % 2 == 0:\n            new_list.append(num)\n    # Return the new list of even numbers\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1][1]\n        return nth_element\n    except IndexError:\n        print(\"The index\", n, \"is out of range for the given list.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n:\n            return list1[i][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is valid\n    if type(list1)!= list:\n        return \"The input is not a list.\"\n    elif len(list1) == 0:\n        return \"The list is empty.\"\n    elif n < 1 or n > len(list1):\n        return \"The index is invalid.\"\n    \n    # Extract the nth element from the list\n    result = list1[n-1]\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"Invalid input. n is greater than the length of the list.\"\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        print(\"Index out of range. Please enter a valid index.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Given a list of tuples, extract the nth element from each tuple and return\n    a list of the extracted elements.\n    \"\"\"\n    result = []\n    for tup in lst:\n        if isinstance(tup, tuple):\n            if n > 0:\n                result.append(tup[n - 1])\n                n -= 1\n        else:\n            raise TypeError(\"List contains non-tuple elements\")\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        return list1[n-1]\n    else:\n        print(\"Error: Input is not a list of tuples.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if any value in list1 exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n    # if no value in list1 exists in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks if any value in a sequence exists in another sequence.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns True if there is any element in list1 that is also present in list2, and False otherwise.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any overlapping values in either list, else False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any value in list2 exists in list1\n    for item in set2:\n        if item in set1:\n            return True\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], min_product * arr[i], arr[i])\n        min_product = min(max_product * arr[i], min_product * arr[i], arr[i])\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    If there are multiple pairs with the same highest product, then it returns the first pair it encounters.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        product = arr[i] * max_pair[0]\n        if product > max_product:\n            max_product = product\n            max_pair = (arr[i], max_pair[0])\n        elif product == max_product and arr[i] > max_pair[1]:\n            max_pair = (max_pair[0], arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n    first_product = float('-inf')\n    second_product = float('-inf')\n\n    # loop through array\n    for i in range(len(arr)):\n        # calculate first product\n        first_product = arr[i]\n\n        # loop through remaining elements\n        for j in range(i+1, len(arr)):\n            # calculate second product\n            second_product = arr[j] * first_product\n\n            # check if second product is greater than maximum\n            if second_product > max_product:\n                # update maximum product and indices\n                max_product = second_product\n                max_i = i\n                max_j = j\n\n    # return pair with highest product\n    return arr[max_i], arr[max_j]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max(max1*max2, max2*max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function uses the Kadane's algorithm to find the pair with the highest product\n    from a given array of integers.\n    \n    Args:\n        arr (list): An array of integers.\n    \n    Returns:\n        list: A list containing the indices of the two elements in the array that \n        have the highest product. If there is no such pair, the function returns an \n        empty list.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_pair = [-1, -1]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            max_pair = [i-1, i]\n        elif max_ending_here < 0:\n            max_ending_here = arr[i]\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = [product, arr[i], arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the given array in descending order\n    arr.sort(reverse=True)\n    # Initialize two variables to store the maximum product and the indices of the elements in the array\n    max_product = arr[0]*arr[1]\n    max_indices = [0, 1]\n\n    # Loop through the array and update the maximum product and indices if a higher product is found\n    for i in range(2, len(arr)):\n        if arr[i]*arr[i-1] > max_product:\n            max_product = arr[i]*arr[i-1]\n            max_indices = [i-1, i]\n\n    # Return the indices of the maximum product pair\n    return max_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # find the maximum and minimum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    \n    # calculate the product of the minimum and maximum values\n    min_product = min_val * max_val\n    \n    # find the pairs with highest product\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > min_product:\n                pairs.append([arr[i], arr[j]])\n    \n    # find the pair with highest product\n    if pairs:\n        max_product = max([pair[0] * pair[1] for pair in pairs])\n        for pair in pairs:\n            if pair[0] * pair[1] == max_product:\n                return pair\n    \n    # if no pair found, return None\n    return None"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def quicksort(arr, low, high):\n    if low < high:\n        pivot = partition(arr, low, high)\n        quicksort(arr, low, pivot)\n        quicksort(arr, pivot+1, high)\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\n\ndef max_Product(arr):\n    quicksort(arr, 0, len(arr)-1)\n    n = len(arr)\n    result = (arr[0], arr[n-1])\n    for i in range(n-2):\n        if arr[i]*arr[i+1] > result[0]*result[1]:\n            result = (arr[i], arr[i+1])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_elements = set()\n    for i in Input:\n        common_elements.add(i[0])\n\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_list = []\n    for tup in Input:\n        if tup[0] not in common_list:\n            common_list.append(tup[0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of lists, where each inner list contains tuples with common first element.\n    \"\"\"\n    common_tuples = []\n    for item in Input:\n        if item[0] in common_tuples:\n            common_tuples[common_tuples.index(item[0])].append(item)\n        else:\n            common_tuples.append([item])\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary that contains the common elements and their respective counts.\n    '''\n    common_dict = {}\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                if i[1] in common_dict:\n                    common_dict[i[1]] += 1\n                else:\n                    common_dict[i[1]] = 1\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Elements = []\n    for i in Input:\n        if len(Common_Elements) == 0:\n            Common_Elements.append(i[0])\n            continue\n        else:\n            for j in Common_Elements:\n                if i[0] == j:\n                    Common_Elements.append(i[0])\n                    break\n            if len(Common_Elements) == len(Input):\n                break\n    return Common_Elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Finds the first element of common tuples in the given list of tuples.\n    \"\"\"\n    common = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.add(Input[i][0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through each tuple in the input list\n    for item in Input:\n        # Get the first element of the tuple\n        first_element = item[0]\n        # Add the first element to the set\n        unique_elements.add(first_element)\n        \n    # Convert the set to a list\n    result = list(unique_elements)\n    \n    # Return the list with common first element\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Remove duplicates from the input list of tuples\n    unique_tuples = list(set(Input))\n\n    # Create an empty dictionary to store the common elements and their count\n    common_dict = {}\n\n    # Iterate through each unique tuple in the list\n    for tuple_item in unique_tuples:\n        # Split the tuple into individual elements and extract the first one\n        element = tuple_item[0]\n        # Check if the element is already in the dictionary\n        if element in common_dict:\n            # If it is, increment the count of the element in the dictionary\n            common_dict[element] += 1\n        else:\n            # If not, add the element to the dictionary with a count of 1\n            common_dict[element] = 1\n\n    # Find the element with the highest count in the dictionary\n    max_count = max(common_dict.values())\n    for key, value in common_dict.items():\n        if value == max_count:\n            return key"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the common first element of all the tuples.\n    '''\n    common_element = None\n    for tuple_item in Input:\n        if tuple_item[0] == common_element:\n            continue\n        elif common_element is None:\n            common_element = tuple_item[0]\n        else:\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for tuple_ in Input:\n        if tuple_[0]!= common_first_element:\n            common_first_element = tuple_[0]\n            break\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list that has the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # Loop through the list and find the maximum length\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None \n\n    for element in lst: \n        if len(element) > max_len: \n            max_len = len(element) \n            max_element = element \n\n    return max_element \n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    \n    for item in lst:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_element = item\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Finding the length of the list\n    length = len(lst)\n\n    # Initializing max value and its index\n    max_value = lst[0]\n    max_index = 0\n\n    # Looping through the list\n    for i in range(1, length):\n        # If the current element is greater than max value\n        if lst[i] > max_value:\n            # Updating max value and its index\n            max_value = lst[i]\n            max_index = i\n\n    # Returning the max value and its index\n    return max_value, max_index"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem)\n            max_element = elem\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # find the length of the longest string in the list\n    max_length = len(max(lst, key=len))\n\n    # iterate over the list and return the element with the maximum length\n    for string in lst:\n        if len(string) == max_length:\n            return string"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list1)\n    rounded_list = [round(num) for num in list1]\n    product = 1\n    for i in range(len(rounded_list)):\n        product *= rounded_list[i]\n    result = total_sum * product\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    # initialize variables for the sum and the length of the list\n    total_sum = 0\n    length = len(lst)\n\n    # loop through the list and round each number\n    for i in range(length):\n        lst[i] = round(lst[i])\n\n    # loop through the list and add up all the rounded numbers\n    for i in range(length):\n        total_sum += lst[i]\n\n    # print the total sum multiplied by the length of the list\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in lst:\n        if isinstance(i, float):\n            i = round(i)\n        total_sum += i\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    rounded_lst = [round(num) for num in lst]\n    total_sum = sum(rounded_lst)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and rounds every number using the round() function.\n    It then prints the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # iterate over each element in the list\n    total = 0\n    for num in list1:\n        # round the number to 2 decimal places\n        rounded_num = round(num, 2)\n        # add the rounded number to the total\n        total += rounded_num\n    \n    # multiply the total by the length of the list\n    result = total * len(list1)\n    \n    # print the result\n    print(\"Result:\", result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the cube of the first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the number and add it to the sum\n        sum += i ** 3\n    # return the sum of cubes of even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n): \n        result += i**3 \n    return result "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1, 2): \n        sum += i**3 \n    return sum "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + ','\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result.rstrip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            result += str(test_tup[i])\n        else:\n            result += str(test_tup[i]) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    return sum(cubes)/len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    else:\n        cubes = []\n        for i in range(1, n+1):\n            cube = i ** 3\n            cubes.append(cube)\n        average = sum(cubes) / n\n        return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for i in range(len(test_tuple)):\n        rear_index_elements.append(test_tuple[i][-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_element = element[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[::-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return tuple(rear_list)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create an empty list to store the odd numbers\n    result = []\n    # iterate through the input list\n    for num in nums:\n        # if the number is odd, append it to the result list\n        if num % 2!= 0:\n            result.append(num)\n    # return the result list\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Initialize an empty list to store odd numbers\n    odd_nums = []\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, add it to the odd_nums list\n            odd_nums.append(num)\n    # Return the odd_nums list\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    date_match = re.findall(pattern, dt)\n    if date_match:\n        yyyy, mm, dd = date_match[0].split('-')\n        return dd + '-' + mm + '-' + yyyy\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_mm_yyyy = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    \n    # Using regular expressions to match the date in the yyyy-mm-dd format and replace it with the equivalent dd-mm-yyyy format\n    dt = re.sub(yyyy_mm_dd, r'\\3-\\2-\\1', dt)\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace \"-\" with \"-\"\n    dt = dt.replace('-', '-')\n    # split the date into year, month and day\n    year, month, day = re.findall(r'\\d+', dt)\n    # join the year, month and day with \"-\"\n    new_dt = day + '-' + month + '-' + year\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace yyyy with 0000 to avoid year issues\n    pattern = re.compile(r'(\\d{4})-')\n    new_date = pattern.sub(r'\\1-00-00', dt)\n    # Replace mm with 00 to avoid month issues\n    pattern = re.compile(r'-(\\d{2})-')\n    new_date = pattern.sub(r'-\\1-00', new_date)\n    # Replace dd with 00 to avoid day issues\n    pattern = re.compile(r'-(\\d{2})')\n    new_date = pattern.sub(r'-\\1-00', new_date)\n    # Add the missing hyphen\n    new_date = new_date.replace('-', '')\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for date format conversion\n    pattern = r'(?<!\\d)(?:(\\d{2})[\\/-])(\\d{2})[\\/-](\\d{4})(?!\\d)'\n\n    # Find the first match of the pattern in the given date string\n    match = re.search(pattern, dt)\n\n    # Check if there is a match found\n    if match:\n        # Extract the date components from the match\n        year = match.group(3)\n        month = match.group(2)\n        day = match.group(1)\n\n        # Convert the date components to the required format\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        # Return the original date string if there is no match\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_mm_yyyy = r'(\\d{2})-(\\d{2})-(\\d{4})'\n\n    match = re.match(yyyy_mm_dd, dt)\n    if match:\n        # Replace month and day with their corresponding day in month\n        dt = match.group(2) + '-' + match.group(1) + '-' + match.group(3)\n        return dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = '-'.join((day, month, year))\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() function to replace year, month and day with their corresponding day, month and year values\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert yyyy-mm-dd to mm/dd/yyyy format\n    new_dt = dt.replace('-', '/')\n    # convert mm/dd/yyyy to dd/mm/yyyy format\n    new_dt = new_dt.replace('/', '-')\n    # convert dd/mm/yyyy to yyyy-mm-dd format\n    new_dt = new_dt.replace('-', '')\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in yyyy-mm-dd format and returns the date in dd-mm-yyyy format.\n    '''\n    # Extracting the year, month and day from the date string\n    year = dt[:4]\n    month = dt[5:7]\n    day = dt[8:]\n\n    # Converting the day, month and year to the required format\n    new_dt = day + '-' + month + '-' + year\n\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # The gap sequence is defined as a geometric sequence, where\n    # a = 1, b = 2, c = 4,...\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insertion sort on the current gap\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n            # Move the gap one step closer to the center\n            gap = (gap*3) // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print('Error: Tuples have different lengths.')\n        return None\n    \n    # create an empty list to store the result\n    result_list = []\n    \n    # iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # perform the elementwise and operation on the corresponding elements\n        and_element = test_tup1[i] & test_tup2[i]\n        # add the result to the result list\n        result_list.append(and_element)\n    \n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result.append(test_tup1[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] & test_tup2[i]:\n            result.append((test_tup1[i], test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the element-wise and of the two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (True,)\n        else:\n            and_tup += (False,)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant < 0:\n        print(\"The parabola has no real roots.\")\n        return None\n\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant of the quadratic equation\n    discriminant = (b**2) - (4*a*c)\n\n    # Check if the discriminant is less than zero, which means the parabola has no real roots\n    if discriminant < 0:\n        return \"The parabola has no real roots.\"\n\n    # Calculate the first two roots of the quadratic equation\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # Find the maximum and minimum values of y-axis\n    ymin = min(root1, root2)\n    ymax = max(root1, root2)\n\n    # Calculate the directrix as the intersection of the two vertical lines\n    directrix = ((-b) / (2*a))\n\n    # Check if the directrix is between the two roots\n    if directrix > root1 and directrix < root2:\n        return \"The directrix of the parabola is between the two roots.\"\n\n    # Check if the directrix is above the two roots\n    if directrix > root1 and directrix > root2:\n        return \"The directrix of the parabola is above the two roots.\"\n\n    # Check if the directrix is below the two roots\n    if directrix < root1 and directrix < root2:\n        return \"The directrix of the parabola is below the two roots.\"\n\n    # If none of the conditions are met, the directrix is not between the two roots\n    return \"The directrix of the parabola is not between the two roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative or zero\n    if disc < 0:\n        return \"The parabola does not have a real directrix\"\n    else:\n        # Find the directrix\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n    x2 = (-b - sqrt(b**2 - 4*a*c)) / (2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # calculate the determinant of the matrix\n    det = b**2 - 4*a*c\n    \n    # check if the determinant is zero, which means the parabola is not a quadratic\n    if det == 0:\n        print(\"The parabola is not a quadratic.\")\n        return None\n    \n    # find the two solutions to the quadratic equation\n    root1 = (-b + det**0.5)/(2*a)\n    root2 = (-b - det**0.5)/(2*a)\n    \n    # check if both solutions are real, positive, and distinct\n    if root1.is_integer() and root1 > 0 and root2.is_integer() and root2 > 0 and root1!= root2:\n        print(\"The directrix of the parabola is\", root1)\n    elif root2.is_integer() and root2 > 0 and root1.is_integer() and root1 > 0 and root2!= root1:\n        print(\"The directrix of the parabola is\", root2)\n    else:\n        print(\"There are multiple directrixes.\")\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n    elif delta == 0:\n        x1 = x2 = -b / (2*a)\n    else:\n        return 'The equation has no real solutions'\n    return f\"The directrix is x = {-b / (2*a)} or x = {-b / (2*a)} and y = {-c / (b**2)} at x = {x1:.2f} and x = {x2:.2f}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        directrix = (-b + delta**0.5)/(2*a)\n    elif delta == 0:\n        directrix = -b/(2*a)\n    else:\n        directrix = (-b - delta**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = (-b)/(2*a)\n        return root\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "Since the second power of x is always greater than zero, we can use this expression to find the directrix of the parabola."
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # If positive, calculate the root of the discriminant\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n\n    elif discriminant == 0:\n        # If the discriminant is zero, calculate the root of the discriminant\n        root1 = (-b) / (2*a)\n        return root1\n\n    else:\n        # If the discriminant is negative, return None\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Use a set to remove duplicates from the lists and then compare them element-wise\n    common_elements = set(list1) & set(list2)\n    return bool(common_elements)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of the base1 side\n    length1 = math.sqrt(2 * area / base1)\n\n    # Calculate the length of the base2 side\n    length2 = math.sqrt(2 * area / base2)\n\n    # Calculate the length of the trapezium base\n    length_trapezium = length1 + length2\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (length_trapezium + abs(length1 - length2))\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the area of the base 1 triangle\n    area1 = 0.5 * base1 * height\n\n    # calculate the area of the base 2 triangle\n    area2 = 0.5 * base2 * height\n\n    # calculate the difference between the two areas\n    diff = abs(area1 - area2)\n\n    # calculate the length of the trapezium\n    trapezium_length = 0.5 * (area1 + area2 + diff)\n\n    # calculate the median length of the trapezium\n    median_length = 0.5 * (base1 + base2 + height)\n\n    # check which side of the trapezium the median falls on\n    if (area1 < area2) and (trapezium_length < median_length):\n        return base1 + height\n    elif (area1 > area2) and (trapezium_length < median_length):\n        return base2 + height\n    else:\n        return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the area of the base1 half\n    area1 = base1 * height / 2\n\n    # Calculate the area of the base2 half\n    area2 = base2 * height / 2\n\n    # Calculate the difference between the areas\n    diff_area = abs(area - area1 - area2)\n\n    # Calculate the length of the trapezium using the formula:\n    # L = sqrt((b1 + b2)(h/2) - (area1 + area2))\n    l = math.sqrt((base1 + base2) * height / 2 - diff_area)\n\n    # Calculate the median length using the formula:\n    # M = 0.5 * (b1 + b2) * h / L\n    median_length = 0.5 * (base1 + base2) * height / l\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    area = 0.5 * base1 * base2 * height\n    # Calculate the width of the trapezium\n    width = (base1 + base2) / 2\n    # Calculate the area of the base\n    area_base = 0.5 * width * width\n    # Calculate the area of the trapezium\n    area_trapezium = area_base + area\n    # Calculate the length of the base\n    length_base = math.sqrt(area_trapezium - area_base)\n    # Calculate the length of the trapezium\n    length_trapezium = math.sqrt(area_trapezium)\n    # Calculate the median length of the trapezium\n    median_length = (length_base + length_trapezium) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    area_left = 0.5 * (base1**2 + 0.25 * height**2)\n    area_right = 0.5 * (base2**2 + 0.25 * height**2)\n    return abs(area - area_left - area_right)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # calculate the base of the trapezium\n    base = math.sqrt(area)\n\n    # calculate the length of the trapezium\n    length = 2 * base\n\n    # calculate the height of the trapezium\n    height = area / length\n\n    # calculate the median length of the trapezium\n    median_length = (base1 + base2 + length) / 3\n\n    # print the results\n    print(\"The median length of the trapezium is:\", median_length)\n    print(\"The height of the trapezium is:\", height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n\n    Args:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    '''\n\n    # Calculate the semi-perimeter\n    semi_perimeter = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * height * (semi_perimeter - base1 - base2)\n\n    # Calculate the median length using the trapezoidal rule\n    median_length = area / (height + 2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2\n    return (area * height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2\n    \n    # Calculate the area of the parallelogram formed by the two trapezoids\n    area_parallelogram = area1 + area2\n    \n    # Calculate the area of the triangle formed by the two trapezoids\n    area_triangle = 0.5 * perimeter * height\n    \n    # Calculate the area of the rectangle formed by the two trapezoids\n    area_rectangle = area_parallelogram - area_triangle\n    \n    # Calculate the area of the trapezium\n    area_trapezium = 0.5 * area_rectangle\n    \n    # Calculate the length of the trapezium's base\n    base_length = perimeter / 2\n    \n    # Calculate the length of the trapezium's base above the trapezoid\n    base_length_above_trapezoid = base_length - (base1 + base2)\n    \n    # Calculate the length of the trapezium's base below the trapezoid\n    base_length_below_trapezoid = base_length + (base1 + base2)\n    \n    # Find the area of the trapezium's base above the trapezoid\n    area_above_trapezoid = area_trapezium * base_length_above_trapezoid\n    \n    # Find the area of the trapezium's base below the trapezoid\n    area_below_trapezoid = area_trapezium * base_length_below_trapezoid\n    \n    # Calculate the area of the parallelogram formed by the two trapezoids above and below the trapezoid\n    area_parallelogram_above_below = area_above_trapezoid + area_below_trapezoid\n    \n    # Calculate the area of the trapezium's base above the trapezoid and the area of the parallelogram formed by the two trapezoids above and below the trapezoid\n    area_above_base = area_above_trapezoid + area_parallelogram_above_below\n    \n    # Calculate the area of the trapezium's base below the trapezoid and the area of the parallelogram formed by the two trapezoids above and below the trapezoid\n    area_below_base = area_below_trapezoid + area_parallelogram_above_below\n    \n    # Calculate the area of the trapezium's base above the trapezoid and the area of the trapezium's base below the trapezoid\n    area_above_below = area_above_base + area_below_base\n    \n    # Calculate the area of the trapezium's base above the trapezoid and the area of the trapezium's base below the trapezoid\n    area_median = area_above_below\n    \n    # Calculate the length of the trapezium's median\n    median_length = 2 * area_median / area_trapezium\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"The entered number {number} is greater than the element {arr[i]} at index {i}.\")\n            return True\n        elif arr[i] == number:\n            print(f\"The entered number {number} is equal to the element {arr[i]} at index {i}.\")\n            return False\n    print(f\"The entered number {number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f\"{number} is greater than {num}\")\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            print(\"The entered number is greater than all the elements of the array.\")\n            return\n    print(\"The entered number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        for i in range(1, len(arr)):\n            if number > arr[i]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"ab+\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function will match a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b') # matches any string that has an a followed by one or more b's\n    match = pattern.search(text) # search for the pattern in the text\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether or not\n    the input string matches the pattern \"a followed by one or more b's\". The function uses the \n    regular expression module in Python to achieve this.\n    '''\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10 # take the last digit of n using the modulo operator\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns its last digit.\n    \"\"\"\n    # Get the last digit of the number using integer division\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the integer.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_num.append(list1[i])\n    return neg_num"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list of all the negative numbers in the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with negative numbers.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of negative numbers from the input list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of integers as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if int(char) % 2 == 1:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in string if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd (i.e. even length), add it to the result\n        if len(str(ord(char))) % 2 == 0:\n            result += char\n    # return the result\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string where all odd characters have been removed.\n    \"\"\"\n    odd_chars = [char for char in string if ord(char) % 2!= 0]\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty list to store the new string\n    new_str = []\n\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, append it to the new string\n        if char % 2!= 0:\n            new_str.append(char)\n\n    # return the new string\n    return ''.join(new_str)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isdigit():\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i], test_list[j]) in test_list[j:i:-1] and (test_list[i], test_list[j]) in test_list[i:j+1:1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    # Create a set of tuples that contain only one element from the input list\n    unique_pairs = {tuple(sorted(pair)) for pair in test_list}\n    # Count the number of unique pairs with the same first element\n    count = sum(1 for pair in unique_pairs if pair[0] == pair[-1])\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize a dictionary to store the counts of tuple pairs\n    pair_count = {}\n    \n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Loop through each tuple in the list starting from index i+1\n        for j in range(i+1, len(test_list)):\n            # If the tuple pair exists in the dictionary, increment its count\n            if (test_list[i], test_list[j]) in pair_count:\n                pair_count[(test_list[i], test_list[j])] += 1\n            # If the tuple pair doesn't exist in the dictionary, add it with a count of 1\n            else:\n                pair_count[(test_list[i], test_list[j])] = 1\n    \n    # Return the dictionary of pair counts\n    return pair_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to hold the sum of all the integers in the list\n    total = 0\n    # Iterate through the list of integers and add each integer to the total\n    for num in L:\n        total += num\n    # Return the total sum of the integers in the list\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize an empty string to store the multiple integers as a string\n    multiple_str = \"\"\n    \n    # Iterate through the list of integers and add them to the string\n    for num in L:\n        multiple_str += str(num)\n    \n    # Convert the string of multiple integers into a single integer\n    single_num = int(multiple_str)\n    \n    # Return the single integer\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 1\n    for i in L:\n        num = num * i\n    return num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for num in L:\n        single = single * num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for num in L:\n        multiple *= num\n    return multiple"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match an adverb\n    pattern = r'\\b(also|also\\s+|also-\\s+|also-like|also-so|also-than|also-together|also-very|also-well|altogether|among|among\\s+|among-\\s+|among-like|among-so|among-than|among-together|among-very|among-well|also-but|also-such|also-such-like|also-such-so|also-such-than|also-such-together|also-such-very|also-such-well)\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate over the matches and store the adverb and its positions in a dictionary\n    result = {}\n    for match in matches:\n        adverb = match.group()\n        positions = []\n        for group in match.groups():\n            positions.append(text.index(group))\n        result[adverb] = positions\n\n    # Sort the positions and return the result as a dictionary\n    sorted_result = {k: sorted(v) for k, v in result.items()}\n    return sorted_result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the pattern for finding adverbs\n    pattern = r'\\b(against|as|before|after|behind|behind|behind|behind|below|beneath|beside|besides|between|beyond|by|down|for|from|in|inside|into|like|near|of|off|on|onto|out|outside|over|past|regarding|round|since|than|through|throughout|to|under|underneath|up|upon|versus|with|within|without)\\b'\n    \n    # Use re.findall to find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverb positions\n    positions = []\n    \n    # Loop through the matches and store their positions\n    for match in matches:\n        positions.append(text.index(match))\n    \n    # Return the list of positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the text\n    adverbs = re.findall(r'\\b\\w*adverb\\w*\\b', text)\n\n    # Initialize a dictionary to store the adverbs and their positions\n    position_dict = {}\n\n    # Loop through all the adverbs found\n    for i, adverb in enumerate(adverbs):\n        # If the adverb is not already in the dictionary, add it with its position\n        if adverb not in position_dict:\n            position_dict[adverb] = i\n\n    # Return the dictionary of adverbs and their positions\n    return position_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    # define regular expression pattern for adverbs\n    pattern = r'\\b(really|really?)\\b|(\\b(great|excellent|amazing|wonderful|amazingly|well done|perfectly|amazingly|excellently|amazeusly|marvelous|outstandingly)\\b)'\n\n    # find all occurrences of adverbs in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # loop through matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches, start=1):\n        print(f\"Adverb {match}: {i}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = r'\\b\\w*[A-Z]+\\w*\\b'\n\n    # Find all adverbs using the pattern\n    adverbs = re.findall(pattern, text)\n\n    # Print the adverbs and their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv}')\n\n    # If there are no adverbs, print a message\n    if not adverbs:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ed\\b', text)\n\n    # Sort the adverbs based on their positions in the sentence\n    sorted_adverbs = sorted(adverbs, key=lambda x: text.find(x))\n\n    # Find the first adverb and its position in the sentence\n    first_adverb = sorted_adverbs[0]\n    position = text.find(first_adverb)\n\n    # Return the adverb and its position\n    return (first_adverb, position)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Convert text to lowercase\n    text = text.lower()\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b([a-z]+)(\\s[a-z]+)*\\b'\n    # Use regular expression search to find all adverbs in the text\n    matches = re.findall(pattern, text)\n    # If no adverbs are found, return an empty list\n    if not matches:\n        return []\n    # Initialize list to store adverbs and their positions\n    adverbs = []\n    # Iterate through all matches and extract the adverb and its position\n    for i, match in enumerate(matches):\n        adverb = match[0]\n        position = i + 1\n        adverbs.append((adverb, position))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to find the adverbs\n    adverb_pattern = r'\\b(after|against|as|at|before|behind|between|but|by|for|from|if|in|into|like|near|of|off|on|onto|out|over|past|regarding|round|since|than|through|till|to|under|up|upon|versus|with|without)\\b'\n\n    # Use the re.findall() method to find all the matches of the pattern in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # Initialize a list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Loop through the matches and append their positions to the list\n    for i, match in enumerate(matches):\n        adverb_positions.append(text.index(match))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(adv|adverb)\\b')\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        adverb_list = []\n        for match in matches:\n            adverb_list.append(match[0])\n        \n        return adverb_list\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"(\\b\\w+\\b)\\s+(\\b\\w+\\b)\"\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group(1)\n        pos1 = match.span()[0]\n        pos2 = match.span()[1]\n        return adverb, pos1, pos2\n    else:\n        return \"No adverb found.\"\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nadverb, pos1, pos2 = find_adverb_position(text)\nprint(\"Adverb: \", adverb)\nprint(\"Positions: \", pos1, pos2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of bools to store if the number is positive or not\n    is_positive = array('b', [True] * len(nums))\n\n    # iterate through the array and count the number of positive numbers\n    count = 0\n    for i in range(len(nums)):\n        if is_positive[i]:\n            count += 1\n\n    # calculate the ration of positive numbers\n    positive_ratio = count / len(nums)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array('i')  # create a new array of integers\n    \n    # iterate over the input array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n    \n    # calculate the ratio of positive numbers to total numbers\n    total_numbers = len(nums)\n    positive_ratio = len(positive_numbers) / total_numbers\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = array('i', [0])\n    neg = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n    return (len(pos) / (len(pos) + len(neg)))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array of integers\n    arr = array('i', nums)\n\n    # initialize variables to count positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # iterate through the array\n    for num in arr:\n        # check if the number is positive\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # calculate the ration of positive numbers\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            positive_count += 1\n    return positive_count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the\n    count of positive and negative numbers in the array.\n    '''\n\n    positive = 0\n    negative = 0\n\n    for num in nums:\n        if num > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    return (positive, negative)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    if negative_count == 0:\n        return 0\n    else:\n        return positive_count / (positive_count + negative_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0] * 2) # initialize array to 0 for both positive and negative numbers\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    pos_ratio = count[0] / (count[0] + count[1])\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = 0\n    neg_nums = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_nums += 1\n        else:\n            neg_nums += 1\n            \n    if pos_nums == 0:\n        return 0\n    else:\n        return pos_nums / neg_nums"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            count += 1\n    ratio = count / total\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = [x for x in list1 if x < 0]\n    return max(neg_list) if neg_list else None"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in it.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers and returns the largest negative number in the list.\n    '''\n    largest = -1000000  # initial value for largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tuple in enumerate(test_list):\n        test_list[i] = tuple[0:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][-K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i:i+K] for i in range(0, len(tup), K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[K:]\n        print(tup)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append((test_list[i][0], test_list[i][1][K-1]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): An integer to trim each tuple by.\n\n    Returns:\n    list: A list of trimmed tuples.\n    \"\"\"\n    result = []\n    for item in test_list:\n        result.append(tuple(i for i in item if i >= K))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Calculate the length of the two tuples\n    length = len(test_tup1)\n\n    # Create an empty result tuple\n    result_tup = ()\n\n    # Loop through each index of the two tuples\n    for i in range(length):\n        # Multiply the elements at the current index\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count[i]"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Creating a dictionary to store the count of each element in the list\n    count_dict = Counter(lst) \n\n    # Looping through the tuple and incrementing the count of each element in the count_dict\n    for elem in tup: \n        if elem in count_dict: \n            count_dict[elem] += 1 \n\n    # Returning the count_dict after counting the occurrence of all elements in the list in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    count_dict = {}\n    for key, value in count.items():\n        count_dict[key] = tup.count(key)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the frequency of each element in the tuple\n    freq_dict = Counter(tup)\n\n    # Count the frequency of each element in the list\n    freq_list = Counter(lst)\n\n    # Find the intersection of the two dictionaries\n    freq_intersection = freq_dict & freq_list\n\n    # Count the number of common elements in the intersection\n    count = sum([freq_intersection[i] for i in freq_intersection])\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the occurrence of each element in the tuple\n    count_dict = Counter(tup)\n\n    # Iterate over the list and count the occurence of each element in the list\n    for elem in lst:\n        count_dict[elem] += 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    counted_lst = []\n    for i in lst:\n        if i in count:\n            counted_lst.append(i)\n    return counted_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = count_dict.get(i,0) + 1\n    \n    count = 0\n    for i in tup:\n        count += count_dict.get(i,0)\n        \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) # count the number of occurrences of each element in the list\n    count_dict = {} # create an empty dictionary to store the count\n    \n    for i in tup: # iterate over the tuple\n        if i in c: # check if the element exists in the list\n            count_dict[i] = c[i] # update the count of the element\n    \n    return count_dict # return the dictionary containing the count of each element"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append(count_dict[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = {}\n    for item in tup:\n        if item in lst:\n            count_dict[item] = count_dict.get(item, 0) + 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    perrin_sum = 0\n    for num in perrin_nums:\n        perrin_sum += num\n        if perrin_sum > n:\n            break\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += perrin(i)\n    return total\n\n\ndef perrin(n): \n    \"\"\"\n    Write a function to calculate the nth Perrin number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return perrin(n-1) + perrin(n-2)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize a variable to keep track of the sum\n    total = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number\n        p = 10**i\n        # add the perrin number to the total\n        total += p\n    # return the total sum of perrin numbers\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i*(i+1))\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # initialize the sum variable \n    sum = 0 \n    # iterate from 1 to n \n    for i in range(1, n+1): \n        # check if i is a Perrin number \n        if i % 2 == 0 and i % 3 == 0 and i % 5 == 0: \n            # add i to the sum \n            sum += i \n    # return the sum \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]\n    return sum(perrin_numbers[:n+1])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number\n        perrin = (i**3) + (i**2) - 2*i\n        # add the perrin number to the sum variable\n        sum += perrin\n    # return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 0\n    for i in range(1, n+1):\n        if i%3 == 0 and i%5 == 0:\n            perrin_num += i\n    return perrin_num"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    # initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # iterate over the list of strings\n    for string in l:\n        # check if the length of the string is equal to the specified length\n        if len(string) == l:\n            # if yes, append the string to the extracted strings list\n            extracted_strings.append(string)\n\n    # return the extracted strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer as input and returns a list of strings of specified size.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and a number as input and returns a new list containing specified size of strings.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n    # Iterate through the list of strings\n    for i in range(len(str_list)):\n        # If the length of the current string is equal to the specified size, append it to the extracted_strings list\n        if len(str_list[i]) == l:\n            extracted_strings.append(str_list[i])\n    # Return the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for item in l:\n        result.append(item[:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a desired string size as inputs and returns a new list of strings that contain \n    the specified size of strings from the input list.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and an integer value l as input.\n    It then extracts the specified size of strings from the list, from left to right.\n    The function returns a new list containing the extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a list of strings that have a specified size.\n\n    :param str_list: A list of strings.\n    :type str_list: list[str]\n    :param size: The size of the strings to be extracted.\n    :type size: int\n    :return: A list of strings that have a specified size.\n    :rtype: list[str]\n    \"\"\"\n    # Create an empty list to store the extracted strings\n    extracted_list = []\n    # Loop through the list of strings\n    for string in str_list:\n        # Check if the length of the string is equal to the specified size\n        if len(string) == size:\n            # If it is, append the string to the extracted list\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l, n):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:n] for x in l if len(x) > n]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the desired size of each string to extract.\n    It returns a list of strings of the desired size.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a desired size for each string in the list.\n    It returns a new list of strings where each string has the specified size.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) > size:\n            result.append(s[:size])\n        else:\n            result.append(s)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Define a regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    # Use re.sub() method to remove all whitespaces from the given string\n    text2 = re.sub(pattern, '', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    \n    # Remove whitespaces from the beginning and end of the string\n    text1 = text1.strip()\n    \n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'  # find all whitespaces\n    text2 = re.sub(pattern, '', text1)  # remove whitespaces using regex\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return 0\n    else:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [2]\n    total_sum = 0\n    while n > 1:\n        if n % 2 == 0:\n            even_factors.append(n)\n            total_sum += n\n        n = n // 2\n    return total_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n\n    # loop through all even numbers from 2 to n/2 (inclusive)\n    for i in range(2, int(math.sqrt(n))+1, 2): \n        # check if n is divisible by i\n        if n % i == 0: \n            # add i to sum if n is divisible by i\n            sum += i\n    \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Finding all the even factors of n\n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i*2) == 0:\n            evenFactors.append(i)\n\n    # Adding all the even factors to get the sum\n    sum = 0\n    for i in evenFactors:\n        sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    # Initialize a variable to store the sum of even factors\n    sum_of_factors = 0\n    \n    # Loop through all the odd numbers from 1 to n-2\n    for i in range(3, n, 2):\n        # Check if the odd number is divisible by 2\n        if i % 2 == 0:\n            # Add the even factor to the sum\n            sum_of_factors += i\n    \n    # Return the sum of even factors\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Find all the even factors of n\n    even_factors = [i for i in range(2, int(math.sqrt(n))+1) if n%i == 0 and n/i%10 == 0]\n    \n    # Calculate the sum of even factors\n    sum_even_factors = sum(even_factors)\n    \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum_even_factors = 0\n\n    # Loop through all the numbers between 2 and sqrt(n) (inclusive)\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If yes, check if i is even\n            if i % 2 == 0:\n                # If yes, add i to the sum_even_factors\n                sum_even_factors += i\n    \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # finding all the even factors of n \n    evenFactors = [] \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and n % (i+2) == 0: \n            evenFactors.append(i) \n            evenFactors.append(i+2) \n\n    # adding up the even factors \n    sum = 0 \n    for i in evenFactors: \n        sum += i \n\n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return \"The number should be greater than or equal to 2.\"\n    \n    # initialize the sum to 0\n    total = 0\n    \n    # loop through all the odd numbers from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if the number is divisible by the odd number\n        if n % i == 0:\n            # if it is, add it to the total\n            total += i\n    \n    # return the total\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as an input and finds the sum of even factors of that number.\n    '''\n    #initializing the sum of even factors to 0\n    sum_even_factors = 0\n    \n    #looping through the range of numbers from 2 to n\n    for i in range(2, n+1):\n        #if the number is divisible by 2, adding it to the sum_even_factors\n        if(n % i == 0 and i % 2 == 0):\n            sum_even_factors += i\n    \n    #returning the sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b', re.IGNORECASE)\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-z]*z[a-z]*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Compile a regular expression pattern for words containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    \n    # Use the pattern to find all occurrences of words containing 'z' in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # List of month numbers with 31 days\n    months_with_31_days = [4, 6, 9, 11]\n\n    # Check if month number is present in the list\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum < 1 or monthnum > 12:\n        return False\n    elif monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0 and (monthnum2 % 4 == 0 or (monthnum2 % 100!= 0 and monthnum2 % 400 == 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        print(\"Invalid input\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if is_leap_year(year):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns a boolean value indicating whether it contains 31 days or not.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return (28 + (monthnum % 2 == 0)) in range(1, 31)"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    # Return the modified list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string and replace it in the list\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Create a dictionary to store the length of sublists\n    sublist_length = {}\n    # Initialize the minimum length as infinity\n    min_length = float('inf')\n    # Iterate through the list of sublists\n    for sublist in lst:\n        # Get the length of the current sublist\n        length = len(sublist)\n        # Update the dictionary with the current sublist and its length\n        sublist_length[sublist] = length\n        # If the current sublist length is less than the minimum length, update the minimum length\n        if length < min_length:\n            min_length = length\n    # Create a list to store the sublists having minimum length\n    min_sublist = []\n    # Iterate through the dictionary to find the sublists with minimum length\n    for sublist in sublist_length:\n        # If the length of the current sublist is equal to the minimum length, append it to the list\n        if sublist_length[sublist] == min_length:\n            min_sublist.append(sublist)\n    # Return the minimum length sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_lst = lst[i:j+1]\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Find the length of the minimum sublist\n    min_length = float('inf')\n    min_sublist = None\n\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Check if the current sublist has a length less than the minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Finding the length of each sublist\n    lengths = [len(sublist) for sublist in lst]\n\n    # Finding the minimum length sublist\n    min_length = min(lengths)\n\n    # Creating a list to store the sublist with minimum length\n    min_sublist = []\n\n    # Looping through each sublist\n    for i in range(len(lst)):\n        if lengths[i] == min_length:\n            min_sublist.append(lst[i])\n\n    # Returning the minimum length sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and finds the sublist with minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    # iterate over the list of sublists\n    for sublist in lst:\n        # check if the length of the sublist is less than the current minimum\n        if len(sublist) < min_len:\n            # update the minimum length and sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regular expressions to find all uppercase substrings in the string\n    uppercase_subs = re.findall(r'[A-Z]+', str1)\n    # iterate over all uppercase substrings and remove them from the string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove uppercase substrings using regular expression\n    pattern = re.compile(r'[^a-zA-Z]+')\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern for uppercase words\n    pattern = r'[A-Z]+'\n    # Use re.findall() to find all uppercase words in the string\n    uppercase_words = re.findall(pattern, str1)\n    # Loop through each uppercase word and remove it from the string\n    for word in uppercase_words:\n        str1 = re.sub(r'\\b' + word + r'\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'\\b[A-Z]{2,}\\b')\n    result = uppercase_pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define the regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Find all uppercase substrings in the given string\n    substrings = pattern.findall(string)\n\n    # Remove all uppercase substrings from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Iterate over each uppercase substring and remove it from the string\n    for uppercase_substring in uppercase_substrings:\n        str1 = str1.replace(uppercase_substring, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Use regular expressions to find all uppercase substrings and replace them with an empty string\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define pattern to match uppercase substrings\n    pattern = re.compile(r'(?<![a-z])(?=[A-Z])|(?<![A-Z])(?=[A-Z][a-z])')\n    # use findall() to get all matches\n    matches = pattern.findall(str1)\n    # loop through matches and replace them with an underscore\n    for match in matches:\n        str1 = str1.replace(match, '_')\n    # return modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        result.append(first_element)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create an empty list to store the extracted elements\n    extracted_elements = []\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # Append the first element of the sublist to the extracted_elements list\n        extracted_elements.append(sublist[0])\n    # Return the extracted_elements list\n    return extracted_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0]) "
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if type(i) == list:\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Convert the string to lowercase using the `lower()` method\n    str = str.lower()\n    # Initialize a counter variable to keep track of the number of upper case characters\n    ctr = 0\n    # Loop through each character in the string\n    for char in str:\n        # If the character is an uppercase letter, increment the counter\n        if char.isupper():\n            ctr += 1\n    # Return the count of upper case characters\n    return ctr"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through each character in the string\n    for char in str:\n        # If the character is an uppercase letter, increment the count\n        if char.isupper():\n            count += 1\n    # Return the count of upper case characters\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[j-i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(list1[j:j+i], end=\" \")"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i == 0:\n            result.append([list1[i]])\n        else:\n            temp = []\n            for j in range(i):\n                temp.append(list1[j])\n            for k in range(i+1, len(list1)):\n                temp.append(list1[k])\n            result.append(temp)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i-1] < list1[i]:\n            for j in range(i+1, len(list1)+1):\n                if j == i+1 or list1[i] < list1[j-1]:\n                    result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n        list1 (list): a list of elements\n\n    Returns:\n        list: a list of all possible combinations of the elements of the input list\n    \"\"\"\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j])"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for num in arr[1:]:\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0], 1\n    \n    max_product = arr[0]\n    current_product = 1\n    start = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n        \n        if current_product > max_product:\n            max_product = current_product\n            start = i\n            \n    return max_product, start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], arr[i] * current_product)\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here_positive = arr[0]\n    min_ending_here_negative = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here_positive * arr[i], arr[i], max_ending_here_negative * arr[i])\n        max_ending_here_positive = max(max_ending_here_positive, arr[i])\n        max_ending_here_negative = min(max_ending_here_negative, arr[i])\n\n        min_ending_here = min(min_ending_here_negative * arr[i], arr[i], min_ending_here * arr[i])\n        min_ending_here_negative = min(min_ending_here_negative, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if current_product < 0:\n            current_product = 1\n        current_product *= num\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n            \n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf') # Initialize max_product to negative infinity\n    curr_product = 1 # Initialize curr_product to 1\n    \n    for num in arr:\n        # Update curr_product if num is negative\n        curr_product = max(curr_product*num, num)\n        # Update max_product if curr_product is greater than max_product\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = set(dict.values()) # Get all the values from the dictionary\n    if len(all_values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return \"The number of keys in the dictionary is not equal to the given value.\"\n    else:\n        for i in range(n):\n            if len(dict.keys())!= 1:\n                if len(set(dict[list(dict.keys())[i]]))!= 1:\n                    return \"The values in the given key are not same.\"\n                else:\n                    pass\n            else:\n                pass\n        return \"All values are same.\""
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # loop through each value in the dictionary\n    for value in dict.values():\n        # if the value is not the same for all keys in the dictionary, return False\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    # if no false values are found, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for val in dict.values():\n        if val == dict.values()[0]:\n            count += 1\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        if set(dict.values()) == set([dict[i] for i in dict]):\n            return True\n        else:\n            return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Get the value of the first key in the dictionary\n    value = dict.values()[0]\n\n    # Check if all values in the dictionary are same as the value\n    for key, val in dict.items():\n        if val!= value:\n            return False\n\n    # If all values are same, then return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for i in range(len(values)-1):\n        if values[i]!= values[i+1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    for value in dict.values():\n        if len(set(value))!= 1:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        min_ending_here = min(min_ending_here * arr[i], min_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far * min_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    # find the maximum element in the array\n    max_ele = max(arr)\n    # find the maximum product formed by multiplying the maximum element with all elements of the array\n    max_product = max_ele * arr.count(max_ele)\n    # for all elements of the array, calculate their product with the maximum element\n    for i in range(len(arr)):\n        if arr[i]!= max_ele:\n            temp_product = arr[i] * max_product\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n    max_product_ending_here = arr[0]\n    max_product_so_far = arr[0]\n    \n    for i in range(1, n+1):\n        max_product_ending_here = max(arr[i], max_product_ending_here*arr[i])\n        dp[i] = max_product_ending_here\n        max_product_so_far = max(max_product_so_far, dp[i])\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_products = []\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            max_products.append(arr[i])\n            max_product = max(max_product, max_product * arr[i])\n        else:\n            max_product = max(max_product, max_product * max_products.pop())\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    # Initialize variables to store the maximum subsequence product and the maximum product\n    max_subseq_product = arr[0]\n    max_product = arr[0]\n\n    # Loop through the array and update the maximum subsequence product and maximum product\n    for i in range(1, len(arr)):\n        temp_max_subseq_product = max_subseq_product\n        max_subseq_product = max(arr[i], temp_max_subseq_product * arr[i])\n        temp_max_product = max_product\n        max_product = max(arr[i], temp_max_product * arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Find the maximum subarray ending at index i such that arr[i] is the minimum element\n    max_ending_at_i = [arr[i] for i in range(n)]\n    # Find the maximum subarray ending at index i such that arr[i] is the maximum element\n    min_ending_at_i = [arr[i] for i in range(n)]\n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > max_ending_at_i[j]:\n                max_ending_at_i[j] = arr[i]\n            if arr[i] < min_ending_at_i[j]:\n                min_ending_at_i[j] = arr[i]\n\n    # Multiply the maximum subarray ending at index n-1 with the maximum subarray ending at index n-2\n    return max(arr[-1] * max_ending_at_i[-1], arr[-1] * min_ending_at_i[-1])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize two pointers to the first and last elements of the array\n    left = 0\n    right = n - 1\n\n    # Initialize two variables to keep track of the maximum and minimum products\n    max_prod = float('-inf')\n    min_prod = float('inf')\n\n    # Keep checking the products formed by multiplying the left and right numbers\n    while left < right:\n        # Calculate the product of the current pair of numbers and update the maximum and minimum products\n        prod = arr[left] * arr[right]\n        max_prod = max(max_prod, prod)\n        min_prod = min(min_prod, prod)\n\n        # Move the left pointer to the right and update the maximum and minimum products\n        left += 1\n        max_prod = max(max_prod, arr[left] * arr[right])\n        min_prod = min(min_prod, arr[left] * arr[right])\n\n        # Move the right pointer to the left and update the maximum and minimum products\n        right -= 1\n        max_prod = max(max_prod, arr[left] * arr[right])\n        min_prod = min(min_prod, arr[left] * arr[right])\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    prev_number = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > prev_number:\n            curr_product *= arr[i]\n        else:\n            max_product = max(max_product, curr_product)\n            curr_product = 1\n            prev_number = arr[i]\n\n    max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"Tuple should have at least two elements.\"\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        result = 0\n        for i in range(len(test_tup) - 1):\n            result += test_tup[i] + test_tup[i + 1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    sum_pair = 0\n    for i in range(len(test_tup)-1):\n        sum_pair += test_tup[i] + test_tup[i+1]\n    \n    return sum_pair\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to 0\n    sum_pairwise = 0\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the current element and the next element to get the sum of pairwise elements\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    # return the sum of pairwise elements\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple must have at least two elements\")\n    else:\n        num_elements = len(test_tup)\n        add_list = []\n        for i in range(1, num_elements):\n            add_list.append(test_tup[i] + test_tup[i-1])\n        return add_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # unpack the tuple and check that it has at least 2 elements\n    if len(test_tup) < 2:\n        return \"Invalid input: tuple must have at least 2 elements.\"\n    # initialize the variables to hold the sum and the number of pairs\n    sum_pairs = 0\n    num_pairs = 0\n    # iterate over the tuple using a loop\n    for i in range(len(test_tup)-1):\n        # add the adjacent elements and check for overflow\n        add = test_tup[i] + test_tup[i+1]\n        if add > 2**31-1:\n            return \"Invalid input: tuple elements cannot exceed 2^31-1.\"\n        # add the pair and increment the number of pairs\n        sum_pairs += add\n        num_pairs += 1\n    # check that there are at least two pairs\n    if num_pairs < 2:\n        return \"Invalid input: tuple must have at least 2 pairs.\"\n    # calculate the average pairwise sum and return the result\n    avg_pairs = sum_pairs / num_pairs\n    return avg_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables to keep track of the pairwise addition\n    pairwise_sum = 0\n    count = 0\n    \n    # Loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Add the current element to the sum and increment the count\n        pairwise_sum += test_tup[i]\n        count += 1\n        \n        # Add the next element to the sum and increment the count\n        pairwise_sum += test_tup[i+1]\n        count += 1\n    \n    # Return the pairwise sum divided by the count of elements\n    return pairwise_sum/count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the length of the tuple\n    length = len(test_tup)\n    # loop through the tuple\n    for i in range(length-1):\n        # add the elements and store the result in a new list\n        new_list = [test_tup[i]+test_tup[i+1]]\n        # replace the original tuple with the new list\n        test_tup = tuple(new_list)\n    # return the modified tuple\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    if len(arr) == 0:\n        raise ValueError(\"Input list must not be empty\")\n    \n    product = 1\n    for element in arr:\n        new_product = product * element % n\n        product = new_product\n    \n    if product == 0:\n        return product\n    else:\n        return (product + n) % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array of numbers and a number n as input and returns the remainder of the product of the array modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number n and returns the product of the array multiplied modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): List of integers to be multiplied.\n    n (int): Integer modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = (result * i) % n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] - 1: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # initialize count and result\n    count = 0\n    result = False\n    \n    # iterate through the list\n    for i in range(len(l)-1): \n        \n        # if the next element is the next consecutive element in the list, increment count\n        if l[i+1] == l[i]+1: \n            count += 1\n        \n        # if count is greater than 1, return True\n        if count > 1: \n            return True\n    \n    # if no consecutive elements are found, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets to remove duplicates\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n\n    # Find the intersection between the two sets\n    intersection = test_set1.intersection(test_set2)\n\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    # Sort the list in ascending order based on the first element of each tuple\n    intersection_list.sort(key=lambda x: x[0])\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check if both lists are non-empty\n    if not test_list1 or not test_list2:\n        return None\n    # Initialize an empty set to store the intersection tuples\n    intersection_set = set()\n    # Loop through the first list\n    for item1 in test_list1:\n        # Check if the item is in the second list\n        if item1 in test_list2:\n            # If the item is in both lists, add it to the set\n            intersection_set.add(item1)\n    # Convert the set to a tuple and return it\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection.append(tup)\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two list of tuples as input and returns their tuple intersection.\n    \"\"\"\n    # Initialize an empty set to store the unique tuple elements\n    unique_elements = set()\n    \n    # Iterate over both lists\n    for item in test_list1:\n        # Check if the item is already in the set\n        if item not in unique_elements:\n            # Add it to the set\n            unique_elements.add(item)\n    \n    # Iterate over the second list again and check if each element is in the set\n    for item in test_list2:\n        # If the element is not in the set, add it to the result list\n        if item not in unique_elements:\n            result.append(item)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through both lists and add the common elements to the set\n    for element in test_list1:\n        if element in test_list2 and element not in common_elements:\n            common_elements.add(element)\n\n    # Convert the set to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for t1 in test_list1:\n        if t1 in test_list2:\n            intersection.append(t1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort both the lists in lexicographical order\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize a new list to store the common elements\n    common_elements = []\n\n    # Iterate over both the sorted lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # If the elements at the current positions are equal, add it to the common elements list\n        if test_list1[i] == test_list2[j]:\n            common_elements.append(test_list1[i])\n            i += 1\n            j += 1\n        # If the element in test_list1 is smaller, move to the next element in test_list1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        # If the element in test_list2 is smaller, move to the next element in test_list2\n        else:\n            j += 1\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of elements from both lists and check if there's any common elements\n    common_elements = set(test_list1) & set(test_list2)\n    \n    # Convert set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character `ch` in a string `str1` with a new character `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_str = \"\"\n    # loop through each character in the original string\n    for char in str1:\n        # if the current character is the specified character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        # otherwise, add the current character to the modified string\n        else:\n            modified_str += char\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # convert string to list to perform operations on it\n    str_list = list(str1)\n    # iterate through list and replace characters as per given conditions\n    for i in range(len(str_list)):\n        if str_list[i] == ch:\n            str_list[i] = newch\n    # convert list back to string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to store the new string\n    new_str = ''\n    # iterate through each character in the original string\n    for char in str1:\n        # check if the current character is equal to the character to be replaced\n        if char == ch:\n            # if it is, replace it with the new character\n            new_str += newch\n        else:\n            # otherwise, append the current character to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Convert the string to a list of characters\n    str1 = list(str1)\n    # Iterate over the list of characters\n    for i in range(len(str1)):\n        # If the character matches the target character, replace it with the new character\n        if str1[i] == ch:\n            str1[i] = newch\n    # Convert the list of characters back to a string and return it\n    return ''.join(str1)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter function from the collections module to count the frequency of elements in the dictionary\n    counter = Counter(dict1)\n    \n    # Sort the dictionary based on the values\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return Counter(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the counter by value in descending order\n    sorted_counter = counter.most_common()\n    sorted_counter.sort(key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary from the sorted counter\n    sorted_dict = {k: v for k, v in sorted_counter}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_counter"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    return min_val + max_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the smallest and largest values in the array\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"The array should have at least 2 elements.\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Use the built-in sorted function to sort the array in ascending order\n    nums = sorted(nums)\n\n    # Find the largest and smallest values in the sorted array\n    largest = nums[-1]\n    smallest = nums[0]\n\n    # Calculate the sum of the largest and smallest values\n    big_sum = largest + smallest\n\n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Calculate the sum of the largest and smallest values\n    big_sum = max_val + min_val\n    \n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the maximum and minimum values\n    max_val = nums[0]\n    min_val = nums[-1]\n    \n    # Calculate the sum of the maximum and minimum values\n    sum_vals = max_val + min_val\n    \n    return sum_vals"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    matches = re.findall(pattern, string)\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    \n    # Use the re.sub() function to remove all lowercase substrings from the input string\n    str2 = re.sub(pattern, '', str1)\n    \n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the re.sub() function to replace all occurrences of lowercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Remove any words that are lowercase\n    new_words = [word for word in words if not word.islower()]\n\n    # Convert the new list of words back to a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z][a-z0-9]*\\b'\n    # Use re.sub() method to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern for lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    \n    # Iterate over each match of the pattern in the string\n    matches = pattern.finditer(str1)\n    for match in matches:\n        # Get the substring matched by the pattern\n        substring = match.group()\n        \n        # Replace the matched substring with an empty string\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b')\n\n    # Remove all lowercase substrings using search() method\n    str1 = pattern.sub('', str1)\n\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w+\\b', re.IGNORECASE)\n    \n    # Use the pattern to find all non-overlapping matches of lowercase substrings\n    matches = pattern.finditer(string)\n    \n    # For each match, remove the substring and continue iterating\n    for match in matches:\n        string = string[:match.start()] + string[match.end():]\n    \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'([a-z])'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Find the first digit of the number\n    first_digit = str(n)[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_digit = int(first_char)\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 ** (len(str(n)) - 1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    while n >= 10:\n        n = n / 10\n    return int(n)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Find the first digit of the given number\n    digit = n // 10**len(str(n))\n    # Return the first digit\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    difference = sum_of_cubes - sum_of_numbers\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # Find the difference between the sum of cubes and the sum of numbers\n    difference = sum_of_cubes - sum_of_numbers\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # find the sum of cubes of first n natural numbers\n    cube_sum = n * (n + 1) * (2 * n + 1) // 6\n\n    # find the sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n + 1))\n\n    # return the difference between the two sums\n    return cube_sum - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = n * (n * (n + 1)) // 6\n    \n    # Find the sum of the first n natural numbers\n    sum_numbers = n * (n + 1) // 2\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(n+1)])\n    sum_natural = sum(range(n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(n):\n        sum_cubes += i**3\n    \n    # calculate the sum of the first n natural numbers\n    for i in range(n):\n        sum_numbers += i\n    \n    # calculate the difference\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural_numbers = sum(range(1,n+1))\n    \n    # Return the difference\n    return sum_cubes - sum_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(num ** 3 for num in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n\n    for i in range(N):\n        xor_sum ^= A[i]\n        count += (xor_sum & 1)\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    Returns the number of odd pairs in a list A of length N.\n    \"\"\"\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum ^= A[i]\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N): \n    count = 0 \n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i]^A[j]) % 2 == 1: \n                count += 1 \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i, N):\n            xor ^= A[j]\n        if xor % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize variables to keep track of the count of odd pairs\n    odd_count = 0\n    # loop through all possible pairs of elements in the array\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            # calculate the XOR value of the pair of elements\n            xor = A[i] ^ A[j]\n            # if the XOR value is odd, increment the odd_count variable\n            if xor % 2!= 0:\n                odd_count += 1\n    # return the count of odd pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of N integers as input and returns the count of odd pairs in the array.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] & A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # iterate over each character in the string\n    for i in range(len(string)):\n        # check if the character is uppercase\n        if string[i].isupper():\n            # convert the character to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # check if the character is lowercase\n        elif string[i].islower():\n            # convert the character to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.islower() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # check if the character is uppercase\n        if string[i].isupper():\n            # toggle the case of the character and replace it in the string\n            string = string[:i] + string[i].lower() + string[i+1:]\n        else:\n            # toggle the case of the character and replace it in the string\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # return the updated string\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the toggled string\n    toggled_string = \"\"\n    # Loop through each character in the input string\n    for char in string:\n        # If the character is uppercase, convert it to lowercase and append it to the toggled string\n        if char.isupper():\n            toggled_string += char.lower()\n        # If the character is lowercase, convert it to uppercase and append it to the toggled string\n        elif char.islower():\n            toggled_string += char.upper()\n        # If the character is neither uppercase nor lowercase, append it to the toggled string as is\n        else:\n            toggled_string += char\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # initialize a variable to store the sum of the per-digit difference\n    sum_diff = 0\n\n    # loop through each character in the strings\n    for i in range(len(str1)):\n        # if the characters are not the same, add their difference to the sum\n        if str1[i]!= str2[i]:\n            diff = abs(ord(str1[i]) - ord(str2[i]))\n            sum_diff += diff\n\n    # return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n        diff = abs(digit1 - digit2)\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the input integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # initialize variables to store the digit differences\n    digit_diff = 0\n    \n    # loop through each digit of the two input strings\n    for i in range(len(str1)):\n        # convert each digit to an integer\n        digit1 = int(str1[i])\n        digit2 = int(str2[i])\n        \n        # calculate the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n        \n        # add the digit difference to the running total\n        digit_diff += diff\n        \n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings to perform string manipulation\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # initialize the sum of per-digit differences to zero\n    digit_diff_sum = 0\n\n    # loop through each digit of the two numbers\n    for i in range(len(num1_str)):\n        digit_diff = abs(int(num1_str[i]) - int(num2_str[i]))\n        digit_diff_sum += digit_diff\n\n    # return the total sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        total_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n\n    # Convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Initialize the sum of the differences\n    sum_diff = 0\n\n    # Loop through the digits of each number and calculate the difference\n    for digit1, digit2 in zip(digits1, digits2):\n        diff = digit1 - digit2\n        sum_diff += diff**2\n\n    # Calculate the square root of the sum of the differences\n    sqrt_sum_diff = sum_diff**(1/2)\n\n    # Return the sum of the differences and the square root of the sum of the differences\n    return sum_diff, sqrt_sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    digits = list(str(diff))\n    sum_diff = 0\n\n    for digit in digits:\n        sum_diff += int(digit)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    digits = [int(digit) for digit in str(difference)]\n    return sum(digits)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n    \n    for i in range(10):\n        diff_digit = abs(diff // 10**i % 10 - n2 // 10**i % 10)\n        sum_diff += diff_digit\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    # Initialize the sum of differences as 0\n    diff_sum = 0\n    # Loop through each digit in the lists\n    for i in range(len(n1_list)):\n        # Calculate the difference between the digits\n        diff = int(n1_list[i]) - int(n2_list[i])\n        # Add the difference to the sum of differences\n        diff_sum += diff\n    # Return the total sum of differences\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return None\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size == 1:\n        return a[0]\n\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    current_sum = 0  # initialize current_sum to 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        raise ValueError(\"Size cannot be greater than the length of the list.\")\n\n    current_sum = max_sum = float('-inf')\n    window_sum = []\n\n    for i in range(size):\n        window_sum.append(a[i])\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(arr, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            current_sum -= arr[i-size+1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    subarray = []\n\n    for i in range(size):\n        current_sum += a[i]\n        subarray.append(a[i])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_subarray = subarray\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Define an empty set to store the union of the two tuples\n    union = set()\n\n    # Iterate over each element in the first tuple and add it to the union set\n    for item in test_tup1:\n        union.add(item)\n\n    # Iterate over each element in the second tuple and add it to the union set\n    for item in test_tup2:\n        union.add(item)\n\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_union = tuple(sorted(union))\n\n    # Print the sorted union\n    print(\"Union of the two tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = sorted(set(test_tup1) | set(test_tup2))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = test_tup1 + test_tup2\n    union = sorted(set(union))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = sorted(set(test_tup1) | set(test_tup2))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Union of the two tuples is obtained by combining all the elements of both tuples and removing duplicates\n    union = sorted(list(set(test_tup1 + test_tup2)))\n\n    # Printing the union of the two tuples\n    print(\"The union of the elements of the two tuples is:\", union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set to store the unique elements of both tuples\n    unique_set = set(test_tup1) | set(test_tup2)\n    # convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    # return the sorted list as the output of the function\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Find the unique elements of the combined tuple\n    unique_elements = list(set(combined_tup))\n    \n    # Sort the unique elements in ascending order\n    unique_elements.sort()\n    \n    # Output the sorted unique elements\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Convert the list to a set to remove duplicates\n    unique_set = set(combined_list)\n\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_set))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Creating a set to store the union of elements from both tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Converting the set to a list and sorting it\n    sorted_union = sorted(list(union_set))\n    # Outputting the sorted union\n    print(\"The union of elements from both tuples is:\")\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n\n    # Sort the union in ascending order and remove duplicates\n    union = list(set(union))\n\n    # Output the union in sorted order\n    print(sorted(union))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if i == j:  \n                continue  \n            max_length = max(max_length, j-i+1)  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0  \n    current_length = 0  \n\n    for i in range(len(lst)):  \n        current_length += 1  \n        if i == len(lst) - 1 or lst[i+1]!= lst[i]:  \n            if current_length > max_length:  \n                max_length = current_length  \n            current_length = 0  \n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables to store the length of the longest sublists and their index\n    max_length = 0\n    max_index = 0\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # Initialize a variable to store the length of the current sublist\n        current_length = 1\n        # Loop through each element in the sublist\n        for j in range(i+1, len(lst)):\n            # Check if the current element is the same as the next element\n            if lst[j] == lst[j+1]:\n                # Increment the length of the current sublist\n                current_length += 1\n            else:\n                # If the current sublist is longer than the longest so far, update the variables\n                if current_length > max_length:\n                    max_length = current_length\n                    max_index = i\n                # Reset the length of the current sublist\n                current_length = 1\n        # If the current sublist is longer than the longest so far, update the variables\n        if current_length > max_length:\n            max_length = current_length\n            max_index = i\n    # Return the index of the longest sublist and its length\n    return max_index, max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            sublist = lst[i:j+1]  \n            max_length = max(max_length, len(sublist))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_len = max(max_len, len(lst[j]) - len(lst[i]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Calculate the length of the current sublist\n        length = len(sublist)\n\n        # Check if the current length is greater than the current maximum\n        if length > max_length:\n            max_length = length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    sublists = []  \n    for i in range(len(lst)):  \n        sublist = []  \n        for j in range(i, len(lst)):  \n            sublist.append(lst[j])  \n            if i == 0:  \n                if len(sublist) > max_length:  \n                    max_length = len(sublist)  \n            else:  \n                if len(sublist) > max_length:  \n                    sublists = []  \n                    max_length = len(sublist)  \n                elif len(sublist) == max_length:  \n                    sublists.append(sublist)  \n    if max_length == 0:  \n        return None  \n    else:  \n        return sublists[sublists.index(max(sublists))]  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        temp_len = 1\n        while i+temp_len < len(lst):\n            if lst[i+temp_len] == lst[i]:\n                temp_len += 1\n            else:\n                break\n        max_len = max(max_len, temp_len)\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")' # match double quotes followed by anything (non-capturing group) and then another double quote\n    result = re.findall(pattern, text) # find all matches using the regular expression pattern\n    return result # return a list of all values found"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"([^\"]*)\"' # pattern to match quoted values\n    values = re.findall(pattern, text) # find all matches using regular expression\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.+?)\"'\n    match = re.search(pattern, text)\n    if match:\n        value = match.group(1).strip()\n        return value\n    else:\n        return None"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern for matching quotation marks\n    pattern = r'\"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"'\n\n    # Use the re.findall() function to extract all non-overlapping matches of the pattern in the text\n    values = re.findall(pattern, text)\n\n    # Return the extracted values as a list\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?<=\\')(.*)(?=\\')')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # sorting the array\n    arr.sort()\n    count = 0\n    # iterating through the array and checking for all possible pairs\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # if both elements are unequal, incrementing the count\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the count of pairs for each element\n    count = {}\n    for i in range(n):\n        count[arr[i]] = 0\n    \n    # Iterate through the array and count the pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count[arr[i]] += 1\n    \n    # Calculate the total number of pairs\n    total_pairs = 0\n    for value in count.values():\n        total_pairs += value\n    \n    return total_pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # Initialize count to 0\n    count = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Loop through the remaining elements in the array\n        for j in range(i+1, n):\n            # Check if the current pair of elements is unordered\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        n = abs(n)\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum variable to 0\n    sum_num = 0\n    \n    # Loop through each digit of the input number\n    while n > 0:\n        # Extract the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum_num += digit\n        \n        # Remove the last digit from the number\n        n //= 10\n        \n    # Return the sum of the digits\n    return sum_num"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string to allow us to manipulate its digits\n    s = str(n)\n    # initialize the sum to zero\n    total = 0\n    # loop over each digit in the string and add it to the sum\n    for digit in s:\n        total += int(digit)\n    # return the sum of all digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # check if the input is a non-negative integer\n    if type(n)!= int or n < 0:\n        print(\"Input must be a non-negative integer.\")\n        return None\n    else:\n        # initialize the sum of digits to 0\n        sum = 0\n        # loop through each digit of the input number\n        while n > 0:\n            # get the last digit of the input number\n            digit = n % 10\n            # add the digit to the sum\n            sum += digit\n            # remove the last digit from the input number\n            n //= 10\n        # return the sum of digits\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of n\n    digits = list(map(int, str(n)))\n    # Calculate the sum of the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and add it to the total\n        total += int(char)\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is empty or not\n    if len(list1) <= 1:\n        return True\n    \n    # Check if the first two elements of the list are equal or not\n    if list1[0] == list1[1]:\n        return False\n    \n    # Compare the first two elements of the list\n    if list1[0] > list1[1]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Use the all() function to check if all the elements in the list are equal\n    if all(list1[0] <= element < list1[i+1] for i, element in enumerate(list1[:-1])):\n        return True\n    else:\n        return False"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length (int): The length of the list to create.\n\n    Returns:\n        list of empty dictionaries: The list of empty dictionaries of length N.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j]).lower()\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for i in range(len(list1)):\n        # Convert the sublist to a string and split it into individual words\n        words = ''.join(list1[i]).split()\n        # Sort the words in the sublist alphabetically\n        words.sort()\n        # Convert the sorted words back to a string and join them into a sublist\n        list1[i] =''.join(words)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist of strings in the list\n    for sublist in list1:\n        # Use the built-in sort() function to sort the sublist\n        sublist.sort()\n\n    # Return the list with sorted sublists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set of unique numbers\n    unique_nums = set(nums)\n    \n    # Convert the set back to a list\n    result = list(unique_nums)\n    \n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # If the number is not already in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create an empty list to store unique numbers\n    unique_nums = []\n\n    # Loop through each number in the list\n    for num in nums:\n\n        # If the number is not already in the unique_nums list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    # Return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize an empty list to store unique numbers\n    unique_nums = []\n    # loop through each list in the input\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # check if the number is not already in the unique_nums list\n            if num not in unique_nums:\n                # if the number is not already in the list, append it to the list\n                unique_nums.append(num)\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and removes the duplicate numbers.\n    It returns a list with unique numbers from the input list.\n    \"\"\"\n    unique_nums = list(set(nums))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    - nums (list): A list of lists that contains numbers.\n\n    Returns:\n    - list: A list of lists where each sublist contains unique numbers.\n    '''\n\n    # Remove duplicates from each sublist\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n\n    # Remove duplicates from the whole list\n    unique_nums = []\n    for num in new_nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list with duplicate numbers removed.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                continue\n            else:\n                unique_nums.append(nums[i])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store the unique numbers\n    unique_set = set()\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # Add the number to the set if it's not already there\n            if num not in unique_set:\n                unique_set.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the given list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data)) # Extract unique numbers from the list\n    unique_product = 1 # Initialize the product to 1\n    for number in unique_numbers: # Iterate over the unique numbers\n        unique_product *= number # Calculate the product of the number and the product so far\n    return unique_product # Return the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # Get the unique numbers in the list\n    product = 1 # Initialize the product to 1\n    \n    for number in unique_numbers: # Iterate through each unique number\n        product *= number # Multiply the current product by the unique number\n        \n    return product # Return the product of the unique numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula: A = \u03c0r^2\n    A = 3.14159*r**2\n    \n    # Calculate the volume of the cylinder using the formula: V = \u03c0r^2h\n    V = 3.14159*r**2*h\n    \n    # Calculate the surface area of the base of the cylinder using the formula: Sb = 2\u03c0r\n    Sb = 2*3.14159*r\n    \n    # Calculate the surface area of the top of the cylinder using the formula: St = 2\u03c0rh\n    St = 2*3.14159*r*h\n    \n    # Add the surface areas of the base and top of the cylinder to get the total surface area of the cylinder\n    S = Sb + St\n    \n    # Return the total surface area of the cylinder\n    return S"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    print(\"The surface area of the cylinder is: \", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the surface area of the cylinder using the formula A = \u03c0r\u00b2h\n    area = math.pi * r**2 * h\n    \n    # Return the surface area\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the volume of the cylinder\n    volume = (3.14/4)*r**2*h\n    # Calculate the surface area of the cylinder\n    surface_area = 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*h**2 + 2*3.14*r*h**2 + 2*3.14*r**2*h**2\n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    surface_area = 2 * area + 2 * volume\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)+(2*r*h)+(2*h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    # A = 2 * pi * r * h\n    # We need to convert radius from meter to centimeter\n    area = 2 * 3.14159 * (r/100) * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    This function calculates the surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    (float): surface area of the cylinder\n    '''\n    \n    # Calculate the surface area of the cylinder\n    surface_area = 2*math.pi*(r**2) + 2*math.pi*h + 2*math.pi*(r**2)*h\n    \n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    n = len(A)\n    m = len(B)\n\n    while i < n and j < m:\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n        else:\n            i += 1\n            j = 0\n\n    if j == m:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists as input and returns true if the first list is a sublist of the second list. \n    Otherwise, it returns false. \n\n    The time complexity of this function is O(n), where n is the length of the second list. The space complexity is O(1).\n    '''\n    if len(A) > len(B): \n        return False\n\n    i, j = 0, 0 \n    while j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n            if i == len(A): \n                return True \n        j += 1 \n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(A[i] in B for i in range(len(B)))"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] not in A:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        if A == B:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else it returns False.\n    \"\"\"\n    # Check if B is a sublist of A using the in operator\n    return B in A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input.\n    It checks whether list A is a sublist of list B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B and returns True if B is a sublist of A, else False.\n    \"\"\"\n    # Check if B is a sublist of A\n    if A[0] in B:\n        if A[-1] in B:\n            for i in range(len(A)):\n                if A[i] in B:\n                    B.remove(A[i])\n                else:\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Get the last digit of the factorial of n\n    factorial_n = 1\n    while n > 0:\n        factorial_n *= n\n        n -= 1\n    last_digit = factorial_n % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    while n > 0:\n        n //= 10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Initialize a variable to store the remaining digits of the factorial\n    remaining_digits = n\n    \n    while remaining_digits > 0:\n        # Divide the remaining digits by 10 and store the result in a variable\n        last_digit = remaining_digits % 10\n        # Multiply the last digit by 10 to get the next digit in the factorial\n        remaining_digits = remaining_digits // 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert number to string\n    num = str(n)\n    # get last character in string\n    last_char = num[-1]\n    # convert last character to integer\n    last_digit = int(last_char)\n    # find factorial of integer until last digit\n    factorial = 1\n    while last_digit > 1:\n        factorial *= last_digit\n        last_digit -= 1\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of factorial\n    last_digit = 0\n    # Initialize a variable to store the factorial of the number\n    fact = 1\n    # Loop through the digits of the number\n    while n > 0:\n        # Get the last digit of the number\n        last_digit = n % 10\n        # Calculate the factorial of the number excluding the last digit\n        fact = fact * (n // 10)\n        # Subtract the last digit from the number\n        n = n - last_digit\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize the result variable\n    result = 0\n\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # get the last digit of the factorial\n    last_digit = factorial % 10\n\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    if n < 10:\n        return n\n    else:\n        return last_Digit_Factorial(n // 10) + n % 10\n\nn = int(input(\"Enter a number: \"))\nresult = last_Digit_Factorial(n)\nprint(\"The last digit of the factorial of\", n, \"is\", result)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n\n    # loop through each number from 1 to n\n    for i in range(1, n+1): \n        factorial = factorial * i\n        last_digit = factorial // 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Error: All lists must be of the same length.\"\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each list, interleaving its elements with the previous elements of the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the lengths of the lists are equal\n    if len(list1)!= len(list2)!= len(list3):\n        print(\"Error: All lists must be of equal length.\")\n        return\n    \n    # Initialize a new list to store the interleaved elements\n    interleaved = []\n    \n    # Iterate through each element in each list\n    for i in range(len(list1)):\n        # Add the first element in list1\n        interleaved.append(list1[i])\n        # Add the second element in list2\n        interleaved.append(list2[i])\n        # Add the third element in list3\n        interleaved.append(list3[i])\n    \n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the three lists into a single list\n    interleaved_list = list1 + list2 + list3\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists are of equal length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    # Concatenate the lists\n    interleaved_list = list1 + list2 + list3\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set(test_tup1) ^ set(test_tup2)\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the element in the first tuple is equal to any of the elements in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # if it's not, append it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    \n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sub_tuple in test_tuple:\n        even_sub_tuple = [even_fnc(sub_sub_tuple) for sub_sub_tuple in sub_tuple if even_fnc(sub_sub_tuple)]\n        result.append(even_sub_tuple)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list\n\ndef is_even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested mixed tuple and a function that takes a single element and returns True if the element is even.\n    The function returns a new tuple with only the even elements of the original tuple.\n    \"\"\"\n    # Define a list to store the even elements of the original tuple\n    even_elems = []\n    # Loop through the elements of the tuple\n    for elem in test_tuple:\n        # Check if the element satisfies the condition of being even using the function passed as an argument\n        if even_fnc(elem):\n            # If the element is even, append it to the list of even elements\n            even_elems.append(elem)\n    # Return the new tuple with only the even elements\n    return tuple(even_elems)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Initialize a new list to store the even elements\n    even_list = []\n\n    # Loop through each element in the test tuple\n    for element in test_tuple:\n        # Check if the element is even using the even_fnc function\n        if even_fnc(element):\n            # If the element is even, add it to the even_list\n            even_list.append(element)\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    filtered_list = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            filtered_list.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            filtered_list.append(elem)\n    return filtered_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if all(even_fnc(x) for x in tup):\n            result.append(tup)\n    return result\n\ndef even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a function to check if a given element is even\n    def is_even(elem):\n        return (elem % 2 == 0)\n\n    # Define a function to filter the even elements from the nested tuple\n    def filter_even(elem):\n        return even_fnc(elem)\n\n    # Filter the even elements from the nested tuple using the filter function\n    even_elems = list(filter(filter_even, test_tuple))\n\n    # Return the filtered tuple of even elements\n    return tuple(even_elems)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_elements.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_elements.append(item)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_list.extend(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            new_list.extend(even_ele(tuple(item), even_fnc))\n        elif isinstance(item, dict):\n            new_list.extend(even_ele(tuple(item.items()), even_fnc))\n        else:\n            if even_fnc(item):\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sub_tuple in test_tuple:\n        if even_fnc(sub_tuple):\n            result.append(sub_tuple)\n    return result\n\ndef even_sub_tuple(sub_tuple):\n    '''\n    Define a function to check if a sub tuple is even.\n    '''\n    return all(i % 2 == 0 for i in sub_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s) + 2*b*s + b**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(base_edge, height):\n    surface_area = (1/2)*base_edge**2 + (base_edge+height)*height**2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4 * b * s) + (b * b * s * 3)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = (b**2) * s\n    print(\"The surface area of the square pyramid is:\", area)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes two arguments: base edge 'b' and height's'.\n    It returns the surface area of a square pyramid.\n    \"\"\"\n    area = ((1/2) * b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b * s) + ((b * s) * (2 * b - 1))\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2) * s \n    return area "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = 0.5 * b * s * (s + b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + b*s**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = (b*s)/2 \n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"The dictionary is not empty.\")\n    else:\n        print(\"The dictionary is empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        n = num // 2\n        return 4 * catalan_number(n) - catalan_number(n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n - 1) * (2 * n - 1) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number recursively.\n\n    Args:\n        n: integer, the order of the Catalan number to be calculated.\n\n    Returns:\n        int, the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) * (2*n+1) // (n+1)\n    else:\n        return catalan_number(n//2) * (2*n+1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    def factorial(n):\n        \"\"\"\n        Returns the factorial of n.\n        \"\"\"\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def catalan(n):\n        \"\"\"\n        Returns the nth Catalan number using the formula:\n\n        C_n = (2n)! / (n!(n-1)! * (2n-1)!).\n        \"\"\"\n        return factorial(2 * n) / (factorial(n) * factorial(n - 1) * factorial(2 * n - 1))\n\n    return catalan(n)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    c = 1\n    for i in range(1, n + 1):\n        c = (c * (2 * i - 1)) // (i + 1)\n    return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    # Initialize the two-dimensional array\n    A = [[1, 1], [1, 0]]\n    # Initialize the result\n    result = 0\n    # Fill the array row by row\n    for i in range(n):\n        # Calculate the number of rows\n        k = A[i][0] + A[i][1]\n        # Calculate the number of columns\n        l = (A[i][0] + 1) * (A[i][1] + 1) // 2\n        # Fill the array with zeros\n        A[i] = [0] * (k + 1)\n        # Calculate the next row of the array\n        for j in range(1, k + 1):\n            # Calculate the value of the current cell\n            A[i][j] = (A[i - 1][j - 1] + A[i - 1][j]) % 2\n        # Multiply the current row by the Catalan formula\n        result = (result + l * A[i][0]) % 2\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number, which is defined as the number of \n    arrangements of n items from a collection of all items.\n\n    The nth Catalan number is the number of ways to choose n items from a \n    collection of n items.\n\n    This implementation uses dynamic programming.\n    \"\"\"\n    # base case\n    if n == 0 or n == 1:\n        return 1\n\n    # initialize memoization table\n    memo = [0] * (n+1)\n\n    # fill memoization table\n    memo[0] = 1\n    memo[1] = 1\n\n    for i in range(2, n+1):\n        memo[i] = (i * memo[i-1]) // i\n\n    return memo[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number using the formula for the nth catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*catalan_number(n-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\bly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        positions = [match.start(), match.end()]\n    else:\n        adverb = None\n        positions = None\n    return adverb, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b\\w*[aeiou]\\w*[aeiou]\\w*ly\\b'\n\n    # Use re.finditer() to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop through the matches and add the positions of the adverbs to the list\n    for match in matches:\n        adverbs.append(match.start())\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern to match the adverb ending with ly\n    pattern = r'(\\bly\\b)\\s*(\\w+)(\\W|$)'\n    \n    # Use the re.findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the adverb and its position in the text\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b[aeiou]y\\b')\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        result.append((start, end))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w*[ly]s\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern to match adverbs ending with ly\n    pattern = r'\\b(?:(?:an?|in|on|at|to|by|of|for|by|from|to)\\s+)?ly\\b'\n\n    # Find all occurrences of the pattern in the given string\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverbs and their positions\n    for match in matches:\n        print(match)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all adverbs ending with ly\n    adverbs = re.findall(r'\\bly\\b', text)\n\n    # initialize an empty list to store their positions\n    positions = []\n\n    # loop through all adverbs and store their positions in the positions list\n    for i, adverb in enumerate(adverbs):\n        positions.append(text.index(adverb))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+(ly|LL|ll|LLY|LLY)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb: {match.group()}\\nPosition: {match.start()}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Loop through each match and add its position to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return a tuple of the adverb(s) and their positions\n    return matches, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'(\\b\\w+\\b)([\\'a-z]*ly[\\'a-z]*)\\b'\n    match = re.search(pattern, text)\n    if match:\n        print(f'The first adverb ending with \"ly\" is: \"{match.group(2)}\".')\n        print(f'It starts at index {match.start()} in the text.')\n        print(f'It ends at index {match.end()} in the text.')\n    else:\n        print('No adverb ending with \"ly\" found in the text.')"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    # Iterate through the items list and push the items in descending order to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # If the heap size exceeds the n, pop the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heapify the dataset\n    heap = []\n    for item in items:\n        heappush(heap, (-item[1], item))\n\n    # Pop the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        _, item = heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        # Add the item to the heap and remove the smallest item if the heap is full\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and a number n, return a list of the n most expensive items in the list.\n    '''\n    heap = []\n    for item in items:\n        if not heapq.heappushpop(heap, -item):  # if the heap is empty or the item is greater than the smallest value\n            heapq.heappushpop(heap, -item)  # add the item to the heap\n        if len(heap) > n:  # if the heap has more than n elements, remove the smallest element\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]  # extract the n most expensive elements from the heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def expensive_items(items, n):\n    # Create a min heap of size n and fill it with the first n items\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n    \n    # Iterate over the remaining items and add them to the heap if they are cheaper\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappushpop(heap, item)\n    \n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n, and returns a list of the n most expensive items in the dataset.\n    '''\n    # First, create a min heap of the first n items from the dataset.\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, items[i])\n    # Now, iterate over the rest of the items in the dataset and update the min heap accordingly.\n    for i in range(n, len(items)):\n        if items[i] < min_heap[0]:\n            # If the item is less than the minimum item in the heap, replace it.\n            min_heapq.heappop(min_heap)\n            min_heapq.heappush(min_heap, items[i])\n        elif items[i] > min_heap[0]:\n            # If the item is greater than the minimum item in the heap, add it.\n            min_heapq.heappush(min_heap, items[i])\n    # Once the heap is empty, the n most expensive items are stored in the heap.\n    result = []\n    while min_heap:\n        result.append(min_heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items by their cost in descending order\n    items.sort(key=lambda x: x[1], reverse=True)\n    \n    # return the top n items as a list\n    return [item[0] for item in items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns a list of the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Pop the smallest items from the heap and add them to the result list\n    result = []\n    while heap:\n        item = heapq.heappop(heap)\n        result.append(item)\n        if len(result) == n:\n            break\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is less than zero or greater than the length of the list\n    if n < 0 or n > len(l):\n        return \"Error: n is out of range.\"\n\n    # Split the list at the nth element and add the first part to the end\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # split the list into two parts\n    a, b = l[:n], l[n:]\n    # concatenate the two parts and return the result\n    return a + b"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    \n    if n == 0:\n        return [l[0]]\n    \n    if n == len(l):\n        return l\n    \n    part1 = l[:n]\n    part2 = l[n:]\n    \n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return \"Invalid input\"\n    else:\n        return [l[n:], l[:n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= len(l):\n        return [l[n-1]] + l[:n-1]\n    else:\n        return []"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is a valid index in the list\n    if n > len(l):\n        return None\n    # Split the list at the nth element\n    arr1, arr2 = l[:n], l[n:]\n    # Concatenate the two arrays and return the result\n    return arr1 + arr2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    mid = len(l) // 2\n    first_part = l[:mid]\n    second_part = l[mid:]\n\n    # add the first part to the end of the second part\n    new_list = first_part + second_part\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n should be less than the length of the list.\")\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # calculate the difference between largest and smallest\n    diff = largest - smallest\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Finding the minimum value in the list\n    min_val = min(nums)\n    # Finding the maximum value in the list\n    max_val = max(nums)\n    # Calculating the difference between the maximum and minimum values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return None\n\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should have at least two elements\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        square = i*i\n        if square == i*i:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        square = num * num\n        if square == num and num > 0:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers a and b as input and returns a list of perfect squares between them.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through all integers between a and b\n    for num in range(a, b+1):\n        # Check if the current integer is a perfect square\n        if num*num == num:\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input and returns a list of perfect squares between them.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # iterate through each number between a and b\n    for num in range(a, b+1):\n\n        # check if the square of the current number is equal to num\n        if num == num**2:\n\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        squares.append(i*i)\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # Iterate through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        is_perfect_square = True\n        # Check the square root of the number to see if it is an integer\n        square_root = int(num**0.5)\n        # Iterate through all integers between 1 and the square root of the number\n        for i in range(1, square_root+1):\n            # Check if the square of the current integer is greater than the number itself\n            if i**2 > num:\n                # If it is, then the number is not a perfect square and we can break out of the loop\n                is_perfect_square = False\n                break\n        # If the number is a perfect square, add it to the list of perfect squares\n        if is_perfect_square:\n            perfect_squares_list.append(num)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        for i in range(a, b+1):\n            if i*i == a:\n                return i\n            elif i*i > a:\n                return i-1\n    else:\n        for i in range(b, a+1):\n            if i*i == b:\n                return i\n            elif i*i > b:\n                return i-1"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(int(a), int(b)+1):\n        square = i*i\n        if square == i:\n            print(square)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the circle in which the point is located.\n    theta (float): The angle in radians of the point from the x-axis.\n    \n    Returns:\n    x (float): The x-coordinate of the point in rectangular coordinates.\n    y (float): The y-coordinate of the point in rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y\n\nr = 5\ntheta = 0\nx, y = polar_rect(r, theta)\nprint(\"Polar Coordinates:\", r, \"theta:\", theta)\nprint(\"Rectangular Coordinates:\", x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # convert theta to radians\n    theta = cmath.radians(theta)\n\n    # calculate x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # return x, y components\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in the radius r and theta of a point in polar coordinates\n    and returns its x and y coordinates in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.pi/2 - theta # convert to angle in radians\n    \n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n    \n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n    \n    # swap first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    print(\"The new list after swapping first and last elements is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    first, last = newList[0], newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        # swap the first and last element\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List should have at least 2 elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return newList\n    else: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    # interchange the first and last elements of the list\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList) #get the length of the list\n    newList[0], newList[n-1] = newList[n-1], newList[0] #swapping the elements"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return \"Error: Empty list.\"\n    elif len(newList) == 1:\n        return \"Error: List with only one element.\"\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n\n    # interchange the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # getting the length of the list\n    length = len(newList)\n    \n    # swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return sum(n*x for x in range(1,k+1))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k): \n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n or k < 0: \n        return 0\n\n    if k == 0 or k == n: \n        return 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(k, n + 1): \n        sum += (n - i + 1) * (i)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: \n        return 1 \n    if k == 1: \n        return n \n    if k > 1: \n        return n * binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): Number of elements in the sequence.\n    k (int): The number of elements in the sequence to consider.\n\n    Returns:\n    (int): The sum of the product of consecutive binomial co-efficients.\n\n    \"\"\"\n    if k > n or k < 0:\n        return \"Invalid input! k should be a non-negative integer less than or equal to n.\"\n    elif k == 0:\n        return 1\n    else:\n        return (n * (n - 1)) // k\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum_product = binomial_Coeff(n, k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum_product)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0 \n    for i in range(k,n+1): \n        total += i*binomial_Coeff(n-i,k-1) \n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): number of elements in the array\n    k (int): number of consecutive elements to be used for the sum\n\n    Returns:\n    (float): sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, k+1):\n        sum += n * (n - i + 1) // i\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (n-k)*binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    :param n: The number of terms in the sequence.\n    :param k: The number of terms to consider.\n    :return: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Calculate the product of the first k terms of the binomial sequence.\n    product = 1\n    for i in range(k):\n        product *= (n - i + 1) // i\n    # Calculate the sum of the product of consecutive terms of the binomial sequence.\n    sum_product = 0\n    for i in range(k, n + 1):\n        sum_product += product\n        product *= (n - i + 1) // i\n    return sum_product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b\\d+\\b)', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+([1-9]|[1-9][0-9]|1[0-9]{2}|1[0-9]{2}[0-9]|1[0-9]{2}[0-9][0-9])', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*(0+)/\\d+\\s*$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Using regular expression to match any leading zeroes and remove them\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', r'\\1', ip)\n    else:\n        print(\"Invalid input\")\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i] == '0':\n                ip_list.pop(i)\n            else:\n                break\n        ip_str = '.'.join(ip_list)\n        return ip_str\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0][0]\n    odd = [num for num in list1 if num % 2!= 0][0]\n    diff = even - odd\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n        else:\n            odd_num = list1[i]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for num in list1:\n        if num % 2 == 0:\n            if not list1[0] % 2 == 0:\n                return num - list1[0]\n        elif num % 2 == 1:\n            if not list1[0] % 2 == 1:\n                return num - list1[0]\n    return 'There is no even and odd number in the list'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Use the first even number in the list\n    even_num = next((x for x in list1 if x % 2 == 0), None)\n    \n    # Use the first odd number in the list\n    odd_num = next((x for x in list1 if x % 2!= 0), None)\n    \n    # Calculate the difference between the even and odd numbers\n    diff = even_num - odd_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[-1]\n\n    if even_num % 2 == 0:\n        even_num = 0\n    else:\n        even_num = abs(even_num)\n\n    if odd_num % 2 == 0:\n        odd_num = 0\n    else:\n        odd_num = abs(odd_num)\n\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n\n    Parameters:\n    lst (list): A list of numbers\n\n    Returns:\n    int: The difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = None\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = None\n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n            \n    if first_even is None or first_odd is None:\n        return None\n    else:\n        return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0 and odd_num % 2 == 0:\n        return abs(even_num - odd_num)\n    else:\n        return \"List should contain at least two even and odd numbers.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n\n    # iterate over the list and check if the current number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:  # initialize even_num if it is None\n                even_num = num\n            else:  # if even_num is already assigned, add the current num to the sum\n                even_num += num\n        elif num % 2!= 0:\n            if odd_num is None:  # initialize odd_num if it is None\n                odd_num = num\n            else:  # if odd_num is already assigned, add the current num to the sum\n                odd_num += num\n\n    # return the difference of even and odd numbers\n    if even_num is None and odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert the strings to binary numbers\n    binary1 = int(str1,2)\n    binary2 = int(str2,2)\n\n    # Calculate the number of bits in each binary number\n    num_bits1 = len(bin(binary1)[2:])\n    num_bits2 = len(bin(binary2)[2:])\n\n    # Find the common prefix of the binary numbers\n    common_prefix = 0\n    while common_prefix < num_bits1 and common_prefix < num_bits2 and str1[common_prefix] == str2[common_prefix]:\n        common_prefix += 1\n\n    # Calculate the number of swaps required to convert the binary numbers\n    swaps = 0\n    for i in range(common_prefix,num_bits1):\n        if str1[i] == '0' and str2[i] == '1':\n            swaps += 1\n        elif str1[i] == '1' and str2[i] == '0':\n            swaps += 1\n\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # Check for common prefix and suffix\n    while str1[i] == str2[j] and i < len(str1) and j < len(str2):\n        count += i\n        i += 1\n        j += 1\n    \n    # If lengths are not equal, swap the longest one\n    if i < len(str1) and j < len(str2):\n        count += min(len(str1) - i, len(str2) - j)\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 0\n    \n    for i in range(2, n+1):\n        if str1[i-1] == str2[i-1]:\n            dp[i] = dp[i-1] + dp[i-2] + 1\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n            \n    return dp[n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Calculate the number of swaps required to convert the two numbers\n    num_swaps = 0\n    while num1!= num2:\n        # If the rightmost bits of num1 and num2 differ, swap the least significant bit\n        if (num1 & 1)!= (num2 & 1):\n            num1 ^= 1\n            num_swaps += 1\n        # If the rightmost bits of num1 and num2 are the same, divide them and swap the remainder\n        else:\n            num1 = num1 >> 1\n            num2 = num2 >> 1\n            num_swaps += 1\n    \n    # Return the minimum number of swaps required\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert one binary number to another.\n    '''\n\n    # Convert strings to lists of integers\n    binary_str1 = [int(i) for i in str1]\n    binary_str2 = [int(i) for i in str2]\n\n    # Find the length of the shortest binary number\n    min_len = min(len(binary_str1), len(binary_str2))\n\n    # Initialize a variable to keep track of the count of swaps\n    swaps = 0\n\n    # Iterate over the characters of the shorter binary number\n    for i in range(min_len):\n\n        # If the characters don't match, swap them and increment the count of swaps\n        if binary_str1[i]!= binary_str2[i]:\n            binary_str1[i], binary_str2[i] = binary_str2[i], binary_str1[i]\n            swaps += 1\n\n    # If the length of the shortest binary number is longer, pad the longer binary number with zeros\n    if len(binary_str1) > len(binary_str2):\n        binary_str2 = binary_str2 + [0] * (len(binary_str1) - len(binary_str2))\n    else:\n        binary_str1 = binary_str1 + [0] * (len(binary_str2) - len(binary_str1))\n\n    # Compare the binary numbers\n    for i in range(len(binary_str1)):\n        if binary_str1[i]!= binary_str2[i]:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert both strings to binary\n    binary1 = bin(int(str1, 2))[2:].zfill(len(str1))\n    binary2 = bin(int(str2, 2))[2:].zfill(len(str2))\n\n    # Initialize minimum number of swaps\n    min_swaps = 0\n\n    # Initialize indices of digits in binary strings\n    i = 0\n    j = 0\n\n    # Iterate until indices cross each other\n    while i < len(binary1) and j < len(binary2):\n        if binary1[i] == binary2[j]:\n            i += 1\n            j += 1\n        elif binary1[i] < binary2[j]:\n            i += 1\n        else:\n            j += 1\n            min_swaps += 1\n\n    # Return minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2): \n    n1 = len(str1) \n    n2 = len(str2) \n    m = [[0]*(n2+1) for _ in range(n1+1)] \n  \n    # create a matrix to store the minimum number of swaps required to convert the binary strings \n    for i in range(n1+1): \n        for j in range(n2+1): \n  \n            # if both strings are empty \n            if i == 0 and j == 0: \n                m[i][j] = 0 \n  \n            # if only the first string is empty \n            elif i == 0: \n                m[i][j] = j \n  \n            # if only the second string is empty \n            elif j == 0: \n                m[i][j] = i \n  \n            # if both strings have the same length and the characters are equal \n            elif str1[i-1] == str2[j-1]: \n                m[i][j] = m[i-1][j-1] \n  \n            # if the characters are not equal \n            else: \n                m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) \n  \n    # return the minimum number of swaps required to convert the strings \n    return m[n1][n2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n\n    # Initialize a boolean array to store the swaps required for each digit in both numbers.\n    dp = [[False] * 2 for _ in range(n)]\n\n    # Initialize the last row and column of the DP table with False, since we can't swap a digit with itself.\n    for i in range(n):\n        dp[i][0] = False\n        dp[i][1] = False\n\n    # Fill in the DP table using dynamic programming.\n    for i in range(2, n + 1):\n        for j in range(i):\n            if str1[j] == '1' and str2[i - j - 1] == '1':\n                # We can swap str1[j] with str1[j+1].\n                dp[i - 1][0] = dp[i - 1][0] or dp[j][1]\n\n                # We can swap str2[i-j-1] with str2[i-j].\n                dp[i - 1][1] = dp[i - 1][1] or dp[j][0]\n\n    # Calculate the minimum number of swaps required to convert str1 to str2.\n    min_swaps = 0\n    for i in range(n):\n        if str1[i] == '1':\n            min_swaps += dp[i][0]\n        if str2[i] == '1':\n            min_swaps += dp[i][1]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Count the number of set bits in the binary representation of num1 and num2\n    count1 = 0\n    count2 = 0\n    while num1!= 0:\n        count1 += num1 & 1\n        num1 >>= 1\n    while num2!= 0:\n        count2 += num2 & 1\n        num2 >>= 1\n\n    # Calculate the minimum number of swaps required to convert num1 to num2\n    min_swaps = 0\n    while count1!= count2:\n        if count1 < count2:\n            num1 |= 1 << (count1 - 1)\n            count1 += 1\n            min_swaps += 1\n        else:\n            num2 |= 1 << (count2 - 1)\n            count2 += 1\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Find the length of the shorter string\n    n = min(len(bin1), len(bin2))\n\n    # Initialize two pointers, left and right, to the start of the strings\n    left, right = 0, n-1\n\n    # Initialize a dictionary to store the prefix sums\n    prefix_sum = {}\n\n    # Compute the prefix sums of the binary strings\n    for i in range(n):\n        if bin1[i] == '1':\n            prefix_sum[i] = 1 + prefix_sum.get(i-1, 0)\n        else:\n            prefix_sum[i] = prefix_sum.get(i-1, 0)\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = n\n\n    # Iterate through the binary strings using two pointers\n    while left <= right:\n        # If the two pointers point to the same bit, increment both pointers\n        if bin1[left] == bin2[left]:\n            left += 1\n            right -= 1\n\n        # If the two pointers point to different bits, swap the bits and increment the swaps count\n        else:\n            # Find the smallest index such that the prefix sums are different\n            index = n\n            for i in range(n):\n                if bin1[left] == bin2[i]:\n                    index = min(i, index)\n            index = n-1 - index\n\n            # Swap the bits at the two pointers positions\n            bin1[left], bin1[index] = bin1[index], bin1[left]\n            bin2[left], bin2[index] = bin2[index], bin2[left]\n\n            # Update the prefix sums\n            if bin1[left] == '1':\n                prefix_sum[left] = 1 + prefix_sum.get(left-1, 0)\n            else:\n                prefix_sum[left] = prefix_sum.get(left-1, 0)\n\n            min_swaps = min(min_swaps, left+1)\n\n            left += 1\n            right -= 1\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size to zero\n    size = 0\n    # Iterate over each tuple in the list\n    for tuple_obj in tuple_list:\n        # Add the size of each tuple to the size variable\n        size += sys.getsizeof(tuple_obj)\n    # Return the size of the largest tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tuple in tuple_list:\n        size += sys.getsizeof(tuple)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of the largest tuple in the list.\n    '''\n\n    # Find the size of the largest tuple in the list\n    largest_tuple_size = sys.getsizeof(tuple_list[0])\n    for tup in tuple_list:\n        if sys.getsizeof(tup) > largest_tuple_size:\n            largest_tuple_size = sys.getsizeof(tup)\n\n    # Return the size of the largest tuple in bytes\n    return largest_tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of each tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return min(arr1[i], arr2[j])\n            else:\n                k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            elif k == 2:\n                return min(arr1[i], arr2[j])\n            else:\n                k -= 1\n            j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    n1, n2 = len(arr1), len(arr2)\n\n    i, j = 0, 0\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k < len(arr1) - i:\n                arr1 = arr1[i+1:]\n            else:\n                arr2 = arr2[j+1:]\n            k -= 1\n            i = 0\n            j = 0\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            elif k < len(arr2) - j:\n                arr2 = arr2[j+1:]\n            else:\n                arr1 = arr1[i+1:]\n            k -= 1\n            i = 0\n            j = 0\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k < len(arr1) - i:\n                arr1 = arr1[i+1:]\n            else:\n                arr2 = arr2[j+1:]\n            k -= 1\n            i += 1\n            j += 1\n    if k == 1:\n        if i == len(arr1):\n            return arr2[j]\n        else:\n            return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k:\n        return find_kth(arr2, arr1, k)\n    if k < 1:\n        return None\n    \n    left = 0\n    right = len(arr1) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr1[mid] == arr2[k - 1]:\n            k -= 1\n        elif arr1[mid] < arr2[k - 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return arr1[left]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == k:\n            return arr2[j-1]\n        if j == k:\n            return arr1[i-1]\n    return None  # kth element not found in any of the arrays"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initialize variables\n    i = j = 0\n    max_num = len(arr1)\n\n    # compare the two arrays and return the kth element\n    while i < max_num and j < max_num:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n\n    # return None if k is greater than the total number of elements in the array\n    if k > max_num:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = 0\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum = 0\n    temp_num = number\n    while temp_num > 0:\n        digit = temp_num % 10\n        sum += digit ** 3\n        temp_num //= 10\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if len(str(number))!= len(set(str(number))):\n        return False\n\n    def get_digits(num):\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        return digits\n\n    def sum_of_digits(digits):\n        sum = 0\n        for digit in digits:\n            sum += digit ** len(digits)\n        return sum\n\n    num_str = str(number)\n    digits = get_digits(number)\n    sum_of_digits_num = sum_of_digits(digits)\n    if int(num_str) == sum_of_digits_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize the sum variable\n    sum = 0\n    # Convert the string to a list\n    num_list = list(num_str)\n    # Iterate through the list and add each element to the sum variable\n    for num in num_list:\n        sum += int(num) ** len(num_list)\n    # Compare the sum with the original number\n    if sum == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number else False.\n    \"\"\"\n    # initialize a variable to store the sum of the square of the digits\n    sum_of_squares = 0\n\n    # convert the number to a string and iterate over each character\n    for digit in str(n):\n        # calculate the square of the digit\n        square = int(digit) ** 2\n        # add the square to the sum of squares\n        sum_of_squares += square\n\n    # check if the sum of squares is equal to the original number\n    if sum_of_squares == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    temp = num\n    sum = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    if num == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    n = int(n)\n    sum_of_squares = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 3\n        temp //= 10\n    return n == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digits raised to the power of the number of digits\n        power = len(num_str)\n        sum += digit_int ** power\n    # Check if the sum of the digits is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    sum = 0\n    temp = num_str\n    \n    while temp!= '0':\n        digit = int(temp[-1])\n        sum += digit ** len(temp)\n        temp = temp[:-1]\n    \n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    num_list = [int(i) for i in num_str]\n    power = len(num_str)\n    total = 0\n    for i in num_list:\n        total += i ** power\n    if total == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # check for negative numbers\n    if number < 0:\n        return \"The given number is negative.\"\n    # check for zero\n    elif number == 0:\n        return \"The given number is zero.\"\n    # iterate through the digits of the number\n    else:\n        digits = [int(digit) for digit in str(number)]\n        total = 0\n        for digit in digits:\n            total += digit ** len(digits)\n        if total == number:\n            return \"The given number is an Armstrong number.\"\n        else:\n            return \"The given number is not an Armstrong number.\""
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(n):\n        num = int(input(f\"Enter a number: \"))\n        sum += num\n        count += 1\n    average = sum / count\n    return sum, average\n\nn = int(input(\"Enter the number of natural numbers: \"))\nresult = sum_average(n)\nprint(f\"The sum of the first {n} natural numbers is: {result[0]}\")\nprint(f\"The average of the first {n} natural numbers is: {result[1]}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables to store sum and sum of squares\n    sum = 0\n    sum_of_squares = 0\n    # loop through the first n natural numbers and add them to sum and sum of squares\n    for i in range(number):\n        sum += i\n        sum_of_squares += i**2\n    # calculate the average of the first n natural numbers\n    average = sum / number\n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple of the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add i to sum\n        sum += i\n        # increment count\n        count += 1\n    \n    # calculate average\n    average = sum / count\n    \n    # return tuple of sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    # Initialize variables\n    sum_of_numbers = 0\n    count = 0\n    average = 0\n\n    # Iterate through numbers\n    while count < number:\n        # Get next number\n        num = int(input(\"Enter a number: \"))\n\n        # Add the number to the sum and count\n        sum_of_numbers += num\n        count += 1\n\n    # Calculate the average\n    average = sum_of_numbers / count\n\n    # Print the results\n    print(\"Sum of first\", number, \"natural numbers:\", sum_of_numbers)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_total = 0\n    sum_count = 0\n    for i in range(1, number + 1):\n        sum_total += i\n        sum_count += 1\n    average = sum_total / sum_count\n    return sum_total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", n, \"natural numbers is\", sum)\n    print(\"Average of first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer input 'n' and returns True if it is even, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate through each character in the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Iterate through the dictionary to find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n            \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first repeated character by iterating through the dictionary\n    for char in freq_dict:\n        if freq_dict[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeated = None\n    for char in str1:\n        if str1.count(char) > 1 and (first_repeated is None or first_repeated > char):\n            first_repeated = char\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    first_repeated = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_repeated = char\n            break\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If the string has no repeated character, it will return \"None\".\n    \"\"\"\n    # Initialize variables\n    count = {}\n    repeated_char = None\n    \n    # Iterate through the string\n    for char in str1:\n        # If the character is already in the count dictionary, it is a repeated character\n        if char in count:\n            # If the repeated character is not already found, update the repeated_char variable\n            if repeated_char is None:\n                repeated_char = char\n                \n        # If the character is not already in the count dictionary, add it with a value of 1\n        else:\n            count[char] = 1\n            \n    # Return the repeated character or \"None\" if no repeated character was found\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n\n    Args:\n        str1 (str): A string to search for repeated characters.\n\n    Returns:\n        str: The first repeated character in the given string.\n\n    \"\"\"\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    i = 1\n    while i <= n:\n        if all(d % i!= 0 for d in str(i)):\n            lucid.append(i)\n        i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            j = 3\n            while j <= n:\n                if j * i <= n:\n                    lucid_numbers.append(j * i)\n                j += 2\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store lucid numbers\n    lucid_numbers = []\n\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # If the integer is prime, add it to the lucid_numbers list\n        if is_prime(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n\n\ndef is_prime(n):\n    \"\"\"\n    Write a function to check if a given integer is prime or not.\n    \"\"\"\n    # Check if the integer is less than 2\n    if n < 2:\n        return False\n\n    # Loop through all integers from 2 to the square root of the integer\n    for i in range(2, int(n**0.5)+1):\n        # If the integer is divisible by i, return False\n        if n % i == 0:\n            return False\n\n    # If the loop completes without finding a factor, then the integer is prime\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(2, n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid.append(i)\n        i += 1\n    return lucid\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    lucid_dict = {\n        1: [1],\n        2: [2],\n        3: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n        4: [4],\n        5: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n        6: [6],\n        7: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70],\n        8: [8],\n        9: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(j**i % 2 == 0 for j in range(2, i+1)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize a list to store all lucid numbers\n    lucid_numbers = []\n\n    # Iterate through all integers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # If the current number is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = [i for i in range(1, n+1) if i == sum(map(int, str(i)))]\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a number is lucid.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert string to list of words\n    words = s.split()\n\n    # Reverse the words in the list\n    reversed_words = words[::-1]\n\n    # Convert list of words back to a string with spaces between them\n    reversed_string =''.join(reversed_words)\n\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    \n    reversed_string =''.join(reversed_words)\n    \n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    \n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    \n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the order of the words\n    return \" \".join(reversed_words) # join the reversed words back into a string with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back together\n    result =''.join(word[::-1] for word in words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    # Remove all the spaces from the string\n    s = s.replace(\" \", \"\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word and join them back together\n    reversed_words = \" \".join(words[::-1])\n    \n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # split the string by spaces and reverse each word\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words by spaces and return the final string\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2\n    elif num == 2:\n        return True\n    # check if the number is even\n    elif num % 2 == 0:\n        return False\n    # check if the number is odd\n    else:\n        # check if the number is divisible by any number between 3 and the square root of the number\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        # if no divisor is found, then the number is a prime number\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        literal = match.group(0)\n        start = match.start()\n        end = match.end()\n        results.append((literal, start, end))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Loop through each match and append the matching substring, start index and end index to the results list\n    for match in matches:\n        results.append((match[0], match[0].find(match[0]), match[0].rfind(match[0])))\n\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    regex_pattern = re.compile(pattern)\n    \n    # Find all matches of the pattern in the text\n    matches = regex_pattern.findall(text)\n    \n    # Iterate over the matches and return the substrings with start and end indices\n    for match in matches:\n        yield match, regex_pattern.search(text, match.start()).start(), regex_pattern.search(text, match.end()).end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[-1][1]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Literal: {literal}, Start index: {start_index}, End index: {end_index}\")\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog barks.\"\npattern = r'\\b[a-z]+\\b'\nfind_literals(text, pattern)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 2\n\n    # initializing bell number list with first two elements\n    bell_list = [1, 2]\n\n    # adding remaining elements of bell number list\n    for i in range(2, n):\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n\n    # returning nth bell number\n    return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Initialize a boolean array of size n+1 with all values set to True\n    bell_array = [True] * (n+1)\n\n    # Iterate through the array and set all the values to False except 0 and 1\n    for i in range(2, int(n**0.5)+1):\n        if bell_array[i]:\n            for j in range(i*i, n+1, i):\n                bell_array[j] = False\n\n    # Iterate through the array to find the nth bell number\n    for i in range(n+1):\n        if bell_array[i]:\n            return i"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError(\"n should be a non-negative integer\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (2*bell_Number(n-1) - bell_Number(n-2)) % 1000000007"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(n):\n        bell *= (n-i)\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell number at position n is the sum of n Bell numbers before it\n    # We can compute the sum of Bell numbers by taking the product of the integers 1 to n\n    # We can compute the Bell numbers using a helper function bell(n)\n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = 0\n    bell_numbers[1] = 1\n    for i in range(2, n+1):\n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize the list of bell numbers with the first two\n    bell = [0, 1]\n    # If n is greater than the length of the list, iterate from the last element\n    if n > len(bell):\n        bell = bell + [bell[-1] + bell[-2] for i in range(len(bell), n+1)]\n    # Return the nth bell number\n    return bell[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and an integer k and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    if k >= len(list1):\n        return list1\n    \n    list2 = list1[:k] + list1[k+1:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the kth element from it.\n\n    Args:\n        list1 (list): List to remove the kth element from.\n        k (int): Index of the element to be removed.\n\n    Returns:\n        list: List with the same elements as in list1, but the kth element removed.\n\n    \"\"\"\n\n    # Create a new list without the kth element\n    new_list = list(set(list1) - set([list1[k]]))\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list1[1:]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return None\n    list2 = list1[:L-1] + list1[L:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # The k'th element is at index k in the list.\n    list1.pop(k) # Remove the k'th element from the list.\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list1[:L-1] + list1[L:]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L == 1:\n        return list1[1:]\n    else:\n        list1 = remove_kth_element(list1, L-1)\n        return list1[:-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if max_val < row[N-1]:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for row in test_list:\n        col_max.append(max(row[N-1], key=row.index))\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Returns the maximum value of the Nth column in a matrix.\n\n    Args:\n    matrix (list of lists): matrix of size m x n\n    N (int): the column number to consider (starting from 1)\n\n    Returns:\n    float: maximum value of the Nth column in the matrix\n    \"\"\"\n    return max(row[N-1] for row in matrix)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the matrix\n    row_length = len(test_list[0])\n\n    # Initialize an empty list to store the max of each column\n    max_list = []\n\n    # Iterate over each row in the matrix\n    for row in test_list:\n        # Check if the current row is of the correct length\n        if len(row)!= row_length:\n            print(\"Error: Row length does not match matrix.\")\n            return None\n\n        # Initialize a counter to keep track of the current max\n        max_count = 0\n\n        # Iterate over each element in the row\n        for i in range(row_length):\n            # Check if the current element is greater than the max so far\n            if row[i] > max_list[max_count]:\n                max_count = i\n\n        # Add the max of then'th column to the max_list\n        max_list.append(max_list[max_count])\n\n    # Return the max of then'th column\n    return max_list[N-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    n = len(test_list)\n    m = len(test_list[0])\n    if N >= m:\n        return \"Error: N should be less than or equal to the number of columns.\"\n    max_val = 0\n    for i in range(n):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of columns in the matrix\n    n = len(test_list[0])\n\n    # Check if the given value of N is within the range of columns in the matrix\n    if N > n:\n        return \"N must be within the range of columns in the matrix.\"\n\n    # Initialize an empty list to store the maximum values of then'th column\n    max_col = []\n\n    # Loop through each row in the matrix and check if the value of N is present in the current row\n    for row in test_list:\n        if N in row:\n            # If the value of N is present, append the maximum value in then'th column to the list\n            max_col.append(max(row))\n\n    # If no maximum values of then'th column are found, return None\n    if not max_col:\n        return None\n\n    # Return the maximum value of then'th column\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize variables to store the max value and the index of the max value\n    max_value = float('-inf')\n    max_index = -1\n    \n    # Iterate through the list of lists to find the max value of then'th column\n    for i in range(len(test_list)):\n        if i == N-1:\n            continue\n        elif test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n            max_index = i\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n\n    # Initialize the max value to be less than any element in the column\n    max_val = float('-inf')\n\n    # Loop through each row in the matrix\n    for i in range(num_rows):\n        # Get the value of then'th column in the i-th row\n        col_val = test_list[i][N - 1]\n\n        # If the current value is greater than the max value, update the max value\n        if col_val > max_val:\n            max_val = col_val\n\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        first = lst[i][0]\n        second = lst[i][1]\n        result.append([first, second])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    merged_list = []  \n    for sublist in lst:  \n        merged_list.append([sublist[0], sublist[1]])  \n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        new_sublist = [first_element, second_element]\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for num in test_list:\n        cumsum += num\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            total_sum += test_list[i][j]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for tup in test_list:\n        if type(tup) == tuple:\n            for item in tup:\n                if type(item) == int:\n                    sum += item\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum list\n    cumulative_sum = []\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Get the values from the tuple\n        values = tup\n\n        # Initialize the running sum to 0\n        running_sum = 0\n\n        # Loop through the values in the tuple\n        for value in values:\n            # Add the value to the running sum\n            running_sum += value\n\n            # Append the running sum to the cumulative sum list\n            cumulative_sum.append(running_sum)\n\n    # Return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        cumulative_sum.append(sum(test_list[0:i+1]))\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        sum = 0\n        for num in num_tuple:\n            sum += num\n        average = sum / len(num_tuple)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg = total / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        sum = 0\n        for value in num:\n            sum += value\n        average = sum / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        avg = total / len(nums[i])\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to hold the averages\n    averages = []\n\n    # iterate through each tuple in the input tuple\n    for tup in nums:\n        # calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # append the average to the list of averages\n        averages.append(avg)\n\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the averages\n    averages = []\n    \n    # Iterate through each tuple in the input tuple of tuples\n    for t in nums:\n        # Calculate the sum of all the values in the tuple\n        total = sum(t)\n        \n        # Calculate the number of values in the tuple\n        count = len(t)\n        \n        # Calculate the average value\n        average = total / count\n        \n        # Add the average to the list of averages\n        averages.append(average)\n        \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_set in nums:\n        total = sum(num_set)\n        count = len(num_set)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i],))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    # Perform element-wise modulo\n    modulo_tup = []\n    for i in range(len(test_tup1)):\n        modulo_tup.append(test_tup1[i] % test_tup2[i])\n\n    # Return the modulo tuple\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i]!= 0:\n            return False\n    return True"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    # perform element wise modulo operation\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n\n    # Perform element wise modulo using the modulo operator\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    jumps = 0\n    \n    # Loop through all possible paths\n    while i <= steps:\n        # Check if the current point is at the destination\n        if i == steps and d == 0:\n            return jumps\n        # If not, move one step or jump to the next position\n        elif i < steps and (i + d >= steps or i + d < 0):\n            jumps += 1\n        else:\n            i += 1\n        i += 1\n    \n    # If we reach here, there is no possible path\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    count = 0\n    for i in range(len(steps)):\n        if steps[i] > d:\n            count -= 1\n        else:\n            jumps = (d - steps[i]) // (d-1) + 1\n            count += jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Step 1: Check for base case\n    if d == 0:\n        return 1\n    \n    # Step 2: Calculate the number of steps required to reach the point of form (d, 0) from origin\n    steps_to_d = steps // d\n    \n    # Step 3: Calculate the number of jumps required to reach the point of form (d, 0) from origin\n    num_jumps = 1\n    \n    # Step 4: Check for the number of jumps required to reach the point of form (d, 0) from origin\n    while steps > 0:\n        if steps >= steps_to_d:\n            steps -= steps_to_d\n            num_jumps += 1\n        else:\n            steps = 0\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    \n    def binary_search(lower, upper, target):\n        \"\"\"\n        Helper function to perform binary search for the minimum jumps required.\n        \"\"\"\n        \n        while lower <= upper:\n            mid = (lower + upper) // 2\n            \n            if check(mid):\n                lower = mid + 1\n            else:\n                upper = mid - 1\n        \n        return lower\n    \n    def check(jumps):\n        \"\"\"\n        Helper function to check if the number of jumps required to reach (d, 0) from origin is greater than or equal to the given length.\n        \"\"\"\n        \n        i = 0\n        pos = (0, 0)\n        jumps_taken = 0\n        \n        while i < steps and pos[0] >= 0:\n            pos = (pos[0] + 1, pos[1] + 1)\n            jumps_taken += 1\n            i += 1\n        \n        return jumps_taken >= jumps\n    \n    return binary_search(1, 1000000, steps + d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 1:\n        return 0\n\n    # Initialize variables for DP\n    dp = [[0] * (d + 1) for _ in range(steps + 1)]\n    dp[1][1] = 1\n\n    # Fill the DP table using dynamic programming approach\n    for i in range(2, steps + 1):\n        for j in range(1, d + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - i]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    # Return the minimum number of jumps required to reach the destination point\n    return dp[steps][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps (int): number of steps to reach the point (d, 0)\n    d (int): distance to reach the point (d, 0)\n\n    Returns:\n    int: number of jumps required\n    \"\"\"\n    jumps = 0\n    count = 0\n    \n    while count < steps:\n        if d >= 0:\n            d -= 1\n            jumps += 1\n        else:\n            d += 1\n            jumps -= 1\n        count += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = min(steps, 5)\n    jumps = 0\n    curr_pos = 0\n    next_pos = 1\n    while curr_pos < steps:\n        if next_pos == steps:\n            return jumps\n        elif next_pos > steps:\n            return -1\n        else:\n            next_pos = min(next_pos + d[curr_pos], steps)\n            curr_pos += 1\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # find the number of jumps required to reach d from origin\n    jump_count = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] > 0:\n            jump_count += 1\n            i += steps[i]\n        else:\n            i += 1\n    # check if there is a way to reach (d, 0) from origin using the minimum number of jumps\n    count = 0\n    i = 0\n    while i < len(steps) - 1:\n        if i + steps[i] >= d:\n            count += 1\n        i += steps[i]\n    if count < jump_count:\n        return -1\n    # return the minimum number of jumps required to reach (d, 0) from origin\n    return min(jump_count, count)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables to keep track of current position and steps taken\n    current_position = (0, 0)\n    steps_taken = 0\n\n    # Loop until we reach the desired position\n    while current_position!= (d, 0):\n        # Calculate the next step based on the current position\n        if current_position[0] < d:\n            current_position = (current_position[0] + 1, current_position[1])\n        else:\n            current_position = (current_position[0], current_position[1] + 1)\n\n        # Increment the steps taken\n        steps_taken += 1\n\n        # If we have reached the end of the list, we have reached the end of the 2d plane and cannot reach the desired position\n        if steps_taken == len(steps):\n            return \"Cannot reach the desired position\"\n\n    # If we have reached the desired position, return the number of steps taken\n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 2:\n        return -1\n    jumps = 0\n    cur_x = 0\n    cur_y = 0\n    while True:\n        jumps += 1\n        if cur_y == d:\n            return jumps\n        if cur_x < 0 or cur_x >= steps:\n            return -1\n        if cur_y < 0:\n            return -1\n        if cur_x == steps - 1 and cur_y == 0:\n            return jumps\n        if cur_x > 0:\n            cur_x -= 1\n            cur_y += 1\n        else:\n            cur_x += 1\n            cur_y -= 1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        return \"Lists should have equal length.\"\n    \n    # Divide the elements of the lists element wise and store the result in a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should have equal length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have equal length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of equal length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            print(\"Cannot divide by zero\")\n            return\n            \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of equal length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store numbers\n    num_list = []\n    # Initialize a variable to keep track of the position of the last number\n    last_num_pos = -1\n\n    # Loop through each character in the string\n    for i, char in enumerate(test_str):\n        # If the character is a number, add it to the list and update the position\n        if char.isdigit():\n            num_list.append(int(char))\n            last_num_pos = i\n\n    # Reverse the list to move the numbers to the end\n    num_list.reverse()\n\n    # Join the list of numbers back into a string and return it\n    return ''.join(str(num) for num in num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    test_str = ''.join(numbers)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # remove all non-digit characters from the string\n    test_str = ''.join(filter(str.isdigit, test_str))\n    # split the string into list of digits\n    digit_list = list(test_str)\n    # reverse the list of digits\n    digit_list.reverse()\n    # join the list of digits back into a string\n    moved_str = ''.join(digit_list)\n    # return the moved string\n    return moved_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a list to store all the numbers in the string\n    num_list = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the list\n        if char.isdigit():\n            num_list.append(char)\n\n    # Join the list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += test_str.index(char)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    if len(num_list) > 0:\n        return test_str[:-len(num_list)] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    # Create a variable to store the result string\n    result_str = ''\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the result string\n        if char.isdigit():\n            result_str += char\n            \n    # Return the result string\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    return ''.join(numbers + test_str.replace(',', ''))"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize the size of the largest subset to 1\n    max_size = 1\n    # Initialize the current subset size to 1\n    current_size = 1\n    # Initialize the index of the largest element in the current subset to 0\n    largest_index = 0\n    \n    # Loop through the list of numbers\n    for i in range(1, len(a)):\n        # If the next element is not divisible by the current element,\n        # then increase the current subset size by 1 and update the largest index\n        if a[i] % a[largest_index]!= 0:\n            current_size += 1\n            if current_size > max_size:\n                max_size = current_size\n                largest_index = i\n            \n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    start = 0\n    end = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            end += 1\n            max_size = max(max_size, end - start)\n        else:\n            start += 1\n            max_size = max(max_size, end - start)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(set(a)) # Remove duplicates and sort the list\n    n = len(a)\n    largest_size = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            # Check if a[i] can be divided by a[j]\n            if a[i] % a[j] == 0:\n                # If yes, check if the current subset is larger than the previous largest\n                if i-j+1 > largest_size:\n                    largest_size = i-j+1\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # create a dictionary to store the indices of the numbers in the subset\n    indices = {}\n\n    # initialize the largest subset size and index to zero\n    largest = 0\n    index = 0\n\n    # loop through the list of numbers\n    for i, num in enumerate(a):\n        # check if the number is already in the subset\n        if num in indices:\n            # if it is, update the index to be the smaller of the current index and the previous index\n            index = min(index, indices[num])\n        # otherwise, add the number to the dictionary with the current index\n        else:\n            indices[num] = i\n\n        # check if the current index is larger than the largest subset size\n        if i - index + 1 > largest:\n            largest = i - index + 1\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the list\n    a.sort()\n    \n    # initialize variables\n    result = 0\n    count = 0\n    \n    # iterate through the list\n    for i in range(len(a)):\n        # if the current element is divisible by the result, increment the count and update the result\n        while i + count < len(a) and a[i] % a[i + count] == 0:\n            count += 1\n            result = max(result, count)\n    \n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    # Initialize the largest subset to 0\n    max_subset = 0\n    # Initialize variables to keep track of the current subset and the index of the next number to consider\n    subset = [a[0]]\n    index = 0\n    # Iterate through the list\n    while index < n:\n        # If the next number is divisible by the current subset, add it to the subset and move on to the next number\n        if a[index] % subset[-1] == 0:\n            subset.append(a[index])\n            index += 1\n        # Otherwise, the current subset is too small, so we can't add this number\n        else:\n            # If the current subset is larger than the largest subset so far, update the largest subset\n            if len(subset) > max_subset:\n                max_subset = len(subset)\n            # Remove the smallest number from the subset and try again with the next number\n            subset = subset[1:]\n            index -= 1\n    # If the last number in the subset is not divisible by the last number in the original list, add it to the subset\n    if a[-1] % subset[-1]!= 0:\n        subset.append(a[-1])\n    # Return the largest subset size\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # create a list to store the current subset\n    subset = []\n    # create a list to store the maximum size of subsets found so far\n    max_size = 0\n    # loop through each element in the input list\n    for num in a:\n        # if the current element is not in the subset, add it to the subset and increment the max size\n        if num not in subset:\n            subset.append(num)\n            max_size = max(max_size, len(subset))\n        # if the current element is already in the subset, check if it's divisible by any element in the subset\n        else:\n            # loop through each element in the subset\n            for i in range(len(subset)):\n                # if the current element is divisible by an element in the subset, increment the max size and break out of the loop\n                if num % subset[i] == 0:\n                    max_size = max(max_size, len(subset))\n                    break\n    # return the maximum size of subsets found so far\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    max_size = 1\n    start = 0\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        # Initialize the count of pairs divisible by 2\n        count = 0\n        \n        # Iterate through the remaining unsorted list\n        for j in range(i+1, len(a)):\n            # If the current number is divisible by 2, increment the count\n            if a[j] % 2 == 0:\n                count += 1\n                \n            # If the count becomes greater than the max_size, update the max_size and start index\n            if count > max_size:\n                max_size = count\n                start = i\n                \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    count = 0\n    i = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[j] % a[i]!= 0:\n            j += 1\n        if j - i > count:\n            count = j - i\n        i = j\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize an empty list to store the largest subsets\n    largest_subsets = []\n\n    # Sort the list in ascending order\n    a = sorted(a)\n\n    # Loop through the list\n    for i in range(len(a)):\n        # Initialize an empty set to store the numbers that can divide the current number\n        divisors = set()\n\n        # Loop through the rest of the list to find numbers that can divide the current number\n        for j in range(i, len(a)):\n            # Check if the current number can divide the next number\n            if a[i] % a[j] == 0:\n                # Add the next number to the set of divisors\n                divisors.add(a[j])\n\n        # If the current set of divisors is larger than the current largest subset, update the largest_subsets\n        if len(divisors) > len(largest_subsets[-1]) or (len(divisors) == len(largest_subsets[-1]) and a[i] > largest_subsets[-1][0]):\n            largest_subsets.append([a[i]])\n        else:\n            largest_subsets[-1].append(a[i])\n\n    # Return the size of the largest subset\n    return len(largest_subsets[-1])"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the size of both arrays is same\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays should have same size\")\n\n    # Find the middle of both arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    # Find the middle element of both arrays\n    if len(arr1) % 2 == 0:\n        median1 = (arr1[mid1-1] + arr1[mid1]) / 2\n        median2 = (arr2[mid2-1] + arr2[mid2]) / 2\n    else:\n        median1 = arr1[mid1]\n        median2 = arr2[mid2]\n\n    # Sort the arrays based on the middle element\n    if median1 <= median2:\n        sorted_arr1 = sorted(arr1)\n        sorted_arr2 = sorted(arr2[:mid2])\n    else:\n        sorted_arr1 = sorted(arr1[:mid1])\n        sorted_arr2 = sorted(arr2)\n\n    # Calculate the median\n    if len(sorted_arr1) % 2 == 0:\n        median = (sorted_arr1[len(sorted_arr1)//2] + sorted_arr1[len(sorted_arr1)//2 - 1]) / 2\n    else:\n        median = sorted_arr1[len(sorted_arr1)//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists arr1 and arr2 of size n and returns the median.\n    \"\"\"\n    # Concatenate the two lists\n    combined_list = arr1 + arr2\n    # Sort the combined list\n    combined_list.sort()\n    # Find the median index\n    median_index = n // 2\n    # Return the median value\n    return combined_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)  # Concatenate both arrays\n    arr1.sort()  # Sort the concatenated array\n    mid = n // 2  # Calculate the middle index\n    if n % 2 == 0:  # If the length of the array is even\n        return (arr1[mid-1] + arr1[mid]) / 2\n    else:  # If the length of the array is odd\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    arr = arr1 + arr2\n\n    # sort the merged list\n    arr.sort()\n\n    # find the median\n    if n % 2 == 1:\n        median = arr[n // 2]\n    else:\n        lower_half = arr[:n // 2]\n        upper_half = arr[n // 2:]\n        median = (sum(lower_half) + sum(upper_half)) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    # Find the median index\n    median_index = n // 2\n    # If the length of the merged list is odd, return the median element\n    if n % 2 == 1:\n        return sorted_list[median_index]\n    # If the length of the merged list is even, return the average of the two middle elements\n    else:\n        return (sorted_list[median_index] + sorted_list[median_index - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(arr1, arr2):\n    merged = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    merged += arr1[i:]\n    merged += arr2[j:]\n\n    return merged\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef get_median(arr1, arr2, n):\n    # Sort both lists\n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n\n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_arr1[n//2-1] + sorted_arr1[n//2]) / 2\n    else:\n        median = sorted_arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    sorted_list = merge_lists(arr1, arr2)\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # Return the median value\n    return sorted_list[median_index]\n\n\ndef merge_lists(arr1, arr2):\n    '''\n    Merge two sorted lists into one sorted list.\n    '''\n    # Initialize pointers for the two lists\n    i, j = 0, 0\n    \n    # Initialize a new empty list\n    merged_list = []\n    \n    # Merge the two lists and add the elements to the new list\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            merged_list.append(arr2[j])\n            j += 1\n        else:\n            merged_list.append(arr1[i])\n            i += 1\n            j += 1\n            \n    # Add the remaining elements from the first list to the new list\n    merged_list += arr1[i:]\n    \n    # Add the remaining elements from the second list to the new list\n    merged_list += arr2[j:]\n    \n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three arguments - two sorted lists and n (the size of both the lists).\n    It calculates the median of the two lists and returns it.\n    '''\n\n    # Merge the two lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Calculate the median based on the size of the list\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged)\n    # Find the median index\n    median_index = n // 2\n    # Return the element at the median index\n    return sorted_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted lists into one\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the list is even, take the average of middle two elements\n        median = (merged_list[n//2] + merged_list[n//2-1]) / 2\n    else:\n        # If the length of the list is odd, take the middle element\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): The power to which each number is raised.\n\n    Returns:\n    A list of n-th powers of the numbers in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input,\n    computes the n-th power of each number in the list and returns the result.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, and False otherwise.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check whether a given string contains only uppercase characters.\n    \"\"\"\n    if all(char.isupper() for char in string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # loop through each character in the string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # convert the character to uppercase\n            string = string.upper()\n            break\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # length of the list\n    length = len(newList)\n    \n    # if the list has less than 2 elements, return the same list\n    if length < 2:\n        return newList\n    \n    # interchanging the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # returning the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Interchanging the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    lastIndex = len(newList) - 1\n    \n    newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        return newList\n    \n    # Swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is empty or has less than 2 elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the swapped list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Convert radius to float\n    r = float(r)\n    \n    # Find the semi-circle radius\n    a = (r**2) / 2\n    \n    # Use Heron's formula to find the area of the triangle\n    s = (1/3) * a\n    area = math.sqrt(s*(s-a)*(s-2*a))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-circle's area\n    area = math.pi * r ** 2\n    \n    # Calculate the area of each triangle by finding the semi-circle's radius when the angle is 60 degrees\n    triangle_a = area / 3\n    triangle_b = area / 4\n    triangle_c = area / 5\n    \n    # Find the area of the largest triangle by comparing its area with the area of the smallest one\n    if triangle_a > triangle_b and triangle_a > triangle_c:\n        largest_triangle = triangle_a\n    elif triangle_b > triangle_a and triangle_b > triangle_c:\n        largest_triangle = triangle_b\n    else:\n        largest_triangle = triangle_c\n        \n    return largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2*math.pi*r\n    \n    # Calculate the area of a triangle with sides of length 1 and 2*r\n    area_triangle = 0.5*semi_perimeter**2\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area_smallest_triangle = math.sqrt(semi_perimeter**2 - 4*area_triangle)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_triangle = area_triangle + area_smallest_triangle\n    \n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - 3))\n\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.14159\n    h = (3*r**2) / (4*pi)\n    return h"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = (3*r)**0.5\n    b = 2*r\n    c = (5*r)**0.5\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265359\n    # calculate the area of the smallest triangle with side length r\n    a = 2 * r * pi\n    # calculate the area of the largest triangle with side length r\n    s = (4 * r * r - 4) / 3\n    area_max = pi * r * r * (s - a)\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the semi-circle\n    x = r * math.cos(math.pi/6)\n    y = r * math.sin(math.pi/6)\n\n    # Find the largest side of the triangle that can be inscribed in the semicircle\n    a = max(r, x, y)\n    b = min(r, x, y)\n\n    # Calculate the area of the triangle\n    area = math.sqrt(a*b) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function takes a radius r and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    \"\"\"\n    return (3*r**2)**0.5"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    a = 1/2\n    b = -1\n    c = r**2\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        print(\"The given radius is too small.\")\n        return\n    x1 = (-b + disc**0.5) / (2*a)\n    x2 = (-b - disc**0.5) / (2*a)\n    y1 = r*x1\n    y2 = r*x2\n    area1 = 0.5 * x1 * x1\n    area2 = 0.5 * x2 * x2\n    if area1 >= area2:\n        area = area1\n    else:\n        area = area2\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a list of natural numbers and returns the smallest missing number in the list.\n    If the list is not sorted, it will sort the list before finding the missing number.\n    \"\"\"\n    # Check if the list is already sorted\n    if start < end and array[start] <= array[end]:\n        return end - start + 1\n    else:\n        # Sort the list if it's not sorted\n        array.sort()\n\n    # Find the missing number by iterating through the list and comparing it to the previous number in the list\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the input array is sorted\n    if not all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        return \"The input array is not sorted.\"\n\n    # Check if the end index is specified\n    if end is None:\n        end = len(array) - 1\n\n    # Check if the start index is valid\n    if start < 0 or start > end:\n        return \"The start index is invalid.\"\n\n    # Iterate through the array and find the missing number\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    # If no missing number is found, return the end index + 1 as the smallest missing number\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: a sorted list of natural numbers\n    :param start: the starting index (default: 0)\n    :param end: the ending index (default: the length of the array - 1)\n    :return: the smallest missing number from the array\n    \"\"\"\n    # check if the array is sorted\n    if not sorted(array):\n        return None\n\n    # check if the array is empty\n    if not array:\n        return None\n\n    # initialize the starting and ending indices\n    if end is None:\n        end = len(array) - 1\n\n    # loop through the array\n    for i in range(start, end+1):\n        # check if the current element is missing\n        if i+1 not in array:\n            return i+1\n\n    # if all elements are present, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i] + 1!= array[i+1]:\n            return array[i] + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] < mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < len(array) and array[mid] == mid:\n            start = mid + 1\n        elif mid > 0 and array[mid-1] == mid-1:\n            end = mid - 1\n        else:\n            return mid\n    return start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the even numbers in the original list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers and returns a new list of even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers from the original list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers and returns a new list containing only even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    adjacent = []\n\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                if (i, j)!= (0, 0) and ((i + ele[0], j + ele[1]) in sub or (i + ele[0], j + ele[1]) not in sub):\n                    adjacent.append((i + ele[0], j + ele[1]))\n\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_coords = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                adj_coords.append((ele[0]+i, ele[1]+j))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    x, y = ele\n    if x - 1 >= 0:\n        adj.append((x - 1, y))\n    if x + 1 < len(sub):\n        adj.append((x + 1, y))\n    if y - 1 >= 0:\n        adj.append((x, y - 1))\n    if y + 1 < len(sub[0]):\n        adj.append((x, y + 1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function takes a coordinate tuple as input and returns a list of adjacent coordinate tuples.\n    If a sub-list is provided, it will be used to store the result. Otherwise, a new list will be created.\n    '''\n    if sub is None:\n        sub = []\n    x, y = ele\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        new_x, new_y = x + dx, y + dy\n        if 0 <= new_x < 10 and 0 <= new_y < 10:\n            sub.append((new_x, new_y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    # Find adjacent coordinates\n    x, y = ele\n    n = len(sub)\n    if n == 0:\n        sub.append((x+1, y))\n        sub.append((x, y+1))\n        sub.append((x-1, y))\n        sub.append((x, y-1))\n    elif n == 1:\n        sub.append((x+1, y))\n        sub.append((x-1, y))\n        sub.append((x, y+1))\n        sub.append((x, y-1))\n    else:\n        sub.append((x-1, y))\n        sub.append((x, y-1))\n        sub.append((x+1, y))\n        sub.append((x, y+1))\n        sub.append((x+1, y-1))\n        sub.append((x-1, y-1))\n        sub.append((x+1, y+1))\n        sub.append((x-1, y+1))\n\n    # Add adjacent coordinates to result list\n    result = []\n    for i in range(len(sub)):\n        x, y = sub[i]\n        result.append((x, y))\n\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    for i in range(max(0, x-1), min(x+2, len(sub))):\n        for j in range(max(0, y-1), min(y+2, len(sub[i]))):\n            if (i, j)!= ele and (sub[i][j] not in sub or sub[i][j] not in result):\n                result.append((i, j))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < 10:\n        sub.append((x+1, y))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < 10:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (i+ele[0], j+ele[1]) not in sub:\n                adj.append((i+ele[0], j+ele[1]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    # calculate adjacent coordinates\n    if x > 0 and y > 0:\n        adj_coords.append((x-1, y-1))\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if x > 0 and y < 4:\n        adj_coords.append((x-1, y+1))\n    if x < 4 and y > 0:\n        adj_coords.append((x+1, y-1))\n    if x < 4:\n        adj_coords.append((x+1, y))\n    if x < 4 and y < 4:\n        adj_coords.append((x+1, y+1))\n    if x > 0 and y < 4 and x < 4 and y > 0:\n        adj_coords.append((x+1, y+1))\n    if x > 0 and y > 0 and x < 4 and y < 4:\n        adj_coords.append((x+1, y-1))\n    if x < 4 and y > 0 and x > 0 and y < 4:\n        adj_coords.append((x-1, y-1))\n    if x < 4 and y < 4 and x > 0 and y > 0:\n        adj_coords.append((x-1, y+1))\n    # add subarrays to adjacent coordinates\n    for coord in adj_coords:\n        if sub:\n            for sub_ele in sub:\n                if sub_ele in coord:\n                    adj_coords.append(coord)\n                    break\n        else:\n            adj_coords.append(coord)\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = [ele]\n    else:\n        sub.append(ele)\n\n    adjacent = []\n\n    for i in range(len(sub)):\n        if i == 0:\n            adjacent.append(sub[i] + (1, 0))\n            adjacent.append(sub[i] + (0, 1))\n        elif i == len(sub) - 1:\n            adjacent.append(sub[i] - (1, 0))\n            adjacent.append(sub[i] - (0, 1))\n        else:\n            adjacent.append(sub[i] + (1, 0))\n            adjacent.append(sub[i] + (0, 1))\n            adjacent.append(sub[i] - (1, 0))\n            adjacent.append(sub[i] - (0, 1))\n\n    return adjacent"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = text.replace(' ', '_')\n    underscores = text.replace('_','')\n    return spaces, underscores"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to a list of characters\n    text_list = list(text)\n\n    # Loop through each character in the list\n    for i in range(len(text_list)):\n        # Check if the character is a whitespace\n        if text_list[i] =='':\n            # Replace it with an underscore\n            text_list[i] = '_'\n        elif text_list[i] == '_':\n            # Replace it with a space\n            text_list[i] =''\n\n    # Convert the list back to a string and return it\n    return ''.join(text_list)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    # convert the input string to lowercase\n    text = text.lower()\n    # iterate over each character in the string\n    for i, char in enumerate(text):\n        # if the character is a space, replace it with an underscore\n        if char =='':\n            text = text[:i] + '_' + text[i+1:]\n        # if the character is an underscore, replace it with a space\n        elif char == '_':\n            text = text[:i] +'' + text[i+1:]\n    # return the modified string\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    count = 0\n    for i in range(n):\n        if num_list[i] == 0:\n            num_list[i], num_list[n-count] = num_list[n-count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[j] = num_list[i]\n            j += 1\n        i += 1\n    \n    while j < len(num_list):\n        num_list[j] = 0\n        j += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    i = 0\n    for num in num_list:\n        if num!= 0:\n            if i!= 0:\n                num_list[i], num_list[0] = num_list[0], num_list[i]\n            i += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    # loop through the list backwards\n    for i in range(len(num_list)-1, -1, -1):\n        # if the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            # move the last element to the current index\n            num_list[len(num_list)-1] = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # move the current element to the end of the list\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            # shrink the list by one element\n            num_list.pop()\n        else:\n            # move the next element to its correct position\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Find the index of the first non-zero number\n    first_non_zero = next((i for i, x in enumerate(num_list) if x!= 0), None)\n    # If no non-zero number is found, return the original list\n    if first_non_zero is None:\n        return num_list\n    # Move all zeroes to the end of the list\n    return num_list[:first_non_zero] + [0] * (len(num_list) - first_non_zero)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the given list.\n\n    Parameters:\n    arr (list): A list of integers\n    n (int): An integer\n\n    Returns:\n    int: The sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # XOR operation\n    def xor(a, b):\n        return a ^ b\n\n    # initialize a variable to store the sum of xor of all pairs\n    xor_sum = 0\n\n    # loop through the list of integers\n    for i in range(n):\n        # loop through the list of integers starting from index i+1\n        for j in range(i+1, n):\n            # add the XOR of the current pair of integers to the xor_sum\n            xor_sum = xor(xor_sum, xor(arr[i], arr[j]))\n\n    # return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes two parameters:\n    arr - a list of integers\n    n - an integer representing the number of elements in the list\n    \n    This function uses the XOR operator to find the sum of all pairs of elements in the list.\n    The XOR operator returns a value of 1 if the corresponding bits of two numbers are different, and 0 otherwise.\n    Therefore, we can XOR each element of the list with all other elements to find the sum of all pairs.\n    \n    The function returns the sum of all pairs of elements in the list using the XOR operator.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result ^= arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and its length n and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR operation to find the sum of all pairs of numbers in the list\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the list.\n\n    Parameters:\n    arr (list of integers): The list of integers whose xor of all pairs should be calculated.\n    n (integer): The integer value to which the xor of all pairs should be calculated.\n\n    Returns:\n    integer: The sum of xor of all pairs of numbers in the list.\n\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[n - i - 1]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heappushpop(heap, item)\n\n    # Convert the heap back to a list\n    return [heap[0] for heap[0] in heap]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heap sort algorithm.\n\n    The algorithm works as follows:\n    - Build a max-heap from the input list.\n    - Extract the maximum element from the heap and append it to the output list.\n    - Heapify the remaining elements of the list, removing the maximum element.\n    - Continue until the list is empty.\n\n    Complexity:\n    - Time complexity: O(n log n) in the average case, O(n^2) in the worst case.\n    - Space complexity: O(n) in the worst case, but usually O(log n) in the average case.\n    '''\n\n    # Build a max-heap from the input list\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Extract the maximum element from the heap and append it to the output list\n    result = [heapq.heappop(heap)]\n\n    # Heapify the remaining elements of the list, removing the maximum element\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a heap.\n    heap = list(iterable)\n    heap_size = len(heap)\n\n    # Heapify the given list.\n    for i in range(heap_size // 2 - 1, -1, -1):\n        sift_down(heap, i, heap_size)\n\n    # Extract the elements from the heap in sorted order.\n    sorted_list = []\n    while heap_size > 0:\n        sorted_list.append(heap[0])\n        heap_size -= 1\n        hq.heappop(heap)\n\n    return sorted_list\n\n\ndef sift_down(heap, index, heap_size):\n    '''\n    Perform a sift down operation on the given heap at the given index.\n    '''\n    largest = index\n    left = 2 * index + 1\n    right = 2 * index + 2\n\n    if left < heap_size and heap[left] > heap[largest]:\n        largest = left\n\n    if right < heap_size and heap[right] > heap[largest]:\n        largest = right\n\n    if largest!= index:\n        heap[index], heap[largest] = heap[largest], heap[index]\n        sift_down(heap, largest, heap_size)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input, and sorts it using the heap sort algorithm.\n    The algorithm sorts the iterable in ascending order, using a min-heap.\n    '''\n    # Convert the input to a list to avoid modifying the original iterable\n    list_input = list(iterable)\n    # Build a min-heap from the input list\n    heapq.heapify(list_input)\n    # Sort the input list using heap sort\n    for i in range(len(list_input)):\n        # Get the minimum value from the heap and add it to the output list\n        output_item = heapq.heappop(list_input)\n        # Add the minimum value to the output list\n        list_input.append(output_item)\n    # Return the output list as the sorted iterable\n    return list_input"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    n = len(iterable)\n    \n    for i in range(n//2, -1, -1):\n        heapq.heapify(heap, i, n)\n        \n    for i in range(n-1, 0, -1):\n        heapq.heappop(heap)\n        iterable[i] = heap[0]\n        \n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    heap = hq.nlargest(len(iterable), iterable)\n    # Convert the max heap to a sorted list\n    sorted_list = [heapq.heappop(heap) for i in range(len(heap))]\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n    # convert the array to a max heap\n    hq.heapify(arr)\n    # sort the array by swapping the elements with the root and popping the root\n    while len(arr) > 1:\n        hq.heappop(arr)\n        hq.heappush(arr, hq.heappop(arr))\n    # convert the sorted array back to a list\n    return list(arr)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = iterable\n    heapq.heapify(heap)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a min heap from the input list\n    heap = hq.heapify(iterable)\n\n    # Sort the heap and extract the sorted elements\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount: \n        return True \n\n    elif actual_cost > sale_amount: \n        return False \n\n    else: \n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount of the sale\n\n    Returns:\n    bool: Whether the given amount has no profit and no loss\n    \"\"\"\n    \n    if actual_cost == 0 and sale_amount == 0:\n        return True\n    elif sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"No profit and no loss can be achieved\")\n    else:\n        print(\"It is not possible to achieve profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # check if profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True, \"No profit or loss\"\n    else:\n        return False, \"Profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    :param actual_cost: actual cost of the sale\n    :param sale_amount: amount to be sold\n    :return: True if no profit and no loss, False otherwise\n    \"\"\"\n    return (actual_cost == sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n\n    Returns:\n        A boolean value indicating whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return \"No Profit and No Loss\"\n    else:\n        return \"Profit or Loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit and loss\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c_p = 1004.6  # Reference pressure at sea level (hPa)\n    gamma = 1.4  # Constant for conversion from Kelvin to Celsius\n    a = 1.5  # Constant for conversion from hPa to kPa\n    b = 237.3  # Constant for conversion from Celsius to Fahrenheit\n    \n    # Convert temperature from Celsius to Kelvin\n    t_k = t + 273.15\n    \n    # Calculate the dew point temperature\n    dew_point = (1.0 / (a * math.log(v / 10.0) + b)) + t_k\n    \n    # Calculate the heat index\n    heat_index = c_p * (math.log(v / 10.0) + (gamma * (t_k - dew_point) / (1.0 + (gamma * (t_k - dew_point)) / (8.0 * math.log(v / 10.0)))))\n    \n    # Convert heat index from Kelvin to Celsius\n    heat_index_c = heat_index - 273.15\n    \n    # Calculate the wind chill index\n    w_c = int((heat_index_c - 20) * 0.16)\n    \n    return w_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the wind chill temperature\n    wc = 35.74 + 0.6215 * v + 17.624 * t - 35.75 * math.log(t)\n    # calculate the rounded wind chill index\n    wci = round(wc)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    kelvin = t + 273.15\n\n    # Calculate the speed of sound\n    sound_speed = 343.3 * math.exp((17.625 * kelvin) / (kelvin + 243.12))\n\n    # Calculate the relative humidity\n    relative_humidity = 0.6219 * math.exp((17.625 * kelvin) / (kelvin + 243.12))\n\n    # Calculate the heat index\n    heat_index = (v / sound_speed) + (0.0065 * relative_humidity)\n\n    # Calculate the wind chill index\n    wind_chill_index = round((heat_index - 32) * 5/9)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index for a given wind velocity and temperature in celsius.\n    '''\n    tc = t + 273.15 # Convert temperature to Celsius\n    w = math.sqrt(v**2 + 0.75*tc**2) # Calculate wind speed in knots\n    wchill = 35.74 + 0.6215*w + 35.75*math.log(w) - 0.4275*tc + 0.00681*tc**2\n    return math.ceil(wchill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 3.6  # convert km/h to m/s\n    # calculate the dew point temperature\n    dew_point = 243.04 * (math.log(t / 273.15) + 17.625 * (t / 273.15) - 0.0065 * (t / 273.15)**2)\n    # calculate the wind chill index\n    wc_index = (13.12 + (0.6215 * dew_point) + (11.37 * (wind_speed - 10))**0.16) * 5.0 / 9.0\n    # round the wind chill index to the nearest integer\n    wc_index = round(wc_index)\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Kelvin\n    T = t + 273.15\n    \n    # Convert wind velocity to m/s\n    v_mps = v * 1.609344\n    \n    # Calculate the wind chill temperature\n    wc = 35.74 + 0.6215 * T - 35.757 * math.pow(v_mps, 0.16) + 0.4275 * T * math.pow(v_mps, 0.16) - 0.0094 * T * T * math.pow(v_mps, 0.16)\n    \n    # Round the wind chill temperature to the nearest integer\n    wc = math.ceil(wc)\n    \n    # Return the wind chill temperature rounded to the nearest integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    if v > 10 and v < 15:\n        # If the wind velocity is between 10 and 15 km/h\n        # Calculate the wind chill index using the formula given in the problem statement\n        c = 0.5*(t + 273.15)\n        f = math.pow(c, 1.16)\n        index = round(f - 273.15)\n        return index\n    elif v >= 15 and v < 20:\n        # If the wind velocity is between 15 and 20 km/h\n        # Calculate the wind chill index using the formula given in the problem statement\n        c = 0.5*(t + 273.15)\n        f = math.pow(c, 1.16)\n        index = round(f - 273.15)\n        return index\n    elif v >= 20 and v < 25:\n        # If the wind velocity is between 20 and 25 km/h\n        # Calculate the wind chill index using the formula given in the problem statement\n        c = 0.5*(t + 273.15)\n        f = math.pow(c, 1.16)\n        index = round(f - 273.15)\n        return index\n    elif v >= 25 and v < 30:\n        # If the wind velocity is between 25 and 30 km/h\n        # Calculate the wind chill index using the formula given in the problem statement\n        c = 0.5*(t + 273.15)\n        f = math.pow(c, 1.16)\n        index = round(f - 273.15)\n        return index\n    elif v >= 30:\n        # If the wind velocity is greater than or equal to 30 km/h\n        # Calculate the wind chill index using the formula given in the problem statement\n        c = 0.5*(t + 273.15)\n        f = math.pow(c, 1.16)\n        index = round(f - 273.15)\n        return index\n    else:\n        # If the wind velocity is invalid or not within the specified range\n        # Return the message \"Invalid input\"\n        return \"Invalid input\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer\n    based on the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the next integer\n    :rtype: int\n    \"\"\"\n\n    # Convert wind velocity to m/s\n    v_ms = v * 1000\n\n    # Calculate the speed of sound\n    c = 299792.458\n\n    # Calculate the specific heat of air\n    cp_a = 1004.6\n\n    # Calculate the heat capacity ratio\n    cr = cp_a / c\n\n    # Calculate the latent heat of vaporization\n    latent_heat_vaporization = 2.501\n\n    # Calculate the latent heat of fusion\n    latent_heat_fusion = 0.0065\n\n    # Calculate the relative humidity (humidity at standard atmosphere)\n    rh = 100 - t * 100 / 20\n\n    # Calculate the dew point temperature\n    dp = 100 - t * (1 - rh / 100) / (1 + 0.0065 * t)\n\n    # Calculate the wind chill temperature\n    wct = dp - 0.004275 * v_ms ** 2 + 0.00006818 * v_ms + 10.33\n\n    # Round the wind chill temperature to the nearest integer\n    wct_int = math.ceil(wct)\n\n    return wct_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def calculate_index(v, t):\n        return math.floor((t - 32) * 5 / 9 + 32)\n\n    # Calculate wind chill index\n    index = calculate_index(v, t)\n\n    # Round index to the next integer\n    index_rounded = round(index)\n\n    return index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 20:\n        return math.ceil(35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v))\n    else:\n        return math.ceil(35.74 + 0.6215 * t)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()] # remove uppercase names\n    lengths = [len(name) for name in names] # calculate lengths of remaining names\n    return sum(lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the names' lengths\n    total_length = 0\n    \n    # Iterate through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name and move on to the next one\n            continue\n        # If the name does not start with a lowercase letter, add its length to the total length\n        else:\n            total_length += len(name)\n    \n    # Return the total length of the names after removing the ones that start with lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names that pass the test\n    valid_names = []\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # Otherwise, add it to the valid_names list\n        else:\n            valid_names.append(name)\n    \n    # Calculate the sum of the length of each name in the valid_names list\n    total_length = sum([len(name) for name in valid_names])\n    \n    # Return the total length of all names that pass the test\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to 0\n    sum_of_lengths = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # Add the length of the name to the sum\n        sum_of_lengths += len(name)\n    \n    # Return the sum of lengths\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            names.append(name)\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_list.append(name)\n    length = sum([len(name) for name in name_list])\n    return length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expressions to remove all the parenthesis from the string\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and returns a string with all the parenthesis removed.\n    '''\n    # Define a regular expression to match any parenthesis in the string\n    pattern = r'\\([^)]*\\)'\n    \n    # Use the re.sub() function to remove the parenthesis from the string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')  # regular expression pattern to find parenthesis\n\n    # use findall() method to find all the occurrences of parenthesis in the string\n    parenthesis = pattern.findall(items)\n\n    # remove the parenthesis from the string\n    for item in parenthesis:\n        items = items.replace(item, '')\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis and what is inbetween them using regular expression\n    items = re.sub(r'\\([^()]+\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # Use regular expression to match any parenthesis around a string\n    pattern = r'\\([^)]+\\)'\n    # Use regular expression findall to find all matches of the pattern in the string\n    matches = re.findall(pattern, items)\n    # Iterate over the matches and remove the parenthesis around each match\n    for match in matches:\n        items = items.replace(match, match[1:-1])\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them from the string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\((.*?)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1)*(2*n+1))//6"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter a positive integer: \"))\n\nif is_nonagonal(n):\n    print(f\"The {n}th nonagonal number is: {n * (n - 1) // 2}\")\nelse:\n    print(\"The input number is not a valid nonagonal number.\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns True if the given number is a nonagonal number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of the first n terms\n    sum_of_terms = 1\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Add the ith term to the sum of previous terms\n        sum_of_terms += i * (i-1) // 2\n\n    # Return the sum of the first n terms\n    return sum_of_terms"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    count = 1\n    nonagonal_num = 1\n\n    while count < n:\n        i += 1\n        count += 2 * i\n\n    nonagonal_num = i * (i - 1) // 2\n\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n**2) - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    def nonagonal(a, b, c):\n        \"\"\"\n        Find the nth nonagonal number using the given formula.\n        \"\"\"\n        return a * b * c\n\n    def is_square(x):\n        \"\"\"\n        Check if a number is a square.\n        \"\"\"\n        return x * x == x\n\n    def get_factors(num):\n        \"\"\"\n        Get all factors of a number.\n        \"\"\"\n        factors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    def gcd(a, b):\n        \"\"\"\n        Find the greatest common divisor of two numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def sum_of_factors(factors, n):\n        \"\"\"\n        Calculate the sum of the first n factors.\n        \"\"\"\n        return sum(factors[:n])\n\n    def sum_of_nonagonal(a, b, c, n):\n        \"\"\"\n        Calculate the sum of the first n nonagonal numbers.\n        \"\"\"\n        sum_ = 0\n        for i in range(1, n + 1):\n            sum_ += nonagonal(a, b, c) * (2 * i - 1)\n        return sum_\n\n    def nth_nonagonal(a, b, c):\n        \"\"\"\n        Find the nth nonagonal number.\n        \"\"\"\n        if is_square(a) and is_square(b) and is_square(c):\n            return nonagonal(a, b, c)\n        else:\n            factors_ = get_factors(a * b * c)\n            n = gcd(sum_of_factors(factors_, 2), c)\n            return sum_of_nonagonal(a, b, c, n)\n\n    return nth_nonagonal(2, 2, 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Calculate the length of the square matrix\n    length = int(n * (n + 1) / 2)\n\n    # Iterate over the rows\n    for i in range(length):\n        # If the row index is odd, then the current number is a nonagonal number\n        if i % 2 == 1:\n            return True\n    \n    # If the loop completes without finding a nonagonal number, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function checks whether a given number is a nonagonal number or not.\n    A nonagonal number is a positive integer such that the sum of the squares of its sides is equal to its perimeter.\n    \"\"\"\n    perimeter = n * 4\n    side1 = (perimeter - n * 2) ** 0.5\n    side2 = (perimeter + n * 2) ** 0.5\n    if side1 ** 2 + side2 ** 2 == perimeter:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter the number of nonagonal numbers you want to check: \"))\nfor i in range(1, n + 1):\n    if is_nonagonal(i):\n        print(i, end=\" \")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    i = 1\n    j = 1\n    while count < n:\n        count += 1\n        i += 1\n        j += 2\n        if count < n:\n            print(i*j)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the pattern to match 'z' except at the start and end of a word\n    pattern = r'\\b[a-zA-Z]+\\b\\s*[zZ]\\b\\s*[a-zA-Z]+\\b'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w*?\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to find all words in the text\n    words = re.findall(r'\\w+', text)\n    \n    # Loop through each word and check if it contains 'z' except at the start and end of the word\n    for word in words:\n        if (word[0]!= 'z' and word[-1]!= 'z'):\n            if 'z' in word[1:-1]:\n                return True\n    \n    # If no 'z' is found in any word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define regex pattern to match 'z' except at the start and end of a word\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    \n    # find all the matches using the pattern\n    matches = re.findall(pattern, text)\n    \n    # return True if a match is found, False otherwise\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<![a-zA-Z])z(?![a-zA-Z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[zZ]\\w+\\b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)[^z]*\\b'  # define regular expression pattern\n    matches = re.findall(pattern, text)  # find all matches in the text\n    if matches:  # if there are matches, return True\n        return True\n    else:  # otherwise, return False\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'(?<=\\b)(z)(?=\\b)'\n    result = re.search(pattern, text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    input[:k] = input[:k][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)//2):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n        \n    # Reverse the entire array\n    for i in range(len(input)//2, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= 0:\n        return input\n\n    # Reverse all the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Reverse the remaining part of the array\n    start = k\n    end = len(input)-1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        raise ValueError('k should be less than or equal to length of the array.')\n    reverse_arr = input[:k][::-1] + input[k:]\n    return reverse_arr"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if k > length:\n        return \"Invalid position\"\n    else:\n        for i in range(k-1, length):\n            input[i], input[length-i-1] = input[length-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # check if k is within the bounds of the array\n    if k < 0 or k >= len(input):\n        return \"Invalid k value\"\n    \n    # reverse the array up to position k\n    for i in range(k):\n        input[i], input[len(input) - 1 - i] = input[len(input) - 1 - i], input[i]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array upto the given position\n    for i in range(k): \n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i] \n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    # reverse the array from k to len(input)-1\n    for i in range(k, len(input)//2):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    # reverse the array from len(input)-1 to len(input)-k\n    for i in range(len(input)//2, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize pointers for the input array and for the reversed array\n    i = 0\n    j = k - 1\n\n    # Reverse the array upto the given position\n    while i < j: \n        input[i], input[j] = input[j], input[i] \n        i += 1 \n        j -= 1\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    # Reverse the array from 0 to k-1\n    input = input[:k] + input[k:][::-1]\n    # Reverse the array from k to n-1\n    input = input[:n//2] + input[n//2:][::-1] + input[n//2:]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the input is a tuple or a dictionary\n    if isinstance(test_tup, tuple) and isinstance(test_dict, dict):\n        # Create a new dictionary with the keys from the tuple and the values from the dictionary\n        new_dict = {key: value for key, value in zip(test_tup, test_dict.values())}\n        # Return the new dictionary as a tuple\n        return tuple(new_dict.items())\n    else:\n        # If the input is not valid, raise an error\n        raise TypeError(\"The input must be a tuple and a dictionary.\")"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # First, convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # Then, add the list of tuples to the tuple\n    result_tup = tuple(test_tup + dict_list)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert dictionary to a tuple\n    new_dict = tuple(test_dict.items())\n    # add dictionary to tuple\n    new_tup = test_tup + (new_dict,)\n    # return new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup) + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the input is a tuple or not\n    if isinstance(test_tup, tuple):\n        # Check if the dictionary is a dictionary or not\n        if isinstance(test_dict, dict):\n            # Append the dictionary to the tuple and return the updated tuple\n            return test_tup + (test_dict,)\n        else:\n            # Raise an exception if the input is not a dictionary\n            raise TypeError(\"The input should be a dictionary\")\n    else:\n        # Raise an exception if the input is not a tuple\n        raise TypeError(\"The input should be a tuple\")"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Create a dictionary to store the path with maximum average\n    max_average_path = {}\n    \n    # Initialize variables\n    row = 0\n    col = 0\n    total_cost = 0\n    visited_cells = 0\n    \n    # Function to check if the current position is valid\n    def is_valid_position(row, col):\n        if 0 <= row < len(cost) and 0 <= col < len(cost[0]):\n            return True\n        else:\n            return False\n    \n    # Function to check if the current position is the bottom-right cell\n    def is_bottom_right_cell(row, col):\n        if row == len(cost)-1 and col == len(cost[0])-1:\n            return True\n        else:\n            return False\n    \n    # Function to check if the current position is part of a path with maximum average\n    def is_max_average_path(row, col, path_cost):\n        if (row, col) in max_average_path and max_average_path[(row, col)] > path_cost:\n            return True\n        else:\n            return False\n    \n    # Function to update the maximum average path and visited cells\n    def update_max_average_path(row, col, path_cost):\n        if not is_max_average_path(row, col, path_cost):\n            if (row, col) in max_average_path and max_average_path[(row, col)] < path_cost:\n                del max_average_path[(row, col)]\n            max_average_path[(row, col)] = path_cost\n            visited_cells += 1\n    \n    # Function to compute the cost of a path from the current position\n    def compute_cost(row, col):\n        if row == len(cost)-1 and col == len(cost[0])-1:\n            return 0\n        else:\n            if cost[row][col] == 0:\n                return float('inf')\n            else:\n                return cost[row][col]\n    \n    # Function to traverse the matrix and find the maximum average path\n    while row < len(cost) and col < len(cost[0]):\n        if is_valid_position(row, col) and is_bottom_right_cell(row, col) and is_max_average_path(row, col, total_cost):\n            if is_valid_position(row-1, col) and is_valid_position(row+1, col) and is_valid_position(row, col-1) and is_valid_position(row, col+1):\n                update_max_average_path(row, col, total_cost + compute_cost(row, col))\n            elif is_valid_position(row-1, col) and is_valid_position(row+1, col) and is_valid_position(row, col-1):\n                update_max_average_path(row, col, total_cost + compute_cost(row, col) + compute_cost(row-1, col))\n            elif is_valid_position(row-1, col) and is_valid_position(row+1, col) and is_valid_position(row, col+1):\n                update_max_average_path(row, col, total_cost + compute_cost(row, col) + compute_cost(row, col+1))\n            elif is_valid_position(row-1, col) and is_valid_position(row, col-1) and is_valid_position(row, col+1):\n                update_max_average_path(row, col, total_cost + compute_cost(row, col) + compute_cost(row, col-1) + compute_cost(row, col+1))\n            elif is_valid_position(row, col-1) and is_valid_position(row+1, col) and is_valid_position(row, col+1):\n                update_max_average_path(row, col, total_cost + compute_cost(row, col) + compute_cost(row, col-1) + compute_cost(row, col+1))\n            elif"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n\n    # Base case: if there is only one cell, its average is its cost\n    if N == 1:\n        return max_avg, 0\n\n    # Initialize first row and first col with cost\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n\n    # Initialize first row and col with max_avg\n    for i in range(1, N):\n        dp[0][i] = max_avg\n        max_avg = max(max_avg, cost[0][i])\n    for j in range(1, N):\n        dp[j][0] = max_avg\n        max_avg = max(max_avg, cost[j][0])\n\n    # Compute the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg, max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                avg = cost[i][j] + maxAverageOfPath(cost[:i] + [cost[i+1][j]])\n            elif j == 0:\n                avg = cost[i][j] + maxAverageOfPath(cost[:, :j] + [cost[i][j+1]])\n            else:\n                avg = cost[i][j] + maxAverageOfPath(cost[:i] + [cost[i+1][j]]) + maxAverageOfPath(cost[:, :j] + [cost[i][j+1]])\n            max_avg = max(max_avg, avg)\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    if N == 0:\n        return 0\n\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n    max_path = [[0] * N for _ in range(N)]\n    path_cost = [[0] * N for _ in range(N)]\n\n    def dfs(i, j):\n        if i == N - 1 and j == N - 1:\n            avg = sum(path_cost[i][j]) / (i + j + 1)\n            max_avg = max(max_avg, avg)\n            if avg > max_avg:\n                max_path[i][j] = path_cost[i][j].copy()\n        if i < N - 1:\n            dfs(i + 1, j)\n        if j < N - 1:\n            dfs(i, j + 1)\n\n    dfs(0, 0)\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Initialize variables\n    max_average = float('-inf')\n    current_path = [[0, 0]]\n    current_cost = 0\n    visited = set()\n\n    # Breadth-first search to find all paths with the maximum average\n    for i in range(N):\n        for j in range(N):\n            if (i, j) not in visited:\n                # Initialize variables for current path\n                total_cost = 0\n                current_path.append((i, j))\n                visited.add((i, j))\n\n                # DFS to find maximum average\n                while current_path[-1][0] < N-1 and current_path[-1][1] < N-1:\n                    # Move right\n                    next_i, next_j = current_path[-1]\n                    if cost[next_i][next_j] < 0:\n                        current_path[-1] = (next_i, next_j+1)\n                        visited.add((next_i, next_j+1))\n                        total_cost += cost[next_i][next_j+1]\n                    # Move down\n                    next_i, next_j = current_path[-1]\n                    if cost[next_i+1][next_j] < 0:\n                        current_path[-1] = (next_i+1, next_j)\n                        visited.add((next_i+1, next_j))\n                        total_cost += cost[next_i+1][next_j]\n\n                # Update max average if current path has a higher average\n                if total_cost > current_cost:\n                    max_average = current_cost\n                current_cost = total_cost\n                current_path.pop()\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for i in range(n)]\n    \n    # initialize first row and first column\n    for i in range(n):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n    \n    # fill rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n    \n    # find maximum average of all paths\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if cost[i][j] == cost[i-1][j]:\n                max_avg = max(max_avg, dp[i][j] + dp[i-1][j])\n            else:\n                max_avg = max(max_avg, dp[i][j])\n                \n    return max_avg / n**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    max_avg = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == 1 and j == 1:\n                dp[i][j] = cost[i - 1][j - 1]\n            else:\n                if cost[i - 1][j] < dp[i - 1][j - 1]:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1]\n            if i == N and j == N:\n                dp[i][j] = dp[i][j] + cost[i - 1][j - 1]\n            else:\n                if cost[i][j - 1] < dp[i][j - 1]:\n                    dp[i][j] = dp[i][j]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            avg = (dp[i][j] - dp[i-1][j] - dp[i][j-1] + dp[i-1][j-1]) / 4\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path_avg = float('-inf')\n    max_path = None\n    max_path_length = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            \n            # check if this cell can be visited\n            if (i == 0 or cost[i-1][j] < cost[i][j]) and (j == 0 or cost[i][j-1] < cost[i][j]):\n                path_length = 1\n                path_cost = cost[i][j]\n                current_path_avg = path_cost\n                current_path = [(i, j)]\n                \n                # check if this is the end of the path\n                while i < N-1 and j < N-1 and (cost[i+1][j] < cost[i][j] or cost[i][j+1] < cost[i][j]):\n                    i += 1\n                    j += 1\n                    path_length += 1\n                    path_cost += cost[i][j]\n                    \n                    # update average if current path is better than previous best path\n                    if path_length > max_path_length:\n                        max_path_avg = current_path_avg\n                        max_path_length = path_length\n                        max_path = current_path\n                    \n                    # update current path average and check if it's better than previous best path\n                    current_path_avg = path_cost / path_length\n                    if current_path_avg > max_path_avg:\n                        max_path_avg = current_path_avg\n                        max_path_length = path_length\n                        max_path = current_path\n                    \n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the size of the matrix\n    N = len(cost)\n\n    # Initialize variables to store the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = None\n\n    # Loop through all possible paths\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                # This is the top-left cell, so we don't need to consider it\n                continue\n\n            # Compute the total cost of the path from the current cell\n            path_cost = 0\n            current_cell = (i, j)\n            visited = {current_cell}\n\n            while current_cell!= (N - 1, N - 1):\n                next_cell = (current_cell[0] + (j - current_cell[1]),\n                             current_cell[1] + (i - current_cell[0]))\n                if 0 <= next_cell[0] < N and 0 <= next_cell[1] < N:\n                    if (next_cell, ) not in visited:\n                        visited.add(next_cell)\n                        path_cost += cost[next_cell[0]][next_cell[1]]\n                        current_cell = next_cell\n                else:\n                    # Reached the bottom right cell, so we can break the loop\n                    break\n\n            # Compute the average cost of the path\n            if path_cost > 0:\n                avg_cost = path_cost / len(visited)\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = visited\n\n    return max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: student for name, student in students.items() if student[0] > h and student[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students based on the given height and weight\n    filtered_students = {key: value for key, value in students.items() if value[0] > h and value[1] > w}\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize a counter for the number of same values\n    count = 0\n    # loop through the lists\n    for i in range(len(nums1)):\n        # check if the values are the same\n        if eq(nums1[i], nums2[i]):\n            # if they are the same, increment the counter\n            count += 1\n    # return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    same_indices = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(len(nums2))):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    # convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # initialize a variable to hold the sum of the digits\n    sum_digits = 0\n    # iterate over each digit of the base string\n    for digit in base_str:\n        # convert each digit to an integer and add it to the sum_digits variable\n        sum_digits += int(digit)\n    # multiply the sum_digits variable by the specified power and return the result\n    return sum_digits * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string and split into digits\n    digits = list(str(base))\n\n    # calculate sum of digits to the power of power\n    result = sum(int(digit) ** power for digit in digits)\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit) ** power for digit in str(base))"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    power = int(power) # convert power to integer\n    \n    # loop through each digit of the base and add it to the total\n    while base > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        \n    # return the total to the specified power\n    return total ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the base\n    while base > 0:\n        # Calculate the last digit of the base\n        digit = base % 10\n        \n        # Add the last digit to the sum\n        sum += digit\n        \n        # Remove the last digit from the base\n        base //= 10\n    \n    # Return the sum to the caller\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    # Initialize sum variable\n    total = 0\n\n    # Iterate through each digit of the base\n    while base > 0:\n        # Get the last digit of the base\n        digit = base % 10\n\n        # Add the digit to the sum\n        total += digit\n\n        # Remove the last digit of the base\n        base = base // 10\n\n    # Calculate the sum of the digits raised to the power\n    result = total ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    \n    # initialize a variable to store the sum of digits\n    sum_digits = 0\n    \n    # iterate through the digits of the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        \n        # add the integer to the sum of digits\n        sum_digits += digit_int ** power\n        \n    # return the sum of digits\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through the digits of the base\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n\n    # Return the sum of all digits raised to the power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Calculate the power of the digit to the specified power\n        power_digit = int(digit) ** power\n        # Add the result to the total\n        total += power_digit\n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")' # search for values between double quotes\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"[^\"]+\"')\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    \n    # Match all the quotation marks \" \" in the string\n    matches = re.findall(r'(\".*?\")', text1)\n    \n    # Create a new list to store the values between the quotation marks\n    result = []\n    \n    # Loop through each match and add the text between the quotation marks to the result list\n    for match in matches:\n        result.append(match[1:-1])\n    \n    # Return the list of extracted values\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n\n    Args:\n    text (str): A string containing quotation marks.\n\n    Returns:\n    list: A list of strings containing values between quotation marks.\n    \"\"\"\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    return re.findall(pattern, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(\".*?\")'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Create an empty list to store the results\n    result_list = []\n    \n    # Loop through the tuple elements and multiply each pair of elements\n    for i in range(len(test_tup)-1):\n        result_list.append(test_tup[i] * test_tup[i+1])\n        \n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(multiplied_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    result_tup = ()\n    for i in range(t_len):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+N])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N-1)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    # initialize the result tuple with the first element of the input tuple\n    result_tup = (test_tup[0],)\n\n    # loop through the remaining elements of the input tuple\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the next element and append the result to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple([t1 * t2 for t1, t2 in zip(test_tup, test_tup[1:])])"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initializing an empty list to store the result\n    result = []\n    # iterating over the elements of the first list\n    for i in range(len(lst1)):\n        # adding the element of the first list to the element of the second list and appending it to the result list\n        result.append(lst1[i] + lst2[i])\n    # returning the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        result = [lst1[i] + lst2[i] for i in range(len(lst1))]\n        return result\n    else:\n        print(\"Both lists should have the same length.\")"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # check if the input lists are of equal length\n    if len(lst1)!= len(lst2):\n        return \"Error: The input lists are not of equal length.\"\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the elements of the input lists\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two lists\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # check if the lists are of the same length\n    if len(lst1)!= len(lst2):\n        print(\"The lists are not of the same length.\")\n    else:\n        # create an empty list to store the result\n        result = []\n        # iterate over each pair of elements in the two lists\n        for i in range(len(lst1)):\n            # add the corresponding elements and append to the result list\n            result.append(lst1[i] + lst2[i])\n        # return the result list\n        return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the sum of the two input lists\n    total_sum = []\n    # loop through each element in both input lists\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two lists and append the result to the total_sum list\n        total_sum.append(lst1[i] + lst2[i])\n    # return the total_sum list\n    return total_sum"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"The two lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(nums) if len(nums) == len(set(nums)) else [next(g[1]) for g in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of integers with consecutive duplicates removed.\n    '''\n\n    # Use groupby to group the numbers by their value\n    grouped_nums = groupby(nums)\n\n    # Create a list to store consecutive duplicates\n    consecutive_duplicates = []\n\n    # Iterate through the grouped numbers\n    for key, group in grouped_nums:\n        # Check if the group has more than one element\n        if len(list(group)) > 1:\n            # If the group has more than one element, add the first element to the consecutive duplicates list\n            consecutive_duplicates.append(key)\n\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = list(set(nums))\n    result = []\n    for group in groupby(unique_nums):\n        if len(list(group)) == 1:\n            result.append(list(group)[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(sorted(nums)):\n        if not k:\n            continue\n        result.extend(g)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their consecutive duplicates\n    group_nums = groupby(nums)\n\n    # iterate over the groups and remove duplicates\n    result = []\n    for key, group in group_nums:\n        result.append(key)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Define a function to check if two elements are consecutive duplicates\n    def is_consecutive_duplicate(x, y):\n        return x == y\n\n    # Define a function to remove consecutive duplicates from a list\n    def remove_consecutive_duplicates(lst):\n        return [num for group in groupby(lst) if not is_consecutive_duplicate(list(group)[0], list(group)[1])]\n\n    # Return the result of removing consecutive duplicates from the input list\n    return remove_consecutive_duplicates(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for num in nums:\n        if len(list(groupby(nums, key=lambda x: x == num))) == 1:\n            new_nums.append(num)\n    return new_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby function to group the list elements based on their consecutive duplicates\n    # and return the unique groups\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the elements by the value they are equal to\n    groups = groupby(nums)\n    # Initialize an empty list to store the consecutive duplicates\n    consecutive = []\n    # Loop through each group\n    for group in groups:\n        # Extract the key of the group\n        key = group[0]\n        # Loop through the rest of the group to check if there are any consecutive duplicates\n        for elem in group[1:]:\n            if elem == key:\n                # If there is, add it to the consecutive list\n                consecutive.append(elem)\n    # Return the list of consecutive duplicates\n    return consecutive"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r**2\n    lateral_surface_area = s * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the base area of the cone\n    base_area = math.pi * r**2\n    # Find the height of the cone\n    height = h\n    # Find the lateral surface area of the cone\n    lateral_surface_area = (math.pi * r**2 * height) / 3\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2*math.pi*r**2*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes a radius r and a height h as input, and returns the lateral surface area of a cone.\n    '''\n\n    # Calculate the base area of the cone\n    base_area = math.pi * r ** 2\n\n    # Calculate the height of the cone\n    height = h\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = 2 * base_area * height\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2 # surface area of the cone\n    s = math.sin(math.acos((h/2)/(r))) # half the angle from the cone's vertical axis to the surface\n    lateral_surface_area = A * s\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns the lateral surface area of the cone.\n    '''\n\n    # Calculate the hypotenuse and base of the right triangle\n    a = r\n    b = h\n    c = math.sqrt(a**2 + b**2)\n\n    # Calculate the lateral surface area using the Pythagorean theorem\n    lateral_area = 0.5 * a * b + 0.5 * a * c\n\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h # Calculating the lateral surface area of the cone"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r**2 * h\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text) # replace multiple spaces with a colon\n    text = re.sub(r'[^\\w\\s]', '', text) # remove special characters\n    text = re.sub(r'[:\\s]+', '', text) # remove multiple colons or spaces\n    text = text.strip() # remove leading/trailing spaces\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'([,\\.])'\n    text = re.sub(pattern, r':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,]+'\n    colon_pattern = r':'\n    return re.sub(pattern, colon_pattern, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression to match spaces, commas, or dots\n    special_char_pattern = re.compile(r'[\\s,\\.]')\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = special_char_pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s.,]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = re.compile(r'\\s+|,+|,|\\.')\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s+|[,\\.]\\s'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'([,.])'\n    replacement = r':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    # Find the first occurrence of x in A using binary search\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    \n    if i == len(A) or A[i]!= x:\n        return -1\n    \n    while i < len(A) and A[i] == x:\n        i += 1\n    \n    return i - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index of the first occurrence to -1\n    index = -1\n    # Iterate through the array\n    for i in range(len(A)):\n        # If the current element is equal to the given element\n        if A[i] == x:\n            # Update the index of the first occurrence to the current index\n            index = i\n            # Break out of the loop\n            break\n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Check if the first element is equal to x\n    if A[0] == x:\n        return 0\n    \n    # Loop while left index is less than or equal to right index\n    while left <= right:\n        # Find the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to x, return its index\n        if A[mid] == x:\n            # Check if the next element is equal to x\n            if mid == len(A) - 1 or A[mid+1]!= x:\n                return mid\n            \n            # If the next element is equal to x, loop back to the first occurrence of x\n            left = mid + 1\n        # If the middle element is less than x, search in the right half\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than x, search in the left half\n        else:\n            right = mid - 1\n    \n    # If the loop completes without finding the first occurrence of x, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            # found the first occurrence, move the right pointer to mid+1\n            right = mid\n        elif A[mid] < x:\n            # if mid is too small, move the left pointer to mid+1\n            left = mid + 1\n        else:\n            # if mid is too large, move the right pointer to mid-1\n            right = mid - 1\n    return left if A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n\n    Args:\n        arr (list): List of integers\n\n    Returns:\n        int: Sum of products of all possible sublists of the given list\n    \"\"\"\n    n = len(arr)\n    total = 0\n    for i in range(1, n+1):\n        product = 1\n        for j in range(n-i+1):\n            product *= arr[j]\n        total += product\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            total_sum += prod\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the input list.\n    The sum of products of all possible sublists of the input list can be found using dynamic programming.\n    \"\"\"\n    \n    n = len(arr)\n    # Initialize the result array with all zeros\n    result = [0] * (n + 1)\n    \n    # Calculate the products of subarrays of length i\n    for i in range(1, n+1):\n        result[i] = result[i-1] * arr[i-1]\n    \n    # Calculate the sum of products of all possible sublists\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += result[i]\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize sum of products to 0\n    sum_prod = 0\n\n    # Calculate the cumulative sum of the array\n    cum_sum = [0] * (len(arr) + 1)\n    cum_sum[0] = arr[0]\n    for i in range(1, len(arr) + 1):\n        cum_sum[i] = cum_sum[i-1] + arr[i-1]\n\n    # Iterate through the array and find the maximum subarray that has 0 sum\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr) + 1):\n            if cum_sum[j] - cum_sum[i] == 0:\n                # Find the maximum length of the subarray with 0 sum\n                max_len = j - i\n                # Find the sum of products of the subarray\n                prod_sum = 1\n                for k in range(i, j):\n                    prod_sum *= arr[k]\n                # Add the sum of products to the sum of products\n                sum_prod += prod_sum\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_prod = [0]*(n+1)\n\n    for i in range(1, n+1):\n        sum_prod[i] = sum_prod[i-1] + arr[i-1]*i\n\n    return sum_prod[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += arr[j] * dp[j]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # create a dictionary to store products of subarrays\n    product_dict = {}\n    # initialize the sum of products as 0\n    sum_products = 0\n    # initialize the current subarray as an empty list\n    current_subarray = []\n    # loop through the list\n    for i in range(n):\n        current_subarray.append(arr[i])\n        # calculate the product of the current subarray\n        current_product = 1\n        for j in range(len(current_subarray)):\n            current_product *= current_subarray[j]\n        # check if the product is already in the dictionary\n        if current_product in product_dict:\n            # if it is, add the index of the current subarray to the index list\n            index_list = product_dict[current_product]\n            index_list.append(i)\n            # update the value of the product in the dictionary\n            product_dict[current_product] = index_list\n        else:\n            # if it isn't, add the product to the dictionary with a single index\n            product_dict[current_product] = [i]\n    # loop through the dictionary and find the sum of products of all possible subarrays\n    for key in product_dict:\n        # find the list of indices for the given product\n        indices_list = product_dict[key]\n        # check if the list has more than one index\n        if len(indices_list) > 1:\n            # if it does, find the sum of products of all subarrays that start and end at the given index\n            subarray_sum = 1\n            for i in range(len(indices_list)-1):\n                subarray_sum *= arr[indices_list[i]]\n                subarray_sum *= arr[indices_list[i+1]]\n            # add the sum of products to the sum of products\n            sum_products += subarray_sum\n    # return the sum of products\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    # Initialize a dictionary to store the products of each sublist\n    sublist_product = {}\n    \n    # Compute the sum of products of the given list\n    total_product = 1\n    for num in arr:\n        total_product *= num\n    \n    # Calculate the sum of products of all sublists of the given list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            # Compute the product of the sublist\n            sublist_product[(i,j)] = 1\n            for k in range(i, j):\n                sublist_product[(i,j)] *= arr[k]\n            # Add the product of the sublist to the total product\n            total_product += sublist_product[(i,j)]\n    \n    # Return the sum of products of all sublists\n    return total_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    ans = 0\n\n    for i in range(n):\n        prod *= arr[i]\n        for j in range(i+1, n):\n            prod *= arr[j]\n            ans += prod\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the sum of products and the sum of subarrays\n    total_sum = 0\n    subarray_sum = 0\n\n    # Iterate over all possible subarrays of length n\n    for i in range(n):\n        # Add the current element to the sum of subarrays\n        subarray_sum += arr[i]\n\n        # Calculate the product of the current subarray and the sum of products\n        product = subarray_sum * arr[i]\n\n        # Add the product to the sum of products\n        total_sum += product\n\n    return total_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Count the number of bits in the number\n    num_bits = 0\n    while n > 0:\n        n = n & (n - 1) # clear least significant bit\n        num_bits += 1\n    \n    # Toggle the middle bits\n    middle_bits = num_bits // 2\n    mask = 1 << (middle_bits - 1)\n    n = n ^ mask\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert binary string to integer\n    n = int(n, 2)\n\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**32-1)\n\n    # Toggle the first and last bits\n    first_bit = first_bit ^ 1\n    last_bit = last_bit ^ (2**32-1)\n\n    # Combine the first and last bits and return as binary string\n    return bin(n ^ (first_bit | last_bit))[2:]"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Set the middle bit to 1\n    n |= 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    \n    # Set the first and last bits to 0\n    binary = binary[:1] + '0' + binary[1:-1] + '0' + binary[-1:]\n    \n    # Convert the binary number back to decimal\n    return int(binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Find the middle index\n    middle = length // 2\n\n    # Initialize the left and right bits\n    left = n >> middle\n    right = n & ((1 << middle) - 1)\n\n    # Toggle the middle bits\n    middle_bits = left ^ right\n\n    # Combine the bits\n    result = left & right | middle_bits\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0b11111111111111111111111111111111\n    n ^= 0b0000000000000000000000000000001  # Toggle the middle bit\n    n ^= 0b111111111111111111111111111111110  # Toggle the last bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1  # check if first bit is set\n    last_bit = (n >> 31) & 1  # check if last bit is set\n    toggled_bits = n ^ (first_bit | last_bit)  # toggle the bits except first and last\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # mask to remove the first and last bits\n    mask = ~(1 << 0) | ~(1 << (n.bit_length()-1))\n    # use bitwise XOR to toggle bits except for the first and last bits\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Get the number of bits\n    num_bits = len(bin(n)[2:])\n\n    # Get the first and last bits\n    first_bit = n & (1 << num_bits - 2)\n    last_bit = n & (1 << num_bits - 1)\n\n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit | last_bit)\n\n    # Combine the first and last bits with the middle bits\n    return first_bit | middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length()-1))\n    # toggle the first and last bits\n    n = (n ^ first_bit) ^ last_bit\n    # set the middle bits\n    for i in range(1, n.bit_length()-2):\n        n = (n ^ (1 << i)) & ((1 << (i+1))-1)\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    :param a: a sorted list of numbers\n    :param x: a number to be inserted\n    :return: the left insertion point of the number x in the list a\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n\n    # Use binary search to find the left insertion point\n    i = bisect.bisect_left(a, x)\n\n    # Check if the value is already present at the left insertion point\n    if i == len(a) or a[i]!= x:\n        i -= 1\n\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: sorted list of integers\n    :param x: integer value to search for\n    :return: index of the left insertion point for x, if it exists in the list, -1 otherwise\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    matches = pattern.findall(string)\n\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nresult = check_str(string)\n\nif result:\n    print(\"The string starts with a vowel\")\nelse:\n    print(\"The string does not start with a vowel\")"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (2**n - 1) // (2 - 2**-n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Find the least possible triangular number with n digits\n    triangular = math.factorial(n) / math.factorial(n - 1)\n    # Convert triangular to an integer and append a leading zero to make n digits\n    triangular_str = str(int(triangular)).zfill(n)\n    # Find the index of the smallest triangular number by comparing the digits of the smallest triangular number with n-1 digits\n    index = 0\n    while triangular_str[index] < '9':\n        index += 1\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    a = int(math.pow(10, n - 1))\n    b = 0\n    c = 1\n\n    while b + c <= a:\n        b = b + c\n        c = 0\n\n    return math.log10(b) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    def is_triangular(num):\n        return num == sum([int(digit) ** (n-1) for digit in str(num)])\n\n    triangular_numbers = [i * (i+1) // 2 for i in range(1, 10**n)]\n    smallest_triangular = min(triangular_numbers)\n\n    for i, num in enumerate(triangular_numbers):\n        if is_triangular(num) and num < smallest_triangular:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    # Function to find the index of the smallest triangular number with n digits \n    # using binary search algorithm \n    low = 1\n    high = int(10**n) - 1\n    while low <= high: \n        mid = (low + high) // 2 \n        triangular = mid * (mid + 1) // 2 \n        if triangular < high: \n            low = mid + 1 \n        elif triangular > high: \n            high = mid - 1 \n        else: \n            return mid \n    return -1 "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    for i in range(1, n + 1):\n        if math.factorial(n) % (math.factorial(i) * math.factorial(n - i)) == 0:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def find_SmallestTriangularNumber(n): \n        '''\n        Write a helper function to find the smallest triangular number with n digits. \n        '''\n        if n == 1: \n            return 10 \n        else: \n            return find_SmallestTriangularNumber(n-1) * 10 + 10 \n\n    smallestTriangularNumber = find_SmallestTriangularNumber(n) \n\n    def find_Diff(n): \n        '''\n        Write a helper function to calculate the difference between the smallest triangular number and 10^(n-1). \n        '''\n        if n == 1: \n            return 10 \n        else: \n            return find_Diff(n-1) + 1 \n\n    diff = find_Diff(n) \n\n    return find_Index(n-1) - diff \n\n``` \n\nNow, to test the script, we can call the find_Index function with different values of n. For example, \n\n```python\nprint(find_Index(1))  # Output: 1\nprint(find_Index(2))  # Output: 3\nprint(find_Index(3))  # Output: 7\nprint(find_Index(4))  # Output: 15\nprint(find_Index(5))  # Output: 25\nprint(find_Index(6))  # Output: 37\nprint(find_Index(7))  # Output: 51\n``` \n\nThe output will be as follows: \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the smallest triangular number to be the maximum possible integer\n    smallest_triangular = math.pow(10, n) - 1\n\n    # Loop through all integers from 1 to the square root of smallest triangular number\n    for i in range(1, int(math.sqrt(smallest_triangular))+1):\n        # Check if the integer is a triangular number\n        triangular_number = i * (i+1) // 2\n        if triangular_number < smallest_triangular:\n            # If it is, check if it has n digits\n            triangular_digits = len(str(triangular_number))\n            if triangular_digits == n:\n                # If it does, update the smallest triangular number\n                smallest_triangular = triangular_number\n                # Break out of the loop\n                break\n\n    # Return the index of the smallest triangular number with n digits\n    return smallest_triangular - (smallest_triangular//10**(n-1)) * 10**(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the smallest number to 1\n    smallest_triangular = 1\n\n    # Loop through the number of digits\n    for i in range(1, n):\n        # Get the length of the number\n        num_length = len(str(smallest_triangular))\n\n        # Calculate the next triangular number\n        next_triangular = smallest_triangular * (num_length + 1) // 2\n\n        # Check if the next triangular number is smaller than the current smallest triangular number\n        if next_triangular < smallest_triangular:\n            # If it is, update the smallest triangular number\n            smallest_triangular = next_triangular\n\n    # Return the index of the smallest triangular number\n    return int(math.log10(smallest_triangular))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    triangular_num = 0\n    index = 0\n    while True:\n        triangular_num = int(math.ceil(triangular_num * (n - index + 1) / index))\n        if triangular_num % 10 == 0:\n            index += 1\n        else:\n            break\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    # initialize the first two triangular numbers\n    t1 = 1\n    t2 = 1\n\n    # iterate until we have n digits in our index\n    i = 1\n    while math.log10(t1) < n:\n        # calculate the next triangular number\n        t3 = t1 + t2\n        # increment the index by one\n        i += 1\n        # update t1 and t2\n        t1 = t2\n        t2 = t3\n\n    # return the index\n    return i - 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        d[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        print(\"Please provide a tuple with even number of elements.\")\n        return None\n    \n    dict_val = {}\n    for i in range(0, len(test_tup), 2):\n        dict_val[test_tup[i]] = test_tup[i+1]\n    \n    return dict_val"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    test_dict = {}\n    # loop through the tuple elements and add each adjacent pair as a key-value pair to the dictionary\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    key_value_dict = {}\n    for i in range(len(test_tup)-1):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary to store key-value pairs\n    my_dict = {}\n    # loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # if the current element is an odd number, it will be assigned to a key in the dictionary\n        if i % 2 == 0:\n            # get the next odd number in the tuple\n            next_odd = test_tup[i+1]\n            # store the key-value pair in the dictionary\n            my_dict[test_tup[i]] = next_odd\n        # if the current element is an even number, it will be assigned to a value in the dictionary\n        else:\n            # get the next even number in the tuple\n            next_even = test_tup[i+1]\n            # store the key-value pair in the dictionary\n            my_dict[next_even] = test_tup[i]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    # initialize a variable to store the count of each character in the string\n    count = {}\n    \n    # iterate through the string and count the number of occurrences of each character\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    # iterate through the string again and check if all the characters have the same count\n    for char in s:\n        if count[char]!= 1:\n            return False\n    \n    # if all characters have the same count, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Check if the length of the string is zero or one\n    if len(s) == 0 or len(s) == 1:\n        # If the length is zero or one, return True\n        return True\n    # If the length is greater than one\n    else:\n        # Get the first character of the string\n        first_char = s[0]\n        # Loop through all the remaining characters of the string\n        for char in s[1:]:\n            # If any character is not equal to the first character, return False\n            if char!= first_char:\n                return False\n        # If no character is not equal to the first character, return True\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0]!= s[0]\n    else:\n        return all_Characters_Same(s[1:]) == s[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        print(\"All characters are same.\")\n    else:\n        print(\"Not all characters are same.\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same, False otherwise.\n    '''\n    # Converting the string to a list\n    lst = list(s)\n    # Iterating over the list and checking if the length of the list is equal to 1\n    for i in lst:\n        if len(lst)!= 1:\n            return False\n    # If the above loop completes without returning False, all the characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    if len(s) == 1 :\n        return True\n    else :\n        if s[0] == s[1] :\n            return all_Characters_Same(s[1:])\n        else :\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Check if the length of the string is less than or equal to 1\n    if len(s) <= 1:\n        return True\n\n    # Check if all the characters in the string are the same\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(s * (s - 1) * (s - 2) * (s - 3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    # Formula to calculate area of tetrahedron from side lengths\n    # Formula: area = 1/3 * (s * (s - a) * (s - b) * (s - c))\n    s = side\n    a = 1\n    b = 1\n    c = 1\n    area = (1/3) * (s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2 # half of the side length\n    area = (1/6)*s*(s*(s-math.sqrt(12*s*s))-math.sqrt(12*s*s)) # formula for area of tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * (side**2 + side**2 + side**2 + side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side / 3\n    area = (1/6) * side * (base ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter and area of the cube\n    semi_perimeter = (3 * side**2) / 2\n    area = math.sqrt(semi_perimeter)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for area of a tetrahedron\n    # A = 1/6 * side^2\n    area = 1/6 * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[m:] = list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # create a new list with zero as the first element\n    new_list = [0] * (len(list) + m)\n    \n    # move all the elements of the original list to the new list\n    for i in range(len(list)):\n        new_list[i + m] = list[i]\n        \n    # return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.reverse()\n    list[:m] = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and rotates it to the right by n elements.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return lst\n\n    # Find the length of the list\n    length = len(lst)\n\n    # Calculate the new index to rotate to\n    new_index = (length - 1) - (n % length)\n\n    # If the new index is equal to the length of the list,\n    # rotate the list in the opposite direction\n    if new_index == length - 1:\n        lst = lst[::-1]\n        new_index = length - (n % length)\n\n    # Rotate the list by moving elements from the last index to the new index\n    # and then from the new index to the first index\n    lst = lst[:new_index] + lst[new_index:] + lst[:new_index]\n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n\n    n = len(list)\n\n    # If list has only one element, then rotation is not possible\n    if n == 1:\n        return list\n\n    # If number of rotation items is greater than list size, then no need to rotate\n    if m > n:\n        return list\n\n    # If number of rotation items is equal to or less than list size, then we can rotate the list\n    # by swapping the first m items with the last n-m items and the last n-m+1 to n-m items\n    # in the list\n    list[:m], list[m:n] = list[n-m:n], list[:m] + list[n-m+1:n]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        m (int): The number of items to rotate the list by.\n\n    Returns:\n        list: The rotated list.\n\n    Example:\n        lst = [1, 2, 3, 4, 5]\n        m = 2\n        print(rotate_right(lst, m)) # Output: [3, 4, 5, 1, 2]\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m as input and returns the rotated list.\n    \"\"\"\n    n = len(list)\n    # Check if m is within the range of the list.\n    if m >= n:\n        return list\n    # Reverse the list from index 0 to m - 1.\n    list = list[:m][::-1] + list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction using recursion.\n    '''\n    if len(list) == 1:\n        return list\n    else:\n        new_list = list[n:]\n        list = list[:n]\n        return new_list + rotate_right(list, len(list))"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it contains any none value or False otherwise.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n    startnum (int): the starting number of the range\n    endnum (int): the ending number of the range\n\n    Returns:\n    list: a list of numbers that meet the given criteria\n\n    \"\"\"\n    # Helper function to check if a number is divisible by a digit\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    # Helper function to convert a number to a list of digits\n    def num_to_digits(num):\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        return digits\n\n    # Helper function to check if a list of digits is divisible by every digit in a list of digits\n    def is_digits_divisible(digits_list):\n        for digit in digits_list:\n            if not is_divisible(digit, 10):\n                return False\n        return True\n\n    # Helper function to check if a number is divisible by a list of digits\n    def is_divisible_by_list(num, digits_list):\n        for digit in digits_list:\n            if not is_divisible(num, digit):\n                return False\n        return True\n\n    # Helper function to find numbers within a range that are divisible by every digit in a list of digits\n    def find_numbers(startnum, endnum):\n        numbers = []\n        for num in range(startnum, endnum+1):\n            digits = num_to_digits(num)\n            if is_digits_divisible(digits):\n                numbers.append(num)\n        return numbers\n\n    # Find numbers within the given range that are divisible by every digit in a list of digits\n    result = find_numbers(startnum, endnum)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two arguments: startnum and endnum. It then loops through all the numbers between startnum and endnum and checks if every digit of the number is divisible by the same digit. If it is, then the number is added to a list. Finally, the list is returned.\n    \"\"\"\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        is_divisible = True\n        for digit in digits:\n            if digit % 2 == 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            divisible_nums.append(num)\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: startnum <= x <= endnum and all(d % int(str(x)[i]) == 0 for i, d in enumerate(str(x)) if d.isdigit())"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # iterate over range of numbers to check if divisible by each digit\n    for num in range(startnum, endnum+1):\n        # check if each digit is divisible by itself\n        if all(num % digit == 0 for digit in str(num)):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: x % (len(str(x))) == 0 and all(int(digit) % int(digit) == 0 for digit in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    multiplied_digits = [digit * 2 for digit in even_digits]\n    start_range = [startnum + digit for digit in multiplied_digits]\n    end_range = [endnum - digit for digit in multiplied_digits]\n    divisible_numbers = [num for num in range(startnum, endnum + 1) if any(num % digit == 0 for digit in digits)]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit % x == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible(num):\n        return all(num % int(digit) == 0 for digit in str(num))\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = math.pi * r * r * a / 360\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        return math.pi * r * r\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within 360 degrees\n    if a > 360:\n        return None\n\n    # Calculate area of sector using Pythagorean theorem\n    area = math.pi * r**2 * math.sin(math.radians(a/360))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    angle = math.radians(a)\n    \n    # calculate area of sector\n    area = math.pi * r * r * angle\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360 # formula for area of a sector"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize variables\n    m, n, o = len(X), len(Y), len(Z)\n    table = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill the table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # Find the longest common subsequence\n    i, j, k = m, n, o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] == table[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n    lcs.reverse()\n\n    # Return the longest common subsequence\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # Backtrack to get the LCS\n    i = m\n    j = n\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS\n    lcs.reverse()\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    i = n\n    j = m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    lcs = ''\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j][k]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1: create a table to store lengths of longest common suffix\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Step 2: calculate L[i][j] in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Step 3: print the constructed LCS\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # create a 3D table to store LCS lengths \n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)] \n  \n    # fill the LCS matrix in bottom-up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n\n    # return the length of the LCS matrix \n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Find the length of the three strings\n    m, n, p = len(X), len(Y), len(Z)\n    \n    # Create a 2D table to store lengths of LCS of substrings of X, Y and Z\n    table = [[0] * (p+1) for i in range(m+1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:\n                    table[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][k])\n    \n    # Return the length of the LCS of the three strings\n    return table[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the three sequences\n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n\n    # create a table to store the lengths of LCS for all prefixes of X \n    table = [[0] * (p+1) for i in range(n+1)] \n\n    # fill the table in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    table[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    table[i][j][k] = 1 + table[i-1][j-1][k-1] \n                else: \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1]) \n\n    # find the length of the longest common subsequence \n    lcs_length = table[n][m][p] \n\n    # construct the LCS and return it \n    lcs = [] \n    i = n \n    j = m \n    k = p \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif table[i-1][j][k] == table[i-1][j][k-1]: \n            i -= 1 \n        elif table[i][j-1][k] == table[i-1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    return lcs[::-1] \n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n\n    Parameters:\n    X (string): A string sequence.\n    Y (string): A string sequence.\n    Z (string): A string sequence.\n\n    Returns:\n    list: A list containing the common subsequences of X, Y, and Z.\n    \"\"\"\n\n    # The length of X, Y, and Z will be given by the size of the longest string in the given sequence.\n    m, n, p = len(X), len(Y), len(Z)\n\n    # Initialize a 2D array to store the length of LCS for every substring of X, Y, and Z.\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the first row and first column of L with 0.\n    for i in range(m + 1):\n        L[i][0] = 0\n    for j in range(n + 1):\n        L[0][j] = 0\n\n    # Fill the rest of the LCS matrix using dynamic programming.\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1])\n\n    # Reconstruct the common subsequences using the LCS matrix.\n    lcs = []\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        elif L[i][j - 1] > L[i - 1][j - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of subarrays of X, Y and Z\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Fill the matrix L[][] in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Return the length of LCS of X, Y and Z\n    return L[m][n][p]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Iterate over each word and capitalize it if it starts with uppercase letter\n    for i, word in enumerate(words):\n        if word.isupper():\n            words[i] = word.capitalize()\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match capitalized words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, str1)\n    \n    # Loop through the matches and replace the capitalized words with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match.lower() +'')\n    \n    # Remove the extra space from the beginning and end of the string\n    str1 = str1.strip()\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, r'\\1 \\2', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for matching capital words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Use the re.findall() method to find all the capital words in the string\n    capital_words = re.findall(pattern, str1)\n\n    # Iterate over the list of capital words and insert spaces between them\n    for i in range(len(capital_words)):\n        if i == 0:\n            capital_words[i] = capital_words[i].capitalize()\n        else:\n            capital_words[i] ='' + capital_words[i]\n\n    # Join the list of capital words into a string and return it\n    return ''.join(capital_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to find all the words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Iterate over the words and put spaces between them\n    result = []\n    for i in range(len(words)):\n        if i == len(words) - 1:\n            # If the last word, append it with no space\n            result.append(words[i])\n        else:\n            # If not the last word, append it with a space\n            result.append(words[i] +'')\n\n    # Join the list of words into a string\n    result = ''.join(result)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n\n    # Iterate through each word and capitalize it if it starts with a capital letter\n    for i, word in enumerate(words):\n        if word.istitle():\n            words[i] = word.capitalize()\n\n    # Join the words with spaces\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # capitalize the first letter of each word and join the words with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces between them\n    result =''.join(words)\n    # Capitalize the first letter of each word\n    result = re.sub(r'(\\b\\w)(\\w)', lambda m: m.group(1).upper() + m.group(2).lower(), result)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str if x.isdigit()]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Remove non-numeric characters from the strings\n    nums_str = [\"\".join(filter(str.isdigit, s)) for s in nums_str]\n\n    # Convert the strings to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # Sort the numeric values in ascending order\n    nums.sort()\n\n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Split the list into a list of numbers and a list of strings\n    nums_list = []\n    str_list = []\n    for num in nums_str:\n        if num.isdigit():\n            nums_list.append(int(num))\n        else:\n            str_list.append(num)\n    # Merge the two lists and sort them numerically\n    nums_str_list = nums_list + str_list\n    nums_str_list.sort()\n    # Convert the sorted list back to strings and return it\n    sorted_nums_str = [str(x) for x in nums_str_list]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # remove all non-numeric characters from the strings in the list\n    nums_str = [s.replace(',','').replace('.','') for s in nums_str]\n    \n    # convert all strings to float\n    nums_float = [float(s) for s in nums_str]\n    \n    # sort the list of floats numerically\n    sorted_nums_float = sorted(nums_float)\n    \n    # convert the sorted list of floats back to strings\n    sorted_nums_str = [str(num) for num in sorted_nums_float]\n    \n    # join the sorted list of strings back into a single string\n    sorted_nums_str_sorted = ''.join(sorted_nums_str)\n    \n    return sorted_nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        num = float(num_str)\n        nums.append(num)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the list of strings to a list of numeric values\n    nums = [float(num) for num in nums_str]\n    \n    # Sort the list in numerical order\n    nums.sort()\n    \n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float and sort them in ascending order\n    nums_float = sorted([float(num) for num in nums_str])\n    # Convert the sorted list of floats back to strings and return it\n    return [str(num) for num in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    \n    # Sort the list of integers\n    nums_int.sort()\n    \n    # Convert the sorted list of integers back to a list of strings\n    nums_str = [str(num) for num in nums_int]\n    \n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to floats and sort them in numeric order\n    nums = sorted([float(x) for x in nums_str])\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a list of strings containing only numeric characters\n    nums_only = [s for s in nums_str if s.isdigit()]\n    # Create a list of numeric strings\n    nums = [int(s) for s in nums_only]\n    # Sort the list of numeric strings\n    nums.sort()\n    # Convert the sorted list of numeric strings back to strings\n    nums_str = [str(n) for n in nums]\n    # Join the sorted and converted list of strings into a single string\n    sorted_nums_str = ''.join(nums_str)\n    # Return the sorted and converted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(\"The list after adding the tuple:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Loop through the list and append each element to the new tuple\n    new_tup = ()\n    for item in test_list:\n        new_tup += (item,)\n    \n    # Add the tuple to the list\n    for item in test_tup:\n        new_tup += (item,)\n    \n    # Convert the new tuple back to a list and return it\n    return list(new_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr)//2-1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    largest = i\n\n    # Find the largest element among root and left child\n    if left_child < len(arr) and arr[left_child] > arr[largest]:\n        largest = left_child\n\n    # Find the largest element among root, left child and right child\n    if right_child < len(arr) and arr[right_child] > arr[largest]:\n        largest = right_child\n\n    # If the root is not largest, swap it with the largest element\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        check_min_heap_helper(arr, largest)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i < 0:\n        return True\n    \n    if i > 0 and arr[i] > arr[parent(i)]:\n        return False\n    \n    return check_min_heap_helper(arr, parent(i))\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)\n\ndef parent(i):\n    '''\n    Write a function to calculate the parent index of the given node.\n    '''\n    return (i-1)//2\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i < 1:\n        return True\n\n    # If left child is greater than root\n    if arr[i] < arr[i//2]:\n        return False\n\n    # Recursively check left and right child\n    return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the given array is a min heap\n    return check_min_heap_helper(arr, len(arr)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n\n    # base case\n    if i < 0:\n        return True\n\n    # recursive case\n    if arr[i] <= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n\n    # check if array length is 0 or 1\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n\n    # recursively check if array represents min heap\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    elif i == len(arr) // 2:\n        return True\n    else:\n        left = 2 * i\n        right = 2 * i + 1\n        if left < len(arr) and arr[left] > arr[i]:\n            return False\n        elif right < len(arr) and arr[right] > arr[i]:\n            return False\n        else:\n            return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal = 1\n        lucas = 1\n        for i in range(3, n+1):\n            jacobsthal = (jacobsthal*i + lucas) % 10**9\n            lucas = (lucas**2 + 4*lucas + 1) % 10**9\n        return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1 + 4 * n + 2 * n**2) * jacobsthal_num(n-1) // (1 + 4 * n + n**2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num = 0\n    for i in range(1, n+1):\n        jacobsthal_num = (jacobsthal_num * 2) % 7\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    '''\n\n    # Initialize jacobsthal number to 0\n    j_num = 0\n\n    # Loop through each digit of the jacobsthal number\n    while n > 0:\n\n        # Find the remainder when n is divided by 10\n        digit = n % 10\n\n        # Multiply the jacobsthal number by 10\n        j_num *= 10\n\n        # Add the value of the digit to the jacobsthal number\n        j_num += digit\n\n        # Divide n by 10 to remove the last digit\n        n //= 10\n\n    return j_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = jacobsthal_num(n-1)\n        curr = prev + jacobsthal_num(n-2)\n        return curr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1 + 3*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j_n = 0\n        for i in range(1, n+1):\n            j_n += jacobsthal_num(i-1)\n        return j_n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 1:\n        return n\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input and\n    returns the minimum K records from the list of tuples.\n\n    Args:\n        test_list (list): A list of tuples.\n        K (int): An integer K.\n\n    Returns:\n        list: A list of tuples containing the minimum K records from the list.\n    \"\"\"\n    # Convert the list of tuples into a dictionary where the key is the\n    # first element of each tuple and the value is a list of tuples where\n    # each tuple contains the first element and the index of the second\n    # element of each tuple in the original list.\n    dict_list = {}\n    for i, tup in enumerate(test_list):\n        if tup[0] not in dict_list:\n            dict_list[tup[0]] = [(tup[1], i)]\n        else:\n            dict_list[tup[0]].append((tup[1], i))\n\n    # Sort the dictionary by the number of occurrences of each key.\n    sorted_dict = dict(sorted(dict_list.items(), key=lambda x: len(x[1]), reverse=True))\n\n    # Create a list of tuples containing the minimum K records from the list.\n    min_records = []\n    for key, value in sorted_dict.items():\n        min_records += value[:K]\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()  # Sort the tuple list\n    min_list = []\n    k = 1  # Initialize k to 1\n    count = 0\n    for i in range(len(test_list)):\n        if k == K:\n            break\n        if count < K:\n            min_list.append(test_list[i])\n            count += 1\n        else:\n            if test_list[i] < min_list[K - 1]:\n                min_list[K - 1] = test_list[i]\n                min_list.sort()\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the second element (the second element is the key to sort by)\n    test_list.sort(key=lambda x: x[1])\n    # Initialize a variable to store the minimum value\n    min_val = test_list[0][1]\n    # Iterate through the list of tuples and update the minimum value if the current value is less than the minimum\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sorting the tuple list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # creating a dictionary to store the minimum k values\n    min_dict = {}\n\n    # iterating over the sorted list and updating the dictionary\n    for i in range(len(test_list)):\n        if i < K:\n            min_dict[i] = test_list[i]\n        else:\n            if test_list[i][1] < min_dict[i-K][1]:\n                del min_dict[i-K]\n                min_dict[i] = test_list[i]\n\n    # returning the minimum k values in a list\n    return list(min_dict.values())"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize a variable to store the minimum k records\n    min_records = []\n    # Iterate through the sorted list and add the kth smallest element to min_records\n    for i in range(K):\n        min_records.append(sorted_list[i])\n    # Return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer k and returns the minimum k records from the list.\n    \"\"\"\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum k records\n    min_list = []\n\n    # Iterate through the list and add k elements to the min_list\n    for i in range(K):\n        min_list.append(test_list[i])\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K records from the list.\n    If there are less than K records in the list, all the records are returned.\n    '''\n    if K > len(test_list):\n        raise ValueError(\"K should be less than or equal to the length of the list\")\n\n    min_records = []\n    for i in range(len(test_list)):\n        if len(min_records) < K:\n            min_records.append(test_list[i])\n        else:\n            if test_list[i] < min_records[0]:\n                min_records = [test_list[i]]\n            elif test_list[i] == min_records[0]:\n                min_records.append(test_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list - a list of tuples representing records. Each tuple has two elements - key and value.\n    K - an integer representing the number of records we want to find minimum from the list.\n    \n    Returns:\n    A list of tuples representing the minimum K records from the list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1]) # sort by value in ascending order\n    min_values = []\n    i = 0\n    while len(min_values) < K: # while we haven't found minimum K records\n        if i >= len(test_list): # if we've reached the end of the list, return the minimum K values we've found so far\n            return min_values[:K]\n        if test_list[i][1] not in min_values: # if the value of the current record isn't already in our min_values list, add it to the list\n            min_values.append(test_list[i][1])\n        i += 1 # move to the next record\n    \n    return min_values[:K] # return the minimum K values we've found so far"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list.sort()\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the first element in each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Initialize minimum counter\n    count = 0\n    # Initialize minimum element\n    min_val = None\n    # Iterate over the sorted list of tuples\n    for i in range(len(test_list)):\n        # If we have found k minimum records so far, return the minimum value\n        if count == K:\n            return min_val\n        # If the current element is the minimum, increment the count and update the minimum element\n        if i == 0 or (test_list[i][0] < min_val[0] and i!= 0):\n            count += 1\n            min_val = test_list[i]\n    # If we have not found k minimum records, return None\n    return None"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Use sets to remove duplicates from each list\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    \n    # Find the intersection of the three sets\n    common = l1_set.intersection(l2_set, l3_set)\n    \n    # Convert the intersection back to a list and return it\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty dictionary to store the counts of common elements\n    counts = {}\n\n    # loop through each element in the first list\n    for elem in l1:\n        # if the element is in the second list and the element is not already in the dictionary, add it with a count of 1\n        if elem in l2 and elem not in counts:\n            counts[elem] = 1\n        # if the element is in the third list and the element is not already in the dictionary, add it with a count of 1\n        elif elem in l3 and elem not in counts:\n            counts[elem] = 1\n        # if the element is not in either list, skip it\n        else:\n            continue\n\n        # if the element is in the third list and the count of the element in the dictionary is less than 3, remove the element from the dictionary\n        if elem in l3 and counts[elem] < 3:\n            del counts[elem]\n\n        # if the element is in the second list and the count of the element in the dictionary is less than 2, remove the element from the dictionary\n        elif elem in l2 and counts[elem] < 2:\n            del counts[elem]\n\n    # create a new list of common elements\n    result = []\n\n    # loop through the counts dictionary\n    for elem, count in counts.items():\n        # if the count is at least 2, add the element to the result list\n        if count >= 2:\n            result.append(elem)\n\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Loop through each index of each list\n    for i in range(len(l1)):\n        # Check if the current element is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[1:])\n        return min(numbers[0], smallest)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_list = sorted(numbers)\n        return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(numbers) < 2:\n        print(\"The list must have at least two elements.\")\n        return None\n    \n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # check if the list is empty\n    if len(numbers) == 0:\n        return None\n    \n    # initialize the first and second smallest variables\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n    \n    # loop through the list and find the smallest and second smallest numbers\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for num in numbers[2:]:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # Sort the list in ascending order\n    return numbers[1] # Return the second smallest number in the list"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    match = pattern.match(text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*?'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b|)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    result = re.search(pattern, text)\n    \n    if result:\n        return result.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b|)+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n\n    # Helper function to check if two strings are reverse of each other\n    def is_reverse(s1, s2):\n        return s1 == s2[::-1]\n\n    # Initialize the count of pairs as 0\n    count = 0\n\n    # Iterate through the list of strings\n    for i in range(len(test_list)):\n        # Iterate through the remaining strings after the current string\n        for j in range(i + 1, len(test_list)):\n            # Check if the current string is a reverse of the next string\n            if is_reverse(test_list[i], test_list[j]):\n                # Increment the count of pairs if the strings are reverse of each other\n                count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    def is_reverse(string):\n        '''\n        Function to check if a string is a reverse of itself\n        '''\n        return string == string[::-1]\n\n    pairs = 0\n\n    for string in test_list:\n        if not is_reverse(string):\n            continue\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if is_reverse(string[i:j+1]):\n                    pairs += 1\n\n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n\n    for string in test_list:\n        string = list(string)\n        string.reverse()\n\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if string[i] == string[j]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if string[i] == string[j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    # create a set to store unique strings\n    unique_strings = set(test_list)\n\n    # create an empty set to store the count of reverse pairs\n    reverse_pairs = set()\n\n    # iterate through the unique strings\n    for string in unique_strings:\n        # check if the string is a reverse of any other string in the set\n        for other_string in unique_strings:\n            # check if the string and the other_string are of equal length and in reverse order\n            if len(string) == len(other_string) and string[::-1] == other_string:\n                reverse_pairs.add((string, other_string))\n\n    # return the count of reverse pairs\n    return len(reverse_pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i >= j:\n                break\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Count the number of reverse pairs\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublists_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in sublists_dict:\n            sublists_dict[sublist] += 1\n        else:\n            sublists_dict[sublist] = 1\n    return sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    '''\n    This function counts the number of times each sublist in the input list occurs.\n\n    :param lst: a list of lists\n    :return: a dictionary where each key is a tuple of lists from `lst` and the value is the number of times that tuple appears in `lst`\n    '''\n    # create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # convert the sublist to a tuple and count the number of occurrences in the input list\n        count = len([True for item in lst if item == sublist])\n\n        # add the tuple to the dictionary if it hasn't been seen before\n        if tuple(sorted(sublist)) not in count_dict:\n            count_dict[tuple(sorted(sublist))] = count\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert the list to a dictionary to count the occurrences of each sublist\n    count_dict = {}\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store unique sublists\n    sublist_dict = {}\n    \n    # Loop through each element of the list\n    for element in list1:\n        # Convert the element to a tuple and check if it is in the dictionary\n        if tuple(element) in sublist_dict:\n            sublist_dict[tuple(element)] += 1\n        else:\n            sublist_dict[tuple(element)] = 1\n            \n    # Return the dictionary\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of lists and their unique tuples\n    count_dict = {}\n\n    # iterate through each list in the original list\n    for lst in list1:\n        # convert the list to a tuple and store it as the key in the dictionary\n        key = tuple(lst)\n        # check if the key is already in the dictionary\n        if key in count_dict:\n            # if it is, increment the count by 1\n            count_dict[key] += 1\n        else:\n            # if it isn't, add it with a count of 1\n            count_dict[key] = 1\n\n    # return the dictionary of unique lists and their count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = []\n    for i in range(len(list1)):\n        list_tuples.append((list1[i], i))\n    sublist_count = {}\n    for i in range(len(list_tuples)):\n        for j in range(i+1, len(list_tuples)):\n            sublist1 = list_tuples[i][0]\n            sublist2 = list_tuples[j][0]\n            if sublist1!= sublist2:\n                continue\n            if sublist1 in sublist_count:\n                sublist_count[sublist1] += 1\n            else:\n                sublist_count[sublist1] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublists = {}\n    for num in range(len(lst)):\n        for sublist in lst[num:]:\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in sublists:\n                sublists[sublist_tuple] += 1\n            else:\n                sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the unique sublists and their count\n    unique_sublists_dict = {}\n    # Iterate over each element in the list1\n    for i in range(len(list1)):\n        # Get the current element\n        current_element = list1[i]\n        # Check if the current element is a list\n        if isinstance(current_element, list):\n            # Convert the current element to a tuple\n            current_element = tuple(current_element)\n            # Check if the current tuple is already in the dictionary\n            if current_element in unique_sublists_dict:\n                # Increment the count of the current tuple in the dictionary\n                unique_sublists_dict[current_element] += 1\n            else:\n                # Add the current tuple to the dictionary with a count of 1\n                unique_sublists_dict[current_element] = 1\n    # Return the dictionary\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the count of each unique sublist\n    counts = {}\n    # Loop through the original list\n    for sublist in lst:\n        # Convert the sublist to a tuple and add it to the counts dictionary\n        counts[(tuple(sublist),)] = counts.get((tuple(sublist),), 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n\n    # check if the number is a decimal number with a precision of 2\n    return str(num).split('.')[-1].ljust(2, '0') == '00'"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the string contains only digits and decimal points\n    for char in num:\n        if char.isdigit() or char == '.':\n            continue\n        else:\n            return False\n    \n    # Check if the string has a precision of 2\n    if '.' not in num:\n        return False\n    elif '.' in num and len(num.split('.'))!= 2:\n        return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            int(num.split('.')[-1])\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num % 1!= 0 or num == int(num):\n            return False\n        elif num == round(num, 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Check if the string contains more than 2 digits\n    if len(num) > 2:\n        return False\n\n    # Convert the string to an integer\n    num = int(num)\n\n    # Check if the integer is within the range of a decimal number with a precision of 2\n    return num >= -9999 and num <= 9999"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    try:\n        # Convert the string to a float with a precision of 2\n        float(num)\n    except ValueError:\n        # If the conversion fails, the string is not a decimal number with a precision of 2\n        return False\n\n    # Convert the float back to a string with a precision of 2 to compare it to the original string\n    if str(float(num)) == num:\n        # If the conversion back to string is the same as the original string, the string is a decimal number with a precision of 2\n        return True\n    else:\n        # If the conversion back to string is not the same as the original string, the string is not a decimal number with a precision of 2\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for char in num:\n        if not char.isdigit() and not char in ['.', ',']:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    int_part = parts[0]\n    if len(int_part) > 15:\n        return False\n    if len(parts) > 2:\n        return False\n    for char in int_part:\n        if not char.isdigit():\n            return False\n    if len(parts[1]) > 2:\n        return False\n    for char in parts[1]:\n        if not char.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # convert the string to a float with 2 decimal places\n    num_float = round(float(num), 2)\n    # check if the number is a float and a valid decimal number with 2 decimal places\n    if isinstance(num_float, float) and abs(num_float - round(num_float)) < 0.01:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    # convert the array to a set to remove any duplicates\n    unique_numbers = set(arr)\n    \n    # check if the length of the set is equal to the length of the array\n    if len(unique_numbers) == len(arr):\n        print(\"The array contains only one distinct element\")\n    else:\n        print(\"The array contains more than one distinct element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= len(arr):\n            unique = False\n            break\n    if unique:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Checks whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set from the input list\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = set(arr)\n    return len(unique_elements) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Check if the length of the dictionary is equal to 1\n    return len(counts) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"30\"\n    else:\n        return \"28\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n        }\n\n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 30:\n            print(\"The given month number contains 30 days.\")\n        else:\n            print(\"The given month number does not contain 30 days.\")\n    else:\n        print(\"Invalid month number. Months are given as number from 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    if monthnum3 in [4, 6, 9, 11]:\n        days_in_month[monthnum3 - 1] = 30\n    return True if monthnum3 in range(1, 13) and days_in_month[monthnum3 - 1] == 30 else False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in days_in_months:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    return days_in_months[monthnum-1] in [31, 29, 31]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    # check if the month number is between 1 and 12\n    if 1 <= monthnum3 <= 12:\n        # get the number of days in the month\n        if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            num_days = 31\n        elif monthnum3 in [4, 6, 9, 11]:\n            num_days = 30\n        else:\n            num_days = 28\n        # check if the month number contains 30 days or not\n        if num_days == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number. Month numbers are given as number from 1 to 12.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 3 == 0:\n        if monthnum3 == 12 or monthnum3 % 100 == 0 and monthnum3 % 100!= 29:\n            return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the given month number is within the range of 1 to 12\n    if not (1 <= monthnum3 <= 12):\n        return \"Month number must be between 1 and 12.\"\n    \n    # Check if the given month number contains 30 days\n    if monthnum3 % 2 == 0:\n        return \"The given month number contains 30 days.\"\n    else:\n        return \"The given month number does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n\n    # check if the month has 30 days\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    if days_in_month[monthnum3-1] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n): \n    arr.sort() # Sort the array in ascending order \n    min_diff = arr[1] - arr[0] # Minimum difference between any two elements in the array \n\n    for i in range(1, n-1): \n        diff = arr[i] - arr[i-1] # Difference between the current and previous element \n        if diff < min_diff: # If the difference between the current and previous element is smaller than the current minimum difference, update the minimum difference \n            min_diff = diff \n\n    return min_diff # Return the minimum difference \n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in the given array.\n    \"\"\"\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the minimum element\n    min_diff = float('inf')\n    min_elem = arr[0]\n\n    # Iterate over the array from second element to the last element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the minimum element\n        diff = arr[i] - min_elem\n\n        # Update the minimum difference and the minimum element if the current element is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_elem = arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and last elements\n    min_diff = arr[-1] - arr[0]\n\n    # Iterate over all the elements in the array\n    for i in range(1, n-1):\n        # Calculate the difference between the current and the next element in the array\n        diff = arr[i] - arr[i+1]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    arr.sort()\n    diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        curr_diff = abs(arr[i] - arr[i-1])\n        if curr_diff < diff:\n            diff = curr_diff\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n\n    # If the array has only one element, it is the minimum difference\n    if n == 1:\n        return 0\n\n    # Loop through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize the minimum difference to the maximum value of a 32-bit signed integer\n    min_diff = float('inf')\n    # Iterate over all pairs of elements in the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i+1] - arr[i]\n        # If the difference is less than the minimum difference so far, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # sort the array in ascending order\n    min_diff = arr[1] - arr[0] # initialize minimum difference with the difference between the first two elements in the array\n    for i in range(2, n): # iterate through the remaining elements in the array\n        diff = arr[i] - arr[i-1] # find the difference between the current element and the previous element\n        if diff < min_diff: # if the difference is smaller than the current minimum difference, update the minimum difference\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (list): The given array.\n        n (int): The size of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n\n    \"\"\"\n\n    arr.sort()  # sort the array in ascending order\n    diff = float('inf')  # initialize minimum difference to infinity\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = min(diff, arr[j] - arr[i])  # calculate the difference between two elements and update minimum difference\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n    arr: A list of integers.\n    n: The length of the array.\n\n    Returns:\n    An integer representing the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference variable\n    min_diff = float('inf')\n\n    # Loop through the array\n    for i in range(n-1):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n\n    geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(a, b, n):\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n % 2 == 0:\n            return (nth_polite_number(a, b, n // 2) ** 2) % 1000000007\n        else:\n            return (nth_polite_number(a, (b * b) % 1000000007, (n - 1) // 2) * b) % 1000000007\n\n    a = 2\n    b = 3\n\n    while True:\n        if is_prime(b) and is_prime(b - 1):\n            break\n        b += 2\n\n    if n % 2 == 0:\n        return nth_polite_number(a, b, n // 2) ** 2 % 1000000007\n    else:\n        return nth_polite_number(a, b, (n - 1) // 2) * b % 1000000007\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return math.ceil((math.log(n) + 1) / math.log(2))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize some constants\n    lower_limit = 100\n    upper_limit = 1000000\n    prime_limit = 1000000\n    # Set up the prime numbers list\n    primes = [True] * (prime_limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(prime_limit)) + 1):\n        if primes[i]:\n            for j in range(i * i, prime_limit + 1, i):\n                primes[j] = False\n    # Set up the polite numbers list\n    polite = []\n    for i in range(lower_limit, upper_limit + 1):\n        if primes[i]:\n            polite.append(i)\n    # Find the nth polite number\n    for i in range(n - 1):\n        polite.remove(min(polite))\n    return polite[0]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number as defined in the problem statement.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # Initialize variables\n    count = 1\n    num = 1\n    polite = 2\n    \n    # Iterate through the range of n\n    while count < n:\n        if is_prime(polite):\n            count += 1\n            num += 1\n        polite += 1\n        \n    # Return the nth polite number\n    return num\n\ndef is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def nth_polite(k):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        if k < 1:\n            return None\n        elif k == 1:\n            return 1\n        else:\n            return nth_polite(k - 1) + nth_polite(k - 2)\n\n    return nth_polite(n)\n\nif __name__ == '__main__':\n    n = int(input(\"Enter the value of n: \"))\n    print(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, int(math.sqrt(n))+1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    # Check if n is a prime number\n    if not is_prime(n):\n        return False\n\n    # Check if n has only 1 and n as a factor\n    factors = prime_factors(n)\n    if len(factors)!= 2 or factors[0]!= 1 or factors[1]!= n:\n        return False\n\n    # If all checks pass, n is a polite number\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    for i in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return a"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Define a function to check if a number is polite or not\n    def is_polite_helper(num):\n        if num < 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to find the nth polite number using Sieve of Eratosthenes algorithm\n    def nth_polite(n):\n        # Initialize a list of boolean values indicating whether each number is prime or not\n        primes = [True] * (n+1)\n        primes[0], primes[1] = False, False\n        \n        # Iterate through all numbers and mark them as non-prime\n        for num in range(2, int(math.sqrt(n))+1):\n            if primes[num]:\n                for i in range(num*num, n+1, num):\n                    primes[i] = False\n        \n        # Iterate through all numbers and return the nth polite number if it exists\n        for num in range(n, 0, -1):\n            if primes[num] and is_polite_helper(num):\n                return num\n\n    # Call the nth_polite function to find the nth polite number\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    polite_count = 0\n    polite_num = 1\n    while polite_count < n:\n        if polite_num > 1:\n            if math.gcd(polite_num, 2) == 1:\n                polite_count += 1\n        polite_num += 1\n    return polite_num"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i], l1[i+1]] if i < len(l1) - 1 else []\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l)-1):\n        result.append((l[i], l[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum' in a list of numbers 'arr'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    pairs_count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create an empty list to store the difference\n    diff_list = []\n\n    # iterate over the elements of both lists\n    for i in li1:\n        # check if the element is present in the second list\n        if i in li2:\n            # if it is, add it to the difference list\n            diff_list.append(i)\n        else:\n            # if it's not, add it to the list to be returned\n            diff_list.append(i)\n\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists, li1 and li2, as input and returns a list\n    containing the elements of li1 that are not in li2.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as arguments and returns a new list that contains the elements in li1 that are not in li2.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        num = int(input(\"Enter an odd natural number: \"))\n        if num % 2!= 0:\n            sum += num ** 4\n            count += 1\n    return sum\n\nprint(odd_num_sum(5)) # Output: 193"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 3  # starting number is odd\n    sum_of_powers = 0  # sum of fourth powers\n    \n    while num <= n:  # loop until we reach n\n        if num % 2 == 1:  # if the number is odd\n            sum_of_powers += num ** 4  # add its fourth power to the sum\n        \n        num += 2  # increase the number\n    \n    return sum_of_powers  # return the sum of fourth powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate fourth power of current number and add to sum\n        sum += i ** 4\n\n    # return the final sum of fourth powers of odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initialize sum to zero\n    sum = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # calculate fourth power of the odd number\n        power = i ** 4\n\n        # add the fourth power to the sum\n        sum += power\n\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1 # initialize the first number to 1\n    count = 0 # initialize the count to 0\n    \n    while count < n:\n        if num % 2 == 1: # check if the number is odd\n            num *= num # multiply the number by itself to get the fourth power\n            count += 1 # increment the count\n    \n    return num"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    total = 0\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of i\n        fourth_power = i ** 4\n        # add the fourth power to the sum\n        total += fourth_power\n    # return the sum\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of the current odd number\n        fourth_power = i ** 4\n        \n        # add the fourth power to the sum\n        sum += fourth_power\n    \n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_parentheses = {'(', '{', '['}\n\n    for i in range(len(exp)):\n        if exp[i] in opening_parentheses:\n            stack.append(exp[i])\n        elif exp[i] in {')', '}', ']'}:\n            if not stack:\n                return False\n            top_element = stack.pop()\n            if top_element in {'(', '{', '['}:\n                if top_element == '(' and exp[i]!= ')' or top_element == '{' and exp[i]!= '}' or top_element == '[' and exp[i]!= ']':\n                    return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '{']:\n                if char == top_char:\n                    pass\n                else:\n                    return False\n            elif char in [')', '}']:\n                if char == '}' and top_char == '{':\n                    pass\n                else:\n                    return False\n            elif char in ['[', ']']:\n                if char == ']' and top_char == '[':\n                    pass\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_parentheses = {'(', '[', '{'}\n    \n    for i in exp:\n        if i in opening_parentheses:\n            stack.append(i)\n        elif i in closing_parentheses:\n            if not stack or stack.pop()!= opening_parentheses[i]:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    \n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            opening_parenthesis = stack.pop()\n            if opening_parenthesis!= '(':\n                balance += 1\n                if balance < 0:\n                    return False\n    if stack:\n        return False\n    else:\n        return balance == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store opening parentheses\n    stack = deque()\n\n    # loop through the expression\n    for i in range(len(exp)):\n        # if the current character is an opening parenthesis\n        if exp[i] == '(':\n            # push it onto the stack\n            stack.append(i)\n        # if the current character is a closing parenthesis\n        elif exp[i] == ')':\n            # if the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n            # otherwise, pop the top element from the stack and compare its position with the current one\n            else:\n                top = stack.pop()\n                if top > i:\n                    return False\n\n    # if the stack is not empty, the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if exp[i] in ['(', '[', '{']:\n                if exp[i] == top:\n                    continue\n                else:\n                    return False\n            elif exp[i] in [')', ']', '}']:\n                if exp[i] == ')' and top!= '(':\n                    return False\n                elif exp[i] == ']' and top!= '[':\n                    return False\n                elif exp[i] == '}' and top!= '{':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        elif i == ')' or i == '}' or i == ']':\n            if not stack:\n                return False\n            if i == ')' and stack[-1]!= '(':\n                return False\n            if i == '}' and stack[-1]!= '{':\n                return False\n            if i == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char == '+' or char == '-' or char == '*' or char == '/':\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if (last_char == '(' and char == ')') or \\\n                (last_char == '+' and char in ['+', '-']) or \\\n                (last_char == '-' and char in ['-', '+']) or \\\n                (last_char == '*' and char in ['*', '/']) or \\\n                (last_char == '/' and char in ['/', '*']):\n                continue\n            else:\n                return False\n    if not stack:\n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top_element = stack.pop()\n            if top_element!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isdigit() or i == '-':\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into a list of words\n    new_words = [] # create an empty list to store new words\n    \n    for word in words:\n        if len(word)!= K: # check if the length of the word is not equal to K\n            new_words.append(word) # if not, add it to the new list of words\n        \n    return''.join(new_words) # join the new list of words back into a string with spaces"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n            \n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with k length\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the result list\n        if len(word)!= K:\n            result.append(word)\n\n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        match_list = []\n        for match in matches:\n            match_list.append((match, text.find(match)))\n        return match_list"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string. If the pattern is not found,\n    it returns None.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            start = match.start()\n            end = match.end()\n            print(f\"Match {matchNum}: Found '{pattern}' at position {start} - {end}\")\n        return None\n    else:\n        return f\"No match found for '{pattern}'\""
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Find all occurrences of pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Check if any matches were found\n    if not matches:\n        return None\n\n    # Initialize variables to store matches and positions\n    count = 0\n    positions = []\n\n    # Iterate through matches and store positions and count\n    for match in matches:\n        count += 1\n        positions.append(match.start())\n\n    # Return the count and positions\n    return count, positions"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            print(\"Match found at position {} with length {}\".format(match.start(), match.end() - match.start()))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expressions to search for the pattern within the text\n    match = re.search(pattern, text)\n\n    # If there is a match, return a tuple containing the occurrence and position\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        occurrence = match.group()\n        position = match.start()\n        return (occurrence,position)\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n    if odd_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if i % 2 == 0:\n            for j in range(0, len(nums), 2):\n                if j == i:\n                    continue\n                elif nums[j] % 2 == 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(x % 2 == 1 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(num % 2 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Iterate through the list\n    for i in range(len(nums)):\n        # Check if the number at the current position is odd\n        if nums[i] % 2!= 0:\n            # If it's not odd, return False\n            return False\n    # If we've iterated through the entire list and haven't found any odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # If the index is even, check if the element at the index contains an odd number\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            # If the index is odd, check if the element at the index contains an odd number\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if any(num % 2!= 0 for num in nums[i:]):\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(1, len(test_str)):\n        if (test_str[i - 1] in vowels)!= (test_str[i] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # iterate over the counts dictionary and add up the non-repeated elements\n    for num in counts:\n        if counts[num] == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store unique elements and their counts\n    unique_elements = {}\n    \n    # Iterate through the list and add each element to the dictionary\n    for element in arr:\n        if element in unique_elements:\n            unique_elements[element] += 1\n        else:\n            unique_elements[element] = 1\n    \n    # Calculate the sum of unique elements\n    total_sum = 0\n    for key, value in unique_elements.items():\n        if value == 1:\n            total_sum += key\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a dictionary to store the count of each element in the list\n    counts = {}\n\n    # iterate through the list and update the count of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # iterate through the list and add each element to the sum if it has a count of 1\n    for num in arr:\n        if counts[num] == 1:\n            sum += num\n\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store the non-repeated elements in the list\n    non_repeated = []\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated.append(key)\n    \n    # Find the sum of the non-repeated elements\n    sum_non_repeated = sum(non_repeated)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a dictionary to store the elements and their index in the array\n    element_dict = {}\n\n    # Loop through the array and add each element to the dictionary with its index\n    for i in range(len(arr)):\n        if arr[i] not in element_dict:\n            element_dict[arr[i]] = i\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Loop through the dictionary and add the index of each element to the sum\n    for i in range(len(arr)):\n        if i!= element_dict[arr[i]]:\n            non_repeated_sum += i\n\n    return non_repeated_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n\n    # Iterate through the sorted list and add the element multiplied by its index to the sum\n    for i in range(len(sorted_list)):\n        sum_non_repeated += sorted_list[i] * i\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # Convert the set to a list and calculate the sum\n    sum_elements = sum(list(unique_elements))\n\n    return sum_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of all non-repeated elements in a given list.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    int: the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the sum of all the non-repeated elements\n    sum_non_repeated = 0\n    for num, count in freq.items():\n        if count == 1:\n            sum_non_repeated += num\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # initialize the sum variable\n    sum_non_repeated = 0\n    \n    # iterate over the dictionary and add up the counts of each element that appears only once\n    for num, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    for i, (key, group) in enumerate(groupby(list1)):\n        if i == 0:\n            yield [group]\n        else:\n            previous_group = list(group)\n            previous_group.pop(-1)\n            yield previous_group + [group]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    def pack_duplicates(group):\n        return list(group)\n\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        list1 (list): a list of integers\n\n    Returns:\n        list: a list of sublists, where each sublist contains consecutive duplicates of the input list elements.\n\n    Example:\n        >>> pack_consecutive_duplicates([1, 2, 3, 2, 1, 4, 5, 6, 6, 6])\n        [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    # split the list into groups of consecutive duplicates\n    grouped = groupby(list1)\n    # return a list of sublists, where each sublist contains consecutive duplicates\n    return [list(sublist) for _, sublist in grouped]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list\n    list1.sort()\n    # create a generator object for the sorted list\n    group = groupby(list1)\n    # initialize an empty list to store the packed sublists\n    packed_list = []\n    # iterate over the generator object and pack consecutive duplicates into sublists\n    for key, group in group:\n        # check if the previous element is the same as the current element\n        if group[0] == group[-1]:\n            # pack the consecutive duplicates into a sublist\n            sublist = [key]\n            # add the remaining elements of the group to the sublist\n            sublist.extend(group)\n            # append the sublist to the packed list\n            packed_list.append(sublist)\n        else:\n            # append the current group to the packed list\n            packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            result.append(list(group))\n        elif key == list1[1]:\n            result.append(list(group))\n            result.append(list(group))\n        elif key == list1[2]:\n            result.append(list(group))\n            result.append(list(group))\n            result.append(list(group))\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    return [list(group) for key, group in grouped if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use itertools.groupby() to group the list elements by consecutive duplicates\n    groups = groupby(iter(list1))\n    # Use a list comprehension to convert each group into a sublist\n    return [list(g) for g in groups]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of sublists, where each sublist contains only\n    consecutive duplicates of the original list elements.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A list of sublists, where each sublist contains only consecutive duplicates of the original list elements.\n    \"\"\"\n    if not lst:\n        return []\n    grouped = groupby(sorted(lst))\n    result = []\n    for group in grouped:\n        if len(list(group)) > 1:\n            sublist = list(group)\n            sublist.pop(0)\n            result.append(sublist)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_counts = {}\n    \n    # Loop through each list in the main list\n    for sublist in list1:\n        # Check if the sublist has already been counted\n        if sublist in sublist_counts:\n            # Increment the count of the sublist\n            sublist_counts[sublist] += 1\n        else:\n            # Add the sublist to the dictionary with a count of 1\n            sublist_counts[sublist] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Iterate over all the lists in the list1\n    for sublist in list1:\n\n        # Convert the sublist to a tuple\n        sublist = tuple(sublist)\n\n        # Check if the tuple is already in the dictionary\n        if sublist in count_dict:\n\n            # Increment the count of the tuple by 1\n            count_dict[sublist] += 1\n\n        # If the tuple is not in the dictionary, add it with count 1\n        else:\n            count_dict[sublist] = 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Initialize an empty dictionary\n    count_dict = {}\n    \n    # Loop through each item in the list\n    for item in list1:\n        \n        # Check if the item is a list\n        if isinstance(item, list):\n            \n            # Convert the list to a tuple\n            tuple_item = tuple(item)\n            \n            # Check if the tuple is already in the dictionary\n            if tuple_item in count_dict:\n                count_dict[tuple_item] += 1\n            \n            # If the tuple is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[tuple_item] = 1\n                \n    # Return the dictionary of unique sublists\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Loop through each element in the input list\n    for elem in list1:\n\n        # Check if the element is a list\n        if isinstance(elem, list):\n\n            # Turn the list into a tuple\n            tuple_elem = tuple(elem)\n\n            # If the tuple already exists in the dictionary, increment its value\n            if tuple_elem in count_dict:\n                count_dict[tuple_elem] += 1\n            # Otherwise, add the tuple to the dictionary with a value of 1\n            else:\n                count_dict[tuple_elem] = 1\n\n    # Return the final dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # convert the list to tuples\n    list1_tuples = tuple(tuple(x) for x in list1)\n    # create a dictionary to count the number of occurrences of each tuple\n    count_dict = {}\n    for i in range(len(list1_tuples)):\n        # check if the current tuple is already in the dictionary\n        if list1_tuples[i] in count_dict:\n            # if it is, increment its value by 1\n            count_dict[list1_tuples[i]] += 1\n        else:\n            # if not, add the tuple and its value to the dictionary\n            count_dict[list1_tuples[i]] = 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    sublists = {}\n\n    # Loop through each list in the input list\n    for item in list1:\n        # Convert the list to a tuple\n        tuple_item = tuple(item)\n\n        # Check if the tuple is already in the dictionary\n        if tuple_item in sublists:\n            # Increment the count for the tuple\n            sublists[tuple_item] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublists[tuple_item] = 1\n\n    # Return the dictionary of sublists and their counts\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in counts:\n            # Increment the count of the sublist in the dictionary\n            counts[sublist_tuple] += 1\n        else:\n            # Add the sublist tuple to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n\n    # Return the dictionary of sublist counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = combinations(test_list, len(test_list[0]))\n    return list(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples from the test list\n    test_set = set(test_list)\n    # sort the tuples in the set\n    sorted_test_set = sorted(test_set)\n    # initialize an empty list to store the combinations\n    result = []\n    # loop through all possible combinations of three tuples\n    for i in range(len(sorted_test_set)):\n        for j in range(i+1, len(sorted_test_set)):\n            for k in range(j+1, len(sorted_test_set)):\n                # check if the three tuples sum up to the target sum\n                target_sum = sorted_test_set[i][0] + sorted_test_set[j][0] + sorted_test_set[k][0]\n                if target_sum in sorted_test_set[i] and target_sum in sorted_test_set[j] and target_sum in sorted_test_set[k]:\n                    # check if the three tuples are distinct\n                    if sorted_test_set[i][1]!= sorted_test_set[j][1] and sorted_test_set[i][1]!= sorted_test_set[k][1] and sorted_test_set[j][1]!= sorted_test_set[k][1]:\n                        result.append((sorted_test_set[i][0], sorted_test_set[i][1], sorted_test_set[j][1], sorted_test_set[k][1]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the tuple list\n    sorted_list = sorted(test_list, key=lambda x: sum(x))\n\n    # Find the combinations of sums\n    combs = []\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            combs.append(sorted_list[i] + sorted_list[j])\n    \n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set of tuples from the list\n    tuples = set(tuple(x) for x in test_list)\n\n    # create a set of sums from the set of tuples\n    sums = set(sum(x) for x in tuples)\n\n    # create a set of combinations of sums and tuples from the set of sums\n    combinations = set(combinations(sums, r) for r in range(1, len(sums) + 1))\n\n    # filter the set of combinations to only include those that have all the tuples in the list\n    result = set(c for c in combinations if all(x in c for x in tuples))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    combinations_list.append((test_list[i], test_list[j], test_list[k], test_list[l]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns all the combinations of sums with tuples in the given list.\n    \"\"\"\n    sum_tuples = list(set(test_list)) # remove duplicates\n    combinations_list = []\n    for i in range(1, len(sum_tuples) + 1):\n        for combo in combinations(sum_tuples, i):\n            combinations_list.append(tuple(combo))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples from the given tuple list\n    unique_tuples = set(test_list)\n\n    # Create an empty set to store the combinations\n    combinations_set = set()\n\n    # Iterate over all pairs of tuples in the set\n    for i in range(len(unique_tuples)):\n        for j in range(i+1, len(unique_tuples)):\n            # Calculate the sum of the two tuples\n            total = unique_tuples[i][0] + unique_tuples[j][0]\n\n            # If the total is in the given set, add the combination to the set\n            if total in test_list:\n                combination = tuple([unique_tuples[i], unique_tuples[j]])\n                combinations_set.add(combination)\n\n    # Convert the set to a list and return it\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum+1):\n        for j in range(i, total_sum+1):\n            if i + j == total_sum:\n                print(test_list[test_list.index((i,j))])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuples = [tuple(i) for i in test_list]\n    sums = set()\n    for i in range(1, len(tuples) + 1):\n        for combination in combinations(tuples, i):\n            if sum(combination) not in sums:\n                sums.add(sum(combination))\n    return list(sums)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Finding the difference between the tuples\n            diff = tuple_diff(test_list[i], test_list[j])\n            if diff in test_list:\n                # Finding the combinations of the sums\n                combo = tuple_combination(test_list[i], test_list[j])\n                if combo in test_list:\n                    print(f\"({test_list[i]}, {test_list[j]}) + ({test_list[j]}, {test_list[i]}) = ({combo})\")\n    return True\n\ndef tuple_diff(t1, t2):\n    return tuple(x - y for x, y in zip(t1, t2))\n\ndef tuple_combination(t1, t2):\n    return tuple(x + y for x, y in zip(t1, t2))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even, and False otherwise.\n    '''\n    # Calculate the number of divisors for n\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns the count of divisors of the number.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    return len(divisors)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function will count the number of divisors of a given number.\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_count += 2\n    if n > 1 and n % 2!= 0:\n        divisors_count += 1\n    return divisors_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 2\n    \n    if divisor_count == 0:\n        divisor_count = 1\n    \n    return divisor_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def count_divisors_helper(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def count_divisors(n):\n        divisors = count_divisors_helper(n)\n        return len(divisors)\n\n    def is_even(n):\n        return gcd(n, 2) == 1\n\n    divisor_count = count_divisors(n)\n    even_divisor_count = count_divisors(2 * n)\n\n    if divisor_count == even_divisor_count:\n        print(f'{n} has an even count of divisors.')\n    elif divisor_count > even_divisor_count:\n        print(f'{n} has a higher count of divisors than 2 times {n}.')\n    else:\n        print(f'{n} has a lower count of divisors than 2 times {n}.')"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # calculate the count of divisors\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n            \n    # check if the count of divisors is even\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # calculate the number of divisors \n    d = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            d += 1 \n            if n // i == i: \n                d += 1 \n\n    # check if the count of divisors is even or odd \n    if d % 2 == 0: \n        print(\"The count of divisors is even.\") \n    else: \n        print(\"The count of divisors is odd.\") "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        count = 1\n    else:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n\n    # calculate the sum of divisors\n    divisors_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # calculate the count of divisors\n    count_divisors = len([i for i in range(1, n+1) if n % i == 0])\n\n    # check if the count of divisors is even or odd\n    if count_divisors % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n\n    # calculate the difference between the sum and the count of divisors\n    difference = abs(divisors_sum - count_divisors)\n\n    # check if the difference is even or odd\n    if difference % 2 == 0:\n        print(\"The difference between the sum and the count of divisors is even.\")\n    else:\n        print(\"The difference between the sum and the count of divisors is odd.\")\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n-2):\n        if (i == 0 or arr[i-1] % 2!= 0) and (i == n-3 or arr[i+1] % 2!= 0):\n            sum += arr[i] + arr[i+1] + arr[i+2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            total += arr[j]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Returns the sum of all odd length subarrays in a given array.\n\n    Parameters:\n    -----------\n    arr: list\n        A list of integers\n\n    Returns:\n    --------\n    int\n        The sum of all odd length subarrays in the input array.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    total_sum = 0\n\n    # Loop through the input array and calculate the sum of odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total_sum += arr[j-1]\n\n    # Return the total sum of odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n    for i in range(1, n, 2):\n        for j in range(i, n, 2):\n            sum_odd_length += arr[j]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    odd_sum = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is odd length\n        if i % 2!= 0:\n            # Add the current element to the sum of odd length subarrays\n            odd_sum += arr[i]\n\n    # Return the sum of odd length subarrays\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all odd length subarrays.\n\n    Time Complexity: O(n^2)\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    # Iterate through all possible subarrays of odd length\n    for i in range(1, n):\n        for j in range(i, n):\n            subarray = arr[j - i:j]\n            subarray = [x for x in subarray if x % 2!= 0] # Filter out even numbers\n            total_sum += sum(subarray)\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # initialize a variable to store the sum of all odd length subarrays\n    total_sum = 0\n    # iterate through the array\n    for i in range(len(arr)):\n        # calculate the sum of odd length subarrays starting at index i\n        start = i\n        while start < len(arr) and len(arr[start]) % 2 == 1:\n            total_sum += sum(arr[start])\n            start += 1\n        # calculate the sum of odd length subarrays ending at index i\n        end = i\n        while end >= 0 and len(arr[end]) % 2 == 1:\n            total_sum += sum(arr[end])\n            end -= 1\n    # return the total sum of all odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        if i%2==0:\n            odd_sum += arr[i]\n        else:\n            odd_sum -= arr[i]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and finds the sum of all odd length subarrays.\n    \"\"\"\n    sum_of_odds = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2!= 0:\n                sum_of_odds += sum(arr[i:j+1])\n    \n    return sum_of_odds"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0 # convert from 0-255 to 0.0-1.0 range\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0 # achromatic color\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    v = max_val\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    d = v - min(r, g, b)\n    \n    if d == 0:\n        h = 0\n        s = 0\n    else:\n        s = d / max(v, r, g, b)\n        \n        if r == v:\n            h = (g - b) / d\n        elif g == v:\n            h = 2 + (b - r) / d\n        elif b == v:\n            h = 4 + (r - g) / d\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n\n    if h < 0:\n        h += 360\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    v = max_value\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    elif max_val == b:\n        h = 4 + (r - g) / delta\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    h = h / 6\n    if h < 0:\n        h += 1\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n\n    # Convert R, G, and B to floating point values between 0 and 1\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n\n    # Convert R, G, and B to maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the delta value\n    delta = max_value - min_value\n\n    # If the delta value is 0, the color is a shade of gray\n    if delta == 0:\n        h, s, v = 0, 0, max_value\n\n    # Calculate the hue and saturation values\n    elif max_value == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_value == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    if h < 0:\n        h += 360\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    v = max_value\n\n    return round(h * 360), round(s * 100), round(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    v = cmax\n    s = 0\n    if delta!= 0:\n        s = delta/cmax\n        if r == cmax:\n            h = (g-b)/delta\n        elif g == cmax:\n            h = 2 + (b-r)/delta\n        else:\n            h = 4 + (r-g)/delta\n        if h < 0:\n            h += 6\n        h *= 60\n    h, s, v = round(h), round(s*100), round(v*100)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_value\n    \n    delta = max_value - min_value\n    \n    if max_value == 0:\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n            \n        h = h / 6\n        \n        if h < 0:\n            h = h + 1\n            \n        s = delta / max_value\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert r, g, b to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Convert r, g, b to float values between 0 and 1\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n\n    # Calculate hue\n    if delta_rgb == 0:\n        h = 0\n    elif r == max_rgb:\n        h = 60 * (((g - b) / delta_rgb) % 6)\n    elif g == max_rgb:\n        h = 60 * (((b - r) / delta_rgb) + 2)\n    else:\n        h = 60 * (((r - g) / delta_rgb) + 4)\n\n    # Calculate saturation\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta_rgb / max_rgb\n\n    # Calculate value\n    v = max_rgb\n\n    # Convert hue from degrees to radians\n    h *= (2 * 3.14159 / 360)\n\n    # Return the hsv color values\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color to an HSV color.\n    '''\n    \n    # Find the maximum and minimum values in the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the HSV values based on the type of color\n    if max_val == min_val:\n        # If the color is a shade of gray, set the HSV values to 0\n        h = s = v = 0\n    else:\n        # If the color is not a shade of gray, calculate the HSV values\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Convert the HSV values to a percentage\n        h = round(h * 60)\n        if h < 0:\n            h += 360\n        s = round((max_val - min_val) / max_val * 100)\n        v = round((max_val / 255) * 100)\n    \n    # Return the HSV values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floats and subtract the minimum value\n    r_float = float(r) - min(r, g, b)\n    g_float = float(g) - min(r, g, b)\n    b_float = float(b) - min(r, g, b)\n\n    # Find the maximum value\n    max_val = max(r, g, b)\n\n    # Find the delta value\n    delta = max_val\n\n    # If delta is zero, r, g, and b can be set to 0\n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        # Find the h, s, and v\n        if r == max_val:\n            h = (g_float - b_float) / delta\n        elif g == max_val:\n            h = 2 + (b_float - r_float) / delta\n        else:\n            h = 4 + (r_float - g_float) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_val\n\n        if max_val == 0:\n            v = 0\n        else:\n            v = max_val\n\n        # Find the delta value for the v channel\n        if delta == 0:\n            delta_v = 0\n        else:\n            delta_v = max_val / 6\n\n        # Adjust the v channel\n        if max_val == r:\n            v = delta_v\n        elif max_val == g:\n            v = delta_v + (max_val - delta_v) / 6\n        elif max_val == b:\n            v = delta_v + (max_val - delta_v) / 6\n\n    # Convert h, s, and v to integers\n    h_int = int(h * 65535)\n    s_int = int(s * 65535)\n    v_int = int(v * 65535)\n\n    # Return the hsv values as a tuple\n    return (h_int, s_int, v_int)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n        return product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= min(even_count, odd_count)\n            even_count = odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function finds the product of the first even and odd numbers of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    product = even_sum * odd_sum\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num_even = 0\n    num_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            num_even += num\n        else:\n            num_odd += num\n    \n    return num_even * num_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n        if even_count > 0 and odd_count > 0:\n            break\n\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            product *= i\n        else:\n            odd_count += 1\n            product *= i\n            \n    if even_count > 0:\n        product *= even_count\n    if odd_count > 0:\n        product *= odd_count\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= max(num, 1)\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        result = list1[0] * list1[1]\n    elif even_count > 0:\n        result = list1[0]\n    elif odd_count > 0:\n        result = list1[1]\n    else:\n        result = 0\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd number.\n    \"\"\"\n\n    # Initialize variables to keep track of the product of even and odd numbers\n    even_product = 1\n    odd_product = 1\n\n    # Iterate through the list and find the product of even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    # Return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.strip('[]').replace(\"'\", '').split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result_list = []\n    for item in test_str:\n        if item.isdigit():\n            result_list.append(int(item))\n        else:\n            return None\n    return tuple(result_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for i in test_str:\n        try:\n            result.append(int(i))\n        except ValueError:\n            result.append(None)\n    return tuple(result)\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    def convert_str_to_int(str_list):\n        \"\"\"\n        Helper function to convert a list of strings to a list of integers.\n        \"\"\"\n        int_list = []\n        for str in str_list:\n            try:\n                int_list.append(int(str))\n            except ValueError:\n                print(\"Invalid input. Please provide integers only.\")\n                return None\n        return int_list\n\n    def convert_str_to_tuple(str_list):\n        \"\"\"\n        Helper function to convert a list of strings to a tuple.\n        \"\"\"\n        int_list = convert_str_to_int(str_list)\n        if int_list is None:\n            return None\n        return tuple(int_list)\n\n    str_list = test_str.split(',')\n    int_tuple = convert_str_to_tuple(str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Create an empty list to store integer tuples\n    int_tuples = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a digit, convert it to an integer and append it to the list\n        if char.isdigit():\n            int_tuples.append(int(char))\n\n    # Return the list of integer tuples\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings based on a comma\n    str_list = test_str.split(',')\n    # Create an empty list to store the integer tuples\n    int_list = []\n    # Loop through each string in the list\n    for string in str_list:\n        # If the string is a valid integer, add it to the list\n        if string.isdigit():\n            int_list.append(int(string))\n        # If the string is not a valid integer, print an error message\n        else:\n            print(f\"{string} is not a valid integer.\")\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by ','\n    str_list = test_str.split(',')\n    # convert each string to integer and append it to a list\n    int_list = [int(i) for i in str_list]\n    # convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    str_list = test_str.split()\n    # Define a list to hold the integer tuples\n    int_list = []\n    # Loop through the list of strings\n    for item in str_list:\n        # Try to convert the string to an integer\n        try:\n            int_list.append(int(item))\n        except ValueError:\n            # If the string cannot be converted to an integer, leave it as is\n            int_list.append(item)\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string based on commas\n    test_list = test_str.split(',')\n    \n    # Convert the string to an integer list\n    int_list = [int(x) for x in test_list]\n    \n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a tuple of strings\n    str_list = tuple(test_str.split(','))\n    \n    # Convert each string to an integer and append to a new list\n    int_list = []\n    for string in str_list:\n        int_list.append(int(string.strip()))\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index > 0 and a[index-1] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    elif a[index] > x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    # Check if x is greater than the last element of the array\n    if i == len(a):\n        return i\n    # Check if x is equal to the next element\n    elif a[i] == x:\n        return i+1\n    # Find the index of the last element smaller than x\n    j = bisect.bisect_right(a, x) - 1\n    # Check if x is greater than the last element of the array\n    if j == -1:\n        return 0\n    # Check if x is equal to the previous element\n    elif a[j] == x:\n        return j\n    # Find the index of the middle element of the array\n    k = (i + j) // 2\n    # Check if x is equal to the middle element\n    if a[k] == x:\n        return k\n    # Check if x is less than the middle element\n    elif a[k] < x:\n        # If x is smaller than the middle element and the next element is not equal to x, then insert x to the right of the middle element\n        if a[k+1]!= x:\n            return k+1\n        # If x is smaller than the middle element and the next element is equal to x, then insert x to the left of the middle element\n        else:\n            return k\n    # If x is greater than the middle element\n    else:\n        # If x is greater than the middle element and the previous element is not equal to x, then insert x to the left of the middle element\n        if a[k-1]!= x:\n            return k-1\n        # If x is greater than the middle element and the previous element is equal to x, then insert x to the right of the middle element\n        else:\n            return k"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list 'a' and a value 'x' as input and returns the index where 'x' should be inserted into the list such that all elements to its left are less than or equal to 'x' and all elements to its right are greater than 'x'.\n    \"\"\"\n\n    # Define a function that compares elements of a list 'a' and returns the difference between their values and the given value 'x'\n    def compare_elements(y):\n        return x - y\n\n    # Use the built-in bisect module to find the index where 'x' should be inserted\n    index = bisect.bisect_right(a, x, lo=0, hi=len(a), key=compare_elements)\n\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    # If the value is already present in the list, return its index\n    if i < len(a) and a[i] == x:\n        return i\n    # Otherwise, return the index of the first element greater than or equal to x\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=.*b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a\\w{3}b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?<=a)(b{3})(?=b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'\n\ntext = \"abbbbbbbbba\"\nprint(text_match_three(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function takes a string as input and returns True if the string matches the pattern \"abbbb\", and False otherwise.\n    '''\n    pattern = r\"abbbb\"\n    matches = re.findall(pattern, text)\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\s+\\w+\\s+\\w+\\s+b\\s+\\w+\\s+\\w+'\n    return re.findall(pattern, text)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the lists and the string into a single string\n    combined_string = str(test_list) + test_str\n    \n    # Convert the combined string to a tuple using the eval function\n    new_tuple = eval(combined_string)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(str(test_list) + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    :param test_list: A list of values to be included in the new tuple.\n    :param test_str: A string to be included in the new tuple.\n    :return: A new tuple with the input strings and lists.\n    \"\"\"\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n        test_list (list): A list to be converted to a tuple.\n        test_str (str): A string to be used as a tuple element.\n\n    Returns:\n        tuple: A new tuple with the given string and list.\n    \"\"\"\n\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Concatenate the list and string with a comma\n    new_tuple = (test_str + ',' + str(new_list))\n    # Convert the concatenated string to a tuple\n    new_tuple = tuple(new_tuple.split(','))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list + (test_str.split(),),)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, *test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    even_count += 1\n                else:\n                    break\n        else:\n            continue\n    return even_count == len(nums) * len(nums[0])"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # loop through the list and check if every even index contains an even number\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n            \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_indices.append(i)\n    even_indices.sort()\n    for i in range(len(even_indices)):\n        for j in range(i+1, len(even_indices)):\n            if nums[even_indices[i]] % 2 == 0 and nums[even_indices[j]] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            if i == 0:\n                continue\n            else:\n                break\n        else:\n            if i == len(nums)-1:\n                continue\n            else:\n                break\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if i == 0:\n            if nums[i] % 2 == 0:\n                continue\n        elif nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a counter variable to keep track of the number of even numbers in each even position\n    even_count = [0] * len(nums)\n    # Loop through the list and count the number of even numbers in each even position\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count[i // 2] += 1\n    # Check if all even positions contain even numbers\n    for i in range(len(even_count)):\n        if even_count[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if type(test_tup) == tuple:\n        return tuple(remove_nested(x) for x in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(len(test_tup)):\n            if isinstance(test_tup[i], tuple):\n                for j in range(len(test_tup[i])):\n                    test_tup[i] = test_tup[i][:j] + test_tup[i][j+1:]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Create an empty list to store the tuples without nested tuples\n    result_list = []\n    # Loop through each element of the tuple\n    for item in test_tup:\n        # If the element is not a tuple, add it to the result list\n        if not isinstance(item, tuple):\n            result_list.append(item)\n        # If the element is a tuple, recurse through it and add its elements to the result list\n        else:\n            for sub_item in item:\n                if not isinstance(sub_item, tuple):\n                    result_list.append(sub_item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function takes a tuple as input and removes any nested tuples from it.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            for inner_elem in elem:\n                new_tup.append(inner_elem)\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_inner_tuples(inner_tup):\n        return tuple([elem for elem in inner_tup if not isinstance(elem, tuple)])\n    \n    # Traverse the tuple recursively and remove nested tuples\n    return tuple(remove_inner_tuples(inner_tup) for inner_tup in test_tup)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(lst):\n    if isinstance(lst, list):\n        return 1 + sum(count_lists(x) for x in lst)\n    return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize a variable to store the last index\n    last_index = -1\n    \n    # loop through the array and find the last index of the element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    \n    # return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and an element. \n    It returns the last position of the element in the array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    :param arr: sorted array\n    :type arr: list\n    :param x: element to search\n    :type x: any\n    :return: last position of x in arr, if x is present in arr else -1\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1 if x not in arr else left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x and returns the last position of the element x in the array.\n\n    Args:\n        arr (list): A sorted array.\n        x (any): An element to find in the array.\n\n    Returns:\n        int: The last position of the element x in the array.\n\n    Raises:\n        TypeError: If arr is not a list.\n        ValueError: If x is not found in the array.\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"arr must be a list\")\n\n    if x not in arr:\n        raise ValueError(f\"{x} is not found in the array\")\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right + 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize variables\n    left = 0\n    right = len(arr) - 1\n    last_position = -1\n    # find the index of the first element greater than or equal to x\n    while arr[left] < x:\n        left += 1\n        last_position = left\n    # find the index of the last element less than or equal to x\n    while arr[right] > x:\n        right -= 1\n        last_position = right\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)(.*?)(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.match(pattern, text)\n    \n    if result:\n        print(\"Match found\")\n        return True\n    else:\n        print(\"Match not found\")\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through the range of natural numbers from l to r\n    for i in range(l, r+1):\n\n        # check if the number is odd\n        if i % 2!= 0:\n\n            # add the number to the sum\n            sum += i\n\n    # print the sum\n    print(\"The sum of odd numbers in the range\", l, \"to\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two parameters, l and r, which are the lower and upper limits of the range of natural numbers to be considered.\n    It returns the sum of all odd natural numbers within the range [l, r] inclusive.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through all odd natural numbers within the range [l, r]\n    for i in range(l, r+1, 2):\n        # add the current odd natural number to the sum\n        sum += i\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # get the range of natural numbers to sum\n    l, r = map(int, input(\"Enter the lower and upper range of natural numbers: \").split())\n    # initialize the sum variable\n    sum = 0\n    # loop through all natural numbers within the range\n    for i in range(l, r+1):\n        # check if the current number is odd\n        if i % 2!= 0:\n            # if it is, add it to the sum variable\n            sum += i\n    # print the result\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_odds += i\n    return sum_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n    l, r = 1, n\n    result = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            result += l\n        l += 1\n        \n    return result"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 0, 10**9\n    total = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    result = 0\n    for num in arr:\n        result += num\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n<<d) | (n>>(32-d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    # Rotate the leftmost d bits of n\n    n = ((n << d) & mask) | ((n >> (32 - d)) & (~mask))\n    # Return the rotated number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the number of bits in the input number\n    num_bits = bin(n)[2:].count('1')\n    \n    # Calculate the number of bits to rotate\n    rotate_bits = d % num_bits\n    \n    # Shift the input number to the left by rotate_bits bits\n    rotated_num = (n << rotate_bits) | (n >> (num_bits - rotate_bits))\n    \n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff  # Using bitwise operators"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF  # Used to mask out the higher bits\n    rotate_amount = d % 32  # Calculate the amount to rotate by (modulo 32)\n    rotated_bits = (n << rotate_amount) | (n >> (32 - rotate_amount))  # Rotate the bits left by the specified amount\n    return rotated_bits & mask  # Mask out the bits that are now in the higher positions of the result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a string\n    n_str = '{:032b}'.format(n)\n    # Get the number of leading zeros in the binary representation\n    num_zeros = len([x for x in n_str if x == '0'])\n    # Get the number of bits to rotate by\n    num_bits_to_rotate = d % 32\n    # Get the number of bits to keep in the last place\n    num_bits_to_keep = 32 - num_bits_to_rotate\n    # Get the first num_bits_to_keep bits of the binary representation\n    first_num_bits = n_str[:num_bits_to_keep]\n    # Get the remaining bits of the binary representation\n    remaining_bits = n_str[num_bits_to_keep:]\n    # Shift the remaining bits to the left by num_bits_to_rotate places\n    rotated_bits = remaining_bits[:num_bits_to_rotate] + remaining_bits[num_bits_to_rotate:]\n    # Combine the rotated and first bits\n    rotated_n = first_num_bits + rotated_bits\n    # Convert the rotated number back to an integer\n    rotated_n = int(rotated_n, 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    :param n: 32-bit integer number to rotate\n    :param d: number of bits to rotate left\n    :return: rotated 32-bit integer number\n    \"\"\"\n    # Extract the sign bit and left-shift the number\n    sign_bit = (n >> 31) & 1\n    n = n << d\n\n    # Extract the shifted bits and or the sign bit with the shifted bits\n    rotated = (n | sign_bit) & ((1 << 32) - 1)\n\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments, n (the number to be rotated) and d (the number of bits to rotate left by).\n    It returns the rotated number.\n    \n    We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    bin_str = bin(n)[2:]\n\n    # Determine the number of leading zeros in the binary string\n    num_leading_zeros = bin_str.index('0')\n\n    # If d is greater than the number of leading zeros, then no rotation is necessary\n    if d > num_leading_zeros:\n        return n\n\n    # Add leading zeros to the binary string to make d bits available\n    bin_str = '0'*(num_leading_zeros-d) + bin_str\n\n    # Convert the binary string back to integer and return the rotated number\n    return int(bin_str, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # compute the mask for rotating left by d bits\n    mask = (1<<32) - 1 ^ ((1<<d)-1)\n\n    # compute the rotated value\n    rotated_value = (n<<d) | (n>>(32-d))\n\n    # compute the result\n    result = (rotated_value & mask) | ((n & (~mask)) & ((1<<32)-1))\n\n    # return the result\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and returns the same string with all whitespaces removed.\n    \"\"\"\n    # Use regular expression to replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all whitespaces using regex\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(x, z+1):\n            if i!= j:\n                if i == x or i == y or j == x or j == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x == z!= y:\n        count += 1\n    if y == z!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n\nprint(test_three_equal(1, 2, 3)) # Output: 3\nprint(test_three_equal(1, 2, 4)) # Output: 0"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if x % i == 0 and y % i == 0 and z % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    # Initialize a variable to keep track of the number of rotations required\n    count = 0\n    # Check if the array is already sorted\n    if is_sorted(arr):\n        # If the array is already sorted, return 0 rotations required\n        return count\n    # Create a copy of the array to work with\n    arr_copy = arr[:]\n    # Start by finding the pivot element\n    pivot = arr_copy[0]\n    # Loop through the array and swap elements that are smaller than the pivot\n    for i in range(1, len(arr_copy)):\n        if arr_copy[i] < pivot:\n            arr_copy[i], arr_copy[i-1] = arr_copy[i-1], arr_copy[i]\n            count += 1\n    # If the pivot element was not moved, return 0 rotations required\n    if count == 0:\n        return count\n    # Check if the pivot element was already sorted\n    if is_sorted(arr_copy):\n        # If the pivot element was already sorted, return 0 rotations required\n        return count\n    # If the pivot element was not sorted, call the function recursively with the array after the pivot\n    return count + count_rotation(arr_copy)\n\ndef is_sorted(arr):\n    # Loop through the array and return False if any element is greater than the next element\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Step 1: Check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # Step 2: Check if array is already sorted in reverse\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # Step 3: Check if array can be rotated to be sorted in O(n) time complexity\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return 1\n    # Step 4: Check if array can be rotated to be sorted in O(n log n) time complexity\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 2\n    # Step 5: Array cannot be rotated to be sorted in O(n) or O(n log n) time complexity, so return -1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                break\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return n-1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    start = 0\n    end = n - 1\n\n    while start < end:\n        mid = (start + end) // 2\n        if arr[start] < arr[mid]:\n            start = mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n            end = n - 1\n            count += (end - start)\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Create a new list with all elements in reversed order\n    rev_arr = arr[::-1]\n    # Initialize a variable to store the count of rotations\n    count = 0\n    # Check if the two lists have any common elements\n    if arr[0] == rev_arr[0]:\n        # If they have, move the first element of the original list to the end\n        rev_arr.pop(0)\n        # Increment the count of rotations\n        count += 1\n    # Loop through the rest of the original list\n    for i in range(1, n):\n        # Check if the current element is present in the reversed list\n        if arr[i] in rev_arr:\n            # If it is, remove it from the reversed list\n            rev_arr.remove(arr[i])\n            # Increment the count of rotations\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n            i += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return n - i - 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Check if the array is already sorted\n    if arr[0] <= arr[1] and arr[1] <= arr[2] and arr[2] <= arr[3]:\n        count = 0\n        return count\n    \n    # Check if the array can be rotated\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[j] < arr[i + 1]:\n                    count += 1\n                    break\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # check for non-increasing elements in the array\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return -1\n    \n    # find the smallest element in the array\n    for i in range(n):\n        if arr[i] == min(arr):\n            break\n    \n    # check if the smallest element is at the beginning of the array\n    if arr[i] == min(arr):\n        return 0\n    \n    # check for adjacent elements that are greater than the smallest element\n    for j in range(i+1, n):\n        if arr[j] > min(arr):\n            count += 1\n    \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks if a given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if i*i == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes a positive integer as input and returns True if it is a perfect square else False.\n    '''\n    # Check if the given number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the square root of the number is an integer\n    root = int(n ** 0.5)\n    if n == root ** 2:\n        return True\n    \n    # Check if the square root of the number is an odd integer\n    root += 1\n    if n == root ** 2:\n        return True\n    \n    # If none of the above conditions are satisfied, it is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Using the Babylonian method\n    a = n\n    b = n\n    while b**2 <= a:\n        a = b\n        b = (a + b) // 2\n\n    return a == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, otherwise False.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Find the square root of the input\n    root = int(n ** 0.5) + 1\n\n    # Check if the square root is an integer\n    if root ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    # Find the square root of the number\n    square_root = int(n**0.5)\n    \n    # Check if the square root is an integer\n    if square_root**2!= n:\n        return False\n    \n    # Check if the square root is odd or even\n    return square_root % 2 == 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Find the square root of the number\n    sqrt_n = math.sqrt(n)\n\n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the input is a positive integer\n    if n <= 0:\n        return False\n\n    # Find the square root of the input\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    # find the square root of the number\n    root = n ** 0.5\n    \n    # check if the square root is an integer\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Function to check whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    x = n\n    while x * x <= n:\n        i += 1\n        x = (x + n//x) // 2\n    if x * x == n:\n        return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    This function checks whether the product of numbers in a list is even or not.\n    '''\n    # Initialize variables for product and even flag\n    product = 1\n    is_even = True\n\n    # Iterate through the list and multiply each element with product\n    for num in arr:\n        product *= num\n\n    # Check whether product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Loop through each number in the list\n    for num in arr:\n        # Multiply the product by the current number\n        product *= num\n        \n        # Check if the product is odd or not\n        if product % 2!= 0:\n            # If it's odd, return False\n            return False\n\n    # If the loop completes, return True\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Check if the list is empty or has only one element\n    if len(arr) < 2:\n        return True\n\n    # Calculate the product of the first and last elements\n    product = arr[0] * arr[-1]\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Check if the list is empty\n    if len(arr) == 0:\n        return True\n\n    # Calculate the product of the list\n    product = 1\n    for num in arr:\n        product *= num\n\n    # Check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return \"Invalid input\"\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return \"The product of all elements is even\"\n    else:\n        return \"The product of all elements is odd\""
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n\n    :param lists: a list of lists to analyze\n    :return: the list in the original list of lists that has the highest sum of its elements\n    \"\"\"\n    # Find the sum of all elements in all lists\n    total_sum = sum(sum(lst) for lst in lists)\n\n    # Initialize the maximum sum found so far\n    max_sum = float('-inf')\n\n    # Loop through each list of lists in the input list\n    for lst in lists:\n        # Calculate the sum of the elements in this list\n        current_sum = sum(lst)\n\n        # If this sum is greater than the current maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Find the list in the input list of lists with the maximum sum\n    for lst in lists:\n        if sum(lst) == max_sum:\n            return lst\n\n    # If no list with the maximum sum was found, return None\n    return None"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    if not lists:\n        return []\n    elif len(lists) == 1:\n        return lists[0]\n    else:\n        max_list = max(lists, key=max_sum_list)\n        return [max_list] + max_sum_list([lst for lst in lists if lst!= max_list])\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize the maximum sum and list to None\n    max_sum = None\n    max_list = None\n    \n    # Loop over each list in the lists list\n    for list_ in lists:\n        # Calculate the sum of the elements in the list\n        current_sum = sum(list_)\n        \n        # If the current sum is greater than the maximum sum, update both max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list_\n    \n    # Return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def find_max_sum(lst):\n        if len(lst) == 1:\n            return lst[0]\n        else:\n            return max(lst[0], find_max_sum(lst[1:]))\n\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for lst in lists:\n        lst_sum = find_max_sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_sum_list = [lst]\n        elif lst_sum == max_sum and len(max_sum_list) == 0:\n            max_sum_list = [lst]\n        elif lst_sum == max_sum:\n            max_sum_list.append(lst)\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists[i])):\n            current_sum = sum(lists[i][j:]) + sum(lists[j][i:])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j], lists[j][i]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')  # initialize maximum sum to negative infinity\n    max_list = []  # initialize list to empty\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = None\n\n    # Loop through each list in the input list\n    for sublist in lists:\n        # Calculate the sum of the elements in the list\n        current_sum = sum(sublist)\n\n        # If the sum is greater than the current maximum sum, update the variables\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    # Return the list with the maximum sum\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of maximum sum and the list with maximum sum\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through each list in the list of lists\n    for l in lists:\n        # Initialize variables to keep track of the current sum and the list with current sum\n        current_sum = 0\n        current_list = []\n\n        # Iterate through each element in the current list\n        for e in l:\n            # Add the element to the current sum and add it to the current list\n            current_sum += e\n            current_list.append(e)\n\n        # Check if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the corresponding list\n            max_sum = current_sum\n            max_list = current_list\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    result = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 or j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + lists[i][j-1] + lists[i-1][j] - lists[i-1][j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [lists[i][j]]\n            elif current_sum == max_sum:\n                result.append(lists[i][j])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    def is_valid(sum_list, target):\n        current_sum = sum(sum_list)\n        return current_sum <= target\n\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i + 1, len(lists)):\n            current_sum = sum(sum_list[i]) + sum(sum_list[j])\n            if is_valid(sum_list[i] + sum_list[j], max_sum):\n                max_sum = current_sum\n                max_list = sum_list[i] + sum_list[j]\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables for maximum run and current run\n    max_run = 0\n    curr_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase and the previous character was not uppercase,\n        # update the maximum run and the current run\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables to keep track of the maximum run of uppercase characters and its start index\n    max_run = 0\n    start_index = 0\n    \n    # loop through the string and keep track of the start and end index of the current run of uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                # if the current character is the last one in the run or the next character is not uppercase, update max_run and start_index\n                if max_run < i - start_index + 1:\n                    max_run = i - start_index + 1\n                    start_index = i\n                \n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    count = 0\n    char = None\n    start_idx = None\n\n    # Loop through each character in the string\n    for i, c in enumerate(test_str):\n        # If the character is uppercase and the previous character was not, update max_run and start_idx\n        if c.isupper() and not (char is None or char.isupper()):\n            max_run = max(max_run, count)\n            start_idx = i - count + 1\n            count = 1\n        else:\n            count += 1\n            char = c\n\n    # Check for the last character, which may not have been accounted for in the loop\n    if char is not None and char.isupper():\n        max_run = max(max_run, count)\n        start_idx = len(test_str) - count\n\n    # Return the maximum run of uppercase characters\n    return max_run, start_idx"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    is_uppercase = False\n    for char in test_str:\n        if char.isupper():\n            if is_uppercase:\n                current_run += 1\n            else:\n                is_uppercase = True\n                current_run = 1\n        else:\n            if is_uppercase:\n                if current_run > max_run:\n                    max_run = current_run\n                current_run = 0\n                is_uppercase = False\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    count = 0\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            count += 1\n            if current_run > max_run:\n                max_run = current_run\n                max_count = count\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    max_run_index = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                max_run_index = i\n        else:\n            count = 0\n    return test_str[max_run_index:max_run_index + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase, increment the count\n        if char.isupper():\n            uppercase_count += 1\n        # If the character is not uppercase, reset the count and reset the run if necessary\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n                current_run = 1\n            else:\n                current_run = 0\n            uppercase_count = 0\n\n    # Check if the last run was longer than the previous max run\n    if uppercase_count > max_run:\n        max_run = uppercase_count\n        current_run = 1\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    # initialize variables\n    count = 0\n    max_count = 0\n    current_count = 0\n\n    # iterate through the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            current_count += 1\n            # update the count if the current count is greater than the maximum count\n            if current_count > max_count:\n                max_count = current_count\n                # reset the count if the current count is equal to the maximum count\n                if current_count == max_count:\n                    count = 0\n        else:\n            count += 1\n            # reset the count if the current count is zero\n            if current_count == 0:\n                count = 0\n\n    # return the maximum count\n    return max_count"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:  # Check if the number is odd\n            return num  # If it's odd, return it\n    return None  # If no odd numbers are found in the list, return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[K-1] in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = K.split()\n    count = 0\n    for i in test_tup:\n        if i in k:\n            count += 1\n    if count == len(k):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in K_tup:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) >= K:\n        for tup in test_tup:\n            if len(tup) == K:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        for i in range(K):\n            if test_tup[i] == K:\n                return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                print(\"False\")\n                return False\n        print(\"True\")\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the two tuples must be the same.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]