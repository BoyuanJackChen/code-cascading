[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Find the intersection of the two lists\n    intersection = [num for num in test_tup1 if num in test_tup2]\n\n    # Remove duplicates from the intersection\n    intersection = list(set(intersection))\n\n    return intersection"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n\n    # Iterate through both lists and compare each element\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_set.add(element)\n\n    # Return the shared set as a list\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # check if both lists have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both lists must have the same length.\"\n    \n    # initialize an empty list to store the shared elements\n    shared_elements = []\n    \n    # iterate through both lists\n    for i in range(len(test_tup1)):\n        # if the elements are the same, append it to the shared_elements list\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    \n    # return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Define variables to store the unique elements in each list\n    unique_list1 = set(test_tup1)\n    unique_list2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = unique_list1.intersection(unique_list2)\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    # Iterate over each element in the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 in test_tup2:\n            # If it is, add it to the list of shared elements\n            shared_elements.append(element1)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise.\n    '''\n\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the number is not divisible by any number from 2 to the square root of the number, it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sieve_of_eratosthenes(n):\n    \"\"\"\n    Returns a list of prime numbers up to n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return [i for i in range(n+1) if primes[i]]\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns a list of non-prime numbers up to n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = sieve_of_eratosthenes(n)\n    return [i for i in range(n+1) if i not in primes]"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n\n    if n < 2 or n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [abs(num) for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to find the n largest numbers\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list of numbers into a min-heap\n    hq.heapify(nums)\n\n    # remove the smallest n numbers from the heap and add them to a new list in descending order\n    largest_nums = []\n    while hq.heappop(nums)!= nums[0]:\n        if len(largest_nums) < n:\n            hq.heappush(nums, hq.heappop(nums))\n        else:\n            largest_nums.pop()\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a max heap\n    hq.heapify(nums)\n\n    # remove the largest element and add it to the result list\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n to store the n largest integers\n    max_heap = [-float('inf')] * n\n    \n    # insert the first n elements of the given list into the heap\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    \n    # insert the remaining elements of the list into the heap\n    for num in nums[n:]:\n        # if the new number is greater than the top element of the heap,\n        # replace it with the new number\n        if num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    \n    # return the n largest integers in descending order\n    return max_heap[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # create a max heap from the given list of numbers\n    max_heap = nums\n    hq.heapify(max_heap)\n\n    # remove the largest element from the max heap\n    while n > 1:\n        max_num = hq.heappop(max_heap)\n        n -= 1\n\n    # return the largest element from the max heap (the n largest integers)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min-heap\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Remove the smallest elements from the heap\n    for _ in range(n,len(nums)):\n        smallest = hq.heappop(heap)\n        hq.heappush(heap,smallest)\n    \n    # Return the heap as the result\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap of the first n elements\n    hq.heapify(nums[:n])\n\n    # Traverse the remaining elements of the list\n    for i in range(n, len(nums)):\n        # Remove the maximum element from the heap\n        max_val = hq.heappop(nums[:n])\n\n        # Add the current element to the heap\n        hq.heappush(nums[:n], nums[i])\n\n        # If the heap size becomes larger than n, remove the minimum element from the heap\n        if len(nums[:n]) < n:\n            hq.heappush(nums[:n], max_val)\n\n    # Return the n largest integers in descending order\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the given list to a min heap\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        \n    # Pop and return the n largest integers\n    largest = []\n    while len(largest) < n:\n        largest.append(hq.heappop(heap))\n        \n    return largest"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Find the difference between two numbers \n    diff = x ^ y\n\n    # Check if the difference is a power of 2 or not \n    while diff > 0: \n        if diff % 2 == 0: \n            diff = diff // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x-1) == 0: # x & (x-1) gives 0 if x is a power of 2, else gives x-1.\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1: # base case for power of 2\n        return True\n\n    if x & (x - 1)!= 0: # if x is not a power of 2, return False\n        return False\n\n    return True # if x is a power of 2, return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:  # if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(n):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((n & (n - 1)) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the integer to binary representation\n    binary_representation = bin(x)[2:]\n    \n    # Split the binary representation into two parts\n    part1 = binary_representation[:binary_representation.index('1')]\n    part2 = binary_representation[binary_representation.index('1')+1:]\n    \n    # Check if the lengths of the two parts are equal\n    if len(part1) == len(part2):\n        # Check if the two parts are equal\n        if part1 == part2:\n            # Check if the only difference is at one bit position\n            if part1.count('1')!= len(part1):\n                return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x & 1!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Loop through each word\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # Print the word\n            print(word)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words which are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words which are not at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b') # match word boundary and one or more word characters\n    words = pattern.findall(text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words\n    words = text.split()\n    # initialize an empty list to store the matching words\n    matches = []\n    # iterate over the words and check if the length of each word is greater than or equal to 4\n    for word in words:\n        if len(word) >= 4:\n            matches.append(word)\n    # return the list of matching words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Initialize an empty list to store the words that are at least 4 characters long\n    long_words = []\n\n    # Loop through each word and check if it is at least 4 characters long\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num * num\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # convert the string to a list\n    lst = list(str)\n\n    # initialize the count of rotations\n    count = 0\n\n    # loop through the string and check for rotations\n    while True:\n        # find the index of the smallest element\n        index = lst.index(min(lst))\n\n        # check if the element at the index is the smallest element\n        if lst[index] == min(lst):\n            # swap the smallest element with the last element in the list\n            lst[index], lst[-1] = lst[-1], lst[index]\n\n            # update the count of rotations\n            count += 1\n\n            # remove the last element from the list\n            lst.pop()\n\n            # check if the list is empty\n            if not lst:\n                # exit the loop\n                break\n        else:\n            # exit the loop\n            break\n\n    # return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize two variables to store the minimum and maximum rotations needed\n    min_rotations = float('inf')\n    max_rotations = 0\n    # Loop through each character in the string and check if it is equal to the previous character\n    for i in range(len(str)):\n        if str[i]!= str[(i-1)%len(str)]:\n            # If the character is not equal to the previous character, increment the max_rotations variable\n            max_rotations += 1\n        else:\n            # If the character is equal to the previous character, reset the min_rotations variable to the current max_rotations value\n            min_rotations = min(min_rotations, max_rotations)\n            # Reset the max_rotations variable to 0 to start counting the next rotation\n            max_rotations = 0\n    # Add the last rotation count to the min_rotations variable\n    min_rotations += max_rotations\n    # Return the minimum number of rotations needed to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Check if the string is empty\n    if len(str) == 0:\n        return 0\n    \n    # Initialize two pointers at the beginning and end of the string\n    left = 0\n    right = len(str) - 1\n    \n    # Initialize a variable to keep track of the minimum number of rotations\n    min_rotations = 0\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # If the characters at the two pointers are the same, move the left pointer to the right\n        if str[left] == str[right]:\n            left += 1\n            right -= 1\n        else:\n            # If the characters are different, move the right pointer to the left and increment the rotation count\n            right -= 1\n            min_rotations += 1\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # find length of string\n    n = len(str)\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    # Initialize a list to store the characters that can be rotated\n    char_list = []\n    for key, value in freq.items():\n        # if value is odd, add character to list\n        if value % 2!= 0:\n            char_list.append(key)\n    # Sort the list alphabetically\n    char_list.sort()\n    # Find the minimum number of rotations required\n    min_rotations = n\n    for i in range(len(char_list)):\n        # find the number of times the character appears in the string\n        count = freq[char_list[i]]\n        # calculate the number of rotations required to get the same string\n        rotations = count * 2\n        if rotations < min_rotations:\n            min_rotations = rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n        \n    # calculate the number of rotations required to get the same string\n    n = len(str)\n    min_rot = n\n    for i in range(1, n//2+1):\n        if freq[str[i-1]] < freq[str[n-i]]:\n            min_rot = min(min_rot, i)\n            \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the frequency of each character in the string\n    freq = {}\n    for c in str:\n        freq[c] = freq.get(c, 0) + 1\n\n    # Find the maximum frequency of any character\n    max_freq = max(freq.values())\n\n    # Initialize the minimum number of rotations\n    min_rotations = max_freq - 1\n\n    # Loop through all possible rotations of the string\n    for i in range(max_freq):\n        # Check if the rotated string is equal to the original string\n        if str[::-1] == str[i:]:\n            # Increment the minimum number of rotations\n            min_rotations = min(min_rotations, i + 1)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # Check if the string has only one character\n    if n == 1:\n        return 0\n    # Check if the string has only two characters\n    if n == 2:\n        if str[0] == str[1]:\n            return 1\n        else:\n            return 0\n    \n    # Count the number of rotations\n    count = 0\n    for i in range(n-1):\n        if str[i]!= str[n-1-i]:\n            count += 1\n    \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    rotations = 0\n    n = len(str)\n    for i in range(1, n):\n        if str[0:i] == str[i:]:\n            rotations += 1\n            if rotations > 0:\n                break\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Finding the frequency of each character in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n\n    # Sorting the frequency dictionary based on the frequency of each character\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # Initializing a variable to store the number of rotations required\n    count = 0\n\n    # Looping through the sorted frequency dictionary\n    for i in range(n):\n        # If the frequency of the current character is greater than 1, then the string is already rotated\n        if freq[sorted_freq[i][0]] > 1:\n            break\n        else:\n            # If the frequency of the current character is equal to 1, then the string can be rotated by 1 character\n            if i == 0 or sorted_freq[i][0]!= sorted_freq[i-1][0]:\n                count += 1\n\n    # Returning the minimum number of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n): \n        for j in range(i, n): \n            if str[i] == str[j] and i!= j: \n                k = j \n                while k!= i and str[k] == str[i]: \n                    k += 1\n                if k == i: \n                    return k - 1\n    return 0"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch,'')\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into list of characters\n    lst = list(s)\n    # remove the first occurrence of the character\n    lst.remove(ch)\n    # remove the last occurrence of the character\n    if ch in lst:\n        lst.remove(ch)\n    # convert the list of characters back to string\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input and returns a new string with the first and last occurrence of ch removed.\n    '''\n    # Initialize empty string to store new string\n    new_str = ''\n    # Iterate through string\n    for i in range(len(s)):\n        # If the character at index i is not equal to the character ch\n        if s[i]!= ch:\n            # Append the character to the new string\n            new_str += s[i]\n    # Return the new string without the first and last occurrence of ch\n    return new_str"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the character is present in the string\n    if ch not in s:\n        return s\n    else:\n        # split the string into two parts\n        s_list = list(s)\n        first_part = s_list[:s_list.index(ch)]\n        last_part = s_list[s_list.index(ch) + 1:]\n        # join the parts and return the final string\n        return ''.join(first_part) + ''.join(last_part)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    \n    # Removing the first occurrence of the given character\n    s = s.replace(ch, '')\n    \n    # Removing the last occurrence of the given character\n    if s[-1] == ch:\n        s = s[:-1]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch, \"\", 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # find first and last occurrence of the character in the string\n    i = s.find(ch)\n    j = s.rfind(ch)\n    # remove the first occurrence\n    s = s[:i] + s[i+len(ch):]\n    # remove the last occurrence\n    if j!= len(s)-len(ch):\n        s = s[:j] + s[j+len(ch):]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of the character\n    s = s.replace(ch, '')\n    # remove last occurrence of the character\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '')"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sum of each row\n    row_sums = []\n    # Loop through each row and calculate the sum\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Sort the row sums in ascending order\n    row_sums.sort()\n    \n    # Initialize two empty lists to store the sorted rows\n    sorted_rows = []\n    sorted_columns = []\n    \n    # Loop through each row in the original matrix and add it to the correct list based on its sum\n    for i in range(len(M)):\n        if row_sums[i] == 0:\n            sorted_rows.append(M[i])\n        elif row_sums[i] > 0:\n            sorted_columns.append(M[i])\n        else:\n            sorted_rows.append(M[i])\n    \n    # Return the sorted rows and columns as a list of lists\n    return sorted_rows, sorted_columns"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Sort each row\n    for i in range(n):\n        M[i].sort()\n    # Sort the matrix in ascending order based on row sums\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                if M[i-1][j] > M[i][j]:\n                    M[i][j], M[i-1][j] = M[i-1][j], M[i][j]\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    # Initialize the first row as the minimum element\n    for i in range(cols):\n        min_index = i\n        for j in range(i+1, cols):\n            if M[0][j] < M[0][min_index]:\n                min_index = j\n        M[0][i], M[0][min_index] = M[0][min_index], M[0][i]\n    # Sort the remaining rows\n    for i in range(1, rows):\n        # Initialize the minimum element in the i-th row\n        for j in range(cols):\n            if j == 0:\n                min_val = M[i][j]\n            elif M[i][j] < min_val:\n                min_val = M[i][j]\n            elif M[i][j] == min_val and M[i][0] > M[i][j]:\n                min_val = M[i][j]\n        # Swap the minimum element with the first element of the i-th row\n        M[i][0], M[i][min_val] = M[i][min_val], M[i][0]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)  # number of rows\n    \n    for j in range(n):\n        min_sum = M[j][j]\n        min_row = j\n        \n        for i in range(j+1, n):\n            sum_row = sum(M[i])\n            \n            if sum_row < min_sum:\n                min_sum = sum_row\n                min_row = i\n        \n        M[j], M[min_row] = M[min_row], M[j]  # swap rows\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[j][0] < M[i][0] + M[j][1]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n\n    # initialize the matrix as a list of lists\n    M = [[i[j] for i in M] for j in range(n)]\n\n    # sort each row of the matrix in ascending order\n    for i in range(n):\n        M[i].sort()\n\n    # find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the matrix according to the sum of rows\n    M.sort(key=lambda x: x[i] * row_sums[i] for i in range(n))\n\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n\n    # Formula to find volume of triangular prism using Heron's formula\n    V = 1/3 * l * b * h \n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = (1/3)*(l*b*h)\n\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculating volume of the prism using formula V = 1/2 * b * h * l\n    V = 1/2 * b * h * l\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h): \n    '''\n    This function takes the length, width and height of a triangular prism as input and returns its volume.\n    '''\n\n    V = l * b * h # Calculating the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    #calculate the volume of the prism\n    volume = 0.5 * l * b * h\n    \n    #return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = 0.5 * l * b * h\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the triangular prism\n    volume = 0.5 * l * b * h\n    \n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern for matching lowercase sequences of letters joined with underscores\n    pattern = r'([a-z])_([a-z])'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # If the matches list is not empty, return True, otherwise return False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore,\n    and False otherwise.\n    \"\"\"\n    pattern = r\"(?<=[a-z])(?=[a-z])(?=[a-z])(?=[a-z])(?=[a-z])(?=[a-z])\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]*(_\\w+)?[a-z]*')\n    match = pattern.match(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=[a-z])[A-Z]|(?<=\\s)[a-z]')\n    matches = pattern.findall(text)\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define the regular expression pattern to match lowercase letters followed by an underscore\n    pattern = r'\\b[a-z_]*[a-z]\\b'\n\n    # Use the re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return true\n    if match:\n        return True\n    # Otherwise, return false\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'([a-z_]+[a-z_]*)'\n\n    # Use the `re.search()` function to search for a match in the input string\n    match = re.search(pattern, text)\n\n    # Return `True` if a match is found, otherwise `False`\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])([A-Z])'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('([a-z]+)_')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n    # Use re.findall() to find all substrings in the input string that match the pattern\n    matches = re.findall(pattern, text)\n    # Check if the number of matches is greater than 0\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #convert string to list of characters\n    char_list = list(string)\n    #set an empty list to store the unique characters\n    unique_list = []\n    #loop through the characters in the list\n    for char in char_list:\n        #if the character is not present in the second string, append it to the unique list\n        if char not in string:\n            unique_list.append(char)\n    #return the unique list as a string\n    return ''.join(unique_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # create a set of characters present in the second string\n    second_set = set(string)\n\n    # create a new string with all characters from the first string which are not present in the second string\n    new_string = ''.join([char for char in string if char not in second_set])\n\n    return new_string[:NO_OF_CHARS]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a set of characters to remove from the first string\n    char_set = set(string)\n    # create a list to store the remaining characters from the first string\n    result = []\n    # iterate over each character in the first string\n    for char in string:\n        # if the character is not present in the character set, add it to the result list\n        if char not in char_set:\n            result.append(char)\n    # join the remaining characters into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    for i in range(NO_OF_CHARS):\n        if string[i] in string:\n            list_string.remove(string[i])\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    second_string = 'abc'\n    first_string = string\n    for i in range(len(second_string)):\n        if second_string[i] in first_string:\n            first_string = first_string.replace(second_string[i], '', 1)\n    return first_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_dict = {}\n    for i in range(NO_OF_CHARS):\n        char_dict[chr(i)] = 0\n    string_list = list(string)\n    for char in string_list:\n        char_dict[char] += 1\n    for i in range(NO_OF_CHARS):\n        if char_dict[chr(i)] == 0:\n            string_list.remove(chr(i))\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for i in range(len(string)):\n        if string[i] in char_list:\n            char_list.remove(string[i])\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(string.lower())\n    result = \"\"\n    for char in string.lower():\n        if char not in char_set:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in chars_to_remove:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    # Create a set of characters to exclude from the first string\n    exclude_set = set(string)\n\n    # Loop through each character in the first string and add it to the exclude set if it is not present\n    for char in string:\n        if char not in exclude_set:\n            exclude_set.add(char)\n\n    # Create a new list by looping through the exclude set and converting each character to a string\n    new_list = [chr(char) for char in range(256) if chr(char) not in exclude_set]\n\n    # Join the new list into a string and return it\n    return ''.join(new_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store the unique elements of the array\n    unique_elements = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements and their frequency\n    freq = {}\n    # Iterate through the array and update the frequency of each element\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # Iterate through the dictionary and return True if any element appears more than once, otherwise False\n    for value in freq.values():\n        if value > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # Check if the set has the same length as the original array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the unique elements and their counts\n    unique_elements = {}\n\n    # iterate over the array and add unique elements to the dictionary\n    for num in arraynums:\n        if num in unique_elements:\n            unique_elements[num] += 1\n        else:\n            unique_elements[num] = 1\n\n    # iterate over the dictionary and check if any element has a count greater than 1\n    for key, value in unique_elements.items():\n        if value > 1:\n            return True\n\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set()\n    \n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    \n    # check if the set has any elements in it (i.e. if there were duplicates)\n    if len(unique_set) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Convert the array to a set to remove duplicates and check if it's empty\n    return bool(len(set(arraynums)))"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the woodball range\n    woodball_range = [1, 5, 10, 50, 100, 500, 1000]\n    \n    # Check if the given number is in the woodball range\n    if x in woodball_range: \n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the possible outcomes of the function\n    outcomes = {1: 'woodball', 2: 'woodball', 3: 'woodball', 4: 'woodball',\n                5: 'woodball', 6: 'woodball', 7: 'woodball', 8: 'woodball',\n                9: 'woodball', 10: 'woodball', 11: 'woodball', 12: 'woodball',\n                13: 'woodball', 14: 'woodball', 15: 'woodball', 16: 'woodball',\n                17: 'woodball', 18: 'woodball', 19: 'woodball', 20: 'woodball',\n                21: 'woodball', 22: 'woodball', 23: 'woodball', 24: 'woodball',\n                25: 'woodball', 26: 'woodball', 27: 'woodball', 28: 'woodball',\n                29: 'woodball', 30: 'woodball', 31: 'woodball', 32: 'woodball',\n                33: 'woodball', 34: 'woodball', 35: 'woodball', 36: 'woodball',\n                37: 'woodball', 38: 'woodball', 39: 'woodball', 40: 'woodball',\n                41: 'woodball', 42: 'woodball', 43: 'woodball', 44: 'woodball',\n                45: 'woodball', 46: 'woodball', 47: 'woodball', 48: 'woodball',\n                49: 'woodball', 50: 'woodball', 51: 'woodball', 52: 'woodball',\n                53: 'woodball', 54: 'woodball', 55: 'woodball', 56: 'woodball',\n                57: 'woodball', 58: 'woodball', 59: 'woodball', 60: 'woodball'}\n\n    # Check if the given number is a woodball number and return the appropriate result\n    if x in outcomes.keys():\n        return outcomes[x]\n    else:\n        return \"Sorry, that's not a valid number.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 100 or x > 1000:\n        return \"Number is not a woodball.\"\n    elif x % 10 == 0:\n        return \"Number is a woodball.\"\n    else:\n        return \"Number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x == 0:\n        return \"Woodall\"\n    elif x % 2 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x in [7, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0 or x % 10 == 0 or x % 23 == 0 or x % 34 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 3 or x == 4:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 2:\n        return True\n    elif x % 2!= 0 and x > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num % 2 == 0 and abs(int(str(num)[::-1]) - num) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return num - reverse_num\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n\n    return num == rev_num - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    if num < reverse - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return 2 * rev_num >= num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    \n    if num == rev_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is one less than twice its reverse,\n    False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # Convert the reversed string to an integer and subtract 1 from it\n    rev_int = int(rev_str) - 1\n    # Compare the original number with the new reverse number\n    if num == rev_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse + 2 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the reversed number is one less than twice the original number\n    if rev_num < (2 * num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == 2 * num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Function to check if a number is valid or not\n    def is_valid(num):\n        # Check if the number is greater than 9\n        if num > 9:\n            return False\n        # Check if the number is divisible by 2\n        if num % 2 == 0:\n            return False\n        # Check if the number is divisible by 3\n        if num % 3 == 0:\n            return False\n        # Check if the number is divisible by 5\n        if num % 5 == 0:\n            return False\n        # Check if the number is divisible by 7\n        if num % 7 == 0:\n            return False\n        # Check if the number is divisible by 11\n        if num % 11 == 0:\n            return False\n        return True\n\n    # Initialize the maximum number to 0\n    max_num = 0\n    # Loop through the array of digits\n    for digit in arr:\n        # Check if the digit is a valid number\n        if is_valid(int(digit)):\n            # Check if the digit can be added to the maximum number\n            if int(digit) <= max_num:\n                max_num = int(digit)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Initialize maximum number to be the smallest possible integer\n    max_num = 10**len(arr) - 1\n\n    # Loop through the given list of digits\n    for digit in arr:\n        # Multiply the maximum number by 10\n        max_num *= 10\n\n        # Find the smallest integer that can be formed with the current digit\n        min_num = max_num // digit\n\n        # Update the maximum number if the current digit is smaller than the current maximum number\n        if digit < max_num // digit:\n            max_num = min_num + digit\n\n        # Subtract the current digit from the maximum number to get the next largest number\n        max_num -= digit\n\n    # Return the final maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Find the maximum number using the iterative approach\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1, 10):\n        for j in arr:\n            if i*j > max_num:\n                max_num = i*j\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1,10) : \n        if arr.count(str(i)) > 0 and sum(int(x) for x in arr) == i**2 : \n            max_num = i**2\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max(max_num, int(''.join(sorted(str(arr[i])))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = int(''.join(arr))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize variables\n    max_num = 0\n    temp_num = 0\n    count = 0\n\n    # Iterate through the list of digits and calculate the maximum number\n    for digit in arr:\n        temp_num = max_num * 10 + int(digit)\n        count += 1\n        if temp_num > max_num:\n            max_num = temp_num\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize variables\n    max_num = 0\n    length = len(arr)\n    \n    # Iterate through each digit in the list\n    for i in range(length):\n        \n        # Calculate the number of possible numbers that can be formed with the given digit\n        num_forms = (length - i - 1) * arr[i]\n        \n        # Check if the number of possible forms is greater than the current maximum number\n        if num_forms > max_num:\n            max_num = num_forms\n    \n    # Return the maximum number of possible forms\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as inputs and returns True if they have opposite signs, and False otherwise.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: #if both x and y are negative\n        return True\n    elif x > 0 and y > 0: #if both x and y are positive\n        return True\n    elif x == y: #if both x and y are equal\n        return False\n    elif x < 0 and y > 0: #if x is negative and y is positive\n        return True\n    elif x > 0 and y < 0: #if x is positive and y is negative\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0: \n        return True\n    elif x>0 and y>0: \n        return True\n    elif x==0 and y==0: \n        return False\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x < 0)!= (y < 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # If both the numbers have the same sign, then the function will return True\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    # If both the numbers have opposite signs, then the function will return False\n    elif x > 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return False\n    else:\n        print(\"Both the numbers have same sign or are zero.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both positive\"\n    elif x < 0 and y < 0:\n        return \"Both negative\"\n    else:\n        return \"One positive, one negative\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    limit = int(n**0.5)\n    for i in range(1, limit+1):\n        j = 1\n        while j < i:\n            if (i**2 - 10*(j-1)**2) % 8 == 0:\n                return True\n            j += 1\n    return False\n\nn = int(input(\"Enter a number to check if it is an octagonal number: \"))\nif is_octagonal(n):\n    print(n, \"is an octagonal number.\")\nelse:\n    print(n, \"is not an octagonal number.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    a = 1\n    b = 8\n    for i in range(2, n+1):\n        c = (a**2 + b**2)**0.5\n        a = int(c)\n        b = a + 8\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case for n=0\n    if n == 0:\n        return 0\n    \n    # initialize variables\n    num = 1\n    prev = 1\n    \n    # loop through n times and calculate the octagonal number\n    for i in range(1, n+1):\n        oct = num**2 + prev**2\n        oct = int(oct/2)\n        print(oct)\n        prev = num\n        num = oct\n        \n    return oct"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if (i*i + 1) % 12 == 0:\n            return i*i + 1\n\ndef nth_octagonal(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_octagonal(n-1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, else False.\n\n    An octagonal number is a positive integer n such that the sum of the cubes of its digits is equal to n.\n\n    For example, 153 is an octagonal number because 1^3 + 5^3 + 3^3 = 153.\n\n    1^3 + 2^3 + 3^3 = 1 + 8 + 27 = 42\n    42 is divisible by 8, so it's not an octagonal number.\n\n    2^3 + 3^3 + 4^3 = 8 + 27 + 64 = 360\n    360 is not divisible by 8, so it's an octagonal number.\n    '''\n    # convert n to a string\n    n_str = str(n)\n    # initialize sum of cubes of digits to 0\n    sum_of_cubes = 0\n    # iterate over each digit in the string and add its cube to the sum_of_cubes variable\n    for digit in n_str:\n        sum_of_cubes += int(digit) ** 3\n    # check if sum_of_cubes is equal to n\n    if sum_of_cubes == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        if i*i == n:\n            octagonal_numbers.append(i*i*i)\n    return octagonal_numbers"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n ** 2) - 3"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False \n        return True \n\n    octagonal_numbers = []\n    for i in range(1, n+1): \n        if is_prime(i) and is_prime(8*i-1): \n            octagonal_numbers.append(8*i-1) \n\n    if octagonal_numbers: \n        return octagonal_numbers[0] \n    else: \n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    octagonal_numbers = []\n    for i in range(1, 101):\n        octagonal_numbers.append(i * i * i * i)\n    \n    if n >= len(octagonal_numbers):\n        return \"Invalid input. Please enter a number less than 101.\"\n    else:\n        return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_square(num):\n        \"\"\"\n        Helper function to check if a given number is a square.\n        \"\"\"\n        return int(num**0.5)**2 == num\n\n    def is_octagonal_num(num):\n        \"\"\"\n        Helper function to check if a given number is an octagonal number.\n        \"\"\"\n        return is_square(num*2)\n\n    # Check if n is valid\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the nth octagonal number\n    oct_num = n * (n+1) * (2*n+1)\n\n    # Check if the nth octagonal number is an octagonal number\n    if is_octagonal_num(oct_num):\n        return oct_num\n    else:\n        return is_octagonal(n+1)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if len(str(sum([int(d) for d in s[i:j]])) == len(str(len(s[i:j])))):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        digit_sum[sum(map(int, s[i:]))] += 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if i!= j:\n                count += digit_sum[sum(map(int, s[i:j]))]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring if digit.isdigit()]\n            sum_digits = sum(digits)\n            if sum_digits == len(digits):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings for each length\n    count = defaultdict(int)\n\n    # Iterate through the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n\n            # Extract the substring\n            substring = s[i:j+1]\n\n            # Check if the substring has digits only\n            if substring.isdigit():\n\n                # Calculate the sum of digits\n                sum_of_digits = sum(int(digit) for digit in substring)\n\n                # If the sum is equal to the length of the substring, increment the count\n                if sum_of_digits == len(substring):\n                    count[len(substring)] += 1\n\n    # Return the count of substrings for each length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n\n    count = 0\n    for i in range(len(s)):\n        substring = s[i:i+len(str(len(s)-i))]\n        if sum(int(d) for d in substring) == len(substring):\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of substrings\n    substring_count = defaultdict(int)\n    \n    # loop through all possible substrings of length 1 to n\n    for i in range(len(s)):\n        # if the substring has a sum of digits equal to its length, increment its count in the dictionary\n        substring_count[sum(int(d) for d in s[i])] += 1\n    \n    # return the sum of all counts\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings\n    count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Initialize two pointers - left and right\n        left = i\n        right = i\n\n        # Initialize a temporary variable to store the sum of digits\n        digit_sum = 0\n\n        # Loop through the string until the right pointer is greater than or equal to the length of the string\n        while right < len(s):\n            # If the current character is a digit, add it to the temporary variable\n            if s[right].isdigit():\n                digit_sum += int(s[right])\n\n            # Increment the right pointer\n            right += 1\n\n            # Check if the sum of digits equals the length of the substring\n            if digit_sum == right - left:\n                # Increment the count of substrings\n                count[digit_sum] += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0] * (10 ** 3) for _ in range(n)]\n    for i in range(n):\n        dp[i][s[i] - '0'] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = sum(dp[i][k] * dp[k + 1][j] for k in range(s[i] - '0', s[j] - '0'))\n    return sum(dp[0][j] for j in range(10 ** 3))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    \n    for i in range(n):\n        dp[i+1] = dp[i] + 1\n        for j in range(i+1, n+1):\n            if s[i:j].isdigit():\n                total_sum = sum(int(digit) for digit in s[i:j])\n                if total_sum == j-i:\n                    dp[j] += dp[i]\n                    \n    return dp[-1]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # initialize smallest number as the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list and compare each element with smallest\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list.\n    \n    Parameters:\n    xs (list): a list of numbers\n    \n    Returns:\n    int: the smallest number in the list\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference to be the first element\n    max_diff = test_list[1] - test_list[0]\n    \n    # Iterate through the list and calculate the difference between each consecutive pair\n    for i in range(1, len(test_list)-1):\n        curr_diff = test_list[i+1] - test_list[i]\n        \n        # Update the maximum difference if the current difference is greater than the maximum difference\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between available pairs.\n    \n    Input:\n        test_list: a list of tuples, each tuple containing two integers\n    \n    Output:\n        the maximum difference between available pairs in the given list of tuples\n    '''\n    # sort the list of tuples in ascending order\n    test_list.sort()\n    \n    # initialize the maximum difference to 0\n    max_diff = 0\n    \n    # loop through the sorted list and compare adjacent pairs\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Find the maximum difference between any two consecutive elements in the list\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[i][1] - test_list[j][1]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = sorted(set(test_list))\n    max_diff = 0\n    for i in range(len(pairs)-1):\n        for j in range(i+1, len(pairs)):\n            diff = abs(pairs[i] - pairs[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][0] - test_list[j][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a new list with tuples sorted by second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second value (i.e. the subject name)\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n\n    # print the sorted list\n    for item in sorted_list:\n        print(item)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list, result_list):\n        for item in data_list:\n            if type(item) == list:\n                flatten_list(item, result_list)\n            else:\n                result_list.append(item)\n        return result_list\n    \n    flattened_list = flatten_list(data_list, [])\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        flattened_list = [item for sublist in data_list for item in sublist]\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        '''\n        Helper function to flatten a list and return a new list.\n        '''\n        flattened_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flattened_lst.extend(flatten_list(item))\n            else:\n                flattened_lst.append(item)\n        return flattened_lst\n\n    flattened_list = flatten_list(data_list)\n    sum_of_flattened_list = sum(flattened_list)\n    return sum_of_flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        return [item for sublist in lst for item in flatten_list(sublist)]\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            result.append(lst)\n    result = []\n    flatten(data_list)\n    return sum(result)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        if not lst:\n            return []\n        elif isinstance(lst, list):\n            return flatten_list(lst[0]) + flatten_list(lst[1:])\n        else:\n            return [lst]\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError(\"Input must be a list\")\n    elif len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_and_sum(data_list, index=0):\n        if index == len(data_list):\n            return 0\n        else:\n            return data_list[index] + flatten_and_sum(data_list, index+1)\n\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n\n    Parameters:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers and returns the number of positive numbers in the list.\n    \"\"\"\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of integers as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # base cases\n    if n == 0 or n == 1:\n        return 1\n    # compute the number of ways to partition the set of Bell numbers\n    else:\n        return 2*bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def partition(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return partition(n-1) * (2*n-1)\n    \n    def count_partitions(n, k):\n        if k == 0:\n            return 1\n        elif n == 0:\n            return 0\n        elif n == k:\n            return 1\n        else:\n            return count_partitions(n-1, k) + count_partitions(n, k-1)\n    \n    return partition(n) // (2*count_partitions(n, n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Create a dictionary to store the results\n    memo = {}\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Recursive case\n    else:\n        if n in memo:\n            return memo[n]\n\n        if n < 0:\n            return 0\n\n        memo[n] = 0\n        for i in range(n + 1):\n            memo[n] += bell_number(i)\n\n        return memo[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            result = 0\n            for i in range(n+1):\n                if i == k or i == n-k+1:\n                    result += partition(n, k-1)\n            return result\n\n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(n-1):\n            count += bell_number(i) + bell_number(n-i-1)\n        return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    count = 0\n    bell_numbers = set()\n\n    # Generate Bell numbers up to n\n    for i in range(n+1):\n        bell_numbers.add(bell(i))\n\n    # Calculate number of ways to partition set\n    for i in range(1, n+1):\n        count += len(bell_numbers) // i\n\n    return count\n\ndef bell(n):\n    '''\n    Calculate the nth Bell number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return (1 + 10*int(str(n)[-1])) * bell(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # The number of ways to partition the set of Bell numbers is equal to n!\n    return n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n        n (int): the number of Bell numbers to partition.\n\n    Returns:\n        int: the number of ways to partition the set of Bell numbers.\n    \"\"\"\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    ways = 0\n    for i in range(1, n+1):\n        ways += bell_number(i)\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) // 3 + bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    elif A[0] > A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # check if the array is monotonic\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for all the array elements\n    for i in range(len(A) - 1):\n        # if the element is greater than the next element, then it is not monotonic\n        if A[i] > A[i+1]:\n            return False\n    \n    # if the loop is successful, then all the elements are either all increasing or all decreasing\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize two variables to keep track of the current and previous elements of the array\n    current = A[0]\n    prev = A[0]\n    \n    # Loop through the array and compare each element with the current and previous elements\n    for i in range(1, len(A)):\n        if A[i] < current:\n            # If the current element is less than the previous element, the array is not monotonic\n            return False\n        elif A[i] > current:\n            # If the current element is greater than the previous element, update the previous element to be the current element\n            prev = current\n            # Update the current element to be the next element in the array\n            current = A[i]\n        else:\n            # If the current element is equal to the previous element, the array is not monotonic\n            return False\n    \n    # If the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic (increasing or decreasing) and False otherwise.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic\n    and False otherwise. A number is considered as monotonic if it either increases or decreases \n    in each iteration of the array.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    for i in range(n-2, -1, -1):\n        if A[i] < A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if the array is monotonic (increasing or decreasing) and False otherwise.\n    A is a list of integers.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and checks whether it is monotonic or not.\n    The function returns True if the array is monotonic and False otherwise.\n    '''\n    n = len(A)\n    for i in range(1, n): \n        if A[i] > A[i-1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0: \n        return True\n    \n    # get the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n    \n    # check if the array contains only one element\n    if len(A) == 1: \n        return True\n    \n    # iterate through the array\n    for i in range(len(A)-1): \n        # check if the current element is less than the previous element\n        if A[i] > A[i+1]: \n            return False\n        # check if the current element is greater than the next element\n        elif A[i] < A[i+1]: \n            return False\n    \n    # if all elements are in the correct order, return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] not in l:\n        return is_sublist(l, s[1:])\n    else:\n        return is_sublist(l, s[1:]) or is_sublist([x for x in l if x!= s[0]] + [s[0]], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    elif l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    if len(s) > len(l):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(s):\n        if l[i] == s[j]:\n            j += 1\n            i += 1\n            if j == len(s):\n                return True\n        else:\n            i = i - j + 1\n            j = 0\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:  # base case\n        return True\n    if not l:  # check if list is empty\n        return False\n    if l[0] == s[0]:  # check if first elements of the lists match\n        if is_sublist(l[1:], s[1:]):  # call recursively with rest of list and sublist\n            return True\n        else:\n            return False\n    else:\n        return is_sublist(l[1:], s)  # call recursively with rest of list and sublist"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if s is a sublist of l\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        if is_sublist(l[1:], s):\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sublist in l:\n        if s in sublist:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple1 in Input:\n        if len(tuple1)!= len(set(tuple1)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    # define the number of swaps to make in each iteration\n    swaps = 0\n    # define the maximum number of iterations\n    max_iter = len(nums)\n    \n    # iterate until no swaps are made\n    while swaps!= 0 and max_iter > 0:\n        # initialize swaps to 0 for each iteration\n        swaps = 0\n        # iterate through the list, comparing adjacent elements\n        for i in range(len(nums)-1):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i+1]:\n                # swap the elements if they are not in the correct order\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # increment the number of swaps made in this iteration\n                swaps += 1\n        # decrement the maximum number of iterations\n        max_iter -= 1\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = n // gap\n        for i in range(gap, n):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j-gap] > temp:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = temp\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n        gap = int(gap / 1.3) + gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize variables\n    gap = len(nums)\n    swapped = True\n    start = 0\n    end = len(nums) - 1\n\n    # loop until the gap is zero\n    while gap!= 0:\n        # reset swapped variable\n        swapped = False\n\n        # loop through the list\n        for i in range(start, end):\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n        # update gap and start and end indices\n        if not swapped:\n            gap = 0\n        else:\n            gap = 1\n            start += 1\n            end -= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        gap = (gap // 1.3) + 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize parameters\n    gap = len(nums)\n    swapped = True\n\n    # perform comb sort\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap == 1:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        if not swapped:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize variables for index and swapped flag\n    i = 0\n    swapped = True\n\n    # loop until no more swaps are made\n    while swapped:\n\n        # initialize swaps to 0\n        swaps = 0\n\n        # loop through the list and compare adjacent elements\n        for j in range(len(nums) - 1):\n\n            # if adjacent elements are in the wrong order, swap them\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swaps += 1\n\n        # if no swaps were made, the list is sorted\n        if swaps == 0:\n            break\n\n        # increment the index counter\n        i += 1\n\n        # check if the index exceeds the length of the list\n        if i >= len(nums):\n            break\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    # initialize the gap and swapped values\n    gap = len(nums)\n    swapped = True\n\n    # while the gap is not equal to 1\n    while swapped:\n        # initialize the swapped values to False\n        swapped = False\n\n        # for each i in range(len(nums)-gap, 0, -gap)\n        for i in range(len(nums)-gap, 0, -gap):\n            # if the current element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                # set the swapped value to True\n                swapped = True\n\n        # decrease the gap by 1\n        gap = gap // 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    # Check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return False\n    \n    # Check if n can be written as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i*i + j*j == n:\n                return True\n            if (i*i + j*j) < n:\n                break\n        else:\n            continue\n        break\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while True:\n        if n - i*i == i*i:\n            return True\n        if i*i > n:\n            return False\n        i += 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    This function takes an integer n as input and returns True if it can be represented as the difference of two squares, False otherwise.\n    '''\n    if n == 0:\n        return False\n    if n < 0:\n        n = -n\n    square = n**2\n    for i in range(1, int(square**0.5)+1):\n        if square - i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate square of the number\n    square = n ** 2\n    # Calculate difference between square and itself\n    diff = (square - n) ** 2\n    # Check if the difference is a square\n    if diff == square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    # Function to check if a number can be represented as the difference of two squares or not\n    while n % 2 == 0:\n        n = n // 2\n    \n    if n == 1:\n        return True\n    \n    # Function to check if a number can be represented as the sum of two squares or not\n    while n % 4 == 0:\n        n = n // 4\n    \n    return n == 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    \n    first_square = n ** 2\n    second_square = first_square ** 2\n    \n    diff = n - first_square - second_square\n    if diff <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # loop through all possible pairs of squares\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(1, int(n**0.5) + 1):\n            # check if the difference between squares is equal to the given number\n            if i**2 + j**2 == n:\n                return True\n\n    # if no pair of squares produces the given number as the difference, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number can be represented as the difference of two squares\n    if int(n/2**0.5)**2 + int(n/2**0.5)**2 == n:\n        print(n, \"can be represented as the difference of two squares\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The number is negative.\"\n    for i in range(1, int(n**0.5)+1):\n        if i**2 == n:\n            for j in range(1, int(n**0.5)+1):\n                if j**2 == n-i**2:\n                    return \"The number can be represented as the difference of two squares.\"\n            return \"The number cannot be represented as the difference of two squares.\"\n    return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is less than 0\n    if n < 0:\n        return False\n    # check if the given number is equal to 0\n    elif n == 0:\n        return True\n    # check if the given number is greater than 0\n    else:\n        # check if the given number is a perfect square\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0 and n/i == i:\n                return False\n        # check if the given number can be represented as the difference of two squares\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                if n/i == i:\n                    return True\n                elif n/i!= i:\n                    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i]!= colors[i+1]:\n            return False\n    if patterns[0] in colors:\n        return False\n    if patterns[-1] in colors:\n        return False\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the count of different patterns to 0\n    count = 0\n    \n    # Initialize the position of the current pattern in the colors array to 0\n    current_position = 0\n    \n    # Iterate over the patterns array\n    for pattern in patterns:\n        # Check if the current pattern matches with the next color in the colors array\n        if colors[current_position] == pattern:\n            # Increment the current position\n            current_position += 1\n            \n            # If the current position reaches the end of the colors array, increment the count of different patterns\n            if current_position == len(colors):\n                count += 1\n            \n            # Reset the current position to 0 if the next color in the colors array is not the same as the current pattern\n            if current_position < len(colors) and colors[current_position]!= pattern:\n                current_position = 0\n        else:\n            # Reset the current position to 0 if the next color in the colors array is not the same as the current pattern\n            if current_position < len(colors) and colors[current_position]!= pattern:\n                current_position = 0\n    \n    # Return True if the count of different patterns is 0, otherwise return False\n    return count == 0"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i, pattern in enumerate(patterns):\n        if pattern!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the length of colors and patterns are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # check if all colors in colors are in patterns\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # check if all patterns in patterns are substrings of each other\n    for i in range(len(patterns) - 1):\n        if patterns[i] not in patterns[i+1:]:\n            return False\n\n    # if all the above conditions are true, then the input colors follow the sequence given by the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    # initialize variables\n    n = len(colors)\n    count = 0\n\n    # iterate through the patterns array\n    for pattern in patterns:\n        # initialize a list to store the count of each color in the pattern\n        color_count = [0] * n\n\n        # iterate through each color in the pattern\n        for i in range(n):\n            # if the current color matches the current color in the pattern, increment the count for that color\n            if colors[i] == pattern[i]:\n                color_count[i] += 1\n\n        # check if the count of each color in the pattern matches the given pattern count\n        if color_count == pattern:\n            count += 1\n\n    # check if all patterns match\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Sort the colors array\n    colors.sort()\n\n    # Check if each color is present in the patterns array\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists, one for the colors and another for the patterns, and returns True\n    if the colors follow the patterns in the same order.\n    '''\n    # Initialize variables for current color and pattern\n    curr_color = None\n    curr_pattern = None\n    \n    # Loop through the patterns and colors lists simultaneously\n    for i in range(len(colors)):\n        # If we've reached the end of one list, it must be the same as the next pattern\n        if i == len(colors) - 1:\n            if curr_color is not None and curr_pattern == patterns[i]:\n                return True\n            else:\n                return False\n        \n        # If the current color is None, set it to the current color in the colors list\n        if curr_color is None:\n            curr_color = colors[i]\n        \n        # If the current color is not None and the current pattern is the same as the current color, we have found a match\n        if curr_color == colors[i] and curr_pattern == patterns[i]:\n            curr_color = None\n            curr_pattern = None\n        else:\n            # If the current pattern is None or the current color is not the same as the current pattern, it must be in the wrong order\n            return False\n    \n    # If we've reached the end of the colors list without finding a match, it must be in the wrong order\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the count for each pattern\n    count = [0]*len(patterns)\n    \n    # Iterate through the colors\n    for color in colors:\n        # Find the index of the pattern that matches the current color\n        pattern_index = [i for i, p in enumerate(patterns) if p == color][0]\n        \n        # Increment the count for that pattern\n        count[pattern_index] += 1\n    \n    # Check if all patterns are used\n    return all(count[i] == patterns[i] for i in range(len(patterns)))"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Args:\n    colors: List of colors.\n    patterns: List of patterns.\n\n    Returns:\n    True if it follows the sequence given in the patterns array, otherwise False.\n    \"\"\"\n\n    pattern_index = 0\n    for color in colors:\n        if pattern_index < len(patterns) and patterns[pattern_index] == color:\n            pattern_index += 1\n        else:\n            return False\n\n    if pattern_index == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    result = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(tuple(sorted([x % K for x in test_list[i] + test_list[j]])))\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            res.append(tup)\n    return res"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                flag = False\n                break\n        if flag:\n            tuples_list.append(test_list[i])\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): An integer representing the divisor.\n\n    Returns:\n    list: A list of tuples that satisfy the given condition.\n    \"\"\"\n\n    # Initialize an empty list to store the tuples which meet the condition\n    result = []\n\n    # Loop through each tuple in the test_list\n    for t in test_list:\n        # Initialize a set to store the elements of the current tuple\n        set_t = set(t)\n\n        # Loop through each element in the set\n        for e in set_t:\n            # If the element is not divisible by K, remove it from the set\n            if e % K!= 0:\n                set_t.remove(e)\n\n        # If the set is empty, add the current tuple to the result list\n        if len(set_t) == 0:\n            result.append(t)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                tuples.append((test_list[i], test_list[j]))\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a number is divisible by 11 or not.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    # Check if the word length is odd or even\n    if len(s) % 2 == 0:\n        print(s, \"is an even length word.\")\n    else:\n        print(s, \"is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # iterate through each word\n    for word in words:\n\n        # check whether the length of the word is odd or not\n        if len(word) % 2 == 0:\n            print(f\"{word} has even length\")\n        else:\n            print(f\"{word} has odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n    \"\"\"\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    # Iterate over the words and check their lengths\n    for word in words:\n        if len(word) % 2!= 0:\n            # If the length of the word is odd, return True\n            return True\n    # If no odd-length word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize a counter to keep track of the number of odd-length words\n    count = 0\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n\n            # Increment the counter if the length is odd\n            count += 1\n\n    # Return the final count of odd-length words\n    return count"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into a list of words\n    for word in words:\n        if len(word)%2 == 1: # Check if the length of the word is odd\n            print(word, \"is an odd length word.\")\n        else:\n            print(word, \"is a even length word.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # Convert the string to lowercase\n    s = s.lower()\n    # Split the string into words\n    words = s.split()\n    # Loop through each word\n    for word in words:\n        # Get the length of the word\n        word_len = len(word)\n        # Check if the length of the word is odd or even\n        if word_len % 2 == 0:\n            # If the length is even, return False\n            return False\n        else:\n            # If the length is odd, return True\n            return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.replace(\".\", \"\") # removing any \".\" from the string\n    s = s.replace(\",\", \"\") # removing any \",\" from the string\n    s = s.replace(\"!\", \"\") # removing any \"!\" from the string\n    s = s.replace(\"?\", \"\") # removing any \"?\" from the string\n    s = s.replace(\";\", \"\") # removing any \";\" from the string\n    words = s.split() # splitting the string into words\n    count = 0\n    for word in words:\n        length = len(word)\n        if length % 2 == 1: # checking if the length of the word is odd or not\n            count += 1\n    if count == 0: # if no word has odd length\n        print(\"The string does not contain any odd-length words.\")\n    else:\n        print(count, \"word(s) have odd-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return 4*n*n - 6*n + 24"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(3*n-1)//2) + (n*(2*n+1)//2)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 6\n    c = 10\n    d = 15\n    return (a * b * c * d) // (n * (n - 1) * (n - 2) * (n - 3))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 6\n    c = 15\n    d = 20\n\n    t = 4 * a + 6 * b + 10 * c + 12 * d\n\n    if n == 1:\n        return t\n    else:\n        return tetrahedral_number(n - 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_sum = 0\n    for i in range(n):\n        tetrahedral_sum += 4 * i * (n-i)\n    return tetrahedral_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # Initialize the first term of the sequence\n    first = 0\n\n    # Loop through the sequence up to n\n    for i in range(1, n+1):\n        # Calculate the value of the i-th term\n        term = 4 * (first + 1) ** 2 - 6 * (first + 1)\n\n        # Add the value of the i-th term to the sequence\n        first += term\n\n    # Return the value of the nth term in the sequence\n    return first"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 10\n    else: \n        return 4 * n * (n - 1) + 6 * n - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1) * (n - 2) * (n - 3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 24\n    elif n == 3:\n        return 120\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-3) + tetrahedral_number(n-4) + tetrahedral_number(n-5)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 4\n    c = 1\n    d = 8\n    for i in range(n):\n        a, b, c, d = (b * 2 - a, c * 2 - b, d * 2 - c, a * 2 - d)\n    return a, b, c, d"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n\n    Args:\n        r (float): radius of the sphere.\n\n    Returns:\n        float: volume of the sphere.\n    '''\n\n    V = (4/3) * math.pi * (r ** 3)\n\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: volume of the sphere\n    \"\"\"\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n    return char_value % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(char) for char in strr)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    char_val = ascii_val % 26\n    char = chr(char_val + ord('A'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_ in strr:\n        char = (char + ord(char_)) % 26\n    return chr(char + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in range(len(strr)):\n        ascii_val = ord(strr[i])\n        result += ascii_val\n    return result % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr(char % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    ascii_val = sum([ord(char) for char in strr])\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = sum(ord(ch) for ch in strr) % 26\n    char = chr(ascii_val+97)\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 3, 0] # starting sequence\n    for i in range(n-2):\n        sequence = [2*sequence[i] + sequence[i+1], 2*sequence[i] + sequence[i+1] - sequence[i], 2*sequence[i] - sequence[i] - sequence[i+1]]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1 or i == n:\n            print(i)\n        else:\n            print(i, end='')\n        i += 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(3 * sequence[i-1] + 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1, 1]\n    for i in range(2, n):\n        temp = []\n        for j in range(2):\n            if j == 0:\n                temp.append(a[0] + a[1])\n            elif j == 1:\n                temp.append(a[0] - a[1])\n        a = temp\n    return a[1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append((2*sequence[i-1])%10 + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence to the first three values of the newman conway sequence\n    sequence = [1, 1, 1]\n    # loop through the sequence to get to the nth value\n    for i in range(n-3):\n        # get the next value in the sequence by summing the last three values and adding one\n        sequence.append(sequence[-1] + sequence[-2] + sequence[-3] + 1)\n    # return the nth value in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] * 3)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # calculate the surface area of a sphere\n    surface_area = (4/3) * math.pi * r ** 2\n\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return (4*math.pi*r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula:\n    # surface area = (4/3) pi r^2\n    surface_area = (4/3) * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n\nprint(surfacearea_sphere(5))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    The centered hexagonal number is the sum of the first n centered odd squares.\n    '''\n    \n    # Initialize variables\n    centered_odd_squares = 0\n    odd_square_count = 1\n    centered_hexagonal_number = 0\n    \n    # Check if n is odd\n    if n % 2 == 1:\n        centered_odd_squares = 1\n        odd_square_count = 1\n    \n    # Calculate centered odd squares\n    while odd_square_count <= n:\n        centered_odd_squares += odd_square_count ** 2\n        odd_square_count += 1\n    \n    # Add centered odd squares to centered hexagonal number\n    centered_hexagonal_number += centered_odd_squares\n    \n    # Return centered hexagonal number\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the hexagonal number variable\n    hexagonal_number = 0\n\n    # Find the number of rows needed for n centered hexagonal numbers\n    row_count = int((n - 1) / 2) + 1\n\n    # Initialize the first row of centered hexagonal numbers\n    centered_hexagonal_row = [1] * row_count\n\n    # Initialize the second row of centered hexagonal numbers\n    centered_hexagonal_row[0] = 2\n\n    # Iterate through the remaining rows\n    for i in range(1, row_count - 1):\n        # Calculate the next row of centered hexagonal numbers\n        centered_hexagonal_row[i + 1] = 6 * centered_hexagonal_row[i - 1] + 1\n\n    # Return the nth centered hexagonal number\n    return centered_hexagonal_row[n - 1]\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the formula for centered hexagonal number\n    formula = (6 * n * (n - 1)) / (5 * (n ** 2 - n + 1))\n\n    return formula"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagon_numbers = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655, "
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    num = 0\n    center = 1\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd or even\n        if i % 2 == 0:\n            # If odd, add it to the centered hexagonal number\n            num += center\n        else:\n            # If even, subtract it from the centered hexagonal number\n            num -= center\n        # Update the center\n        center += 2\n    # Return the centered hexagonal number\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 2 * centered_hexagonal_number(n - 1) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first three centered hexagonal numbers\n    centered_hexagonal = [1, 8, 30]\n\n    # Iterate over the remaining centered hexagonal numbers\n    for i in range(2, n+1):\n        # Calculate the sum of the previous three centered hexagonal numbers\n        sum_of_previous_three = centered_hexagonal[i-3] + centered_hexagonal[i-2] + centered_hexagonal[i-1]\n\n        # Add the sum to the current centered hexagonal number\n        centered_hexagonal.append(sum_of_previous_three)\n\n    return centered_hexagonal[n]\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (centered_hexagonal_number(n-1) - centered_hexagonal_number(n-2)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # First centered hexagonal number\n    c1 = 1\n    # Second centered hexagonal number\n    c2 = 4\n    # Loop to find nth centered hexagonal number\n    for i in range(n):\n        c = (c1 + c2) // 2\n        c1 = c2\n        c2 = c\n        if i == n - 1:\n            print(c)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) - centered_hexagonal_number(n-3)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merging the two first dictionaries\n    merged_dict1 = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict1[key] = value\n    \n    # Merging the third dictionary into the merged dictionary\n    for key, value in dict3.items():\n        merged_dict1[key] = value\n    \n    # Return the merged dictionary\n    return merged_dict1"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged result\n    merged_dict = {}\n    # Loop through each dictionary and add its key-value pairs to the merged dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1: A dictionary object\n    dict2: A dictionary object\n    dict3: A dictionary object\n\n    Returns:\n    A single dictionary containing all the key-value pairs from the input dictionaries.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged data\n    merged_data = {}\n    \n    # Iterate through each key in the first dictionary\n    for key in dict1:\n        # If the key already exists in the merged dictionary, add the values from the three dictionaries\n        if key in merged_data:\n            merged_data[key] = [dict1[key], dict2[key], dict3[key]]\n        # If the key does not already exist in the merged dictionary, add the value from the first dictionary\n        else:\n            merged_data[key] = dict1[key]\n    \n    # Iterate through each key in the second dictionary\n    for key in dict2:\n        # If the key already exists in the merged dictionary, add the values from the three dictionaries\n        if key in merged_data:\n            merged_data[key] = [dict1[key], dict2[key], dict3[key]]\n        # If the key does not already exist in the merged dictionary, add the value from the second dictionary\n        else:\n            merged_data[key] = dict2[key]\n    \n    # Iterate through each key in the third dictionary\n    for key in dict3:\n        # If the key already exists in the merged dictionary, add the values from the three dictionaries\n        if key in merged_data:\n            merged_data[key] = [dict1[key], dict2[key], dict3[key]]\n        # If the key does not already exist in the merged dictionary, add the value from the third dictionary\n        else:\n            merged_data[key] = dict3[key]\n    \n    return merged_data"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to hold the merged dictionaries\n    merged_dict = {}\n    \n    # iterate through the first dictionary and add its keys and values to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    # iterate through the second dictionary and add its keys and values to the merged dictionary\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    # iterate through the third dictionary and add its keys and values to the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n        \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # initialize an empty dictionary to hold the merged dictionary\n    merged_dict = {}\n    \n    # iterate through the three dictionaries and add their key-value pairs to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store merged values\n    merged_dict = {}\n    # Loop through each key in the dictionaries\n    for key in dict1.keys():\n        # Check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # If it is, append the value from the second dictionary to the existing value in the merged dictionary\n            merged_dict[key].extend(dict2[key])\n        else:\n            # If it's not, append the value from the second dictionary to a new list and add the list to the merged dictionary\n            merged_list = list(dict2[key])\n            merged_dict[key] = merged_list\n    # Loop through each key in the third dictionary\n    for key in dict3.keys():\n        # Check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # If it is, append the value from the third dictionary to the existing value in the merged dictionary\n            merged_dict[key].extend(dict3[key])\n        else:\n            # If it's not, append the value from the third dictionary to a new list and add the list to the merged dictionary\n            merged_list = list(dict3[key])\n            merged_dict[key] = merged_list\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.defaultdict(list)\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if item in freq:\n            freq[item] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq[item] = 1\n            \n    # Return the dictionary containing the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary of the frequency of each element in the list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n    Args:\n    lst (list): a list of integers\n\n    Returns:\n    dict: a dictionary where the keys are the unique elements in the list and the values are the frequency of each element\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    ans = None\n    for num in range(1, N+1):\n        diff_current = abs(num - N)\n        if diff_current < diff:\n            diff = diff_current\n            ans = num\n    return ans"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while True:\n        num -= 1\n        if num < N:\n            return num\n        else:\n            num += 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N\n    closest_num = N\n    \n    for i in range(2, N):\n        if i % 2 == 0:\n            closest_num = min(closest_num, smallest_num + 2 * (i // 2))\n        else:\n            closest_num = min(closest_num, smallest_num + i // 2)\n            \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('-inf')\n    \n    for num in range(1, N+1):\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num < closest:\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Convert n to a string\n    n = str(N)\n\n    # Initialize the minimum distance to a large value\n    min_dist = float('inf')\n\n    # Initialize the closest smaller number to n\n    closest = n\n\n    # Iterate through the digits of n\n    for digit in n:\n\n        # Convert the digit to an integer and add 1\n        digit_int = int(digit) + 1\n\n        # Convert the integer digit to a string and add it to n\n        new_n = n[:digit_int] + str(digit_int) + n[digit_int+1:]\n\n        # Calculate the distance between n and new_n\n        dist = abs(int(n)-int(new_n))\n\n        # Update the minimum distance if necessary\n        if dist < min_dist:\n            min_dist = dist\n            closest = new_n\n\n    # Return the closest smaller number to n\n    return int(closest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n    else:\n        closest = N\n        for i in range(1, 10):\n            if abs(N - i) < abs(N - closest):\n                closest = i\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    diff = abs(min_num - N)\n    for i in range(N, -1, -1):\n        if i % 2 == 1:\n            if abs(i - N) < diff:\n                min_num = i\n                diff = abs(min_num - N)\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(N))\n    closest = float('inf')\n    smallest = float('inf')\n    \n    for num in nums:\n        if num < closest:\n            closest = num\n            \n        if num < smallest:\n            smallest = num\n            \n    diff = abs(smallest - closest)\n    \n    if diff < 2:\n        return closest\n    elif diff < 3:\n        return smallest\n    else:\n        return (smallest + closest) // 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    closest = n\n\n    for i in range(n, 0, -1):\n        if abs(i - n) < abs(closest - n):\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    diff = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if abs(i-j) < abs(diff):\n                diff = i-j\n                min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # create a dictionary to store the lengths of each word in the list\n    lengths = {}\n    \n    # loop through each word in the list\n    for word in list1:\n        # if the word is already in the dictionary, increment its length by 1\n        if word in lengths:\n            lengths[word] += 1\n        # if the word is not in the dictionary, add it and set its length to 1\n        else:\n            lengths[word] = 1\n    \n    # find the length of the longest word in the list\n    max_length = 0\n    for length in lengths.values():\n        if length > max_length:\n            max_length = length\n    \n    # return the length of the longest word\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of sentences.\n    \"\"\"\n    # Initialize variable to store length of longest word\n    max_len = 0\n    # Loop through each sentence in the list\n    for sentence in list1:\n        # Split the sentence into words\n        words = sentence.split()\n        # Loop through each word in the sentence\n        for word in words:\n            # If the length of the current word is greater than the maximum length, update the maximum length\n            if len(word) > max_len:\n                max_len = len(word)\n    # Return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"The substring {sub_str} is present in the string {str1}\")\n    else:\n        print(f\"The substring {sub_str} is not present in the string {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = str1.split()\n    for i in range(len(lst)):\n        if sub_str.lower() in lst[i].lower():\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes two arguments: a list of strings (str_list) and a string (sub_str).\n    It returns a boolean value indicating whether the string (sub_str) is present as a substring in any of the strings in str_list.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(sub_str, list):\n        for item in str1:\n            if item in sub_str:\n                return True\n        return False\n    else:\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    This function takes in a list of string values and a substring as input, and returns a boolean value indicating if the substring is present in the list of values.\n    \"\"\"\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is an even number.\")\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The given number is even and is not undulating.\"\n    else:\n        return \"The given number is odd and is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    An undulating number is a number that can be written as the sum of two or more odd numbers.\n    For example: 15 is undulating because 1 + 3 = 4 and 3 + 5 = 8.\n    '''\n    # Initialize variables for storing the sum of odd numbers \n    sum_odd = 0\n    # Initialize variables for storing the count of odd numbers in the number \n    count_odd = 0\n    # Loop through the number from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd and add it to the sum_odd variable \n        if i % 2 == 1:\n            sum_odd += i\n            # Increment the count_odd variable \n            count_odd += 1\n        # If the count_odd variable is equal to 2, the number is undulating and return True \n        if count_odd == 2:\n            return True\n    # If no undulating number is found, return False \n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is positive or negative.\n    if n < 0: \n        return False\n    else: \n        # Check if the number is divisible by 5.\n        if n % 5 == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Undulating\"\n    else:\n        return \"Not Undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even and undulating\")\n    else:\n        print(n, \"is odd and undulating\")"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2, 3)) # Output: 8"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function to extract the second element of each tuple\n    test_list = [itemgetter(1)(i) for i in test_list]\n\n    # Find the index of the smallest value in the list using the index of the first value as the key\n    min_index = min(range(len(test_list)), key=lambda i: test_list[i])\n\n    # Return the index of the tuple with the smallest second value\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i, tup in enumerate(test_list):\n        if tup[1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using lambda function to sort the list based on second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list in ascending order based on the second value of the tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = None\n    \n    for sublist in lst:\n        if min_len is None or len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        length = len(i)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the minimum length to be the length of the first element in the list\n    min_length = len(lst[0])\n    # iterate through the list of lists and find the minimum length\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None:\n            min_length = len(sublist)\n        elif len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize minimum length as the first list's length\n    min_length = len(lst[0])\n\n    # loop through each list in the list of lists\n    for i in range(len(lst)):\n        # check if the current list's length is smaller than the minimum length\n        if len(lst[i]) < min_length:\n            # update the minimum length to the current list's length\n            min_length = len(lst[i])\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf') # set initial value to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function calculates the number of divisors of a given integer n.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    A divisor of an integer is an integer that divides evenly into it without leaving a remainder.\n    \"\"\"\n    # initialize the count variable to zero\n    count = 0\n    # check if n is less than or equal to 1, if it is, return 1 (n has 1 divisor)\n    if n <= 1:\n        return 1\n    # iterate through the numbers from 2 to n-1\n    for i in range(2, n):\n        # check if n is divisible by i\n        if n % i == 0:\n            # if n is divisible by i, increment the count variable\n            count += 1\n    # return the count variable\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    Flatten a list of lists into a single list.\n    '''\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst\n\n\ndef frequency_lists(lst):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list\n    flattened_lst = flatten_list(lst)\n\n    # Initialize an empty dictionary to store the frequency\n    freq_dict = {}\n\n    # Loop through the flattened list and update the frequency dictionary\n    for item in flattened_lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        # If the item is a list, recursively call the function on that list and update the frequency count in the dictionary\n        if isinstance(item, list):\n            item_freq_dict = frequency_lists(item)\n            for key, value in item_freq_dict.items():\n                freq_dict[key] = value\n        # If the item is not a list, update the frequency count in the dictionary\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    # Flatten the list\n    flat_list = flatten(list1)\n\n    # Count frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_sum = 1\n    for num in numbers:\n        total_sum *= num\n    result = total_sum / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # Divide the result with the length of the list\n    result = result / len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and multiplies them together, then divides by the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return decimal_to_binary(n//2) + \"0\"\n    else:\n        return decimal_to_binary(n//2) + \"1\""
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = decimal_to_binary(n//2)\n        binary_str = str(binary)\n        return binary_str + str(n%2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary representation\n    binary = ''\n    # loop through each digit of the decimal number\n    while n > 0:\n        # calculate the remainder of the division of n by 2\n        remainder = n % 2\n        # add the remainder to the beginning of the binary string\n        binary = str(remainder) + binary\n        # remove the last digit from n\n        n //= 2\n    # return the binary string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # check if the number is 0 or less\n    if n <= 0:\n        return \"0\"\n\n    # initialize the result variable and the current digit\n    result = \"\"\n    digit = n % 2\n\n    # add the current digit to the result string\n    result += str(digit)\n\n    # divide the number by 2 and continue the process until the number is 0 or less\n    n = n // 2\n    while n > 0:\n        digit = n % 2\n        result = str(digit) + result\n        n = n // 2\n\n    # return the result string in reverse order\n    return result[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty list to hold the binary equivalent\n    binary = []\n    # loop through each digit of the decimal number\n    while n > 0:\n        # find the remainder when n is divided by 2\n        remainder = n % 2\n        # append the remainder to the binary list\n        binary.append(remainder)\n        # divide n by 2 to remove the last digit\n        n = n // 2\n    # convert the binary list to a string and return it\n    return ''.join(str(x) for x in binary)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string variable to store the binary representation \n    binary = \"\"\n    # Loop until the decimal number becomes zero \n    while n > 0: \n        # Extract the last digit of the decimal number \n        digit = n % 2 \n        # Convert the digit to a character and append it to the binary string \n        binary = str(digit) + binary \n        # Divide the decimal number by 2 to remove the last digit \n        n = n // 2 \n    # Remove leading zeros from the binary string and return it \n    return binary.lstrip(\"0\") "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string.\n    '''\n    # initialize an empty string to store the binary representation\n    binary = \"\"\n\n    # loop through each digit in reverse order\n    while n > 0:\n        # extract the last digit of the number\n        digit = n % 2\n\n        # add the last digit to the beginning of the binary string\n        binary = str(digit) + binary\n\n        # remove the last digit from the number\n        n = n // 2\n\n    # return the binary representation\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num + 1\n    \n    for i in range(num + 1, int(num ** 0.5) + 1):\n        if is_palindrome(i) and is_palindrome(num - i):\n            return i\n    \n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while True:\n        is_palindrome_num = is_palindrome(num)\n        next_num = num + 1\n        if is_palindrome_num and is_palindrome(next_num):\n            return next_num\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Get the length of the input number\n    n = len(str(num))\n\n    # Create a list of digits in the input number\n    digits = [int(digit) for digit in str(num)]\n\n    # Create a list of digits in the next smallest palindrome\n    next_digits = [10 - digit for digit in digits]\n\n    # Convert the list of digits in the next smallest palindrome into a string\n    next_str = ''.join(str(digit) for digit in next_digits)\n\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Compare the input number to the next smallest palindrome\n    while num_str < next_str:\n        # Add 1 to the first digit of the input number\n        if digits[0] == 9:\n            digits[0] = 0\n            n += 1\n        else:\n            digits[0] += 1\n            break\n\n        # Convert the list of digits in the input number back into a string\n        num_str = ''.join(str(digit) for digit in digits)\n\n    # Convert the list of digits in the input number back into an integer\n    next_num = int(''.join(str(digit) for digit in digits))\n\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Checks if a given number is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_str = str(num)[::-1]\n    # Compare the original number with the reversed number\n    if num == int(reversed_str):\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Set the starting number to the next smaller palindrome greater than the given number\n    start = num + 1\n    \n    # Loop through the numbers until a palindrome is found\n    while not is_palindrome(start):\n        start += 1\n        \n    # Return the starting number\n    return start"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_valid(n):\n        return n > 10**9 and is_palindrome(n)\n\n    def has_next_palindrome(n):\n        for i in range(2, 10):\n            p = n * 10 + i\n            if is_palindrome(p) and is_valid(p):\n                return True\n        return False\n\n    def generate_next_palindrome(n):\n        for i in range(10, 0, -1):\n            p = n * 10 + i\n            if is_valid(p):\n                return p\n\n    while True:\n        n = num + 1\n        if has_next_palindrome(n):\n            return generate_next_palindrome(n)\n        else:\n            num += 1\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(f\"Next smallest palindrome of {num} is {result}.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        if str(num) == str(num)[::-1]:\n            return True\n        else:\n            return False\n\n    if is_palindrome(num):\n        return num\n\n    for i in range(num, 10**9, -1):\n        if is_palindrome(i):\n            return i\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(\"The next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    smallest_palindrome = 0\n    is_palindrome = False\n\n    # Iterate through all possible palindromes\n    for i in range(1, 10):\n        # Calculate palindrome\n        palindrome = i * 10 + i\n\n        # Check if palindrome is smaller than specified number\n        if palindrome < num:\n            # If it is, update smallest palindrome and set is_palindrome to True\n            if palindrome < smallest_palindrome:\n                smallest_palindrome = palindrome\n                is_palindrome = True\n\n    # If no palindrome was found, return None\n    if not is_palindrome:\n        return None\n\n    # Otherwise, return the smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize variables\n    is_palindrome = True\n    curr_num = num\n    smallest_num = num\n    \n    # Convert num to a string and reverse it\n    num_str = str(num)\n    num_str_reverse = num_str[::-1]\n    \n    # Check if the reverse is a palindrome\n    while is_palindrome and num_str_reverse!= num_str:\n        num_str_reverse = str(int(num_str_reverse) + 1)\n        is_palindrome = num_str_reverse == num_str_reverse[::-1]\n    \n    # If the reverse is not a palindrome, find the next smallest palindrome\n    if not is_palindrome:\n        while curr_num >= smallest_num:\n            curr_num -= 1\n            if str(curr_num) == str(curr_num)[::-1]:\n                if curr_num < smallest_num:\n                    smallest_num = curr_num\n    \n    return smallest_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def smallest_prime_palindrome(n):\n        i = 2\n        while i * i <= n:\n            if is_prime(i) and is_palindrome(i):\n                return i\n            i += 1\n        return None\n\n    def next_smallest(n):\n        if n <= 10:\n            return n + 1\n        else:\n            smallest_prime = smallest_prime_palindrome(n)\n            if smallest_prime is None:\n                return None\n            else:\n                return smallest_prime\n\n    next_palindrome = next_smallest(num)\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Base case\n    if num == 1:\n        return 2\n\n    # Check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n\n    # Check for positive and negative numbers\n    if num < 0:\n        num = -num\n        smallest_palindrome = 0\n    else:\n        smallest_palindrome = sys.maxsize\n\n    # Iterate through all possible next smallest palindromes\n    for i in range(num, smallest_palindrome, -1):\n        # Convert the current number to a string\n        current_num_str = str(i)\n\n        # Check if the number is already a palindrome\n        if current_num_str == current_num_str[::-1]:\n            # Update the smallest palindrome if it's smaller\n            if i < smallest_palindrome:\n                smallest_palindrome = i\n\n    # Check if the smallest palindrome is negative\n    if smallest_palindrome < 0:\n        smallest_palindrome = -smallest_palindrome\n\n    return smallest_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_half = kth_element(arr[:len(arr)//2], k)\n        right_half = kth_element(arr[len(arr)//2:], k - len(arr)//2)\n        if left_half is None:\n            return right_half\n        elif right_half is None:\n            return left_half\n        else:\n            return arr[len(arr)//2-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    left = 1\n    right = len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        print(\"Error: K is greater than the length of the array.\")\n        return\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # convert input array to a set to remove duplicates and maintain order\n    arr = sorted(set(arr))\n    # calculate the length of the array and set the starting index\n    n = len(arr)\n    start = 1\n    # check if the kth element is less than or equal to the length of the array\n    if k <= n:\n        # calculate the index of the kth element and return the element\n        return arr[k-1]\n    # if k is greater than the length of the array, repeat the process for the last k elements\n    while k > n:\n        # calculate the index of the next k elements and add them to the array\n        arr += arr[start-1:n]\n        # update the length of the array and the starting index\n        n += len(arr)\n        start += 1\n    # calculate the index of the kth element and return the element\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"Invalid input: k is greater than the length of the array\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, len(arr)\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid == k:\n                return arr[mid-1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += '_' + char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if i == 0 else x.lower() for i, x in enumerate(word.split('_')))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first word to lowercase and append it to the camel case string\n    camel_case = words[0].lower()\n\n    # Convert the rest of the words to camel case and append them to the camel case string\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += \"_\" + letter.lower()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the first letter to uppercase\n    first_letter = word[0].upper()\n    # Convert the rest of the word to lowercase\n    rest_of_word = word[1:].lower()\n    # Combine the first letter and rest of the word\n    camel_case_word = first_letter + rest_of_word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = ''\n    words = word.split('_')\n    for i in range(len(words)):\n        if i > 0:\n            camel_case += words[i].capitalize()\n        else:\n            camel_case += words[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case_word += word[i].lower() + '_'\n        else:\n            camel_case_word += word[i]\n    return camel_case_word[:-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using snake_case\n    snake_words = word.split('_')\n\n    # Convert the first word to camelCase\n    camel_word = snake_words[0].lower()\n\n    # Convert the remaining words to camelCase\n    for i in range(1, len(snake_words)):\n        camel_word += snake_words[i].lower()\n\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    word = word.replace('_','')\n    words = word.split(' ')\n    camel_word = words[0].lower()\n    for word in words[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    # Convert all words to lowercase\n    word = word.lower()\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first word\n    words[0] = words[0][0].upper() + words[0][1:]\n    # Join the words back into a string\n    camel_case = '_'.join(words)\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n: int\n        The number of rows in the matrix.\n    m: int\n        The number of columns in the matrix.\n\n    Returns:\n    int\n        The Eulerian number a(n, m).\n    \"\"\"\n    \n    # Create a matrix of zeros with dimensions n x m\n    matrix = [[0 for j in range(m)] for i in range(n)]\n    \n    # Fill the matrix with random integers between 1 and 10\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = random.randint(1, 10)\n    \n    # Print the original matrix\n    print(\"Original Matrix:\")\n    for i in range(n):\n        for j in range(m):\n            print(matrix[i][j], end=\"\\t\")\n        print()\n    \n    # Create a new matrix that is a transpose of the original matrix\n    transpose_matrix = [[matrix[j][i] for j in range(m)] for i in range(n)]\n    \n    # Print the transpose matrix\n    print(\"Transpose Matrix:\")\n    for i in range(n):\n        for j in range(m):\n            print(transpose_matrix[i][j], end=\"\\t\")\n        print()\n    \n    # Create a new matrix that is the determinant of the original matrix\n    det_matrix = [[matrix[j][i] * transpose_matrix[j][i] for j in range(m)] for i in range(n)]\n    \n    # Print the determinant matrix\n    print(\"Determinant Matrix:\")\n    for i in range(n):\n        for j in range(m):\n            print(det_matrix[i][j], end=\"\\t\")\n        print()\n    \n    # Find the determinant of the determinant matrix\n    det_det_matrix = [[matrix[i][j] * det_matrix[i][j] for j in range(m)] for i in range(n)]\n    det = det_det_matrix[0][0]\n    \n    # Print the determinant of the determinant matrix\n    print(\"Determinant of Determinant Matrix:\", det)\n    \n    # Find the Eulerian number a(n, m)\n    a_n_m = 1/det\n    \n    # Print the Eulerian number\n    print(\"Eulerian Number a(n, m):\", a_n_m)\n    \n    # Return the Eulerian number a(n, m)\n    return a_n_m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function returns the Eulerian number a(n, m). The Eulerian number a(n, m) is defined as the number of (k, j) such that 1 <= k <= n and 1 <= j <= m and k!= j.\n    \n    Note: The Eulerian numbers are calculated using the formulae:\n    a(n, m) = 2*n*m*(n-1)/6 + n*(n-1)*(2*m-1)/6 - (n-1)*(n-2)*(2*m-1)/6\n    '''\n    numerator = 2 * n * m * (n - 1)\n    denominator = 6\n    a = numerator / denominator\n    \n    numerator = n * (n - 1) * (2 * m - 1)\n    denominator = 6\n    b = numerator / denominator\n    \n    numerator = (n - 1) * (n - 2) * (2 * m - 1)\n    denominator = 6\n    c = numerator / denominator\n    \n    return a + b + c"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a(n, m)\n    a = 1\n    \n    # Loop through all possible values of m\n    for i in range(1, n+1):\n        # Multiply a(n, m) by m^i\n        a *= m\n        # Divide a(n, m) by m^(n-i)\n        a /= (n-i)\n    \n    # Return the final value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Base case: n = 0, m = 1 or n = 1, m = 0\n    if n == 0 and m == 1 or n == 1 and m == 0:\n        return 1\n\n    # Base case: n >= 2 and m >= 2\n    if n >= 2 and m >= 2:\n        # Calculate the remaining values of n and m\n        a_nm1_1 = eulerian_num(n-1, m)\n        a_nm1_2 = eulerian_num(n-1, m-1)\n        a_nm1_3 = eulerian_num(n-2, m)\n        a_nm1_4 = eulerian_num(n-2, m-1)\n\n        # Calculate the remaining values of n and m + 1\n        a_nm1_2_plus_1 = eulerian_num(n, m) + a_nm1_1\n\n        # Return the maximum value of n and m\n        return max(a_nm1_2, a_nm1_2_plus_1, a_nm1_3, a_nm1_4)\n\n    # If we reached here, the input values are invalid\n    raise ValueError(\"Invalid input values: n >= 2 and m >= 2 required\")"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    if m == 0:\n        return n\n    else:\n        return (eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)) % n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a 2D array to store the values of the array\n    values = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Iterate through all possible pairs of points and update the values array\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == j:\n                values[i][j] = 1\n            else:\n                values[i][j] = values[i - 1][j - 1] + values[i - 1][j]\n\n    # Return the value of the last row and last column of the values array\n    return values[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sieve_of_eratosthenes(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    return primes\n\ndef eulerian_num(n, m):\n    if n < m:\n        n, m = m, n\n\n    primes = sieve_of_eratosthenes(n + m)\n    num = 0\n    for i in range(2, n + 1):\n        if primes[i]:\n            num += 1\n            if num > m:\n                return 0\n\n    return 1\n\nn = int(input(\"Enter the size of the matrix: \"))\nm = int(input(\"Enter the number of prime numbers that appear in the matrix: \"))\n\nresult = eulerian_num(n, m)\n\nif result:\n    print(\"Eulerian number a(n, m) =\", result)\nelse:\n    print(\"No Eulerian numbers exist in the matrix.\")"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the function value as 1\n    a = 1\n\n    # Loop through each row of the matrix\n    for i in range(n):\n\n        # Loop through each element in the row\n        for j in range(m):\n\n            # If the element is not marked as 1 and has a neighbor that is marked as 1,\n            # mark the element as 1 and increment the function value by 1\n            if matrix[i][j] == 0 and any(matrix[i][k] == 1 for k in range(m) if k!= j):\n                matrix[i][j] = 1\n                a += 1\n\n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(n):\n        if i**2 + m**2 == n**2:\n            return i\n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the matrix with zeros\n    A = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrix with values from the user\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            A[i][j] = int(input(f\"Enter a({i},{j}): \"))\n\n    # Initialize the matrix with zeros\n    B = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrix with values from the user\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            B[i][j] = int(input(f\"Enter b({i},{j}): \"))\n\n    # Find the transpose of B and store it in a new matrix C\n    C = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            C[j][i] = B[i][j]\n\n    # Calculate the determinant of C\n    detC = 1\n    for i in range(1, m+1):\n        detC *= C[1][i]\n\n    # Calculate the determinant of A and B\n    detAB = 1\n    for i in range(1, n+1):\n        detAB *= A[i][1]\n\n    # Calculate the determinant of the product of A and B\n    detABA = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            detABA *= A[i][j] * B[j][i]\n\n    # Calculate the Eulerian number\n    a = detABA // detC\n\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n\n    Parameters:\n    input_list (list of lists of strings): a list of lists of strings to be sorted\n\n    Returns:\n    A list of lists of strings, where each sublist is sorted in ascending order.\n    '''\n    # Initialize an empty list to hold the sorted sublists\n    sorted_sublists = []\n\n    # Loop over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()\n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sublist)\n\n    # Return the sorted_sublists list\n    return sorted_sublists"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count_true = 0\n    for item in lst:\n        if item:\n            count_true += 1\n    return count_true"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item is True:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # converting the list to a tuple\n    test_list_tup = tuple(test_list)\n    \n    # adding the two tuples\n    result_tup = test_tup + test_list_tup\n    \n    return result_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # using a for loop to add the list to the tuple\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Append the lists to the tuples\n    test_tup.extend(test_list)\n    \n    # Convert the tuples back to tuples\n    test_tup = tuple(test_tup)\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and tuples\n    final_list = test_list + test_tup\n    return final_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + test_tup\n    \n    # Convert the combined list to a tuple\n    combined_tup = tuple(combined_list)\n    \n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new empty list\n    new_list = []\n    # Iterate over each element in the test_list\n    for element in test_list:\n        # Append the element to the new_list\n        new_list.append(element)\n    # Iterate over each element in the test_tup\n    for element in test_tup:\n        # Append the element to the new_list\n        new_list.append(element)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + test_list\n    return new_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) <= heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n            \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapsort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create a list of all three lists\n    lists = [num1, num2, num3]\n    \n    # loop through the lists and merge them into a single sorted list\n    merged_list = []\n    while len(lists) > 0:\n        # get the first element from each list\n        first_list = lists[0]\n        second_list = lists[1] if len(lists) > 1 else []\n        third_list = lists[2] if len(lists) > 2 else []\n        \n        # merge the lists\n        merged = merge(first_list, second_list, third_list)\n        \n        # append the merged list to the final merged list\n        merged_list.append(merged)\n        \n        # remove the merged list from the original lists\n        del lists[0]\n        if len(lists) > 0:\n            del lists[0]\n    \n    # return the final merged list\n    return merged_list\n\ndef merge(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # initialize the merged list\n    merged_list = []\n    \n    # loop through the lists and merge them into the merged list\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            merged_list.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            merged_list.append(list2[j])\n            j += 1\n        else:\n            merged_list.append(list3[k])\n            k += 1\n    \n    # add any remaining elements from the lists to the merged list\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    merged_list += list3[k:]\n    \n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list to store the sorted elements\n    merged_list = []\n    \n    # Use heapq to add the elements from the three lists in ascending order\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    \n    heapq.heapify(num2)\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    \n    heapq.heapify(num3)\n    heapq.heappush(merged_list, heapq.heappop(num3))\n    heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Initialize an empty list to hold the merged sorted list\n    merged_list = []\n    # Create a list of lists to hold the three input lists\n    input_lists = [num1, num2, num3]\n    # Use heapify to convert each list to a heap data structure\n    for i in range(len(input_lists)):\n        heapq.heapify(input_lists[i])\n    # Loop until all three lists have been merged\n    while len(merged_list) < len(num1) + len(num2) + len(num3):\n        # Pop the smallest element from each list and append it to the merged list\n        merged_list.append(heapq.heappop(input_lists[0]))\n        merged_list.append(heapq.heappop(input_lists[1]))\n        merged_list.append(heapq.heappop(input_lists[2]))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    This function merges three sorted lists into a single sorted list.\n    '''\n\n    # create a min heap of lists\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    # create a new empty list to store the merged list\n    merged = []\n\n    # loop through the min heap until all three lists have been merged\n    while len(heap) > 0:\n        # pop the smallest element from the heap\n        current = heapq.heappop(heap)\n        # add it to the merged list\n        merged.append(current)\n\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the three lists\n    sorted_list = merge(num1, num2, num3)\n    # Reverse the sorted list\n    return sorted_list[::-1]\n\ndef merge(list1, list2, list3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists\n    combined_list = list1 + list2 + list3\n    # Create a min heap of combined_list\n    heap = []\n    for num in combined_list:\n        heapq.heappush(heap, num)\n    # Convert the heap to a list and return it\n    return [heapq.heappop(heap) for _ in range(len(combined_list))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one list\n    combined_list = num1 + num2 + num3\n\n    # Create a min heap of integers\n    min_heap = []\n\n    # Iterate through the combined list and add each integer to the heap\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n\n    # Create a new empty list to store the sorted integers\n    sorted_list = []\n\n    # Iterate through the min heap and add each integer to the sorted list\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Use a min heap to maintain the sorted order of the list\n    min_heap = []\n    \n    # Iterate through the combined list and add each element to the min heap\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n    \n    # Extract the sorted list from the min heap\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one\n    merged_list = num1 + num2 + num3\n    # Sort the merged list using heapify algorithm\n    heapq.heapify(merged_list)\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize the count to zero\n    count = 0\n\n    # Convert the input binary string to a list of bits\n    binary_list = [int(bit) for bit in s]\n\n    # Iterate over the binary string n times\n    for _ in range(n):\n        # Get the last bit of the list\n        last_bit = binary_list.pop(-1)\n\n        # Add 1 to the count if the last bit is odd\n        if last_bit % 2!= 0:\n            count += 1\n\n        # Add the last bit to the beginning of the list\n        binary_list.insert(0, last_bit)\n\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables to keep track of the odd numbers\n    odd = 0\n    # initialize variables to keep track of the length of the string\n    length = len(s)\n    # loop through the string n times\n    for i in range(n):\n        # if the current character is an odd number, increment the odd variable\n        if s[i] % 2 == 1:\n            odd += 1\n        # rotate the string by one position to the left\n        s = s[1:] + s[0]\n    # return the sum of odd numbers after rotating the string\n    return odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers present in the rotated binary string.\n    \"\"\"\n    # converting the binary string to a list of characters\n    s_list = list(s)\n    # rotating the binary string n number of times\n    for i in range(n):\n        temp = s_list[0]\n        for j in range(len(s_list)-1):\n            s_list[j] = s_list[j+1]\n        s_list[-1] = temp\n    # finding the number of odd numbers in the rotated binary string\n    count = 0\n    for i in s_list:\n        if i == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to list of digits\n    binary = [int(d) for d in s]\n    # Initialize count to zero\n    count = 0\n    # Loop n times\n    for i in range(n):\n        # Reverse the binary list\n        binary.reverse()\n        # Initialize odd_count to zero\n        odd_count = 0\n        # Loop through the reversed list\n        for j in binary:\n            # If the digit is odd, increment odd_count\n            if j % 2!= 0:\n                odd_count += 1\n        # If odd_count is odd, increment count\n        if odd_count % 2!= 0:\n            count += 1\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list\n    s_list = list(s)\n    # Get the length of the list\n    length = len(s_list)\n    # Initialize the count variable\n    count = 0\n    # Rotate the list n times\n    for i in range(n):\n        # Get the last element of the list and append it to the beginning\n        s_list.insert(0, s_list.pop())\n    # Iterate over the list to count the odd numbers\n    for i in range(length):\n        if s_list[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    if not s:\n        return 0\n    odd_count = 0\n    for i in range(n):\n        if s[i] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to integer array\n    arr = [int(x) for x in s]\n    \n    # rotate the array n times\n    for i in range(n):\n        arr.append(arr.pop(0))\n        \n    # count the number of odd elements in the rotated array\n    count = 0\n    for i in arr:\n        if i % 2!= 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    # Define a function to check if a number is odd or not\n    def is_odd(num):\n        return num % 2 == 1\n\n    # Convert the binary string to a list of bits\n    binary_list = [int(i) for i in s]\n\n    # Check if the length of the binary string is odd or not\n    if len(binary_list) % 2 == 1:\n        # If the length is odd, reverse the list to get the even-length list\n        binary_list = list(reversed(binary_list))\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through the list of bits n times\n    for i in range(n):\n        # Loop through the list of bits and check if each number is odd or not\n        for j in range(len(binary_list)):\n            if is_odd(binary_list[j]):\n                count += 1\n\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        if s[0] == '0':\n            s = s[1:]\n        else:\n            s = '1' + s\n    for i in range(1, len(s), 2):\n        if s[i] == '0':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty dictionary to store common elements\n    common_elements = {}\n    \n    # loop through each list in the nested list\n    for lst in nestedlist:\n        # loop through each element in the current list\n        for elem in lst:\n            # if the element is not already in the dictionary, add it and set the count to 1\n            if elem not in common_elements:\n                common_elements[elem] = 1\n            # otherwise, increment the count for the element in the dictionary\n            else:\n                common_elements[elem] += 1\n    \n    # create a new list to store the common elements\n    common_elements_list = []\n    \n    # loop through the dictionary and add any elements with a count of 1 to the new list\n    for key, value in common_elements.items():\n        if value == 1:\n            common_elements_list.append(key)\n    \n    # return the new list of common elements\n    return common_elements_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set to store common elements\n    common = set()\n\n    # loop through each list in nestedlist\n    for lst in nestedlist:\n        # loop through each element in each list\n        for elem in lst:\n            # check if the element is already in the set of common elements\n            if elem in common:\n                # if it is, append it to the result list\n                result.append(elem)\n            # otherwise, add it to the set of common elements\n            else:\n                common.add(elem)\n\n    # return the result list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set of the first element of each sublist\n    set1 = set(nestedlist[0])\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    # Loop through the rest of the sublists\n    for sublist in nestedlist[1:]:\n        # Create a set of the first element of each sublist\n        set2 = set(sublist[0])\n        # Find the intersection of the two sets\n        intersection = set1.intersection(set2)\n        # Add the intersection to the common_elements set\n        common_elements.update(intersection)\n    # Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    result = []\n    for i in range(len(nestedlist[0])):\n        count = 0\n        for j in range(len(nestedlist)):\n            if nestedlist[j][i] is not None:\n                count += 1\n        if count > 1:\n            result.append(i)\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        for elem in sublist:\n            common.add(elem)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # iterate through each list in the nested list\n    for lst in nestedlist:\n        # iterate through each element in the list\n        for element in lst:\n            # add the element to the common elements set if it's not already there\n            if element not in common_elements:\n                common_elements.add(element)\n    \n    # return the common elements in a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of common elements in those lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0])):\n                if nestedlist[i][j] == nestedlist[0][k]:\n                    if nestedlist[i][j] not in common_elements:\n                        common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n\n    common_elements = []\n    for sublist in nestedlist:\n        if sublist and isinstance(sublist, list):\n            common_sublist = common_in_nested_lists(sublist)\n            if common_sublist:\n                common_elements.extend(common_sublist)\n        else:\n            common_elements.append(sublist)\n\n    return list(set(common_elements))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nestedlist (list of lists): A list of lists containing the elements to be checked for common elements.\n\n    Returns:\n        list: A list containing the common elements in the given nested lists.\n    \"\"\"\n    # Find the first list that is not empty\n    non_empty_list = next(filter(None, nestedlist), None)\n    \n    # If there are no non-empty lists, return an empty list\n    if non_empty_list is None:\n        return []\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through each element in the first non-empty list\n    for element in non_empty_list:\n        # Loop through each nested list\n        for nested in nestedlist:\n            # If the element is in the nested list, add it to the common list\n            if element in nested:\n                common.append(element)\n    \n    # Return the list of common elements\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    # Check if the string is empty\n    if not text:\n        return False\n    \n    # Check if the string consists only of digits\n    if not text.isdigit():\n        return False\n    \n    # Convert the string to an integer and check if it is an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i.keys()) > 0 or len(i.values()) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through each dictionary in the list\n    for dict1 in list1:\n        # check if the dictionary is empty\n        if not dict1:\n            # if it is empty, add it to the result list\n            result.append(dict1)\n    # return the result list\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_value = 0\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError(\"All elements in the tuple must be positive integers.\")\n        int_value = int_value * 10 + num\n    return int_value"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    # Convert the tuple of positive integers into a list of integers\n    nums_list = list(nums)\n\n    # Initialize an empty integer variable to store the result\n    result = 0\n\n    # Iterate over the list of integers and add each integer to the result\n    for num in nums_list:\n        result += num\n\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize a variable to hold the final result\n    result = 0\n\n    # iterate through each number in the tuple\n    for num in nums:\n        # convert the number to an integer and add it to the result variable\n        result += int(num)\n\n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple of integers into a list of integers\n    nums_list = list(nums)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each element of the list and add it to the sum\n    for num in nums_list:\n        sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each element in the tuple\n    for num in nums:\n        # Check if the element is a positive integer\n        if isinstance(num, int) and num > 0:\n            # Add the positive integer to the sum variable\n            sum += num\n        else:\n            # If the element is not a positive integer, raise an error\n            raise ValueError('All elements in the tuple must be positive integers')\n    \n    # Return the sum of all positive integers in the tuple\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist if isinstance(item, (int, float, str, complex))]"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                if type(test_list[i][j]) in [int, float, complex]:\n                    test_list[i][j] = float(test_list[i][j])\n            except TypeError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, complex]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float, complex)):\n                element = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                sublist[sublist.index(element)] = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character and convert it to a list of strings\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n    if count == 1:\n        return arr[0]\n    else:\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = [0] * 1000\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(1, 1000):\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n        elif arr[i]!= unique_element:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            if count == 2:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    # initialize count as 0\n    count = 0\n    \n    # iterate over the array\n    for i in range(len(arr)):\n        # check if the current element is present in the array\n        if arr[i] == arr[i+1]:\n            # increment the count by 1\n            count += 1\n            \n    # if the count is 1, return the element\n    if count == 1:\n        return arr[0]\n    # otherwise, return -1\n    else:\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if i == 0 or arr[i]!= arr[i-1]:\n                for j in range(i+1, n):\n                    if arr[j] == arr[i]:\n                        return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 1\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            count = 1\n    return arr[n-count]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize two variables to keep track of the last index of the first and second occurrences\n    first_occurrence = -1\n    second_occurrence = -1\n\n    # Iterate through the array and keep track of the last index of the first occurrence\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            if first_occurrence == -1:\n                first_occurrence = i\n            else:\n                second_occurrence = i\n                break\n\n    # If the second occurrence is still -1, there is no element that appears only once in the array\n    if second_occurrence == -1:\n        return \"There is no element that appears only once in the array.\"\n\n    # If the second occurrence is not -1, the first occurrence must be the only occurrence of the element\n    else:\n        return arr[first_occurrence]\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            max_prod = max(max_prod, product)\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Initialize the maximum product to a negative number so that we can start with a valid product\n    max_product = -float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # For each tuple, loop through each other tuple in the list\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the numbers in each tuple\n            product = list1[i] * list1[j]\n\n            # Calculate the absolute value of the product to get the maximum absolute product\n            abs_product = abs(product)\n\n            # Update the maximum product if this is greater than the current maximum\n            if abs_product > max_product:\n                max_product = abs_product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (-float('inf'), -float('inf'))\n    \n    for pair in zip(list1, list1[1:]):\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n            max_pair = pair\n    \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize the maximum product as 0 and the maximum absolute product as 0\n    max_product = 0\n    max_abs_product = 0\n\n    # iterate through each tuple in the list\n    for i in range(len(list1)):\n        # iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and take the absolute value\n            product = abs(list1[i][0] * list1[j][1])\n            # update the maximum product and maximum absolute product accordingly\n            max_product = max(max_product, product)\n            max_abs_product = max(max_abs_product, max_product)\n\n    # return the maximum absolute product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    current_max = 1\n    for num in list1:\n        if num > 0:\n            current_max *= num\n        elif num < 0:\n            current_product *= num\n        else:\n            current_max = 1\n            current_product = 1\n        current_max = max(abs(current_max), current_max)\n        current_product = max(abs(current_product), current_product)\n        max_product = max(max_product, current_max * current_product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_amicable_numbers(limit):\n    \"\"\"\n    Function to find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(sum_of_primes(i)):\n            amicable_numbers.append(sum_of_primes(i))\n    return sum(amicable_numbers)\n\ndef sum_of_primes(n):\n    \"\"\"\n    Function to find the sum of all primes from 1 to a specified number.\n    \"\"\"\n    primes = []\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        primes.append(n)\n    return sum(primes)\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_of_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for num in range(1, limit+1):\n        if num in amicable:\n            continue\n        if is_amicable(num):\n            amicable.append(num)\n    return sum(amicable)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a given number is amicable.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable_pair(num):\n    '''\n    Helper function to check if a given number is an amicable pair.\n    '''\n    for i in range(1, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for num in range(1, limit+1):\n        if num!= 1 and is_amicable_pair(num):\n            sum_of_amicable += num\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    This function checks whether a given number is amicable or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return num in [sum(range(2, num)), sum(range(2, num), 2)]"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(n):\n    '''\n    Check if a number is amicable or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i) and is_amicable(limit-i):\n            amicable_sum += i\n    return amicable_sum\n\nprint(sum_amicable_numbers(10000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit):\n        if i in amicable_numbers(i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef amicable_numbers(n):\n    '''\n    Write a function to find all amicable numbers up to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, n):\n        if n % i == 0:\n            if i!= n/i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(n/i)\n    return amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize the sum to zero\n    amicable_sum = 0\n\n    # iterate through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n\n        # check if the current number is amicable to any other number between 1 and itself\n        for j in range(1, i):\n            if i % j == 0 and j!= i and i + j == limit:\n                amicable_sum += i + j\n                break\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        '''\n        Helper function to check if a number is amicable.\n        '''\n        if n < 10:\n            return False\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                i += 1\n        return n == 1\n    \n    def sum_amicable(start):\n        '''\n        Helper function to sum up all amicable numbers from a given number.\n        '''\n        total = 0\n        for i in range(start, limit+1):\n            if is_amicable(i):\n                total += i\n        return total\n    \n    return sum_amicable(1)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Function to check if a number is amicable or not\n    def is_amicable(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize sum variable to 0\n    sum_amicable = 0\n\n    # Iterate through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if number is amicable\n        if is_amicable(i):\n            # Add amicable number to sum\n            sum_amicable += i\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable(num):\n    '''\n    A helper function to check if a number is amicable or not.\n    '''\n    return any(num % i == 0 and i!= num for i in range(1, int(num ** 0.5) + 1))\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            total += num\n    return total"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        if b > 0:\n            return 0\n        else:\n            return 180\n    elif a > 0:\n        return 180 - cmath.phase(a + b*1j)\n    else:\n        return 180 + cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns their angle as a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = round(angle.real, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle in radians.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros = 0\n    ones = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n\n        if ones > zeros:\n            diff = ones - zeros\n            if diff > max_diff:\n                max_diff = diff\n        else:\n            diff = zeros - ones\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    max_diff = 0\n    n = len(string)\n\n    # Traverse through the string and count the number of 0s and 1s\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # Calculate the maximum difference between the number of 0s and number of 1s\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    count = [0] * 2\n    max_diff = 0\n    \n    for i in range(length):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        \n        diff = abs(count[0] - count[1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    n = len(string)\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through the binary string\n    for i in range(n):\n        # If current character is 0, increment count of 0s and decrement count of 1s\n        if string[i] == '0':\n            count_0 += 1\n            count_1 -= 1\n        # If current character is 1, decrement count of 0s and increment count of 1s\n        else:\n            count_0 -= 1\n            count_1 += 1\n\n        # Update maximum difference if current count of 0s is greater than current count of 1s\n        if count_0 > count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Convert the string to a binary string\n    binary_string = bin(int(string, 2))[2:]\n    n = len(binary_string)\n\n    # Initialize the maximum difference to zero\n    max_diff = 0\n\n    # Iterate through all substrings of the binary string\n    for i in range(1, n):\n        # Compute the difference between the number of 0s and number of 1s in each substring\n        diff = sum(binary_string[i:j] == '0' for j in range(i, n)) - sum(binary_string[i:j] == '1' for j in range(i, n))\n\n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # Initialize counters for 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    \n    # Initialize maximum difference\n    max_diff = 0\n    \n    # Iterate over each character in the string\n    for char in string:\n        # Increment the counter for the current character\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Calculate the difference between the counters\n        diff = abs(count_0 - count_1)\n        \n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > 0:\n                max_diff = max(max_diff, count)\n            count = 0\n    \n    if count > 0:\n        max_diff = max(max_diff, count)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            zero_count = 0\n            one_count = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n            max_diff = max(max_diff, abs(zero_count - one_count))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    length = 0\n    max_diff = 0\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # If the current character is a 0, increment the length\n        if string[i] == '0':\n            length += 1\n        # If the current character is a 1, decrement the length\n        elif string[i] == '1':\n            length -= 1\n        # If the length is greater than 0, calculate the difference and update max_diff if necessary\n        if length > 0:\n            diff = length // 2\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n            \n        max_diff = max(max_diff, abs(count_0 - count_1))\n        \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n\n    # finding common divisors of a and b\n    div_a = []\n    div_b = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            div_a.append(i)\n    for j in range(1, b+1):\n        if b % j == 0:\n            div_b.append(j)\n\n    # finding the sum of common divisors\n    sum_div = []\n    for i in div_a:\n        if i in div_b:\n            sum_div.append(i)\n    for j in div_b:\n        if j in div_a:\n            sum_div.append(j)\n\n    return sum(sum_div)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Find the common divisors of the two numbers\n    common_divisors = set(a).intersection(set(b))\n\n    # Calculate the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of their common divisors.\n    \"\"\"\n    divisors = []\n    common_divisors = []\n    \n    # Find all the common divisors of a and b\n    for i in range(1, b+1):\n        if b % i == 0 and a % i == 0:\n            common_divisors.append(i)\n    \n    # Find the sum of the common divisors\n    for i in range(len(common_divisors)):\n        for j in range(len(common_divisors)):\n            if i!= j:\n                divisors.append(common_divisors[i] + common_divisors[j])\n    \n    # Remove duplicates from the list\n    divisors = list(set(divisors))\n    \n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def find_common_divisors(a, b):\n        \"\"\"\n        Helper function to find common divisors of two given numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    a_divisors = find_common_divisors(a, b)\n    b_divisors = find_common_divisors(b, a)\n\n    # Remove duplicates from the list of common divisors\n    divisors = list(set(a_divisors + b_divisors))\n\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as inputs and returns their sum of their common divisors.\n    The function first calculates the sum of the divisors of the two given numbers a and b.\n    Then, it checks if there are any common divisors among the divisors of the two given numbers.\n    If there are, it returns the sum of those common divisors. Otherwise, it returns -1.\n    \"\"\"\n\n    # Calculate the sum of the divisors of a and b\n    divisors_a = []\n    divisors_b = []\n\n    # Calculate the divisors of a\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_a.append(i)\n\n    # Calculate the divisors of b\n    for j in range(1, b + 1):\n        if b % j == 0:\n            divisors_b.append(j)\n\n    # Find the common divisors of a and b\n    common_divisors = []\n    for divisor in divisors_a:\n        if divisor in divisors_b and divisor not in common_divisors:\n            common_divisors.append(divisor)\n\n    # Return the sum of the common divisors\n    if len(common_divisors) > 0:\n        return sum(common_divisors)\n    else:\n        return -1\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, n + 1) if n % i == 0]\n        return sum(divisors)\n\n    return lcm(a, b) - sum_of_divisors(lcm(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two positive integers as input and returns the sum of common divisors of them.\n\n    Args:\n    a (int): The first positive integer.\n    b (int): The second positive integer.\n\n    Returns:\n    int: The sum of common divisors of the two input numbers.\n    \"\"\"\n    # Finding the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Returning the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Check if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize the sum and divisor variables\n    sum_divisor = 0\n    divisor = 1\n\n    # Loop through the numbers from a to b\n    while divisor <= b:\n        # Check if the number is a common divisor of a and b\n        if (a % divisor == 0) and (b % divisor == 0):\n            sum_divisor += divisor\n\n        # Increment the divisor by 1\n        divisor += 1\n\n    return sum_divisor"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize sum variable to zero\n    total = 0\n    # Initialize divisor variable to 1\n    divisor = 1\n    \n    # Loop through all numbers from a to b\n    for i in range(a, b+1):\n        # Check if the number is divisible by divisor\n        if i % divisor == 0:\n            # If it is divisible, add it to the total\n            total += i\n        # Increment the divisor by 1\n        divisor += 1\n    \n    # Return the total sum of common divisors\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = []\n    divisors_b = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors_a.append(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors_b.append(i)\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"Result:\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Initialize an empty list to store the words longer than n characters\n    longer_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, add it to the longer_words list\n            longer_words.append(word)\n    \n    # Return the list of longer words\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    words = str.split() # split the string into individual words\n    result = [] # initialize an empty list to store the long words\n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            result.append(word) # add the word to the result list\n    return result # return the result list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    \n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has a dimension of 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"Error: The matrix must have a dimension of 3x3.\"\n    \n    # Check if all the elements in the matrix are distinct\n    if len(set(my_matrix[0]))!= 3 or len(set(my_matrix[1]))!= 3 or len(set(my_matrix[2]))!= 3:\n        return \"Error: All the elements in the matrix must be distinct.\"\n    \n    # Check if the sum of the elements in each row, column, and diagonal are equal to the same number\n    row_sum = sum(my_matrix[0])\n    col_sum = sum(my_matrix[i][j] for i in range(3) for j in range(3))\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(3))\n    diag_sum_2 = sum(my_matrix[i][2-i] for i in range(3))\n    if row_sum!= col_sum or row_sum!= diag_sum_1 or row_sum!= diag_sum_2 or col_sum!= diag_sum_1 or col_sum!= diag_sum_2 or diag_sum_1!= diag_sum_2:\n        return \"Error: The sum of the elements in each row, column, and diagonal must be equal to the same number.\"\n    \n    return \"The matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check for unique numbers in the matrix\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n\n    # Check for sum of all elements in the matrix\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    magic_sum = sum(row_sum) + sum(col_sum)\n    if magic_sum!= sum(row_sum) + sum(col_sum) + sum(row_sum[i] for i in range(len(my_matrix))) + sum(col_sum[i] for i in range(len(my_matrix[0]))) or magic_sum!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= n**2:\n        return False\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] == n**2 - i - j:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check if all rows and columns contain the same values\n    for i in range(n):\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            return False\n        if my_matrix[::-1][i]!= my_matrix[i]:\n            return False\n\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Calculate the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if each row and column sum is the same\n    if row_sum == col_sum:\n        # Check if each sum is equal to the sum of the diagonal elements\n        if row_sum[0] + col_sum[0] == sum(row_sum) + sum(col_sum) and row_sum[2] + col_sum[2] == sum(row_sum) + sum(col_sum):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # initialize variables to keep track of row sums and column sums\n    row_sums = [0] * len(my_matrix[0])\n    col_sums = [0] * len(my_matrix)\n\n    # iterate over the rows and columns of the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # check if the current element is already in the row_sums list or col_sums list\n            if my_matrix[i][j] in row_sums:\n                return False\n            row_sums[j] += my_matrix[i][j]\n\n            if my_matrix[j][i] in col_sums:\n                return False\n            col_sums[i] += my_matrix[j][i]\n\n    # check if the sum of the diagonal elements is equal to the sum of the remaining elements in the matrix\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) == sum(row_sums) == sum(col_sums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    diag_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum2 = sum([my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))])\n\n    # Compare the row and column sums to determine if the matrix is a magic square\n    if row_sums == col_sums and diag_sum1 == diag_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the dimensions of the matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if the sums are all equal\n    if row_sums!= col_sums:\n        return False\n    \n    # Check that each sub-matrix has 1's in every element\n    for i in range(n):\n        for j in range(n):\n            sub_sum = 0\n            for k in range(n):\n                sub_sum += my_matrix[i][k]\n            if sub_sum!= 1:\n                return False\n            sub_sum = 0\n            for k in range(n):\n                sub_sum += my_matrix[k][j]\n            if sub_sum!= 1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        diag_sum1 = my_matrix[i][i]\n        diag_sum2 = my_matrix[i][n-i-1]\n        if row_sum!= col_sum or row_sum!= diag_sum1 or row_sum!= diag_sum2:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # check if all elements are different\n    for i in range(n):\n        for j in range(n):\n            if len(set(str(my_matrix[i][j])))!= n:\n                return False\n\n    # check if the sum of each row and column is equal\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum!= col_sum:\n            return False\n\n    # check if the 2x2 sub-matrix is a magic square\n    for i in range(n-1):\n        for j in range(n-1):\n            sub_matrix = [my_matrix[i][j], my_matrix[i][j+1], my_matrix[i+1][j], my_matrix[i+1][j+1]]\n            if not magic_square_test(sub_matrix):\n                return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers and returns the item with maximum frequency in the list.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    str: The item with maximum frequency in the list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_count = max(count.values())\n    max_item = None\n    for num, count in count.items():\n        if count == max_count:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Use defaultdict to keep track of the count of each item\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    # Find the item with the maximum frequency\n    max_count = max(counts.values())\n    max_item = None\n    for item, count in counts.items():\n        if count == max_count:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = max(freq, key=freq.get)\n    max_freq = freq[max_num]\n    \n    return max_num, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_num = 0\n    max_freq = 0\n\n    for num in freq:\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Given a list of numbers, find the item with the maximum frequency.\n\n    Args:\n    nums (list): a list of numbers\n\n    Returns:\n    int: the index of the item with the maximum frequency in the list\n    '''\n    # Create a defaultdict to store the frequency of each number\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_index = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_index = nums.index(num)\n\n    return max_index"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_freq = freq_count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_set = set(vowels)\n    result = \"\"\n    for char in str1:\n        if char in vowel_set:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result += str1[-1]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowel_count = 0\n    new_str = \"\"\n    for i in range(len(str_list)-1, -1, -1):\n        if str_list[i] in vowels:\n            vowel_count += 1\n            new_str = new_str + str_list[i]\n    if vowel_count == 0:\n        return str1\n    else:\n        return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    reversed_string = \"\"\n    for char in string:\n        if char not in vowels_set:\n            reversed_string += char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in string:\n        if char not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return str1[::-1][::-1].translate(str.maketrans('', '', vowels))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_list = [char for char in str1 if char in vowels]\n    return vowels_list[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \" \".join([str(i) for i in tup1])\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using join() method\n    return ','.join(str(elem) for elem in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Define a string to hold the converted tuple\n    string_tup = ''\n    # Iterate over each element in the tuple\n    for elem in tup1:\n        # Append the element to the string\n        string_tup += str(elem) +''\n    # Remove the last space from the string\n    string_tup = string_tup[:-1]\n    # Return the converted string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0: \n        return None\n    elif n == 0: \n        return 0\n    else: \n        return 2 * hexagonal_num(n-1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # start with the first hexagonal number\n    current_num = 1\n    \n    # loop n times\n    for i in range(n):\n        # find the next hexagonal number\n        next_num = current_num * 6\n        \n        # print the current hexagonal number and move to the next one\n        print(current_num, end=\" \")\n        current_num = next_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n\n    a = 1\n    b = 6\n    \n    for i in range(1, n+1):\n        print(\"Hexagon number\", i, \":\", a*b)\n        a += b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1)) * ((2 * n) + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n\n    for i in range(n):\n        a, b, c = b, a + b + c, b\n\n    return c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # initialize the first and last hexagonal numbers\n    first_hexagonal = 1\n    last_hexagonal = 15\n\n    # loop through the numbers from first to last\n    for i in range(n): \n        # calculate the current hexagonal number\n        current_hexagonal = (first_hexagonal + last_hexagonal) // 2\n\n        # print the current hexagonal number\n        print(current_hexagonal)\n\n        # update the first and last hexagonal numbers\n        first_hexagonal = last_hexagonal\n        last_hexagonal = current_hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # A hexagonal number is a number whose sum of the cubes of its sides is equal to n.\n    # Let's define a function to calculate the sum of cubes of a number.\n    def cube_sum(num):\n        return num**3\n    \n    # Initialize variables to store the sum of cubes of the sides of the nth hexagon.\n    a = 1  # Base\n    b = 1  # Height\n    c = 1  # Side length\n    \n    # Loop through each side of the hexagon, adding the sum of cubes of each side to the total.\n    while c <= n:\n        a += cube_sum(a) + cube_sum(b) + cube_sum(c)\n        b += cube_sum(a) + cube_sum(b) + cube_sum(c)\n        c += 2\n    \n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1: \n        return \"Error: n should be a positive integer.\"\n    hexagonal_num = n * (2 * n - 1)\n    return hexagonal_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = len([num for num in nums if num == 0])\n    non_zeros = len(nums) - zeros\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    zeros_count = len(zeros)\n    nonzeros_count = len(nums) - zeros_count\n    return zeros_count / nonzeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    non_zero_count = 0\n    for num in zero_count:\n        non_zero_count += num\n    ratio = non_zero_count / len(nums)\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    count = 0\n\n    for num in nums:\n        if num == 0:\n            count += 1\n            zeros.append(count)\n\n    non_zeros = len(nums) - count\n    ratio = non_zeros / zeros[-1]\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = array('i', [1 if x!= 0 else 0 for x in nums])\n    zeroes = len(nums) - non_zeroes.count(0)\n    return non_zeroes.count(0) / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    nonzeros = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            nonzeros[nonzeros.index(num)] += 1\n\n    zero_ratio = float(sum(zeros)) / (sum(nonzeros) + sum(zeros))\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums)) # initialize an array of zeros to store the count of zeros\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1 # increment the count of zeros in the corresponding position in the array\n    \n    non_zeros = sum(nums) - sum(zeros) # calculate the total number of non-zeros in the array\n    non_zero_count = len(zeros) / len(nums) # calculate the ratio of non-zeros to total number of non-zeros\n    \n    return non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create an array to store the number of zeroes and non-zeroes\n    arr = array('i', [0, 0])\n\n    # iterate over the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            arr[0] += 1\n        else:\n            arr[1] += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    if arr[0] == 0:\n        ratio = 0\n    else:\n        ratio = arr[1] / arr[0]\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check for special cases\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n\n    # Check for odd numbers\n    if n % 2 == 1:\n        # Check for sum of powers of 2\n        sum_of_powers_of_two = 0\n        while n > 1:\n            if n % 2 == 0:\n                sum_of_powers_of_two += 1\n                n = n // 2\n            else:\n                n = n // 2\n        if sum_of_powers_of_two == 0:\n            return False\n        elif sum_of_powers_of_two == 1:\n            return True\n        else:\n            return False\n\n    # Check for even numbers\n    elif n % 2 == 0:\n        # Check for sum of powers of 2\n        sum_of_powers_of_two = 0\n        while n > 1:\n            if n % 2 == 0:\n                sum_of_powers_of_two += 1\n                n = n // 2\n            else:\n                n = n // 2\n        if sum_of_powers_of_two > 1:\n            return False\n        else:\n            return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n == 0: # base case for recursion\n        return True\n    \n    elif n%2 == 0: # even case\n        return is_Sum_Of_Powers_Of_Two(n//2) + 1\n    \n    else: # odd case\n        return is_Sum_Of_Powers_Of_Two((n-1)//2) + 1 # recursive call to subtract 1 from n to get a power of 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_Power_Of_Two(num):\n        '''\n        Write a python function to check whether the given number is a power of 2 or not.\n        '''\n        if num == 0:\n            return False\n        else:\n            return (num & (num-1)) == 0\n\n    if is_Power_Of_Two(n):\n        return True\n\n    else:\n        for i in range(1, n+1):\n            if (i * i) == n:\n                return True\n            elif (i * i) > n:\n                break\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Iterate through the binary representation of the given number\n    for i in range(8*n.bit_length()):\n        # If the current bit is a 1, add it to the power sum\n        if n & (1<<i):\n            power_sum += 1\n        \n        # If the power sum becomes greater than 2^64, we can't represent the number as a sum of powers of 2\n        if power_sum > 2**64:\n            return False\n    \n    # If we get here, then the number is representable as a sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    \n    count = 0\n    power = 1\n    \n    while power <= n:\n        if n >= power * power:\n            n -= power * power\n            count += 1\n        else:\n            power <<= 1\n    \n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def count_bits(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def next_power_of_two(num):\n        \"\"\"\n        Compute the next power of 2 greater than or equal to the given number.\n        \"\"\"\n        num -= 1\n        num |= num >> 1\n        num |= num >> 2\n        num |= num >> 4\n        num |= num >> 8\n        num |= num >> 16\n        num += 1\n        return num\n\n    def is_powers_of_two(num):\n        \"\"\"\n        Check if the given number can be represented as sum of non-zero powers of 2.\n        \"\"\"\n        return count_bits(num) > 1\n\n    def is_even(num):\n        \"\"\"\n        Check if the given number is even.\n        \"\"\"\n        return (num & 1) == 0\n\n    def is_odd(num):\n        \"\"\"\n        Check if the given number is odd.\n        \"\"\"\n        return (num & 1) == 1\n\n    def is_power_of_two(num):\n        \"\"\"\n        Check if the given number is a power of 2.\n        \"\"\"\n        return is_even(count_bits(num))\n\n    def is_zero(num):\n        \"\"\"\n        Check if the given number is zero.\n        \"\"\"\n        return num == 0\n\n    def is_one(num):\n        \"\"\"\n        Check if the given number is one.\n        \"\"\"\n        return num == 1\n\n    def is_sum_of_powers_of_two(num):\n        \"\"\"\n        Check if the given number can be represented as sum of non-zero powers of 2.\n        \"\"\"\n        num = next_power_of_two(num)\n        if is_powers_of_two(num):\n            return True\n        while num < n:\n            if is_powers_of_two(num) and is_even(num):\n                num += 1\n            else:\n                break\n        return num == n\n\n    return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # function to check whether a number is divisible by 2 or not\n    def is_even(num):\n        return num % 2 == 0\n    \n    # function to check whether a number is divisible by 2^i for any i\n    def is_power_of_two(num, i):\n        return num % (2 ** i) == 0\n    \n    # iterate through all i from 0 to log2(n-1)\n    for i in range(0, int(math.log2(n-1))+1):\n        # check if n can be represented as sum of powers of 2^i\n        if is_even(n) and is_power_of_two(n, i):\n            return True\n    \n    # if the loop completes without finding a solution, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(n):\n        return n!= 0 and (n & (n - 1)) == 0\n\n    def count_bits(n):\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n\n    if is_power_of_two(n) and count_bits(n) <= 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    \n    # if n is a power of 2, return True\n    if n == 1:\n        return True\n    \n    # if n is less than 0, return False\n    if n < 0:\n        return False\n    \n    # loop through all possible powers of 2\n    for i in range(1, n+1):\n        \n        # if i^2 is equal to n, return True\n        if i*i == n:\n            return True\n        \n        # if i^2 is greater than n, return False\n        if i*i > n:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is divisible by 2\n    if n % 2 == 0: \n        return False\n\n    # Initialize variables\n    power = 1\n    sum_of_powers = 0\n\n    # Iterate through the bits of the number and check if they are 1\n    while n > 0: \n        if n % 2 == 1: \n            sum_of_powers += power\n\n        power *= 2\n        n //= 2\n\n    # Check if the number can be represented as sum of non-zero powers of 2\n    return sum_of_powers == n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # approximate circumference using formula\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in test_list for item in sublist]\n    # Create a set from the flattened list to remove duplicates\n    unique_list = set(flattened_list)\n    # Return the unique list as a single list\n    return list(unique_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int:\n                result.add(item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(test_list)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    def pancake_sort_helper(nums, start, end):\n        if start >= end:\n            return\n\n        # Find the maximum element in the array from start to end\n        max_idx = start\n        for i in range(start, end + 1):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # Swap the maximum element with the first element\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # Recursively sort the array from start+1 to end\n        pancake_sort_helper(nums, start + 1, end)\n\n    pancake_sort_helper(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Reverse the sub-array of increasing elements\n        for j in range(i, n):\n            nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Perform a selection sort on the list to get the largest element first\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the largest element with the first element in the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    # Perform a pancake sort on the list using the selection sort as a subroutine\n    for length in range(n-1, 0, -1):\n        # Find the index of the first element of the unsorted part of the list\n        for i in range(n-length):\n            # Find the index of the element that would be moved to the end of the list if the pancake is partially sorted\n            end_index = i + length\n            if nums[i] > nums[end_index]:\n                # Swap the elements and continue searching for a larger element\n                nums[i], nums[end_index] = nums[end_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    def reverse_pancakes(nums, k):\n        for i in range(k):\n            reverse_pancake(nums, 0, len(nums) - 1)\n    \n    def heapify(nums, start, end):\n        max_index = start\n        left_index = 2 * start + 1\n        right_index = 2 * start + 2\n        \n        if left_index <= end and nums[left_index] > nums[max_index]:\n            max_index = left_index\n        \n        if right_index <= end and nums[right_index] > nums[max_index]:\n            max_index = right_index\n        \n        if max_index!= start:\n            nums[start], nums[max_index] = nums[max_index], nums[start]\n            heapify(nums, max_index, end)\n    \n    def heap_sort(nums):\n        for i in range(len(nums) // 2 - 1, -1, -1):\n            heapify(nums, i, len(nums) - 1)\n        \n        for i in range(len(nums) - 1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            heapify(nums, 0, i - 1)\n    \n    for i in range(len(nums)):\n        reverse_pancakes(nums, i)\n    \n    heap_sort(nums)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the largest element in the unsorted part of the array\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the largest element with the first element in the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize an empty list to store the sorted elements\n    sorted_nums = []\n    \n    # Loop through the input list of numbers\n    for i in range(n):\n        # Initialize a variable to keep track of the maximum value of the pancakes\n        max_value = nums[i]\n        # Loop through the pancakes from the current number to the end of the list\n        for j in range(i, n):\n            # If the current pancake is greater than the maximum value, update the maximum value\n            if nums[j] > max_value:\n                max_value = nums[j]\n        # Swap the current number with the pancake with the maximum value\n        nums[i], nums[n-1] = nums[n-1], nums[i]\n        # Add the sorted number to the sorted list\n        sorted_nums.append(nums[i])\n    \n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        swap(nums, i, max_index)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the remaining unsorted part\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Starting from the last element and moving towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element in the remaining unsorted array\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the elements at the current index and the maximum element index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # we need to make the first n-1 pancakes and then reverse the last pancake\n    for i in range(n-1, 0, -1):\n        # we start by sorting the pancake i\n        # we pick a random index j from 0 to i-1, excluding i\n        j = random.randint(0, i-1)\n        # we swap the elements at indices i and j\n        nums[i], nums[j] = nums[j], nums[i]\n        # we then print the sorted pancake i\n        print(\"Sorted Pancake\", i, nums)\n        # we reverse the pancake i\n        pancake_reverse(nums, i)\n    # we print the final sorted list\n    print(\"Sorted List:\", nums)\n\ndef pancake_reverse(nums, start):\n    end = len(nums) - 1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    print(\"Reversed Pancake\", start, nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Check if the element exists in the second and third list\n        if list1[i] in list2 and list1[i] in list3:\n            # If it does, check if it exists in the next position in each list\n            if list2[list2.index(list1[i]) + 1] in list1[i + 1:] and list3[list3.index(list1[i]) + 1] in list1[i + 1:]:\n                count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and counts the number of items that are identical in the same position of each list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Find the number of lists in a given tuple.\n\n    Parameters:\n    Input: A tuple containing objects\n\n    Returns:\n    The number of lists in the tuple\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0 \n    for item in Input: \n        if type(item) == list: \n            num_lists += 1 \n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = abs(arr[-1]-arr[0])\n    for i in range(1,len(arr)-1):\n        diff = abs(arr[i]-arr[i-1]) + abs(arr[i+1]-arr[i])\n        max_diff = max(max_diff,diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Returns the maximum absolute difference between any two elements in the given array.\n    \"\"\"\n    arr = sorted(arr)\n    max_diff = 0\n    \n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        print(\"Array must contain at least 2 elements!\")\n        return\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    print(\"Maximum absolute difference between any two elements in the array is:\", max_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    # Initialize the maximum absolute difference to a large number\n    max_diff = float('-inf') \n    # Traverse through each element in the array\n    for i in range(len(arr)): \n        # Traverse through each element in the array again\n        for j in range(i+1, len(arr)): \n            # Calculate the absolute difference between the current element and the next element\n            diff = abs(arr[i] - arr[j])\n            # Update the maximum absolute difference if the current absolute difference is greater than the maximum difference\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Use the quadratic formula to find the two roots of the equation\n    discriminant = b**2 - 4*a*n\n    \n    if discriminant < 0:\n        return None\n    \n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    y1 = x1 / a\n    y2 = x2 / a\n    \n    return (x1, y1, x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # get the discriminant\n    d = b**2 - 4*a*n\n    \n    # check if there is a solution\n    if d < 0:\n        return None\n    elif d == 0:\n        return (int((-b)/(2*a)),)\n    else:\n        # get the two solutions\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = 0\n    y = 0\n    # iterate through all possible values of x and y\n    for i in range(1, n // a + 1):\n        for j in range(1, n // b + 1):\n            # check if the current value satisfies the given equation\n            if a * i + b * j == n:\n                # return the solution as a tuple\n                return (i, j)\n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    \n    x = (-n + b ** 2) / (2 * a)\n    y = (-n - b ** 2) / (2 * a)\n    \n    if x % 1 == 0 and y % 1 == 0:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n // b + 1):\n        y = n // a * x - n // a // b * x\n        if x + y * b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 1, 100\n    y1, y2 = 1, 100\n\n    while x2 - x1 > 1:\n        x = (x1 + x2) // 2\n        y = a * x + b\n        if y == n:\n            return (x, y)\n        elif y < n:\n            x1 = x\n        else:\n            x2 = x\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    \n    x = int((-n + b ** 0.5) / a)\n    y = int((-n - b ** 0.5) / a)\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the first guess of x and y to be 1 and 0 respectively\n    x = 1\n    y = 0\n    # Loop until the values of x and y satisfy ax + by = n\n    while a*x + b*y!= n:\n        # Check if the values of x and y satisfy the given equation\n        if a*x + b*y == 0:\n            return None\n        # If not, calculate the next guess of x and y\n        x = x - (n - a*x - b*y) // (a*x + b*y)\n        y = y + (n - a*x - b*y) // (a*x + b*y)\n    # If the loop completes, return the values of x and y\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b, and n are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n\n    # Initialize x and y to negative infinity\n    x = float('-inf')\n    y = float('-inf')\n\n    # Find the first solution that satisfies the equation ax + by = n\n    for i in range(1, n):\n        x_temp = i * a / b\n        y_temp = n / b - x_temp * a\n        if x_temp >= x and y_temp >= y:\n            x = x_temp\n            y = y_temp\n\n    # If no solution is found, return None\n    if x == float('-inf'):\n        return None\n\n    # Return the tuple (x, y)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Using quadratic formula to find the solutions\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (int((-b)/(2*a)),)\n    else:\n        return ((-b + discriminant**0.5)/(2*a), (-b - discriminant**0.5)/(2*a))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Loop through each element in the first list\n    for element in list1:\n\n        # Check if the element is present in the second list\n        if element in list2:\n\n            # If it is, remove it from the first list\n            list1.remove(element)\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # iterate over list1 and remove elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through each element in list1\n    for element in list1:\n        # If the element is in list2, remove it\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum_ += n - 2*i\n        i += 1\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += n - 2*i\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first half of the series\n    for i in range(n // 2):\n        # Calculate the sum of the series up to i\n        sum += (n - 2*i)\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of series:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i <= n // 2:\n        total += (n - 2 * i)\n        i += 1\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Convert length to radians\n    a = pi / 180\n    s = s * a\n\n    # Calculate area using Heron's formula\n    area = (l * (s ** 2)) / 4\n\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = (s * l) / (4 * math.tan(math.pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(i*pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = 0\n    for i in range(l):\n        r = s / l\n        angle = i * 2 * math.pi / l\n        area += r * math.tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * (l/2)**2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s/l) * tan((2*pi*i)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) / (2 * (tan(pi/l)))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = 0\n    div2 = 0\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1 += i\n            \n            if i!= n // i:\n                div2 += n // i\n    \n    div1 += n // div1\n    div2 += n // div2\n    \n    if div1 == div2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n // i: \n                divisors.append(n // i) \n    divisors.sort()\n    return divisors[0] == sum(divisors[1:])"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div2 = [n//i for i in div1]\n\n    return div1, div2\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Check if the input is valid integer\n    if not isinstance(n, int) or n <= 1:\n        return \"Invalid input! Please enter a positive integer.\"\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum(range(1, n+1)) - n\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        print(f\"{n} is a prime number.\")\n    else:\n        print(f\"{n} is not a prime number.\")\n\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    div2 = []\n    # generate list of divisors of n\n    for i in range(1, n+1):\n        if n % i == 0:\n            div1.append(i)\n    # generate list of divisors of n+1\n    for i in range(1, n+2):\n        if n+1 % i == 0:\n            div2.append(i)\n    # compare lists and return True if they are equal, False otherwise\n    if div1 == div2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return True \n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div = 0 \n    for i in range(1, n+1): \n        sum_div += i \n    sum_div = sum_div // 2 \n    sum_div = math.sqrt(sum_div) \n    if sum_div.is_integer(): \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26): \n        if str1.lower().count(english_alphabet[i].lower()) > 0: \n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Convert all characters in str1 to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # Iterate through each character in the English alphabet\n    for i in range(97, 123):\n        # If the character is present in str1 at the current position, add 1 to its count\n        if str1[i] in str1:\n            char_count[chr(i)] = char_count.get(chr(i), 0) + 1\n    # Return the dictionary of counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    count_dict = {i: 0 for i in range(97, 123)}  # ASCII values for lowercase letters\n    # Loop through the string and count the characters at the same position in the alphabet\n    for char in str1:\n        if char.lower() in count_dict:\n            count_dict[char.lower()] += 1\n    # Return the count of characters at each position in the alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if i == 25 or i == 51 or i == 77 or i == 103 or i == 129 or i == 155 or i == 181 or i == 207 or i == 233 or i == 259 or i == 285 or i == 311 or i == 337 or i == 363 or i == 389 or i == 415 or i == 441 or i == 467 or i == 493 or i == 519 or i == 545 or i == 571 or i == 597 or i == 623 or i == 649 or i == 675 or i == 701 or i == 727 or i == 753 or i == 779 or i == 805 or i == 831 or i == 857 or i == 883 or i == 909 or i == 935 or i == 961 or i == 987 or i == 1013 or i == 1039 or i == 1065 or i == 1091 or i == 1117 or i == 1143 or i == 1169 or i == 1195 or i == 1221 or i == 1247 or i == 1273 or i == 1299 or i == 1325 or i == 1351 or i == 1377 or i == 1403 or i == 1429 or i == 1455 or i == 1481 or i == 1507 or i == 1533 or i == 1559 or i == 1585 or i == 1611 or i == 1637 or i == 1663 or i == 1689 or i == 1715 or i == 1741 or i == 1767 or i == 1793 or i == 1819 or i == 1845 or i == 1871 or i == 1897 or i == 1923 or i == 1949 or i == 1975 or i == 2001 or i == 2027 or i == 2053 or i == 2079 or i == 2105 or i == 2131 or i == 2157 or i == 2183 or i == 2209 or i == 2235 or i == 2261 or i == 2287 or i == 2313 or i == 2339 or i == 2365 or i == 2391 or i == 2417 or i == 2443 or i == 2469 or i == 2495 or i == 2521 or i == 2547 or i == 2573 or i == 2599 or i == 2625 or i == 2651 or i == 2677 or i == 2703 or i == 2729 or i == 2755 or i == 2781 or i == 2807 or i == 2833 or i == 2859 or i == 2885 or i == 2911 or i == 2937 or i == 2963 or i == 2989 or i == 3015 or i == 3041 or i == 3067 or i == 3093 or i == 3119 or i == 3145 or i == 3171 or i == 3197 or i =="
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the count of characters at each position\n    count_dict = {}\n\n    # Loop through each character in the string\n    for i in range(26):\n        # Check if the character is present in the string and its position\n        if chr(i+97) in str1 and i in count_dict:\n            count_dict[i] += 1\n        # Add the character to the dictionary if it is not present\n        elif chr(i+97) in str1 and i not in count_dict:\n            count_dict[i] = 1\n\n    # Return the count of characters at each position\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the position of each character\n    char_pos = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to make it case insensitive\n        char_lower = char.lower()\n        # Check if the character is in the dictionary\n        if char_lower in char_pos:\n            # Increment the count for the character in the dictionary\n            char_pos[char_lower] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_pos[char_lower] = 1\n    # Loop through each character in the English alphabet (case insensitive)\n    for i in range(ord('a'), ord('z')+1):\n        # Get the lowercase version of the character\n        char_lower = chr(i).lower()\n        # Check if the character is in the dictionary and the count is greater than 0\n        if char_lower in char_pos and char_pos[char_lower] > 0:\n            # Increment the count for the character in the dictionary\n            char_pos[char_lower] -= 1\n    # Count the number of characters that have a count of 1 in the dictionary\n    count = 0\n    for val in char_pos.values():\n        if val == 1:\n            count += 1\n    # Return the count of characters\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # create a dictionary to store the position of each character in the alphabet\n    position_dict = {}\n    for i, char in enumerate(str1):\n        char = char.lower()\n        if char in position_dict:\n            position_dict[char].append(i)\n        else:\n            position_dict[char] = [i]\n    \n    # create a set to store the characters that occur at the same position in the string as in the alphabet\n    same_position_set = set()\n    \n    # iterate through the string and add the characters that occur at the same position as in the English alphabet to the set\n    for i, char in enumerate(str1):\n        char = char.lower()\n        if char in position_dict:\n            for pos in position_dict[char]:\n                if pos == i:\n                    same_position_set.add(char)\n    \n    # return the length of the same_position_set\n    return len(same_position_set)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    count = 0\n    for i in range(len(str1)): \n        if str1.lower().count(str1[i].lower()) > 0: \n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # Initialize the counter to 0\n    count = 0\n\n    # Loop through the characters in the string\n    for char in str1:\n        # Check if the character is a letter and its position in the alphabet is the same as the current position\n        if char.isalpha() and char.lower() == str1[str1.index(char):str1.index(char)+1].lower():\n            count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    # Create a dictionary to store the count of even numbers\n    even_dict = {}\n    # Loop through the list and count the even numbers\n    for num in A:\n        if num % 2 == 0:\n            even_dict[num] = even_dict.get(num, 0) + 1\n    # Count the number of pairs that xor to an even number\n    count = 0\n    for num1 in A:\n        for num2 in A:\n            if (num1 ^ num2) % 2 == 0:\n                count += even_dict.get(num1 ^ num2, 0)\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and find the position of the highest 1 bit (i.e. the leftmost 1 bit)\n    highest_bit_pos = 0\n    while n > 0:\n        n >>= 1\n        highest_bit_pos += 1\n\n    # Compute the smallest power of 2 greater than or equal to n\n    power_of_2 = 1 << highest_bit_pos\n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**((n.bit_length() + 1).bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n\n    :param n: a positive integer\n    :return: the smallest power of 2 greater than or equal to n\n    :rtype: int\n    \"\"\"\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Convert the binary representation to an integer\n    binary = int(binary, 2)\n\n    # Compute the next power of 2 using bitwise operations\n    power_of_two = 1\n    while power_of_two < binary:\n        power_of_two <<= 1\n\n    return power_of_two"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    # calculate the power of 2 greater than or equal to n\n    p = 1\n    while p < n:\n        p <<= 1\n\n    # return the power of 2\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i << 1\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # convert n to binary representation and count number of 1's\n    num_bits = len(bin(n)[2:])\n    # if n is already a power of 2, return n\n    if 2**num_bits == n:\n        return n\n    # otherwise, return 2 raised to the power of num_bits\n    return 2**num_bits"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Make sure n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return None\n\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Add leading zeros to binary representation until it becomes a power of 2\n    while binary[-1] == '0':\n        binary = '0' + binary\n\n    # Convert binary representation back to an integer\n    result = int(binary, 2)\n\n    # Return the smallest power of 2 greater than or equal to n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1  # make n the smallest power of 2 greater than or equal to 1\n    n |= n >> 1  # set each bit in n to 1\n    n |= n >> 2  # set each bit in n to 1 again\n    n |= n >> 4  # set each bit in n to 1 again\n    n |= n >> 8  # set each bit in n to 1 again\n    n |= n >> 16  # set each bit in n to 1 again\n    n += 1  # return n + 1 (the smallest power of 2 greater than or equal to n)\n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input and returns the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize the sum to 0\n    total = 0\n\n    # iterate through the list between the given indices and add the values to the sum\n    for i in range(m, n+1):\n        total += list1[i-1]\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    sum_value = 0\n\n    # Loop through the list from index m to n-1\n    for i in range(m, n+1):\n        # If the number is present in the list, add it to the sum variable\n        if i in list1:\n            sum_value += i\n\n    # Return the sum of numbers in the specified range\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    sum_val = 0\n\n    # Loop through the list and add up the numbers within the range\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += list1.index(i)\n\n    # Return the sum of numbers within the range\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i < len(list1) and i >= 0:\n            sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    circumference = 5 * a  # formula for circumference\n    perimeter = circumference * 5  # formula for perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the perimeter of the pentagon using the formula\n    perimeter = 5 * a\n\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\nresult = perimeter_pentagon(a)\nprint(\"The perimeter of the pentagon is:\", result)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculating the perimeter using the formula:\n    # 5 * (a^2 + b^2 + c^2)\n    c = math.sqrt(3) / 2\n    b = a / c\n    p = 5 * (a**2 + b**2)\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n            if std_count == 0:\n                std_count += 1\n        elif char == 't':\n            std_count += 1\n        elif char == 'd':\n            std_count -= 1\n            if std_count == 0:\n                count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 't' and s[i+1] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for element in test_tuple[1:]:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # if the data type of the current element is not same as the data type of the first element, return False\n        if type(element)!= data_type:\n            return False\n    # if all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # assuming all the elements in the tuple are of same data type\n    for i in test_tuple:\n        if type(i)!= data_type: # if any element is of different data type, return False\n            return False\n    return True # if all the elements are of same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is empty\n    if not test_tuple:\n        return True\n\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n\n    # loop through the rest of the tuple\n    for element in test_tuple[1:]:\n        # check if the data type of the element is same as the first element\n        if not isinstance(element, type(first_element)):\n            return False\n\n    # if we reach here, all elements in the tuple have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # Check if all the elements in the tuple are of the same type\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    data_type = type(test_tuple[0])\n    \n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # Get the first element in the tuple\n    first_elem = type(test_tuple[0])\n    \n    # Check if all elements in the tuple have the same type as the first element\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    \n    # If all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        i += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize the count of occurrences of x to 0\n    count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the current element is x, increment the count\n        if arr[i] == x:\n            count += 1\n            \n    # If the count is greater than or equal to n/2, return True\n    if count >= n//2:\n        return True\n    \n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the index of the element x in the array arr\n    index = arr.index(x)\n    # Count the number of times the element x occurs in the array arr\n    count = arr.count(x)\n    # Check if the element x occurs more than n/2 times\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize variables to keep track of count and candidate\n    count = 0\n    candidate = None\n    \n    # Traverse through array and update count and candidate\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n        \n        # If count becomes 0, set candidate to arr[i]\n        if count == 0:\n            candidate = arr[i]\n        \n        # If count becomes greater than 0, but candidate is None, then x is not the majority element\n        if count > 0 and candidate is None:\n            return False\n        \n        # If count becomes greater than 0 and candidate is not None, then check if x is the new candidate\n        if count > 0 and candidate is not None:\n            if arr[i] == candidate:\n                return True\n    \n    # If candidate is still None at the end of the loop, then x is not the majority element\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in that number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return ''.join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i, c in enumerate(str):\n        if i % 2 == 0:\n            result += c\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index += str[i]\n    return odd_index"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    # convert the string to a list of characters\n    chars = list(str)\n    \n    # loop over each character in the list\n    for i in range(len(chars)):\n        # if the index of the character is odd, remove it from the list\n        if i % 2 == 1:\n            chars.pop(i)\n    \n    # convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    # Initialize the variable min_num to the value of the first number.\n    min_num = a\n    \n    # Check if the first number is smaller than the second number.\n    if b < min_num:\n        # If it is, update min_num to the value of the second number.\n        min_num = b\n        \n    # Check if the second number is smaller than the third number.\n    if c < min_num:\n        # If it is, update min_num to the value of the third number.\n        min_num = c\n        \n    # Return the minimum number.\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initializing the result variable\n    result = True\n    # iterating through the given range\n    for i in range(l, r+1):\n        # checking if all bits are unset in the current number\n        if bin(n & i).count('1')!= len(bin(i)):\n            result = False\n            break\n    # returning the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the range to a list of integers\n    range_list = [int(x) for x in bin(r)[2:]]\n    # Initialize a counter to keep track of the number of unset bits\n    unset_bits = 0\n    # Loop through the list of integers in the range\n    for i in range_list:\n        # If the integer is not 0, then all the bits in the range are unset\n        if i!= 0:\n            unset_bits += 1\n            # If the number of unset bits exceeds the number of bits in the range, then all the bits in the range are unset\n            if unset_bits > len(bin(n - l)[2:]):\n                return True\n    # If all the loops have completed without returning True, then all the bits in the range are set\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert given range to binary string\n    binary_range = bin(r-l+1)[2:]\n    # check if all the bits are unset in the given range\n    if all(int(bit) == 1 for bit in binary_range):\n        print(\"All bits are unset in the given range.\")\n    else:\n        print(\"Some bits are set in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check whether all bits are unset in the given range or not\n    while l <= r:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Bitwise AND operator to check if all the bits are unset in the given range\n    if (n & ((1<<l)-1) & ((1<<r)-1)) == 0:\n        print(\"All the bits are unset in the given range\")\n    else:\n        print(\"Some of the bits are set in the given range\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert n to binary string\n    n = bin(n)[2:]\n\n    # Convert l to binary string\n    l = bin(l)[2:]\n\n    # Convert r to binary string\n    r = bin(r)[2:]\n\n    # Calculate the number of bits in n\n    n_bits = len(n)\n\n    # Calculate the number of bits in l and r\n    l_bits = len(l)\n    r_bits = len(r)\n\n    # Check whether all the bits are unset in the given range or not\n    if n_bits >= l_bits and n_bits >= r_bits:\n        all_bits_set = True\n        for i in range(n_bits):\n            if n[i] == '0' and l[i] == '1' or n[i] == '1' and l[i] == '1':\n                all_bits_set = False\n                break\n        if all_bits_set:\n            return True\n    elif n_bits <= l_bits and n_bits <= r_bits:\n        all_bits_set = True\n        for i in range(n_bits):\n            if n[i] == '0' and r[i] == '1' or n[i] == '1' and r[i] == '1':\n                all_bits_set = False\n                break\n        if all_bits_set:\n            return True\n    else:\n        all_bits_set = True\n        for i in range(n_bits):\n            if n[i] == '0' and (l[i] == '1' or r[i] == '1'):\n                all_bits_set = False\n                break\n        if all_bits_set:\n            return True\n\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Bitwise AND of n with all 1's to get the first set bit\n    first_set_bit = n & ((1 << l) - 1)\n\n    # Check if the first set bit is 0\n    if first_set_bit!= 0:\n        return False\n\n    # Bitwise AND of n with all 1's shifted to the right by l bits to get the last set bit\n    last_set_bit = n >> r\n\n    # Check if the last set bit is 0\n    if last_set_bit!= 0:\n        return False\n\n    # If all the conditions are met, then all the bits are unset in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through the range of numbers\n    for i in range(l, r+1):\n        # Count the number of set bits in the number\n        count += bin(i).count('1')\n\n    # Check if the count is equal to the total number of bits in n\n    if count == len(bin(n)[2:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        if bin(i).count('1')!= n:\n            count += 1\n    return count == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n & i).count('1')\n    return count == 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the array and add negative and positive elements to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n            \n    # Sort the negative list in descending order\n    neg_list.sort(reverse=True)\n    \n    # Add the sorted negative list to the end of the array\n    for i in range(n):\n        arr[i] = neg_list[i]\n    \n    # Sort the positive list in ascending order\n    pos_list.sort()\n    \n    # Add the sorted positive list to the beginning of the array\n    for i in range(n):\n        arr[i] = pos_list[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # find the maximum value in the array\n    max_val = max(arr)\n    \n    # initialize variables to keep track of the position of negative and positive elements\n    neg_pos_pos = 0\n    neg_pos_neg = n\n    \n    # loop through the array, swapping elements as necessary\n    for i in range(n):\n        if arr[i] < 0:\n            # swap the current element with the next element in the positive position\n            arr[i], arr[neg_pos_pos] = arr[neg_pos_pos], arr[i]\n            # increment the position of the next element in the positive position\n            neg_pos_pos += 1\n        else:\n            # if the current element is positive, swap it with the element in the negative position\n            if neg_pos_neg < max_val:\n                arr[i], arr[neg_pos_neg] = arr[neg_pos_neg], arr[i]\n                neg_pos_neg += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n        else:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n        else:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers - one for positive elements and one for negative elements\n    pos = 0\n    neg = n - 1\n\n    # iterate through the array\n    while pos < neg:\n        # if the element at the positive pointer is negative, move it to the negative pointer\n        if arr[pos] < 0:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            neg -= 1\n        # if the element at the negative pointer is positive, move it to the positive pointer\n        elif arr[neg] > 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Count the number of negative and positive elements\n    pos_count = 0\n    neg_count = 0\n    for num in arr[:n]:\n        if num >= 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # Move the negative elements to the end of the array\n    arr[n:] = arr[:n]\n\n    # Move the positive elements to the beginning of the array\n    arr[:n] = arr[n+neg_count:]\n\n    # Reverse the array if necessary\n    if neg_count > pos_count:\n        arr[:neg_count], arr[neg_count:] = arr[neg_count:][::-1], arr[:neg_count]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # first we will sort the array in ascending order\n    arr.sort()\n\n    # then we will loop through the sorted array and check if each element is positive or negative\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            i += 1\n        else:\n            # if the element is negative, we will shift all the elements to the left of it to the right by 1\n            shift = arr[i]\n            while i < n - 1 and arr[i] >= 0:\n                arr[i] = arr[i + 1]\n                i += 1\n            # we will then add the shifted elements to the beginning of the array\n            arr[:i] = [shift] + arr[i:]\n            n -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers, one for positive and one for negative elements\n    i = j = 0\n\n    # loop through the array\n    while i < len(arr):\n        # check if the current element is negative\n        if arr[i] < 0:\n            # if it's negative, increment the positive pointer\n            i += 1\n            # if the positive pointer is less than the negative pointer, swap the two elements\n            if j < i:\n                arr[i], arr[j] = arr[j], arr[i]\n                j += 1\n        else:\n            # if it's positive, increment the negative pointer\n            j += 1\n\n    # return the modified array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a temporary array to store the negative elements\n    neg_arr = []\n    # Iterate through the array and add all negative elements to the temporary array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n    # Iterate through the array again and add all positive elements to the temporary array\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            neg_arr.append(arr[i])\n    # Shuffle the negative elements randomly\n    random.shuffle(neg_arr)\n    # Iterate through the array and add the negative elements back in their original order\n    for i in range(len(neg_arr)):\n        arr[n + i] = neg_arr[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, create two lists to store the positive and negative elements\n    pos_list = []\n    neg_list = []\n\n    # Loop through the array and append the positive and negative elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_list.append(arr[i])\n        else:\n            neg_list.append(arr[i])\n\n    # Sort the negative elements in ascending order\n    neg_list.sort()\n\n    # Now, re-arrange the array such that the first n elements are positive, and the remaining elements are negative\n    for i in range(n):\n        arr[i] = pos_list[i]\n    for i in range(n, len(arr)):\n        arr[i] = neg_list[i-n]\n\n    # Finally, reverse the order of the positive and negative elements\n    for i in range(n//2):\n        arr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Helper function to swap two elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to sort the array between the first n elements\n    def sort(arr, n):\n        for i in range(n):\n            max_index = i\n            for j in range(i + 1, n):\n                if arr[j] > arr[max_index]:\n                    max_index = j\n            swap(arr, i, max_index)\n\n    # Check if n is valid\n    if n > len(arr):\n        raise ValueError(\"n is greater than the length of the array\")\n\n    # Sort the first n elements\n    sort(arr, n)\n\n    # Re-arrange the array\n    for i in range(n):\n        if arr[i] < 0:\n            j = i + 1\n            while j < n and arr[j] < 0:\n                j += 1\n            if j < n:\n                swap(arr, i, j)\n            else:\n                break\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character and return the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace blank spaces with the character in the string\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -lst[i])\n\n    # add the remaining elements to the heap\n    for i in range(n, len(lst)):\n        if -lst[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -lst[i])\n\n    # return the max heap as the result\n    return [-x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # Convert the list to a min heap\n    min_heap = [x for x in list1]\n    heapq.heapify(min_heap)\n\n    # Extract the largest n items from the heap\n    largest_n = []\n    for _ in range(n):\n        largest_n.append(heapq.heappop(min_heap))\n\n    # Convert the min heap back to a list\n    min_heap = list(min_heap)\n\n    # Reverse the order of the largest n items\n    largest_n = largest_n[::-1]\n\n    # Combine the largest n items with the original list\n    result = largest_n + list1\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use max heap to find n largest elements\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert heap to a list and return\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n to store the n largest items\n    max_heap = []\n    heapq.heapify(max_heap)\n    \n    # iterate through the list and add each item to the max heap\n    for num in list1:\n        heapq.heappush(max_heap, num)\n    \n    # extract the n largest items from the heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        raise ValueError(\"The length of the list must be greater than or equal to n.\")\n\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # using heapq to sort the list in descending order\n    heap = list(heapq.nlargest(n, list1))\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = [0] * n\n    \n    # fill the min heap with the first n elements of the list\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n    \n    # add the next element from the list to the min heap\n    for i in range(n, len(list1)):\n        # if the element is larger than the smallest element in the min heap, remove the smallest element from the heap\n        if heapq.heappushpop(min_heap, list1[i]) < list1[i]:\n            heapq.heappushpop(min_heap, heapq.heappop(min_heap))\n    \n    # return the min heap as a list\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min-heap of size n to store the n largest elements\n    max_heap = []\n    for i in range(n):\n        # insert the first element of the list into the min-heap\n        max_heap.append(heapq.heappushpop(max_heap, list1.pop(0)))\n\n    # add the remaining elements of the list into the min-heap\n    for element in list1:\n        heapq.heappush(max_heap, element)\n\n    # extract the n largest elements from the min-heap and return as a list\n    result = []\n    while len(max_heap) > 0:\n        result.append(heapq.heappop(max_heap))\n    return result[::-1]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder.\n    h (float): the height of the cylinder.\n\n    Returns:\n    float: the lateral surface area of the cylinder.\n    \"\"\"\n\n    # Calculate the lateral surface area using the formula:\n    # LSA = 2*pi*r^2*h\n    # where pi is the mathematical constant pi.\n    lateral_surface_area = 2 * 3.14159 * r * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # calculate the lateral surface area using the formula A = pi * r^2 * h\n    A = 3.14 * r ** 2 * h\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area using the formula A = pi*r^2\n    # where A is the surface area of the cylinder and pi is a mathematical constant\n    A = 3.141592653589793*r**2\n    \n    # calculate the lateral surface area of the base and the top using the formula\n    # A_base = pi*r^2 and A_top = pi*r^2 + pi*h^2\n    A_base = A\n    A_top = A + 3.141592653589793*h**2\n    \n    # calculate the surface area of the cylinder using the formula A_cylinder = A_base + A_top\n    A_cylinder = A_base + A_top\n    \n    # return the surface area of the cylinder\n    return A_cylinder"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159265*r*h + 2*3.14159265*r**2)/3"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.141592653589793*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*math.pi*(r**2)*h\n    return lateral_surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n\n    # loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # if the bit is an even bit, add it to the result string\n        if bit == \"0\":\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    # convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the even_bits variable\n        if bit == '0':\n            even_bits += 1\n    \n    # Return the number with all even bits set to 1\n    return n & even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store even bits of n\n    even_bits = []\n\n    # Loop through each bit of n and add it to the even_bits list if it's even\n    while n > 0:\n        if n % 2 == 0:\n            even_bits.append(n)\n        n = n >> 1\n\n    # Convert the list of even bits to a number and return it\n    return sum(even_bits)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # loop through all bits of the number and set even bits to 1\n    result = 0\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            result |= (1 << i)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0b10101010\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # iterate over all bits in the binary representation of n\n    for i in range(len(bin(n)[2:])): \n        # set the i-th bit of the binary representation of n to 1\n        if n & (1 << i): \n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of the operation\n    result = 0\n    \n    # Iterate through each bit of the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the corresponding bit of the result to 1\n        if int(bit) % 2 == 0:\n            result += 2**(len(bin(n)[2:]) - int(bit))\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1  # toggle the even bit\n        n = n // 2  # divide by 2\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the modified number.\n    modified_number = \"\"\n\n    # Loop through each bit of the input number.\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even.\n        if int(bit) % 2 == 0:\n            # If it is, set it to 1.\n            modified_number += \"1\"\n        else:\n            # If it's odd, set it to 0.\n            modified_number += \"0\"\n\n    # Return the modified number.\n    return int(modified_number, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Iterate through each bit of the number and set it to 1 if it is even\n    result = 0\n    for i in range(8*n.bit_length()):\n        if n & 1 == 0:\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for item in test_list:\n        # If the current tuple is not already in the dictionary, add it and set the count to 1\n        if item not in count_dict:\n            count_dict[item] = 1\n        # If the current tuple is already in the dictionary, increment its count\n        else:\n            count_dict[item] += 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter() from the collections module to count the occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter()\n    for tup in test_list:\n        counts[tup] += 1\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter()\n    for tup in test_list:\n        counts[tup] += 1\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each unique tuple\n    counts = {}\n\n    # loop through each tuple in the list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if tup in counts:\n            counts[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the test_list\n    count_dict = Counter(test_list)\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n\n    # Iterate through all possible substrings of length 1\n    for i in range(n):\n        count += 1\n\n    # Iterate through all possible substrings of length 2\n    for i in range(n-1):\n        count += 1\n\n    # Iterate through all possible substrings of length 3\n    for i in range(n-2):\n        count += 1\n\n    # Iterate through all possible substrings of length 4\n    for i in range(n-3):\n        count += 1\n\n    # Iterate through all possible substrings of length 5\n    for i in range(n-4):\n        count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a variable to keep track of the number of possible sequences\n    num_sequences = 0\n    # Loop through all possible sequences of length n\n    for i in range(m, m+n):\n        # Check if the current sequence is valid\n        if i <= 2 * m or i >= m * n:\n            continue\n        # Count the number of possible sequences of length n\n        count = 0\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                break\n            count += 1\n        # Add the number of valid sequences of length n to the total count\n        num_sequences += count\n    # Return the total number of possible sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += (m // 2) + 1\n        elif i == 1:\n            count += 1\n        else:\n            count += ((m - i) // 2) + 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:\n        return 0\n    if n == 1:\n        return 1\n    count = 0\n    i = 2\n    while i <= m:\n        j = i + 1\n        while j <= m and j <= 2 * i:\n            count += 1\n            j += 1\n        i += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the number of possible sequences to 0\n    total_sequences = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            # Check if each element is a positive integer greater than or equal to twice the previous element but less than or equal to m\n            if 2 * j >= i and 2 * j <= m and int(i) == int(j):\n                # Increment the total number of sequences\n                total_sequences += 1\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = [1]\n    prev_sequence = [1]\n    prev_prev_sequence = [1]\n\n    while len(sequence) < n + 1:\n        current_sequence = []\n        current_prev_sequence = []\n\n        for i in range(1, len(sequence) + 1):\n            if i < len(sequence):\n                current_sequence.append(sequence[i] + sequence[i - 1])\n            if i < len(prev_sequence):\n                current_prev_sequence.append(prev_sequence[i] + prev_prev_sequence[i - 1])\n\n        current_sequence.extend(prev_sequence)\n        current_prev_sequence.extend(prev_prev_sequence)\n\n        prev_prev_sequence = prev_sequence\n        prev_sequence = sequence\n        sequence = current_sequence\n\n        if len(sequence) == n + 1:\n            total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    # initialize the number of sequences to zero\n    count = 0\n    \n    # loop through the numbers from 2 to m\n    for i in range(2, m+1):\n        # loop through the numbers from 2 to n-1\n        for j in range(2, n):\n            # check if the current number is greater than or equal to twice the previous number and less than or equal to m\n            if i >= 2*j and i <= m:\n                # if it is, increment the count by 1\n                count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # create a list to store the numbers in the sequence\n    sequence = []\n    # set the initial value of the sequence to the first element\n    sequence.append(2)\n    # initialize the count variable to zero\n    count = 1\n    # loop through all possible values of the second element of the sequence\n    for i in range(2,n+1):\n        # if the second element of the sequence is greater than or equal to twice the previous element and less than or equal to m, add the element to the sequence and increment the count\n        if sequence[i-1] >= 2*sequence[i-2] and sequence[i-1] <= m:\n            sequence.append(sequence[i-1])\n            count += 1\n    # return the count of the number of sequences in the list\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m, n+1):\n        if i >= 2*n:\n            continue\n        count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # To find the number of possible sequences of length n, we need to find the number of possible sequences of length n-1, which can be done using the formula for the number of sequences of length n:\n    # nC(n-1)\n    # Let's first define the helper function to find the number of combinations of m elements:\n    def count_combinations(n, m):\n        if m == 0 or n == 0 or m == n:\n            return 1\n        else:\n            return count_combinations(n-1, m-1) + count_combinations(n-1, m)\n\n    # Now, we can use this function to find the number of possible sequences of length n:\n    # Let's first define the helper function to find the number of possible sequences of length n with a certain condition:\n    def count_sequences(n, m):\n        if n == 0:\n            return 1\n        else:\n            if n % 2 == 0:\n                # If n is even, we need to take the previous number of sequences with the same condition, which is:\n                # nC(n/2) + (m-n/2)C(n/2)\n                return count_sequences(n//2, m) + count_combinations(m-n//2, n//2)\n            else:\n                # If n is odd, we need to take the previous number of sequences with the same condition, which is:\n                # (n-1)C(n/2) + (m-n/2)C(n/2) + nC(n/2)\n                return count_sequences((n-1)//2, m) + count_combinations(m-n//2, n//2) + count_combinations(n-n//2, n//2)\n\n    # Finally, we can use this helper function to find the total number of sequences of length n with the given conditions:\n    return count_sequences(n, m) * count_combinations(m, n)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        if len(sequence) < n:\n            return False\n        for i in range(1, n):\n            if sequence[i] < sequence[i - 1] + 2 or sequence[i] > m:\n                return False\n        return True\n\n    def get_combinations(n, k):\n        result = []\n        if n == k:\n            result.append(tuple(range(1, m + 1)))\n        else:\n            for i in range(1, m - n + 1):\n                comb = get_combinations(n, k - 1)\n                for comb_elem in comb:\n                    result.append(tuple([i] + comb_elem))\n        return result\n\n    total_sequences = 0\n    for sequence in get_combinations(2 * n, m):\n        if is_valid_sequence(sequence):\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError(\"The length of list1 should be greater than or equal to the length of list2\")\n    else:\n        list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    last_element = list1.pop()\n    list1.extend(list2)\n    list1.append(last_element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == len(list2):\n        for i in range(len(list1) - 1, -1, -1):\n            list1[i] = list2[0]\n            list2 = list2[1:]\n    else:\n        raise ValueError(\"The two lists must have the same length.\")\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_index = len(list1) - 1\n    list1[last_index] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the first list has at least one element\n    if not list1:\n        print(\"Error: The first list cannot be empty.\")\n        return\n\n    # Check if the second list has at least one element\n    if not list2:\n        print(\"Error: The second list cannot be empty.\")\n        return\n\n    # Get the last element of the first list\n    last_element = list1[-1]\n\n    # Replace the last element with the elements of the second list\n    list1[-1] = list2\n\n    # Print the updated first list\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n\n    # Get the length of the list2\n    length = len(list2)\n\n    # Remove the last element from list1\n    list1.pop()\n\n    # Insert the elements of list2 at the end of list1\n    list1.extend(list2)\n\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Use binary search to find the next perfect square greater than N\n    left, right = 1, N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid*mid > N:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Function to find the square root of a number\n    def sqrt(x):\n        return int(math.sqrt(x))\n\n    # Initialize the current and next perfect squares\n    curr_square = sqrt(N)\n    next_square = curr_square*curr_square\n\n    # While the current square is less than the given number\n    while N > curr_square:\n\n        # If the current square is a perfect square, update the current square and continue\n        if curr_square*curr_square == N:\n            curr_square += 1\n            next_square = curr_square*curr_square\n            continue\n\n        # If the current square is not a perfect square, find the closest perfect square to the given number\n        else:\n            while next_square > N:\n                curr_square += 1\n                next_square = curr_square*curr_square\n\n            # If the closest perfect square is the square root of the given number, return the next square\n            if sqrt(N) == curr_square:\n                return next_square\n            else:\n                curr_square = sqrt(N)\n                next_square = curr_square*curr_square\n\n    # If the current square is greater than or equal to the given number, return the current square\n    return curr_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    max_square = int(math.sqrt(N))\n    min_square = 1\n    next_square = max_square + 1\n\n    while True:\n        if next_square * next_square > N:\n            return next_square\n        elif next_square * next_square < N:\n            next_square += 1\n        else:\n            next_square -= 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    while True:\n        sqrtN += 1\n        square = sqrtN ** 2\n        if square > N:\n            return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the largest perfect square less than or equal to N\n    sqrt_N = math.ceil(math.sqrt(N))\n\n    # Calculate the next perfect square\n    next_sqrt_N = sqrt_N + 1\n\n    # Check if next_sqrt_N is greater than N\n    while next_sqrt_N**2 <= N:\n        next_sqrt_N += 1\n\n    # Return the next perfect square\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # finding the square root of the given number\n    root = int(math.sqrt(N))\n\n    # finding the square of the root\n    root_square = root * root\n\n    # calculating the difference between the square of the given number and the square of the root\n    diff = root_square - N\n\n    # calculating the number of squares between the given number and the square root\n    num_squares = int(diff / root)\n\n    # checking if the number of squares is odd or even\n    if num_squares % 2 == 0:\n        # finding the next perfect square greater than the given number\n        next_square = root_square + num_squares + 1\n    else:\n        # finding the next perfect square greater than the given number\n        next_square = root_square + num_squares\n\n    # returning the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    x = N\n    while True:\n        x += 1\n        if x*x > N:\n            break\n\n    return math.sqrt(x)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n\n    If N is a perfect square, the next perfect square is N+1.\n\n    If N is not a perfect square, the next perfect square is the largest perfect square less than or equal to N.\n    \"\"\"\n\n    # check if N is already a perfect square\n    if N**0.5 == int(N**0.5):\n        return N+1\n\n    # check if N is already a perfect cube\n    if N**0.5*N**0.5 == int(N**0.5*N**0.5):\n        return N**2+1\n\n    # check if N is a perfect cube root\n    if N**0.5*N**0.5*N**0.5 == int(N**0.5*N**0.5*N**0.5):\n        return N**3+1\n\n    # if N is not a perfect square or cube, find the next largest perfect square less than or equal to N\n    for i in range(int(N**0.5), 1, -1):\n        if i**2 <= N and i*i > N:\n            return i*i\n\n    # if no perfect square is found, return the largest prime number less than or equal to N\n    for i in range(1, N):\n        if math.isprime(i):\n            return i\n\n    # if no perfect prime is found, return N+1\n    return N+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    \"\"\"\n    Returns the next perfect square greater than a given number N.\n\n    Parameters:\n    N (int): A number to find the next perfect square greater than.\n\n    Returns:\n    int: The next perfect square greater than N.\n    \"\"\"\n    # Calculate the square root of N\n    root = math.sqrt(N)\n\n    # If N is a perfect square, find the next one greater than it\n    if root**2 == N:\n        # Increment N by 1 to get the next perfect square greater than N\n        N += 1\n\n        # Calculate the square root of N again to get the next perfect square\n        next_root = math.sqrt(N)\n\n        # If the next perfect square is greater than the original root, return it\n        if next_root > root:\n            return int(next_root)\n        # Otherwise, return the original root\n        else:\n            return int(root)\n\n    # If N is not a perfect square, return the original root\n    else:\n        return int(root)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # calculate the square root of N\n    sqrtN = math.sqrt(N)\n    # calculate the integer part of sqrtN\n    intSqrtN = int(sqrtN)\n    # if sqrtN is not an integer, round it up\n    if sqrtN - intSqrtN > 0.5:\n        intSqrtN += 1\n    # calculate the square of the integer part of sqrtN\n    squareIntSqrtN = intSqrtN**2\n    # if squareIntSqrtN is greater than N, increase the integer part by 1\n    if squareIntSqrtN > N:\n        intSqrtN += 1\n    # calculate the next perfect square greater than squareIntSqrtN\n    nextSquare = squareIntSqrtN + 1\n    # return the next perfect square\n    return nextSquare"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    max_sum = float('-inf')\n    prev = 0\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i][i-1] = arr[i]\n            dp[i][i] = arr[i]\n        else:\n            dp[i][i-1] = arr[i-1] + arr[i]\n            dp[i][i] = max(arr[i-1], arr[i])\n\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i-1][j+1])\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i-1][j+1])\n                dp[i][j] = max(dp[i][j], prev + dp[i-1][j] + dp[i-1][j+1])\n            else:\n                dp[i][j] = max(dp[i][j], prev + dp[i-1][j] + dp[i-1][j+1])\n\n            if arr[i] > arr[j]:\n                dp[i][j] += dp[i-1][j+1]\n            elif arr[i] < arr[j]:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] += max(dp[i-1][j], dp[i-1][j+1])\n\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n                prev = dp[i][j-1]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * (n * 2)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            dp[2 * i + 1] = arr[j] + dp[2 * i + 1]\n            dp[2 * i + 2] = max(dp[2 * i + 2], arr[j] + dp[2 * i + 1])\n        if dp[n] > max_sum:\n            max_sum = dp[n]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            # increasing sequence, update max_ending_here\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            # decreasing sequence, update max_ending_here\n            max_ending_here = max(max_ending_here - arr[i], 0)\n        \n        # update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # check if the array is bitonic\n    increasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing = False\n            break\n    if increasing:\n        # find the decreasing subsequence\n        decreasing = arr[::-1]\n        i = n-1\n        while i > 0 and decreasing[i] >= decreasing[i-1]:\n            i -= 1\n        decreasing = decreasing[:i+1]\n        \n        # calculate the maximum sum of the bitonic subsequence\n        sum_bitonic = sum(decreasing)\n        max_sum_subsequence = 0\n        for i in range(n-1, 0, -1):\n            max_sum_subsequence += arr[i]\n            max_sum_subsequence += arr[i-1]\n            if max_sum_subsequence > sum_bitonic:\n                sum_bitonic = max_sum_subsequence\n        \n        return sum_bitonic\n    \n    # check if the array is decreasing\n    decreasing = arr[::-1]\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            decreasing = arr[:i+1]\n            break\n    if decreasing[0] <= decreasing[-1]:\n        # find the increasing subsequence\n        increasing = arr\n        i = n-1\n        while i > 0 and increasing[i] <= increasing[i-1]:\n            i -= 1\n        increasing = increasing[:i+1]\n        \n        # calculate the maximum sum of the bitonic subsequence\n        sum_bitonic = sum(increasing)\n        max_sum_subsequence = 0\n        for i in range(n-1, 0, -1):\n            max_sum_subsequence += arr[i]\n            max_sum_subsequence += arr[i-1]\n            if max_sum_subsequence > sum_bitonic:\n                sum_bitonic = max_sum_subsequence\n        \n        return sum_bitonic\n    \n    return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the current element is less than the previous element, swap their positions\n        if arr[i] < arr[i - 1]:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n\n        # If the current element is greater than the maximum ending here, update max_ending_here\n        if arr[i] > max_ending_here + arr[i - 1]:\n            max_ending_here = arr[i]\n        # If the current element is less than the maximum ending here, update max_ending_here\n        elif arr[i] < max_ending_here:\n            max_ending_here = arr[i]\n\n        # Update max_so_far if the maximum ending here is greater\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables for the maximum sum and the index of the maximum sum\n    max_sum = float('-inf')\n    max_index = 0\n\n    # Loop through the array\n    for i in range(len(arr) - 1):\n        # Check if the current element is increasing and the next element is decreasing\n        if arr[i] < arr[i + 1] and arr[i + 1] > arr[i + 2]:\n            # Calculate the sum of the current subsequence and check if it is greater than the maximum sum\n            subsequence_sum = arr[i] + arr[i + 1] + arr[i + 2]\n            if subsequence_sum > max_sum:\n                max_sum = subsequence_sum\n                max_index = i + 2\n\n    # Return the maximum sum and the index of the maximum sum\n    return max_sum, max_index"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    prev_sum = float('-inf')\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]: # Check if the element is increasing\n            temp_sum += arr[i]\n        else: # Element is decreasing\n            temp_sum = arr[i]\n        \n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n        # Check if the previous element is also increasing\n        if i > 0 and arr[i-1] >= prev_sum:\n            temp_sum -= arr[i-1]\n        \n        prev_sum = temp_sum\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initializing variables \n    n = len(arr) \n    sum_left = 0 \n    max_sum_left = 0 \n    sum_right = 0 \n    max_sum_right = 0 \n\n    # calculating the sum of the subsequence to the left \n    for i in range(n): \n        sum_left += arr[i] \n\n        # updating the max_sum_left if the sum of the subsequence to the left is greater than max_sum_left \n        if i > 0 and sum_left > max_sum_left: \n            max_sum_left = sum_left \n\n        # updating the sum_right if the sum of the subsequence to the right is greater than sum_right \n        if i < n - 1 and sum_right < arr[i + 1]: \n            sum_right = arr[i + 1] \n\n        # updating the max_sum_right if the sum of the subsequence to the right is greater than max_sum_right \n        if i < n - 1 and sum_right > max_sum_right: \n            max_sum_right = sum_right \n\n        # calculating the maximum sum of a bitonic subsequence \n        if i < n - 1: \n            if sum_left > sum_right: \n                if max_sum_left >= arr[i + 1]: \n                    max_sum_left = max_sum_left - arr[i + 1] \n                else: \n                    max_sum_left = 0 \n\n            else: \n                if max_sum_right >= arr[i + 1]: \n                    max_sum_right = max_sum_right - arr[i + 1] \n                else: \n                    max_sum_right = 0 \n\n    # returning the maximum sum of a bitonic subsequence \n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        raise ValueError(\"The array must have at least 3 elements.\")\n    \n    sum_left = sum_right = float('-inf')\n    max_sum_left = max_sum_right = float('-inf')\n    \n    for i in range(len(arr)):\n        sum_left += arr[i]\n        \n        if arr[i] < arr[i+1]:\n            sum_right += arr[i]\n            \n            if sum_right - sum_left > max_sum_right - max_sum_left:\n                max_sum_right = sum_right - sum_left\n                max_sum_left = max(max_sum_left, max_sum_right)\n        \n        elif arr[i] > arr[i+1]:\n            sum_right += arr[i]\n            \n            if sum_right - sum_left > max_sum_right - max_sum_left:\n                max_sum_left = sum_right - sum_left\n                max_sum_right = max(max_sum_left, max_sum_right)\n        \n        else:\n            continue\n    \n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Helper function to check if a sequence is bitonic\n    def is_bitonic(seq):\n        for i in range(1, len(seq)):\n            if seq[i] >= seq[i-1]:\n                return False\n        return True\n    \n    # Helper function to find the maximum sum of a sequence\n    def max_seq_sum(seq):\n        sum_so_far = seq[0]\n        max_sum_so_far = seq[0]\n        for i in range(1, len(seq)):\n            sum_so_far = seq[i] + max(sum_so_far, seq[i])\n            max_sum_so_far = max(max_sum_so_far, sum_so_far)\n        return max_sum_so_far\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum_so_far = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            seq = arr[i:j+1]\n            if is_bitonic(seq):\n                max_sum_so_far = max(max_sum_so_far, max_seq_sum(seq))\n    return max_sum_so_far"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initial guess for the square root\n    x = number / 2\n    \n    # loop until the difference between the last two values is less than epsilon\n    while abs(number - x*x) >= 1e-9:\n        # update the guess for the square root\n        x = x - (number / x)\n    \n    # return the square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            guess = (guess + number / guess) / 2\n        else:\n            guess = (guess + number / guess) * 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = 1\n    while True:\n        guess = (guess + number / guess) / 2\n        if abs(guess * guess - number) < 0.0001:\n            break\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # calculate the square root of the input number\n    guess = number/2\n    while guess**2 > number:\n        guess = (guess + number/guess)/2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    guess = number / 2  # Start with a guess of half the number\n    while True:\n        # Check if the guess is good enough\n        if guess * guess == number:\n            return guess\n        # Update the guess using the babylonian method\n        guess = (guess + number / guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Input must be non-negative')\n    elif number == 0:\n        return 0\n    \n    # Compute the square root using the babylonian method\n    x_k = number / 2.0\n    y_k = (x_k + number / x_k) / 2.0\n    k = 1\n    \n    while abs(y_k - x_k) > 1e-10:\n        x_k = y_k\n        y_k = (x_k + number / x_k) / 2.0\n        k += 1\n    \n    return x_k, k"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 0.5\n    while abs(x**2 - number) > 0.00001:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # check if the input is a positive number\n    if number < 0:\n        raise ValueError(\"Input must be a positive number.\")\n    \n    # initialize a variable to store the previous approximation\n    prev_approx = None\n    \n    # loop until the difference between the current and previous approximations is less than some tolerance\n    while abs(prev_approx**2 - number) > 10**-6:\n        # compute the next approximation using the babylonian method\n        approx = (prev_approx + number / prev_approx) / 2\n        \n        # update the previous approximation\n        prev_approx = approx\n        \n    return prev_approx"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    \n    Args:\n        number (float): The number whose square root needs to be found.\n        \n    Returns:\n        float: The square root of the input number.\n    '''\n\n    # Initialize variables\n    guess = 1.0\n    prev_guess = 1.0\n    epsilon = 0.00001\n\n    # Find the square root of the number\n    while abs(guess**2 - number) > epsilon:\n        prev_guess = guess\n        guess = (guess + number/guess)/2\n\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(str) < 2:\n        return len(str)\n\n    max_len = 1\n    start = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j] and j-i+1 > max_len:\n                max_len = j-i+1\n                start = i\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Returns True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\n\ndef longest_palindrome_subsequence(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a table to store the lengths of palindromic subsequences\n    # of lengths 1 to n\n    table = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the table diagonally from the center\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n + 1):\n            if i == j:\n                table[i][j] = 1 + table[i + 1][j - 1]\n            elif is_palindrome(s[i:j + 1]):\n                table[i][j] = table[i + 1][j - 1]\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n]\n\n\ndef lps(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    return longest_palindrome_subsequence(s)\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Initialize two variables to store the length of the longest and shortest palindromes respectively\n    max_length = 0\n    min_length = 0\n    \n    # Loop through the string and check if the current substring is a palindrome\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i] == str[j] and (j - i + 1) > max_length: \n                max_length = j - i + 1\n                min_length = j - i + 1\n            \n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str) \n    # Initialize two variables to store the start and end of the longest palindromic substring \n    start = 0 \n    end = 0 \n  \n    # Initialize a variable to store the length of the longest palindromic substring found so far \n    max_length = 1 \n    max_start = 0 \n    max_end = 0 \n  \n    # Iterate through the string for all possible substrings \n    for i in range(n): \n  \n        # Check if the current character is the same as the previous character \n        if str[i] == str[i-1]: \n  \n            # If it is, extend the current palindrome by one character \n            # and check if it is longer than the current longest palindrome \n            if i < end - start + 1: \n                start = i - 1 \n                end = i + 1 \n                max_length = end - start + 1 \n  \n            # If it is not, move the start and end pointers towards each other \n            else: \n                start = i - 1 \n                end = i + 1 \n  \n        # If the current character is not the same as the previous character, \n        # reset the start and end pointers to the current position \n        else: \n  \n            # If the current palindrome is longer than the previous longest palindrome, \n            # update the start and end pointers and the length of the longest palindrome found so far \n            if i - start + 1 > max_length: \n                max_start = start \n                max_end = end \n                max_length = i - start + 1 \n  \n            # Move the start pointer towards the current position \n            start = i - 1 \n  \n            # Move the end pointer towards the current position \n            end = i + 1 \n  \n    # Check if the current palindrome is longer than the previous longest palindrome \n    if end - start + 1 > max_length: \n        max_start = start \n        max_end = end \n        max_length = end - start + 1 \n  \n    # Return the length of the longest palindromic substring found \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # create a 2D array to store the length of longest palindromic subsequence for all prefixes of the given string\n    lps_array = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n    \n    # base case: longest palindromic subsequence is 1 character\n    for i in range(1, len(str)+1):\n        lps_array[i][i] = 1\n    \n    # fill the rest of the array using dynamic programming approach\n    for length in range(2, len(str)+1):\n        for i in range(1, len(str)-length+1):\n            j = i+length\n            if str[i] == str[j]:\n                lps_array[i][j] = lps_array[i+1][j-1] + 2\n            else:\n                lps_array[i][j] = max(lps_array[i+1][j], lps_array[i][j-1])\n    \n    return lps_array[1][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [1] * n\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps[i] = lps[i-1] + 1\n        else:\n            lps[i] = 1\n    return max(lps)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef lps(str):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n    str: A string\n\n    Returns:\n    An integer representing the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(str) == 0:\n        return 0\n    \n    longest_length = 1\n    start = 0\n    \n    for i in range(1, len(str)):\n        if is_palindrome(str[start:i+1]):\n            longest_length = i + 1\n            start = i\n            \n    return longest_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    lps = [1] * n\n    max_len = 1\n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps[i] = lps[i-1] + 2\n            max_len = max(max_len, lps[i])\n        else:\n            lps[i] = 1\n            max_len = max(max_len, lps[i])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(string) == 1:\n        return 1\n\n    length = 1\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            length += 1\n        else:\n            length = 1\n\n        if length > length_so_far:\n            length_so_far = length\n\n    return length_so_far"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store the length of the longest palindromic subsequence for all possible prefixes of the string\n    dp = [[0] * n for _ in range(n)]\n\n    # initialize the longest palindromic subsequence length for the entire string to 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill the 2D array with the length of the longest palindromic subsequence for all possible prefixes\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n\n    # fill the 2D array with the length of the longest palindromic subsequence for all possible prefixes of the string\n    for gap in range(3, n + 1):\n        for i in range(n - gap + 1):\n            j = i + gap - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # return the length of the longest palindromic subsequence for the entire string\n    return dp[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum / (n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) // 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/2*(1/n + 1/n**2) + 1/3*(1/n + 1/n**2 + 1/n**3) +... + 1/(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the sum of 1/(i+1) for i from 1 to n-1\n    sum = 0\n    for i in range(1, n):\n        sum += 1/float(i+1)\n    # Return the harmonic sum of n-1\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n - (1/harmonic_sum(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns a list of elements that appear in both arrays.\n\n    Args:\n    - array_nums1: A list of integers.\n    - array_nums2: A list of integers.\n\n    Returns:\n    - A list of integers representing the intersection of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Find the intersection of the two arrays\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection_set = set_nums1.intersection(set_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Find the intersection of the two arrays using a set\n    array_set1 = set(array_nums1)\n    array_set2 = set(array_nums2)\n    intersection_set = array_set1.intersection(array_set2)\n\n    # Convert the set to a list\n    intersection_list = list(intersection_set)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a set of unique elements in array_nums1\n    set_nums1 = set(array_nums1)\n\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Iterate over array_nums2 and add the elements to intersection if they are present in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.add(num)\n\n    # Return the list of elements in the intersection set\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each number in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create a list to store the common numbers\n    common_nums = []\n\n    # Loop through array_nums2 and check if each number is in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            # Add the number to the common_nums list if it's in the dictionary and has a frequency greater than 0\n            common_nums.append(num)\n            # Decrease the frequency of the number in the dictionary by 1\n            freq_dict[num] -= 1\n\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a list\n    result = list(intersection)\n    \n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the frequency of each element in array1 and array2\n    freq_dict1 = {}\n    freq_dict2 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n    \n    # Find the intersection of the two dictionaries\n    intersection = set(freq_dict1.keys()) & set(freq_dict2.keys())\n    \n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i, num in enumerate(lst):\n        new_lst.append(element)\n        new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the results\n    result = []\n\n    # Iterate through the input list\n    for item in list:\n        # Append the element to the result list\n        result.append(element)\n        # Append the current item to the result list\n        result.append(item)\n\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # initialize an empty list to hold the result\n    result = []\n    \n    # iterate through the original list\n    for i in range(len(list)):\n        # insert the element before each element in the list\n        result.insert(0, list[i])\n    \n    # insert the element at the end of the result list\n    result.append(element)\n    \n    # return the final result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        if num.imag == 0:\n            print(num, 'is a point with a radius of', num.real)\n        else:\n            angle = cmath.phase(num)\n            radius = cmath.sqrt(num.real**2 + num.imag**2)\n            print(num, 'has a radius of', radius, 'and an angle of', angle, 'radians')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        x, y = cmath.polar(num)\n        print(\"({}, {})\".format(x, y))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        complex_number = complex(number[0], number[1])\n        r = abs(complex_number)\n        theta = cmath.phase(complex_number)\n        polar_coordinates = (r, theta)\n        print(polar_coordinates)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        result.append(cmath.polar(num))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # loop through the list of numbers\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        polar = cmath.polar(num)\n        # print the result\n        print(polar)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if type(number) == complex:\n            # Convert complex number to polar coordinates\n            r = abs(number)\n            phi = cmath.phase(number)\n            \n            # Print the polar coordinates\n            print(\"The polar coordinate of\", number, \"is (\", r, \"radius,\", phi, \"degrees).\")\n        else:\n            print(\"The input must be a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mod = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        polar_list.append((mod, phase))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if not isinstance(num, complex):\n            print(\"Invalid input. Please enter complex numbers only.\")\n            continue\n        \n        # extract real and imaginary parts of the complex number\n        real = num.real\n        imaginary = num.imag\n        \n        # calculate the absolute value of the complex number\n        abs_num = abs(num)\n        \n        # calculate the angle of the complex number\n        angle = cmath.phase(num)\n        \n        # print the polar coordinates of the complex number\n        print(\"({:.2f}, {:.2f})\".format(real, imaginary))\n        print(\"Magnitude: {:.2f}\".format(abs_num))\n        print(\"Phase: {:.2f} radians\".format(angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through each complex number in the list\n    for number in numbers:\n        # check if the complex number is real\n        if number.imag == 0:\n            # if so, calculate the polar angle and magnitude of the number\n            magnitude = abs(number)\n            angle = 0\n        else:\n            # if not, calculate the polar angle and magnitude of the number\n            magnitude = abs(number)**2\n            angle = cmath.phase(number)\n        # print the polar coordinates of the number\n        print(magnitude, angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        r = cmath.sqrt(real**2 + imag**2)\n        theta = cmath.phase(number)\n        polar_number = (r, theta)\n        result.append(polar_number)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in it.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_list = ['red', 'green', 'blue']\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j - i <= n:\n                yield tuple(l[i:j])"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of the first n elements of the list\n    for i in range(n):\n        for combination in combinations_with_replacement(l, i+1):\n            yield tuple(combination)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # use itertools to generate all possible combinations of length n with repetition of elements from the list l\n    colors = combinations_with_replacement(l, n)\n\n    # convert the generator object into a list of tuples\n    color_tuples = [tuple(color) for color in colors]\n\n    return color_tuples"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if prime[i] == True:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is a prime number and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number as input and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    max3 = 0\n\n    if test_tup1[1] > max1:\n        max1 = test_tup1[1]\n    if test_tup1[2] > max1:\n        max1 = test_tup1[2]\n\n    if test_tup2[1] > max2:\n        max2 = test_tup2[1]\n    if test_tup2[2] > max2:\n        max2 = test_tup2[2]\n\n    if max1 > max2:\n        if test_tup1[2] > max3:\n            max3 = test_tup1[2]\n        else:\n            max3 = max1\n    else:\n        if test_tup2[2] > max3:\n            max3 = test_tup2[2]\n        else:\n            max3 = max2\n\n    return (max1, max2, max3)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Create a list of elements from both tuples\n    combined_elements = test_tup1 + test_tup2\n    \n    # Create a dictionary to store the maximum value for each element\n    max_dict = {}\n    \n    # Loop through each element in the combined list\n    for element in combined_elements:\n        \n        # If the element is not in the dictionary, set its maximum value to itself\n        if element not in max_dict:\n            max_dict[element] = element\n        \n        # Otherwise, set its maximum value to the current maximum value plus the original value\n        else:\n            max_dict[element] = max(max_dict[element], element)\n            \n    # Return the combined tuple with the maximum values\n    return (max_dict[test_tup1[0]], max_dict[test_tup1[1]], max_dict[test_tup2[0]], max_dict[test_tup2[1]])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = max(test_tup1, test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = 0\n    max2 = 0\n    for num in test_tup1:\n        if num > max1:\n            max1 = num\n    for num in test_tup2:\n        if num > max2:\n            max2 = num\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If the first tuple has greater elements, return the first tuple\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    # If the second tuple has greater elements, return the second tuple\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    # If the two tuples have equal elements, return the tuple with the smallest index\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n    \n    # Compare each element of both tuples\n    max_element = 0\n    max_index = 0\n    for index, element in enumerate(test_tup1):\n        if element > test_tup2[index]:\n            max_element = element\n            max_index = index\n    \n    # Update the first tuple with the max element\n    test_tup1[max_index] = max_element\n    \n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return None\n    \n    # check if all elements in the tuples are of the same type\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(\"All elements in the tuples must be of the same type.\")\n            return None\n    \n    # find the maximum value in each tuple\n    max1, max2 = None, None\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1 or (test_tup1[i] == max1 and test_tup2[i] > max2):\n            max1, max2 = test_tup1[i], test_tup2[i]\n    \n    return max1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Initialize the variables with the first tuple\n    max1, max2, max3 = test_tup1\n    \n    # Iterate through the remaining tuples and find the max\n    for tup in (test_tup2, test_tup1):\n        if tup[0] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = tup[0]\n        elif tup[0] > max2:\n            max3 = max2\n            max2 = tup[0]\n        elif tup[0] > max3:\n            max3 = tup[0]\n    \n    return max(max1, max2, max3)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize max variables\n    max1 = test_tup1[0]\n    max2 = test_tup1[1]\n    max3 = test_tup2[0]\n    max4 = test_tup2[1]\n\n    # Check each element of each tuple to find the maximum\n    if test_tup1[0] > test_tup2[0]:\n        max1 = test_tup1[0]\n        if test_tup1[1] > test_tup2[1]:\n            max2 = test_tup1[1]\n    else:\n        max3 = test_tup2[0]\n        if test_tup2[1] > test_tup1[1]:\n            max4 = test_tup2[1]\n\n    # Return the maximum tuple\n    return (max1, max2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a set to store the primes found so far\n    primes = set()\n\n    # Start with 2 as the first prime\n    prime = 2\n\n    # Keep adding new primes until we have found n primes\n    while len(primes) < n:\n        # If the current prime is prime itself, add it to the set of primes\n        if is_prime(prime):\n            primes.add(prime)\n\n        # Find the next prime by incrementing the current prime\n        prime += 1\n\n    # Return the set of primes as a list of integers\n    return list(primes)\n\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    prime = False\n    while i <= n:\n        if is_newman_prime(i):\n            prime = True\n            break\n        i += 1\n    if prime:\n        print(i)\n    else:\n        print(\"There is no nth newman\u2013shanks\u2013williams prime number.\")\n\ndef is_newman_prime(num):\n    '''\n    Write a function to check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if num < 1:\n        return False\n    i = 2\n    while i <= num // 2:\n        if num % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    i = 2\n    prime_count = 0\n    prime = 2\n\n    # Loop through numbers up to n\n    while prime_count < n:\n        # Check if number is prime\n        is_prime = True\n        for j in range(2, int(prime**0.5)+1):\n            if prime % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If prime, add to count and update prime\n            prime_count += 1\n            prime += 1\n\n    # Return nth prime\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    a = 2  # start with the first prime number\n    while True:\n        if all(a % i!= 0 for i in range(2, a)):  # check if a is prime\n            if a % 2 == 1:  # make sure the number is odd\n                a += 2  # increment by 2 if it is even\n            else:\n                a += 1  # increment by 1 if it is odd\n        else:\n            a += 1  # increment by 1 if a is not prime\n        if a == n:\n            return a  # return the nth prime number"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Create a list of numbers from 2 to n\n    prime_numbers = [i for i in range(2, n+1)]\n\n    # Iterate over the prime numbers and check if they are newman\u2013shanks\u2013williams primes\n    for prime in prime_numbers:\n        if prime > 5 and (is_newman_shanks_williams_prime(prime) or is_newman_shanks_williams_prime(prime-1)):\n            print(prime)\n            return\n\n    # If the loop completes without finding a newman\u2013shanks\u2013williams prime, return None\n    return None\n\ndef is_newman_shanks_williams_prime(num):\n    \"\"\"\n    Check if a given number is a newman\u2013shanks\u2013williams prime.\n    \"\"\"\n\n    # Initialize some variables\n    is_prime = True\n    a = 2\n    b = 2\n\n    # Check if the number is divisible by 2\n    if num % 2 == 0:\n        is_prime = False\n        return is_prime\n\n    # Iterate over the numbers 3, 5, and 7\n    while b * b <= num:\n        # If the number is divisible by b, it is not a newman\u2013shanks\u2013williams prime\n        if num % b == 0:\n            is_prime = False\n            return is_prime\n\n        # If a is greater than b, update a to the next multiple of 7\n        if a > b:\n            a = 7 * (b // 7)\n\n        # If the number is divisible by a, increment b and repeat the loop\n        if num % a == 0:\n            num //= a\n            b += 2\n        else:\n            a += 2\n\n    # If the number is greater than 2 and less than or equal to the square root of num, it is a newman\u2013shanks\u2013williams prime\n    if num > 2 and num ** 0.5 <= num:\n        is_prime = True\n\n    return is_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # define the list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # initialize the count of prime numbers\n    count = 0\n\n    # loop through each prime number\n    for prime in primes:\n        # check if the prime number is divisible by the current number\n        if prime % n == 0:\n            # if it is, increment the count\n            count += 1\n\n            # check if the count is equal to the nth prime number\n            if count == n:\n                # if it is, return the prime number\n                return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count of primes to 0\n    count = 0\n    \n    # Loop through numbers from 2 to n\n    for i in range(2, n+1):\n        # Initialize a boolean variable to True\n        is_prime = True\n        \n        # Check if i is divisible by any number from 2 to the square root of i\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # If i is prime, increment the count\n        if is_prime:\n            count += 1\n        \n        # If the count reaches the desired number of primes, exit the loop\n        if count == n:\n            break\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prime = 2\n    \n    # Iterate until the nth prime number is found\n    while count < n:\n        # Check if the prime number is prime\n        if all(i % prime!= 0 for i in range(2, int(prime**0.5) + 1)):\n            prime += 1\n        else:\n            count += 1\n    \n    # Return the nth prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    i = 1\n    prime = 2\n\n    # Loop until we find the nth prime number\n    while i < n:\n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, prime):\n            if prime % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the current number is prime, update the count and move on\n            prime += 1\n            i += 1\n        else:\n            # If the current number is not prime, increment the count\n            i += 1\n\n    # Return the nth prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the n-th newman-shanks-williams prime number\n    count = 1\n    num = 1\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Use the zip function to iterate over both tuples and perform element-wise division\n    result = [(x / y) for x, y in zip(test_tup1, test_tup2)]\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        elif isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n            test_tup1[i] = test_tup1[i] // test_tup2[i]\n        else:\n            print(\"Error: Both tuples must contain only numerical values.\")\n            return None\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples should have the same length\")\n        return\n\n    # Perform element-wise division operation across the tuples\n    result_tup = tuple(elem1/elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two input tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two input tuples are not same.\")\n        return None\n    # Initialize an empty list to store the result\n    result = []\n    # Perform element-wise division operation\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Error: Division by zero error occurred. Please check the input values.\")\n            return None\n    # Return the result list\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples should have the same length.')\n\n    # Perform element-wise division across the tuples\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    # initialize a new empty list to store the result\n    result_lst = []\n\n    # perform element-wise division\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            raise ValueError(\"Both tuples cannot contain zero.\")\n        result_lst.append(test_tup1[i] / test_tup2[i])\n\n    # return the result list\n    return result_lst"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same number of elements.\")\n        return None\n    result_list = []\n    for i in range(len(test_tup1)):\n        try:\n            result_list.append(test_tup1[i]/test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Error: Tuples cannot be divided by zero.\")\n            return None\n    return tuple(result_list)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) >= L:\n        return (list1[:L], list1[L:])\n    else:\n        return None"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a copy of the list to avoid modifying the original one\n    list2 = list1.copy()\n    # Sort the list in ascending order\n    list2.sort()\n    # Find the index where the length of the first part of the list is L\n    mid = L - 1 if L <= len(list2) else len(list2) - 1\n    # Split the list into two parts and return the result as a tuple\n    return (list1[:mid], list2[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts in a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is less than L, return the original list in a tuple\n        return (list1, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_len = len(list1)\n    if L > list1_len:\n        return \"L is greater than the length of the list\"\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is a positive integer\n    if type(L)!= int or L <= 0:\n        return \"Error: L must be a positive integer.\"\n    \n    # check if list is not empty\n    if len(list1) == 0:\n        return \"Error: List cannot be empty.\"\n    \n    # check if L is less than or equal to the length of the list\n    if L > len(list1):\n        return \"Error: L cannot be greater than the length of the list.\"\n    \n    # find the index of the last element of the first part of the list\n    index = L - 1\n    \n    # create a new list with the first L elements of the original list\n    part1 = list1[:index+1]\n    \n    # create a new list with the rest of the elements of the original list\n    part2 = list1[index+1:]\n    \n    # return the resulting lists as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Using the built-in slicing function to get the first L elements of the list\n    first_part = list1[:L]\n    # Using the built-in slicing function to get the last L-1 elements of the list\n    second_part = list1[L-1:]\n    # Returning a tuple of the two parts\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The function returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    It returns the resulting lists in a tuple.\n    '''\n    if len(lst) % L == 0:\n        first_part = lst[:L]\n        second_part = lst[L:]\n    else:\n        first_part = lst[:(len(lst) // L) * L]\n        second_part = lst[(len(lst) // L) * L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts where the length of the first part is L.\n\n    :param lst: A list to be split.\n    :param L: An integer specifying the desired length of the first part of the list.\n    :return: A tuple containing the two resulting parts of the list.\n    '''\n\n    if not isinstance(lst, list):\n        raise TypeError('lst must be a list.')\n    if not isinstance(L, int) or L < 1:\n        raise ValueError('L must be a positive integer.')\n\n    mid = len(lst) // 2\n    first_part = lst[:mid]\n    second_part = lst[mid:]\n\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(height):\n    \"\"\"\n    Calculate the age of a dog in dog years based on their height in meters.\n    \"\"\"\n    age_in_dog_years = 7 * height / 100\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the human age to dog years\n    dog_years = h_age * 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age < 6:\n        dog_years = 5 - h_age\n    elif h_age >= 6 and h_age < 12:\n        dog_years = 11 - h_age\n    else:\n        dog_years = h_age - 11\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age + 2\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7*h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years given their age in hours.\n    \"\"\"\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Convert the height from inches to meters\n    height_in_meters = h_age * 0.0254\n\n    # Calculate the dog's age in years\n    age_in_years = height_in_meters / 0.0055\n\n    # Return the age in years\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        return []\n    \n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        j = i + step\n        if j > len(S):\n            j = len(S)\n        result.append(S[i:j])\n        i = j\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Splitting the list into sublists for every nth element\n    S_split = [S[i:i+step] for i in range(0, len(S), step)]\n    # Returning the list of sublists\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Loop over the input list until we have enough elements to split by n\n    while len(S) >= step:\n        # Slice the input list by n elements and add it to the result list\n        result.append(S[:step])\n        # Remove the first n elements from the input list\n        S = S[step:]\n\n    # If there are any remaining elements in the input list, add them to the result list\n    if S:\n        result.append(S)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area of the cube\n    surface_area = 6 * l * l\n\n    # Return the lateral surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    surface_area = (6 * l * l) + (6 * l * l) + (6 * l * l)\n    return surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a counter and an accumulator variable\n    count = 1\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    while count <= n:\n        # Calculate the square of the current odd number\n        current_square = count * count\n        \n        # Add the square to the accumulator\n        sum_of_squares += current_square\n        \n        # Increment the counter\n        count += 2\n    \n    # Return the sum of the squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    total = 0\n    i = 1\n    while i <= n:\n        total += i * i\n        i += 2\n\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        sum += count**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the odd number and add it to the sum\n        sum += i*i\n    # return the final sum of squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    num = 1\n    while count < n:\n        sum_of_squares += num**2\n        count += 1\n        num += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n == 2:\n        return '**'\n    elif n == 3:\n        return '***'\n    else:\n        # recursive call\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input. n should be greater than or equal to 1.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        num = 1\n        for i in range(2, n+1):\n            num = num * i\n        return str(num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input! Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        count = 1\n        for i in range(2, n + 1):\n            count *= i\n        return str(count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    star_num = 1\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1): \n        # Add the number to the total\n        num *= i\n\n        # Calculate the next star number\n        if i % 2 == 0:\n            next_star = num - 1\n        else:\n            next_star = 2 * num - 1\n\n        # Update the variables\n        star_num = next_star\n\n    # Return then'th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return '*'\n    elif n == 2: \n        return '**'\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n) + '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return \"There are no stars.\"\n    elif n == 1:\n        return \"There is one star.\"\n    else:\n        first_star = \" \" * (n - 1)\n        last_star = \"*\" * n\n        return first_star + last_star\n\nprint(find_star_num(5))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n    \n    # loop through each number up to n\n    while count <= n:\n        # print the star number\n        print('*' * num)\n        # increment the count and number\n        count += 1\n        num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = num * i\n    return num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # Convert k to its ASCII value\n    ascii_val = ord(k)\n\n    # Return the ASCII value\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Return the ascii value of the character\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    even_index = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index.append(i)\n\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n        if count % 2 == 0:\n            return sum_even\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize a sum variable to keep track of the sum of even numbers at even positions\n    even_sum = 0\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # If the current element is even and the current position is even, add it to the even_sum variable\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    # Return the even_sum variable\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0  \n    for i in range(0, len(arr), 2):  \n        sum_even += arr[i]  \n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n        if count % 2 == 0:\n            return sum_even\n    \n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_at_even_index = 0\n\n    # iterate over the array\n    for i in range(len(arr)):\n        # check if the current element is even and even at even position\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            # if it is, add it to the sum\n            sum_even_at_even_index += arr[i]\n\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if i % 2 == 0:\n                sum_even_index += arr[i]\n\n    return sum_even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    sum_of_squares = 0\n    for num in even_numbers:\n        sum_of_squares += num**5\n    return sum_of_squares"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    even_numbers = [2, 4, 6, 8, 10]\n    total = 0\n\n    for num in even_numbers[:n]:\n        total += num ** 5\n\n    return total"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for (front, rear) in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_elem in test_list:\n        rear_list.append(tuple_elem[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup[1:]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Iterate through the two tuples\n    for index in range(len(test_tup1)):\n        # Subtract the elements of the first tuple from the elements of the second tuple with the same index\n        test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Loop over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current index is also present in the second tuple\n        if i < len(test_tup2):\n            # Subtract the corresponding elements and append the result to the result list\n            result.append(test_tup1[i] - test_tup2[i])\n        # If the index is not present in the second tuple, append the original element to the result list\n        else:\n            result.append(test_tup1[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples have different lengths')\n    \n    # Initialize an empty list to store the results\n    result_list = []\n    \n    # Iterate through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    \n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeffs = 0\n    for i in range(2, n+1, 2):\n        sum_even_binomial_coeffs += math.comb(n, i)\n    return sum_even_binomial_coeffs\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize a variable for the sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Loop through the even indices of n\n    for i in range(0, n, 2):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i) * math.comb(n, n-i)\n        # Add the even index binomial coefficient to the sum\n        even_sum += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Find the sum of even index binomial coefficients using formula\n    # C(n,k) = n! / (k! * (n-k)!)\n    # n! is the factorial of n and k! is the factorial of k.\n\n    sum_even_binomial = 0\n    for k in range(2, n+1, 2):\n        term = math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n        sum_even_binomial += term\n\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop through the even indices of the binomial coefficients\n    for i in range(0, n+1, 2):\n        # calculate the even index binomial coefficient and add it to the sum\n        sum += math.comb(n, i)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and calculates the sum of the even index binomial coefficients.\n\n    Args:\n    n: positive integer\n\n    Returns:\n    sum of even index binomial coefficients\n\n    \"\"\"\n    sum = 0\n    # calculate the sum of all even index binomial coefficients\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if j % 2 == 0:\n                sum += math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    \n    for i in range(1, n+1, 2):\n        for j in range(1, i+1, 2):\n            sum += math.comb(i, j)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients using matrix exponentiation.\n\n    Args:\n        n (int): The positive integer for which to calculate the sum of even index binomial coefficients.\n\n    Returns:\n        int: The sum of the even index binomial coefficients of n.\n    \"\"\"\n    def binomial_coeff(n, k):\n        \"\"\"\n        Helper function to calculate the binomial coefficient.\n\n        Args:\n            n (int): The number of elements in the set.\n            k (int): The number of elements taken from the set.\n\n        Returns:\n            int: The binomial coefficient of n choose k.\n        \"\"\"\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)\n\n    def matrix_mult(a, b):\n        \"\"\"\n        Helper function to multiply two matrices.\n\n        Args:\n            a (list of lists): The first matrix.\n            b (list of lists): The second matrix.\n\n        Returns:\n            list of lists: The product of the two matrices.\n        \"\"\"\n        result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n        for i in range(len(a)):\n            for j in range(len(b[0])):\n                for k in range(len(b)):\n                    result[i][j] += a[i][k] * b[k][j]\n        return result\n\n    def matrix_pow(matrix, n):\n        \"\"\"\n        Helper function to raise a matrix to the power n.\n\n        Args:\n            matrix (list of lists): The matrix to be raised to the power n.\n            n (int): The power to raise the matrix to.\n\n        Returns:\n            list of lists: The matrix raised to the power n.\n        \"\"\"\n        if n == 1:\n            return matrix\n        elif n % 2 == 0:\n            half_power = matrix_pow(matrix, n // 2)\n            return matrix_mult(half_power, half_power)\n        else:\n            return matrix_mult(matrix, matrix_pow(matrix, n-1))\n\n    # Calculate the first two rows of Pascal's triangle\n    pascal_triangle = [[1], [1, 1]]\n    for i in range(2, n+1):\n        next_row = [1]\n        for j in range(i):\n            next_row.append(pascal_triangle[i-1][j] + pascal_triangle[i-1][j-1])\n        pascal_triangle.append(next_row)\n\n    # Calculate the binomial coefficients of even indices\n    even_index_coeffs = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(2, i+1):\n            even_index_coeffs[i][j] = (even_index_coeffs[i-1][j] + even_index_coeffs[i-1][j-2]) * binomial_coeff(i-1, j-2)\n\n    # Calculate the sum of even index binomial coefficients using matrix exponentiation\n    matrix_power = matrix_pow(pascal_triangle, n-1)\n    result = 0\n    for row in matrix_power:\n        result += row[0]\n\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.factorial(i//2)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3/5)*pi*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 2 * 3.14 * r * r  # Formula for calculating the area of a cylinder\n    volume = area * h  # Formula for calculating the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159*r**2*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*pi*r**2*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h  # Formula for the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = 3.14159 * (r**2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14159 * r**2 * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    volume = (3.14 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*(h/3)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for calculating the volume of a cylinder\n    V = (3/4)*pi*(r**2)*h\n    \n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Create a new dictionary to store the filtered entries\n    filtered_dict = {}\n    # Iterate through each key-value pair in the original dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if i == 0:\n            count += 1\n            continue\n        if elem!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, element in enumerate(test_tup):\n        if element == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i**2\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = num + (i*(i+1))\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1:\n        return False\n    else:\n        return (n * (2*n-1))//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Decagonal number is the sum of its squares, where each square is its own decimal.\n    # For example, the 1st decagonal number is 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 15\n    # The 2nd decagonal number is 1^2 + 4^2 + 9^2 = 1 + 16 + 81 = 65\n    # The 3rd decagonal number is 1^2 + 8^2 + 27^2 = 1 + 64 + 218 = 109\n    # So on and so forth.\n    # We only need to calculate the square of each number up to the nth decagonal number.\n    decagonal_number = 1\n    for i in range(1, n + 1):\n        decagonal_number += i ** 2\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function checks if a given number n is a decagonal number or not.\n    A decagonal number is a positive integer equal to the sum of the squares of its \n    positive integers.\n\n    For example, 15 is a decagonal number, because 1^2 + 5^2 = 22. \n    25 is not a decagonal number, because 2^2 + 5^2 = 27.\n    \n    Args:\n    n (int): The number for which we want to check if it is a decagonal number or not.\n\n    Returns:\n    (bool): True if the number is a decagonal number, False otherwise.\n    '''\n\n    # Initialize a variable to store the sum of the squares of positive integers\n    sum_of_squares = 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Add the square of i to the sum of squares\n        sum_of_squares += i**2\n\n    # Check if the sum of squares is equal to n^2\n    if sum_of_squares == n**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal = 0\n    num = 1\n    \n    # loop through n numbers\n    for i in range(1, n+1):\n        # add num to the decagonal number\n        decagonal += num\n        \n        # increase num by 1\n        num += 1\n    \n    # check if the decagonal number is equal to n\n    if decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return 2 * n * (n - 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the variables\n    decagonal = 1\n    # find the number of rows in the square\n    rows = n // 2 + 1\n    # loop through the rows\n    for i in range(rows):\n        # loop through the columns\n        for j in range(2*i-1):\n            # multiply the current value by 2\n            decagonal *= 2\n        # add the current row to the result\n        if n % 2 == 0 and i % 2 == 1:\n            decagonal += 1\n        elif n % 2 == 1 and i % 2 == 0:\n            decagonal += 1\n    # return the result\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        yield i**2 + i"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num = dec_num * (10 ** i)\n    return dec_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize index to -1 to signify element is not found\n    index = -1\n    # Loop through the list until the element is found or the end of the list is reached\n    for i in range(len(dlist)):\n        # If the element is found, update the index to the current index and return a tuple containing True and the index\n        if dlist[i] == item:\n            index = i\n            return True, index\n    # If the element is not found, return a tuple containing False and the index\n    return False, index"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set to remove duplicates\n    test_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create a set to store unique elements of the list\n    unique_set = set(test_list)\n\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set()\n    # Iterate over the list and add each element to the set\n    for element in test_list:\n        unique_elements.add(element)\n    # Check if the set has any elements\n    if len(unique_elements) == len(test_list):\n        print(\"All elements in the list are unique.\")\n    else:\n        print(\"Some elements in the list are not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # creating a set to store unique elements of the list\n    unique_set = set(test_list)\n    # checking if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the elements of the list\n    for element in test_list:\n        # If the element is not already in the set, add it to the set\n        if element not in unique_set:\n            unique_set.add(element)\n        # If the element is already in the set, return False\n        else:\n            return False\n\n    # If all the elements in the list are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= len(test_list):\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of equal length.\")\n        return None\n    else:\n        result = [nums1[i]-nums2[i] for i in range(len(nums1))]\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # loop through the list and subtract each element from the corresponding element of the other list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        return 'Lists must be of equal length.'\n    \n    # subtract the two lists element-wise\n    result = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: The two lists have different lengths.\"\n    \n    # subtract the corresponding elements in the lists\n    result = [x - y for x, y in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    \n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): a list of numbers\n    nums2 (list): another list of numbers\n\n    Returns:\n    list: a list of differences between the corresponding elements in `nums1` and `nums2`\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n\n    # Subtract the two lists element-wise and store the result in a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # loop through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    # loop through each digit in the dictionary to check if its frequency is less than or equal to itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    # if no false positive is found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize a dictionary to store digit frequencies\n    freq = {}\n    \n    # loop through each digit in the number and count its frequency\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # if all digits have a frequency of less than or equal to themselves, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    freq = [0] * 10  # initialize frequency list to zero\n    \n    # count frequency of each digit in the integer\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n        \n    # check if frequency of each digit is less than or equal to its value\n    for i in range(10):\n        if freq[i] > freq[i] or freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        freq = digits.count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0]*10\n    for d in digits:\n        freq[d] += 1\n    for d in freq:\n        if d > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    for digit in digit_freq:\n        if digit_freq[digit] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n        if freq[int(digit)] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit not in freq:\n            freq[digit] = 1\n        else:\n            freq[digit] += 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes a list and an element as input and checks if all the elements in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 1:\n        return list[0] == element\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        if all(x == element for x in list):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element, and False otherwise.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 1:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\w{2,3}b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\ba(?=b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"The string contains 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]*b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum and the maximum sum repeated k times\n    max_sum = float('-inf')\n    max_sum_repeated = float('-inf')\n\n    # Initialize the temporary sum\n    temp_sum = 0\n\n    # Iterate over all the elements of the array\n    for i in range(n):\n        # Add the current element to the temporary sum\n        temp_sum += a[i]\n\n        # If the temporary sum is greater than the maximum sum repeated k times, update the maximum sum repeated k times and the maximum sum\n        if temp_sum > max_sum_repeated:\n            max_sum_repeated = temp_sum\n            max_sum = a[i]\n\n        # If the temporary sum is greater than the maximum sum, update the maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n        # If the sum of the current element and the maximum sum repeated k times is greater than the maximum sum repeated k times + the current element, update the maximum sum repeated k times\n        if temp_sum + max_sum_repeated > max_sum_repeated + a[i]:\n            max_sum_repeated = temp_sum + max_sum_repeated\n\n        # If the sum of the current element and the maximum sum is greater than the maximum sum + the current element, update the maximum sum\n        if temp_sum + max_sum > max_sum + a[i]:\n            max_sum = temp_sum + max_sum\n\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    original_sum = sum(a)\n    \n    # Create a list of k copies of the array\n    modified_array = [a for _ in range(k)]\n    \n    # Calculate the sum of the modified array\n    modified_sum = sum(modified_array)\n    \n    # Calculate the maximum sum of the original array\n    max_sum = original_sum\n    \n    # Iterate through all possible subarrays of length n and check if they form a subarray in the modified array\n    for i in range(len(modified_array)):\n        for j in range(i, len(modified_array)):\n            # Check if the subarray is a subarray in the modified array\n            if modified_array[j] in modified_array[i:j+1]:\n                # Calculate the sum of the subarray\n                subarray_sum = sum(modified_array[i:j+1])\n                # Update the maximum sum if necessary\n                if subarray_sum > max_sum:\n                    max_sum = subarray_sum\n                    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the given array\n    arr_sum = sum(a)\n    \n    # Initialize variables\n    max_sum = arr_sum\n    min_sum = arr_sum\n    \n    # Iterate over all possible combinations of the given array and k\n    for i in range(k):\n        for j in range(n-k):\n            # Calculate the sum of the repeated array\n            repeated_sum = sum(a[j:j+k])\n            \n            # Update the maximum and minimum sums\n            max_sum = max(max_sum, repeated_sum)\n            min_sum = min(min_sum, repeated_sum)\n    \n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_array = [0]*k\n    for i in range(k):\n        mod_array[i] = a[0]\n        for j in range(1, n):\n            mod_array[i] += a[j]\n        mod_array[i] //= k\n\n    max_sum = float('-inf')\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum += a[(i*n)+j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Compute the cumulative sum of the original array\n    cum_sum = [0] * (n + 1)\n    cum_sum[0] = a[0]\n    for i in range(1, n + 1):\n        cum_sum[i] = cum_sum[i - 1] + a[i - 1]\n\n    # Compute the maximum sum of a subarray of size k\n    max_sum = float('-inf')\n    for i in range(n):\n        current_sum = cum_sum[i] - cum_sum[i + k - 1] + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes an array 'a' of size 'n' and a number 'k' as inputs,\n    and returns the maximum sum of a contiguous array in the modified array\n    which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    repeated_array = [0] * (k * n)\n    repeated_array[0] = a[0]\n    repeated_array[1] = a[0] + a[1]\n    max_sum = repeated_array[1]\n    \n    # Iterate through the array and add the elements of the modified array\n    for i in range(2, k * n):\n        repeated_array[i] = a[0] + repeated_array[i-1]\n        if repeated_array[i] > max_sum:\n            max_sum = repeated_array[i]\n    \n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initializing variables\n    max_sum = float('-inf')\n    sum_array = [0] * k\n\n    # Iterating through the array to fill the sum_array\n    for i in range(k):\n        sum_array[i] = a[i]\n\n    for i in range(k, n):\n        sum_array[i % k] += a[i]\n\n        # Updating the max_sum if the current sum is greater than the max_sum\n        if sum_array[i % k] > max_sum:\n            max_sum = sum_array[i % k]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the maximum sum of a contiguous array which is formed by repeating the given array k times\n    max_sum = float('-inf')\n    for i in range(k):\n        # Calculate the sum of the given array n times and repeat it k times\n        sum_arr = a * n\n        # Update the maximum sum if the sum is greater than the current maximum sum\n        max_sum = max(max_sum, sum_arr)\n\n    # Calculate the maximum sum of a contiguous array which is formed by repeating the given array k times\n    max_sum_repeat = float('-inf')\n    for i in range(n):\n        # Calculate the sum of the given array n times and repeat it k times\n        sum_arr_repeat = a * n\n        # Update the maximum sum if the sum is greater than the current maximum sum\n        max_sum_repeat = max(max_sum_repeat, sum_arr_repeat)\n\n    # Find the largest sum of a contiguous array which is formed by repeating the given array k times\n    max_sum_repeat = max(max_sum_repeat, max_sum)\n\n    # Return the maximum sum of a contiguous array which is formed by repeating the given array k times\n    return max_sum_repeat"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n\n    # Initialize variables to keep track of the maximum sum and its index\n    max_sum = float('-inf')\n    max_index = 0\n\n    # Loop through each element in the modified array\n    for i in range(n):\n\n        # Initialize variables to keep track of the current sum and its index\n        current_sum = 0\n        current_index = i\n\n        # Loop through the remaining elements in the modified array\n        for j in range(i+1, n):\n\n            # Calculate the sum of the current subarray\n            current_sum += modified_array[j]\n\n            # If the current sum is greater than the maximum sum, update the maximum sum and its index\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_index = current_index\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        new_array = [a[i]] * k\n        new_array.append(a[i])\n        new_array.extend(a[i:n])\n        new_array.extend([a[i]] * k)\n        max_sum = max(max_sum, sum(new_array))\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum of squares to 0\n    sum_of_squares = 0\n    # initialize counter to 1\n    count = 1\n    # loop through the first n even natural numbers\n    while count <= n:\n        # add the square of the current count to sum_of_squares\n        sum_of_squares += count ** 2\n        # increment the counter\n        count += 2\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum_of_squares = 0\n    # loop through even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # add the square of the even number to the sum\n        sum_of_squares += i**2\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # Initialize a variable to keep track of the current even number\n    current_even = 2\n    \n    # Iterate over the first n even natural numbers\n    while current_even <= n:\n        # Add the square of the current even number to the sum of squares\n        sum_of_squares += current_even ** 2\n        \n        # Increment the current even number\n        current_even += 2\n        \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            total += count ** 2\n            count += 1\n        else:\n            count += 1\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables\n    max_list = []\n    # loop through each list in the list of lists\n    for i in range(len(list1)):\n        # check if the length of the current list is greater than the length of the max_list\n        if len(list1[i]) > len(max_list):\n            # update the max_list\n            max_list = list1[i]\n    # return the max_list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths):\n            max_lengths.append(len(item))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = []\n        for item in sublist:\n            lengths.append(len(str(item)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist[0] < max_lengths[0]):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for item in list1:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n\n    count = 0\n    for i in range(k):\n        count += count_no_of_ways(n-1, k)\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint the fence\n    ways = [[0]*(k+1) for _ in range(n+1)]\n\n    # Initialize the number of ways to paint the fence for 0 posts and k colors\n    ways[0][0] = 1\n\n    # Fill the rest of the 2D array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the i-th post has a color that is equal to j-th color\n            if i >= j:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n            else:\n                ways[i][j] = ways[i-1][j]\n\n    # Return the number of ways to paint the fence for n posts and k colors\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize an empty list to store the number of ways\n    count = []\n\n    # Initialize an array to store the count for each color\n    color_count = [0] * k\n\n    # Count the number of ways for k colors using n posts\n    count.append(1)\n\n    # Iterate over all possible arrangements of colors\n    for color in range(k):\n        # Initialize the count for this color\n        count_for_color = 0\n\n        # Iterate over all possible arrangements of the adjacent posts\n        for i in range(n):\n            # Calculate the index of the adjacent post for the given color\n            adjacent_index = (i + color) % n\n\n            # If the adjacent post has the same color, increment the count\n            if adjacent_index == 0 or color_count[adjacent_index - 1] == color:\n                count_for_color += count[i]\n\n        # Update the count for k colors\n        color_count[color] = count_for_color\n\n        # Update the count for all colors\n        for i in range(k):\n            count[i] = color_count[i]\n\n    # Return the final count\n    return count[0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if n < k:\n        return 0\n    dp = [0]*(n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(min(i, k)+1):\n            dp[i] += dp[i-j]\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a list of all possible colors\n    colors = [str(i) for i in range(k+1)]\n    \n    # Create a 2D list to store the number of ways of painting the fence with each color\n    fence_ways = [[0] * (n+1) for _ in range(k+1)]\n    \n    # Initialize the first row and column with 1\n    for i in range(1, k+1):\n        fence_ways[i][0] = 1\n        fence_ways[0][i] = 1\n    \n    # Initialize the rest of the fence_ways list using dynamic programming\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if fence_ways[i-1][j] == 1:\n                fence_ways[i][j] = 1\n            else:\n                fence_ways[i][j] = fence_ways[i][j-1] + fence_ways[i-1][j-1] + fence_ways[i-1][j]\n    \n    # Return the final value of fence_ways[k][n]\n    return fence_ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [1] * n # initialize array of ways with 1 as the base case\n\n    for i in range(1, k): # iterate over colors\n        ways[0] += ways[0] * (n-1) # 0-th way is the number of ways to paint the 0-th post in each color\n        for j in range(1, n-1): # iterate over other posts\n            ways[j] += ways[j-1] * ways[j+1] # compute the number of ways to paint post j in each color\n\n    return ways[n-1] # return the last element of the array, which corresponds to the number of ways to paint the n-th post in each color\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an empty list to store the number of ways of painting the fence\n    ways = []\n    # Loop through the number of possible colors\n    for color in range(k):\n        # Initialize a variable to store the number of ways of painting the fence with one post colored with the current color\n        ways_one_color = []\n        # Loop through the number of possible fence lengths (up to n)\n        for length in range(n+1):\n            # Check if the current post can be colored with the current color\n            if length > 0 and color!= fence[length-1]:\n                # If the current post can be colored with the current color, increment the number of ways of painting the fence with one post colored with the current color\n                ways_one_color.append(ways_one_color[length-1] + 1)\n            else:\n                # If the current post can't be colored with the current color, add 0 to the number of ways of painting the fence with one post colored with the current color\n                ways_one_color.append(0)\n        # Append the number of ways of painting the fence with one post colored with the current color to the list of ways\n        ways.append(ways_one_color)\n    # Return the sum of the number of ways of painting the fence for each possible fence length (up to n)\n    return sum(ways[length] for length in range(n+1))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list to store the number of ways for each color\n    num_ways = [0] * k\n\n    # Base case: If there is only one color, there is only one way to paint the fence\n    if k == 1:\n        return 1\n\n    # Base case: If there is only one post left, there is only one way to paint the fence\n    if n == 1:\n        return num_ways[0]\n\n    # Recursive case: If there are two or more colors left, then there are two ways to paint the fence.\n    # In the first way, the two adjacent posts have different colors.\n    # In the second way, the two adjacent posts have the same colors.\n    num_ways[0] = count_no_of_ways(n - 1, k)\n\n    # In the second way, the two adjacent posts have the same colors.\n    # In the third way, the two adjacent posts have different colors.\n    num_ways[1] = count_no_of_ways(n - 1, k - 1)\n\n    # Return the maximum of the two ways\n    return max(num_ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # base cases\n    if n == 0 or k == 0:\n        return 1\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    \n    # initialize variables\n    dp = [0] * (n+1)\n    dp[0] = 1\n    \n    # initialize two arrays for alternating colors\n    dp_alt = [0] * (n+1)\n    dp_alt[0] = 1\n    \n    # fill the arrays alternatively\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            dp[i] += dp[i-1]\n        else:\n            dp[i] += dp_alt[i-1]\n        \n        if i % 2 == 0:\n            dp_alt[i] += dp[i-2]\n        else:\n            dp_alt[i] += dp_alt[i-2]\n            \n    # return the final count\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an empty dictionary to store the number of ways\n    ways = {}\n    # Iterate through each color\n    for color in range(1, k+1):\n        # Initialize the number of ways for that color as 0\n        ways[color] = 0\n        # Iterate through each possible number of ways for that color to paint the fence\n        for i in range(n+1):\n            # Initialize the number of ways for that color and i as 0\n            ways[color] += ways[color-1] * (i+1) * (n-i)\n    # Return the number of ways\n    return ways[k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Take the quotient by dividing the larger number by the smaller number and rounding down to the nearest integer\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m \n    return quotient "
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # check if m is zero\n    if m == 0:\n        print(\"Error: Division by zero!\")\n        return None\n\n    # find the quotient\n    q = n // m\n\n    # check if the result is an integer\n    if m * q == n:\n        return q\n    else:\n        return q+1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    third_side = 2*s\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # calculate the length of the third side of the triangle\n    third_side = area / math.sin(math.pi/3)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the third side of the triangle\n    third_side = area / math.sin(math.acos(w / (w + h)))\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the max value to the smallest possible value\n    max_value = float('-inf')\n    # Iterate through the list and update the max value if a larger one is found\n    for val in listval:\n        if val > max_value:\n            max_value = val\n    # Return the max value found\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = lst[0]  # initialize max_val with first value of the list\n    for i in lst:\n        if i > max_val:  # if current value is greater than max_val, update max_val\n            max_val = i\n    return max_val  # return the max_val at the end"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # initialize a variable to store the maximum value\n    max_val = None\n\n    # iterate over each element in the list\n    for val in listval:\n        # if the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize sum to 0\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n\n        # Check if the input number is divisible by the current number i\n        if number % i == 0:\n\n            # If the input number is divisible by i, add it to the sum\n            sum_div += i\n\n    # Return the sum of all divisors of the input number\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number+1) if number % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Traverse the sorted array and count inversions\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        left = i\n        right = n - 1\n        while left < right:\n            if arr[i] > arr[left]:\n                left += 1\n            elif arr[i] < arr[right]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n            count += right - left + 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        inv_count += i * (n - i - 1)\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += right - left\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                left += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # initialize the variables\n    n = len(arr)\n    inv_count = 0\n    \n    # function to swap two elements in the array\n    def swap(arr, i, j): \n        arr[i], arr[j] = arr[j], arr[i]\n        \n    # function to count inversions in the array\n    def count_inversions(arr, low, high): \n        # base case\n        if low >= high: \n            return 0\n        \n        # divide and conquer the array\n        mid = (low + high) // 2\n        inv_count_left = count_inversions(arr, low, mid)\n        inv_count_right = count_inversions(arr, mid + 1, high)\n        inv_count_merge = merge_sort(arr, low, mid, high)\n        \n        # return the sum of the left and right inversions and the inversions from merging the left and right halves\n        return inv_count_left + inv_count_right + inv_count_merge\n        \n    # function to merge two sorted arrays into a single sorted array\n    def merge_sort(arr, low, mid, high): \n        inv_count_merge = 0\n        i = low\n        j = mid + 1\n        k = low\n        \n        # merge the arrays\n        while i <= mid and j <= high: \n            if arr[i] <= arr[j]: \n                swap(arr, i, k) \n                i += 1\n                k += 1\n            else: \n                inv_count_merge += mid - i + 1\n                swap(arr, j, k) \n                j += 1\n                k += 1\n        \n        # copy the remaining elements of the left array\n        while i <= mid: \n            swap(arr, i, k) \n            i += 1\n            k += 1\n        \n        # copy the remaining elements of the right array\n        while j <= high: \n            swap(arr, j, k) \n            j += 1\n            k += 1\n            \n        # return the sum of the inversions from merging the left and right halves\n        return inv_count_merge\n        \n    # count the inversions using the divide and conquer approach\n    inv_count = count_inversions(arr, 0, n - 1)\n    \n    # return the count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            if arr[i] > arr[left] and arr[i] > arr[right]:\n                inv_count += right - left\n                left += 1\n            elif arr[i] < arr[left] and arr[i] < arr[right]:\n                inv_count += right - left\n                right -= 1\n            else:\n                break\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr, 0, len(arr)-1)\n\ndef merge_sort(arr, low, high):\n    '''\n    Merge sort algorithm to sort an array of integers.\n    '''\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge_sort(arr, low, high)\n        merge(arr, low, mid, high)\n\ndef merge(arr, low, mid, high):\n    '''\n    Merge two sorted subarrays to form a sorted array.\n    '''\n    n1 = mid - low + 1\n    n2 = high - mid\n    \n    L = [0] * n1\n    R = [0] * n2\n    \n    for i in range(n1):\n        L[i] = arr[low + i]\n        \n    for j in range(n2):\n        R[j] = arr[mid + 1 + j]\n        \n    i = j = k = low\n    \n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n        \n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n        \n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Counting inversions using merge sort\n    def merge_sort(arr):\n        if n > 1:\n            mid = n // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    # Counting inversions using two pointers\n    def count_inversions(arr, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            inv_count_left = count_inversions(arr, low, mid)\n            inv_count_right = count_inversions(arr, mid + 1, high)\n            inv_count_left += count_inversions_helper(arr, low, mid, high)\n            return inv_count_left + inv_count_right\n    def count_inversions_helper(arr, low, mid, high):\n        inv_count = 0\n        i = low\n        j = mid + 1\n        k = low\n        while i <= mid and j <= high:\n            if arr[i] < arr[j]:\n                inv_count += (mid - i + 1)\n                k += 1\n                i += 1\n            else:\n                j += 1\n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= high:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n        return inv_count\n    inv_count = count_inversions(arr, 0, n - 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Count inversions using two pointers\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        # Check if the left and right pointers are pointing to different elements\n        if arr[left] > arr[right]:\n            count += right - left\n            # Move the left pointer to the right\n            left += 1\n        # If the left pointer is pointing to an element smaller than the right pointer\n        else:\n            # Move the right pointer to the left\n            right -= 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Counting inversions using counting sort \n    inv_count = 0 \n    for i in range(n): \n        # For each element, put it at its correct position in sorted array \n        count = [0] * (n+1) \n        for j in range(n-i): \n            count[arr[j]] += 1 \n        for j in range(n-i, -1, -1): \n            arr[j+i] = j \n            count[j] -= 1 \n            if count[j] < 0: \n                inv_count += n-i \n                break \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # sorting the array\n    arr.sort()\n\n    # calculating the inversion count\n    count = 0\n    i = 1\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            count += (j - i)\n            i += 1\n        else:\n            j -= 1\n\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    if not lst:\n        return []\n    elif isinstance(lst[0], list):\n        return flatten_list(lst[0]) + [lst[1]] + flatten_list(lst[2:])\n    else:\n        return [lst[0]] + flatten_list(lst[1:])"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and returns a flattened version of the list.\n    '''\n    # create an empty list to hold the flattened version of the list\n    result = []\n    # loop over each item in the input list\n    for item in lst:\n        # if the item is a list, recursively call the flatten_list function on it\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        # otherwise, append the item to the result list\n        else:\n            result.append(item)\n    # return the flattened version of the input list\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Base case: if the list is empty or has only one element, return it.\n    if not list1 or len(list1) == 1:\n        return list1\n    \n    # Recursive case: flatten each sublist and concatenate the results.\n    flattened = []\n    for elem in list1:\n        if isinstance(elem, list):\n            flattened.extend(flatten_list(elem))\n        else:\n            flattened.append(elem)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each product\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for product, price in stdata:\n        # Check if the current product has a higher maximum aggregate than the stored value\n        if price > max_agg_dict[product]:\n            max_agg_dict[product] = price\n\n    # Find the maximum aggregate among all products\n    max_agg = max(max_agg_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            for k in range(j+1, len(stdata)):\n                if stdata[i][2] == stdata[j][2] and stdata[j][2] == stdata[k][2]:\n                    max_sum[stdata[i][0]] = max(max_sum[stdata[i][0]], stdata[i][1] + stdata[j][1] + stdata[k][1])\n    return max(max_sum.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    max_agg = 0\n    for _, price in stdata:\n        agg_dict[price] += 1\n        max_agg = max(max_agg, price)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the max aggregate for each item\n    max_agg_dict = defaultdict(int)\n\n    # Loop over the list of tuples and update the max aggregate for each item\n    for item, value in stdata:\n        max_agg_dict[item] = max(max_agg_dict[item], value)\n\n    # Find the maximum aggregate across all items\n    max_agg = max(max_agg_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the aggregate counts\n    aggregate_counts = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the aggregate value and increment the count for that value\n        aggregate_counts[item[0]] += 1\n\n    # Find the maximum count and its corresponding aggregate value\n    max_count = max(aggregate_counts.values())\n    max_aggregate_value = None\n    for key, value in aggregate_counts.items():\n        if value == max_count:\n            max_aggregate_value = key\n            break\n\n    # Return the maximum aggregate value\n    return max_aggregate_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create an empty dictionary to store the maximum aggregate for each salesperson\n    max_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for salesperson, amount in stdata:\n        # add the amount to the maximum aggregate for the salesperson\n        max_dict[salesperson] += amount\n\n    # get the maximum aggregate value from the dictionary\n    max_agg = max(max_dict.values())\n\n    # return the maximum aggregate value\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing stock prices and returns the maximum aggregate.\n    '''\n    # Use a defaultdict to keep track of the maximum aggregate for each stock\n    max_agg_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples and update the max_agg_dict for each stock\n    for price, stock in stdata:\n        max_agg_dict[stock] = max(max_agg_dict[stock], price)\n        \n    # Return the maximum aggregate\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        if item[0] =='max':\n            max_dict[item[1]] = max(max_dict[item[1]], int(item[2]))\n        else:\n            max_dict[item[1]] = min(max_dict[item[1]], int(item[2]))\n    max_aggr = max(max_dict.values())\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples and calculates the maximum aggregate.\n    '''\n    max_aggr = 0\n    for tup in stdata:\n        if tup[2] > max_aggr:\n            max_aggr = tup[2]\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    \n    # Loop through each tuple in the list\n    for tup in stdata:\n        # Get the customer ID and the sale amount\n        cust_id = tup[0]\n        sale_amnt = tup[1]\n        \n        # Check if the sale amount is greater than the current maximum aggregate\n        if sale_amnt > max_aggr[cust_id]:\n            max_aggr[cust_id] = sale_amnt\n    \n    # Find the maximum aggregate in the dictionary\n    max_amnt = max(max_aggr.values())\n    \n    # Return the maximum aggregate\n    return max_amnt"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        current_seq = bin(i)[2:].zfill(2*n)\n        if current_seq[n:2*n] == current_seq[-n:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(2*n)\n        if sum(int(x) for x in seq[:n]) == sum(int(x) for x in seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:]\n        total_sum = sum(int(x) for x in binary_seq[:n])\n        if sum(int(x) for x in binary_seq[-n:]) == total_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    # Initialize variables\n    count = 0\n    seq = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Get the sum of the first n bits\n        bit_sum = 0\n        for j in range(n):\n            bit_sum += (i >> j) & 1\n        \n        # Get the sum of the last n bits\n        last_bit = i & 1\n        for j in range(n):\n            bit_sum += last_bit << j\n        \n        # If the sum of the first n bits and the sum of the last n bits are same, increment the count\n        if bit_sum == seq:\n            count += 1\n        \n        # Update the sequence with the current binary sequence\n        seq = i\n    \n    # Return the count of all binary sequences with the given length\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        seq = bin(i)[2:]\n        if seq[:n] == seq[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        if (i & (i - 1)) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        for j in range(i+1, 2**n+1):\n            if (sum(bin(k)[2:].zfill(n)) == sum(bin(l)[2:].zfill(n))):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if i & 1 == 0: # if first n bits are even\n            sum_of_bits = sum(int(x) for x in bin(i)[2:]) # sum of first n bits\n        else: # if first n bits are odd\n            sum_of_bits = sum(int(x) for x in bin(i)[2:]) - n # sum of first n bits excluding last n bits\n        if sum_of_bits == sum(int(x) for x in bin(i + n)[2:]): # if sum of first n bits is same as sum of last n bits\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize variables\n    count = 0\n    prev_sum = 0\n    curr_sum = 0\n    seq = [0] * (2*n)\n\n    # generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        for j in range(2**n):\n            seq[i] = j\n            seq[i + 2**n] = i\n            curr_sum = sum(seq[:n])\n            if curr_sum == prev_sum:\n                count += 1\n        prev_sum = curr_sum\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize counters and loop variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    while i <= 2**n - 1:\n        j = 0\n        while j <= 2**n - 1:\n            # Check if first n bits are same as last n bits\n            if i & (2**n - 1) == j & (2**n - 1):\n                count += 1\n            j += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for k, v in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(k) for k in d.keys())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(x) for x in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth = max(depth, dict_depth(item))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n                else:\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1 + dict_depth(item)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n\n    # Recursively traverse the dictionary and increment the depth for each dictionary encountered\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == ranges[count]:\n            count += 1\n            if count == rotations:\n                return arr[index]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges and rotations required to find the element at the given index.\n    Returns the element at the given index after the specified number of rotations.\n    '''\n    # Function to calculate the length of an array\n    def calculateLength(arr):\n        return len(arr)\n\n    # Function to rotate an array\n    def rotateArray(arr, n):\n        return arr[n:] + arr[:n]\n\n    # Function to find the element at a given index after rotating the array\n    def findElementAfterRotations(arr, index, n):\n        arr = rotateArray(arr, n)\n        for i in range(n):\n            if i+index >= len(arr):\n                return arr[i+index-len(arr)]\n        return arr[index]\n\n    # Find the element at the given index after rotating the array\n    n = calculateLength(arr)\n    for i in range(rotations):\n        index = (index - 1) % n\n        arr = rotateArray(arr, n)\n    return findElementAfterRotations(arr, index, n)\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n    \n    Parameters:\n    arr: List of integers representing the array.\n    ranges: List of ranges for each element.\n    rotations: Integer representing the number of rotations.\n    index: Integer representing the index of the element to find after rotations.\n    \n    Returns:\n    Integer representing the element at the given index after rotations.\n    \"\"\"\n\n    # Initialize the result variable to the value of the element at the given index.\n    result = arr[index]\n\n    # Loop through the ranges and the number of rotations.\n    for i in range(len(ranges)):\n        if rotations >= ranges[i][1]:\n            # Remove the rotations from the current range.\n            rotations -= ranges[i][1]\n\n            # Update the result variable to the value of the element at the index\n            # that was rotated into the range.\n            result = arr[(index + rotations) % len(arr)]\n        else:\n            # Update the result variable to the value of the element at the index\n            # that was not rotated into the range.\n            result = arr[(index + rotations) % len(arr)]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Loop through all the ranges\n    for range in ranges:\n        # Find the starting index of the range\n        start = range[0]\n\n        # Find the end index of the range\n        end = range[1]\n\n        # Find the number of elements in the range\n        length = end - start\n\n        # Rotate the array by the given number of rotations\n        for _ in range(rotations):\n            arr[start:end] = arr[:end] + arr[start:end]\n            end += 1\n            start = 0\n\n        # Find the element at the given index after rotating the array\n        element_after_rotation = arr[index]\n\n        # If the element at the index before rotation and after rotation are same, we can return the element\n        if element_after_rotation == element:\n            return element\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    n = len(arr)\n    # Initialize the element to be searched\n    element = arr[index]\n    # Perform the rotations\n    for i in range(rotations):\n        # Determine the current range\n        range_index = index - i\n        if range_index < 0:\n            range_index += n\n        # Choose the next range to rotate to\n        if range_index < len(ranges):\n            next_range = ranges[range_index]\n        else:\n            next_range = 0\n        # Update the element to be searched\n        if next_range < len(arr):\n            element = arr[next_range]\n    # Return the element after rotations\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the rotation index\n    rotation_index = 0\n    for i in range(rotations):\n        if index >= rotation_index and index < rotation_index + ranges[i]:\n            rotation_index += ranges[i]\n        elif index >= rotation_index + ranges[i]:\n            rotation_index = rotation_index + ranges[i]\n    # Find the element at the index\n    element = None\n    for i in range(rotation_index, rotation_index + ranges[rotations - 1]):\n        if i == index:\n            element = arr[i]\n            break\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = arr.copy()\n    for _ in range(rotations) : \n        for i in range(len(rotated_arr)) : \n            j = (i+1)%len(rotated_arr)\n            rotated_arr[i],rotated_arr[j] = rotated_arr[j],rotated_arr[i]\n    rotated_arr = rotated_arr[:index]\n    for i in range(len(ranges)) :\n        for j in range(len(ranges[i])) : \n            if rotated_arr[ranges[i][j]-1] == ranges[i][j] : \n                return rotated_arr[ranges[i][j]-1]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a number of rotations.\n    '''\n    # Calculate the number of rotations and index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    # Calculate the element's position in the range list\n    element_position = ranges.index(element)\n\n    # Find the index of the element in the original list\n    original_index = index + element_position\n\n    # Return the element at the new index\n    return arr[original_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    m = len(ranges)\n    # Finding the rotation factor for each range and summing up all the rotations\n    rotation_factor = [0] * m\n    for i in range(m):\n        for j in range(ranges[i][0], ranges[i][1]):\n            rotation_factor[i] += arr[j]\n        rotation_factor[i] %= n\n    # Finding the total number of rotations required\n    total_rotations = 0\n    for i in range(m):\n        total_rotations += rotation_factor[i]\n    # Finding the index of the element after the total number of rotations\n    final_index = (index + rotations - total_rotations) % n\n    # Returning the element at the final index\n    return arr[final_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the value to be rotated based on the current index\n    value = arr[(index-1) % len(arr)]\n\n    # Calculate the new index after rotating the value\n    new_index = index - (index-1) % rotations\n\n    # Calculate the element at the new index\n    new_element = arr[new_index]\n\n    # Calculate the index where the value should be inserted\n    insert_index = (index + rotations) % len(arr)\n\n    # Insert the value at the calculated index\n    arr.insert(insert_index, value)\n\n    # Remove the element at the old index\n    arr.pop(index-1)\n\n    # Return the updated list\n    return arr"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'p\\w+', words)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]+$')\n    for word in words:\n        if pattern.match(word):\n            return word, word[1:]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-z]*', word):\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # use regular expression to find all words starting with letter 'p'\n    p_words = re.findall(r'\\bp\\w+',''.join(words))\n\n    # if there are less than two words starting with 'p', return None\n    if len(p_words) < 2:\n        return None\n\n    # return two words starting with 'p'\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    if len(matches) == 1:\n        return matches[0]\n    else:\n        return (matches[0], matches[1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word):\n            p_words.append(word)\n\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expressions to filter words starting with 'p'\n    pattern = re.compile(r'^p\\w+$')\n    filtered_words = list(filter(pattern.match, words))\n\n    # Return two words from the filtered list\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            if len(result) == 2:\n                break\n            result.append(word)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp[a-z]*\\b') # regex pattern to match words starting with letter 'p'\n    matches = re.findall(pattern,''.join(words)) # find all matches in the input string\n    return matches[:2] # return the first two matches\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Create a list to store the sum of increasing subsequences\n    sum_increasing_subseq = []\n\n    # Initialize the maximum sum\n    max_sum = 0\n\n    # Initialize the current sum\n    current_sum = 0\n\n    # Initialize the prefix sum\n    prefix_sum = 0\n\n    # Loop through all indices from 0 to i-1\n    for i in range(index):\n        # Add the current element to the prefix sum\n        prefix_sum += a[i]\n\n        # If the current element is greater than k, subtract its value from the prefix sum\n        if a[i] > k:\n            prefix_sum -= a[i]\n\n        # If the current element is greater than or equal to the current element at index i\n        if a[i] >= a[index]:\n            # Add the current element to the current sum\n            current_sum += a[i]\n\n            # If the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Reset the maximum sum and the sum of increasing subsequences\n                max_sum = current_sum\n                sum_increasing_subseq = [a[i]]\n\n            # If the current sum is equal to the maximum sum\n            elif current_sum == max_sum:\n                # Add the current element to the sum of increasing subsequences\n                sum_increasing_subseq.append(a[i])\n\n    # Add the last element to the current sum\n    current_sum += a[index]\n\n    # If the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        # Reset the maximum sum and the sum of increasing subsequences\n        max_sum = current_sum\n        sum_increasing_subseq = [a[index]]\n\n    # If the current sum is equal to the maximum sum\n    elif current_sum == max_sum:\n        # Add the last element to the sum of increasing subsequences\n        sum_increasing_subseq.append(a[index])\n\n    # Return the sum of increasing subsequences and the maximum sum\n    return sum_increasing_subseq, max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create an array to store the maximum sum of increasing subsequence for each index\n    max_sum_arr = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence to zero\n    max_sum = 0\n\n    # Initialize the sum of increasing subsequence at each index to zero\n    sum_arr = [0] * n\n\n    # Iterate through the array from index 0 to i\n    for i in range(0, n):\n\n        # Calculate the sum of increasing subsequence from index 0 to i\n        sum_arr[i] = a[i] + sum_arr[i - 1]\n\n        # If the sum of increasing subsequence from index 0 to i is greater than the maximum sum of increasing subsequence found till now\n        if sum_arr[i] > max_sum:\n\n            # Update the maximum sum of increasing subsequence and the index from which it was found\n            max_sum = sum_arr[i]\n            max_sum_index = i\n\n        # If the sum of increasing subsequence from index 0 to i is equal to the maximum sum of increasing subsequence found till now\n        if sum_arr[i] == max_sum:\n\n            # Update the maximum sum of increasing subsequence if the sum of increasing subsequence from index 0 to i is equal to the maximum sum of increasing subsequence found till now and the kth element which is after i is present\n            if a[i] > a[k - 1] and sum_arr[i] > max_sum_arr[k - 1]:\n                max_sum = sum_arr[i]\n                max_sum_index = i\n\n    # Initialize the maximum sum of increasing subsequence including the kth element which is after i to zero\n    max_sum_including_k = 0\n\n    # Calculate the maximum sum of increasing subsequence including the kth element which is after i from index 0 to i\n    for i in range(0, index + 1):\n        max_sum_including_k = max(max_sum_including_k, sum_arr[i])\n\n    # Return the maximum sum of increasing subsequence including the kth element which is after i\n    return max_sum_including_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n - 1:\n        return 0\n    \n    if index > 0:\n        if a[index] > a[index - 1]:\n            return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    if index == 0 and k > 0:\n        return a[k - 1]\n    \n    return 0"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the result variable with negative infinity\n    result = float('-inf')\n    \n    # Initialize a list to store the prefix sum of increasing subsequence\n    prefix_sum = [0] * n\n    \n    # Initialize a list to store the length of increasing subsequence\n    length = [1] * n\n    \n    # Initialize a list to store the index of the maximum element in increasing subsequence\n    max_index = [0] * n\n    \n    # Initialize a variable to store the maximum sum of increasing subsequence\n    max_sum = 0\n    \n    # Traverse the given array from index 0 to n-1\n    for i in range(index, n):\n        # If the current element is greater than the kth element, add the current element to the prefix sum of increasing subsequence and update the prefix sum of increasing subsequence, the length of increasing subsequence, the index of the maximum element in increasing subsequence, and the maximum sum of increasing subsequence\n        if a[i] > k:\n            prefix_sum[i] = prefix_sum[i-1] + a[i]\n            length[i] = length[i-1] + 1\n            max_index[i] = i-1\n            max_sum = max(max_sum, prefix_sum[i])\n        \n        # If the current element is not greater than the kth element, add the current element to the prefix sum of increasing subsequence and update the length of increasing subsequence, the index of the maximum element in increasing subsequence, and the maximum sum of increasing subsequence\n        else:\n            prefix_sum[i] = a[i]\n            length[i] = 1\n            max_index[i] = i\n            max_sum = prefix_sum[i]\n        \n        # Update the result variable if the maximum sum of increasing subsequence is greater than the current result\n        result = max(result, max_sum)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    if index == 0:\n        return max(a[0], a[1])\n    \n    left = max_sum_increasing_subseq(a, n, index-1, k)\n    right = max_sum_increasing_subseq(a, n, index-1, k-1)\n    \n    if a[index] > a[index-1]:\n        return max(left, right+a[index])\n    else:\n        return max(right, left+a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * n  # dp[i] will store the maximum sum of increasing subsequence ending at index i\n    max_so_far = float('-inf')\n    # Iterate through the array and fill dp array\n    for i in range(n):\n        # If current element is greater than or equal to k and\n        # if current element is greater than dp[index-1], then\n        # add current element to the current subsequence and update dp\n        if i >= k and a[i] >= a[index-1]:\n            dp[i] = dp[index-1] + a[i]\n            if dp[i] > max_so_far:\n                max_so_far = dp[i]\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing_subseq = []\n\n    # Initialize the first element of the increasing subsequence\n    if index == 0:\n        current_sum = a[0]\n        increasing_subseq.append(a[0])\n    else:\n        current_sum = 0\n\n    # Loop through the rest of the array\n    for i in range(index, n):\n        if i == k:\n            continue\n        # Check if the current element is greater than the previous maximum sum\n        if a[i] > current_sum + a[k]:\n            current_sum = a[i]\n        else:\n            current_sum += a[i]\n        # Update the maximum sum and the increasing subsequence\n        if current_sum > max_sum:\n            max_sum = current_sum\n            increasing_subseq = [a[i]]\n        elif current_sum == max_sum:\n            increasing_subseq.append(a[i])\n\n    return max_sum, increasing_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize an empty array to store the maximum sum of increasing subsequence for each index\n    max_sum_array = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence starting from index 0\n    max_sum_array[0] = a[0]\n\n    # Traverse through all indices from index 1 to n-1\n    for i in range(1, n):\n        # Initialize the maximum sum of increasing subsequence starting from index i\n        max_sum_array[i] = max(max_sum_array[i-1], a[i])\n\n        # If the sum of the increasing subsequence starting from index i till k and including a given kth element is greater than the current maximum sum of increasing subsequence starting from index i, update the maximum sum of increasing subsequence starting from index i\n        if i >= k and max_sum_array[i-k] + a[i] > max_sum_array[i]:\n            max_sum_array[i] = max_sum_array[i-k] + a[i]\n\n    return max_sum_array[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize an empty list to store the increasing subsequence\n    inc_subseq = []\n    \n    # Initialize variables to keep track of maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse the array from the ith index and forward\n    for i in range(index, n):\n        # If the element is greater than k, then ignore it and move to the next element\n        if a[i] > k:\n            continue\n        \n        # If the element is greater than the previous element, add it to the increasing subsequence and update the current sum\n        if a[i] > a[i-1]:\n            curr_sum += a[i]\n            inc_subseq.append(a[i])\n        \n        # If the current sum becomes greater than the maximum sum, update the maximum sum and the increasing subsequence\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            inc_subseq = [a[i]]\n        \n        # If the current sum becomes equal to the maximum sum, add the previous element to the increasing subsequence\n        if curr_sum == max_sum:\n            inc_subseq.append(a[i])\n            \n    # Return the maximum sum of increasing subsequence\n    return max_sum, inc_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i == index:\n            dp[i] = max(dp[i], a[i])\n        else:\n            dp[i] = max(dp[i - 1] + a[i], dp[i])\n    if k <= index:\n        return dp[index] + dp[k] - 2 * a[k]\n    else:\n        return dp[index]\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    if isinstance(tuplex, tuple):\n        colon = ()\n        for i in range(m):\n            colon += (tuplex[i],)\n        for i in range(n):\n            colon += (tuplex[i+m],)\n        return colon\n    elif isinstance(tuplex, list):\n        colon = []\n        for i in range(m):\n            colon.append(tuplex[i])\n        for i in range(n):\n            colon.append(tuplex[i+m])\n        return colon\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to get a colon from.\n    m (int): The number of rows of the colon to get.\n    n (int): The number of columns of the colon to get.\n\n    Returns:\n    A tuple of the form (row1, col1, row2, col2), where:\n    - row1 and row2 are integers representing the start and end rows of the colon.\n    - col1 and col2 are integers representing the start and end columns of the colon.\n    \"\"\"\n    # Check if the tuple has enough elements\n    if len(tuplex) < (m * n):\n        raise ValueError(\"The tuple has less elements than the number of rows and columns to get\")\n\n    # Create a new tuple with all elements set to None\n    new_tuplex = [None] * len(tuplex)\n\n    # Get the current index of the tuple\n    current_index = 0\n\n    # Get the current row and column\n    current_row = 0\n    current_col = 0\n\n    # Loop over the rows and columns to get the colon\n    for row in range(m):\n        for col in range(n):\n            # If the current element is None, set it to the current element\n            if new_tuplex[current_index] is None:\n                new_tuplex[current_index] = tuplex[current_index]\n                current_index += 1\n            # Otherwise, increment the current index and move to the next element\n            else:\n                current_index += 1\n                if current_index >= len(tuplex):\n                    break\n                if current_col == n - 1:\n                    current_col = 0\n                    current_row += 1\n                else:\n                    current_col += 1\n\n    # Return the colon\n    return (current_row, current_col, current_row + m - 1, current_col + n - 1)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        A tuple of integers.\n    m : int\n        The number of rows of the colon.\n    n : int\n        The number of columns of the colon.\n\n    Returns:\n    --------\n    list\n        A list of lists, where each sublist contains a row of the colon.\n\n    Example:\n    --------\n    >>> tuplex = (1, 2, 3, 4)\n    >>> colon_tuplex(tuplex, 2, 2)\n    [[1, 2], [3, 4]]\n    \"\"\"\n\n    # Check if the input is valid\n    if len(tuplex)!= m * n:\n        raise ValueError(\"The input tuple must have a length of m*n.\")\n\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get a list of lists of indices to use for each row of the colon\n    indices = [range(m) for i in range(n)]\n\n    # Loop through each row of the colon\n    for i in range(m):\n        # Use the indices to get the corresponding sublist from the tuple\n        row = [tuplex_copy[i*n+j] for j in indices[i]]\n        # Add the row to the result list\n        colon_rows.append(row)\n\n    # Return the list of colon rows\n    return colon_rows"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple is empty\n    if not tuplex:\n        return []\n    # If the tuple has only one element, return the element\n    if len(tuplex) == 1:\n        return [tuplex[0]]\n    # If the tuple has two or more elements, get the middle element and add it to the colon\n    middle = len(tuplex) // 2\n    colon = [tuplex[middle]]\n    # If the middle element is a tuple, recursively call the function on that tuple\n    if isinstance(tuplex[middle],tuple):\n        colon.extend(colon_tuplex(tuplex[middle],m,n))\n    # If the middle element is a list, add the list elements to the colon\n    elif isinstance(tuplex[middle],list):\n        for item in tuplex[middle]:\n            colon.append(item)\n    # If the middle element is a string, split the string into substrings based on the value of m and n\n    elif isinstance(tuplex[middle],str):\n        for i in range(len(tuplex[middle])//(m+n)):\n            substrings = tuplex[middle][i*m:(i+1)*m+n]\n            colon.extend([substrings])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            if i==0 and j==0:\n                row.append('(')\n            elif i==m-1 and j==n-1:\n                row.append(')')\n            else:\n                row.append(str(tuplex[i][j]))\n        col.append(''.join(row))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Get a deep copy of the tuple\n    colon = deepcopy(tuplex)\n\n    # Check if the length of the colon is greater than the required length\n    if len(colon) > m:\n        # Reduce the length of the colon to m\n        colon = colon[:m]\n\n    # Check if the length of the colon is less than the required length\n    if len(colon) < m:\n        # Pad the colon with empty tuples to reach length m\n        while len(colon) < m:\n            colon.append(())\n\n    # Split the colon into m equal sections\n    colon_sections = [colon[i:i + m] for i in range(0, len(colon), m)]\n\n    # Reverse each section to get the desired colon\n    colon_reversed = [colon_section[::-1] for colon_section in colon_sections]\n\n    # Concatenate the reversed sections to get the desired colon\n    colon_result = tuple([tuple([tuplex[i + j] for j in range(m)]) for i in range(0, len(tuplex), m)])\n\n    return colon_result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Calculate the range of the colon\n    range_colon = range(m, n)\n    \n    # Iterate over the range of the colon\n    for i in range_colon:\n        # Get the element at the current index\n        current_element = new_tuplex[i]\n        \n        # Check if the element is a list or a tuple\n        if isinstance(current_element, list) or isinstance(current_element, tuple):\n            # If it is, recursively call the function on the element\n            new_tuplex[i] = colon_tuplex(current_element, m, n)\n        else:\n            # If it's not, just add a colon to the end of the string\n            new_tuplex[i] += \":\"\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new list to store the colon\n    colon = []\n    \n    # Iterate over the rows of the matrix\n    for i in range(m):\n        # Initialize an empty list to store the columns\n        row_col = []\n        \n        # Iterate over the columns of the matrix\n        for j in range(n):\n            # Get the value at position (i,j) from the tuple\n            value = tuplex[i][j]\n            \n            # Append the value to the row_col list\n            row_col.append(value)\n            \n        # Append the row_col list to the colon list\n        colon.append(row_col)\n        \n    # Return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(tuplex[i][n])\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the last element of the tuple\n    last_element = tuplex_copy.pop()\n\n    # Reverse the list to get a colon\n    colon_list = [last_element]\n    while len(tuplex_copy) > 0:\n        new_element = tuplex_copy.pop()\n        if len(colon_list) % m == 0:\n            colon_list.append(new_element)\n        else:\n            colon_list.insert(0, new_element)\n\n    # Reverse the colon to get the actual colon\n    colon = colon_list[::-1]\n\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the length of the lists\n    m = len(nums1)\n    n = len(nums2)\n\n    # Initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n\n    # Initialize two lists to store the largest products for each factor\n    factor1_products = []\n    factor2_products = []\n\n    # Loop through all possible combinations of factors for each list\n    for i in range(m):\n        for j in range(n):\n\n            # Calculate the product of the i-th factor in nums1 and the j-th factor in nums2\n            product = nums1[i] * nums2[j]\n\n            # If the product is greater than max_product, update max_product and add the product to the corresponding list\n            if product > max_product:\n                max_product = product\n                factor1_products.append(nums1[i])\n                factor2_products.append(nums2[j])\n\n    # Return the maximum product and the corresponding lists of factors\n    return max_product, factor1_products, factor2_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = 0\n    product = 1\n    max_products = []\n\n    # Loop through the first list\n    for i in range(len(nums1)):\n        # Check if we have found the required number of products\n        if len(max_products) == N:\n            break\n\n        # Calculate the product of the current factor with the second list\n        current_product = max(nums1[i], nums2[i]) * product\n\n        # Update the maximum product and maximum products list\n        if current_product > max_product:\n            max_product = current_product\n            max_products = [nums1[i], nums2[i]]\n        elif current_product == max_product:\n            max_products.append(nums2[i])\n\n        # Update the product for the next iteration\n        product *= max(nums1[i], nums2[i])\n\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    \n    for i in range(N):\n        largest_product = nums1[i] * nums2[i]\n        largest_products.append(largest_product)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the variables for the largest products\n    max_product = float('-inf')\n    max_products = []\n\n    # Iterate over the numbers in the first list\n    for i in range(N):\n        # Find the largest product that includes the i-th number from the first list\n        product = max(nums1[i] * nums2[N-i-1], nums1[N-i-1] * nums2[i])\n        # Check if the product is greater than the current largest product\n        if product > max_product:\n            max_product = product\n            # Add the product to the list of largest products\n            max_products = [product]\n        # If the product is not the largest product, check if it is the second largest product\n        elif product == max_product:\n            max_products.append(product)\n\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # loop through the lists and calculate the largest products\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i + j == N - 1:\n                largest_product1 = max(largest_product1, nums1[i] * nums2[j])\n                largest_product2 = max(largest_product2, nums1[i] * nums2[j])\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Error: N cannot be greater than the length of the shorter list.\"\n    \n    products = []\n    for i in range(N):\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        product = factor1 * factor2\n        products.append(product)\n        \n        nums1.remove(factor1)\n        nums2.remove(factor2)\n    \n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"N is larger than the length of either list.\")\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        largest_products.append(product1)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if N > len(nums1) + len(nums2):\n        raise ValueError(\"N must be less than or equal to the sum of the lengths of the two lists.\")\n\n    nums1 = sorted(nums1, reverse=True)[:N]\n    nums2 = sorted(nums2, reverse=True)[:N]\n\n    return max(nums1[0] * nums2[0], nums1[0] * nums2[-1], nums1[-1] * nums2[0], nums1[-1] * nums2[-1])"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products\n    largest_product = (nums1[0] * nums2[0], nums1[1] * nums2[1])\n\n    # Loop over the remaining products to find the required number\n    for i in range(2, N + 1):\n        # Calculate the next product by selecting the largest factor from each list\n        next_product = (nums1[-i] * nums2[-i], nums1[-i-1] * nums2[-i-1])\n\n        # Update the largest product if necessary\n        if next_product > largest_product:\n            largest_product = next_product\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    # Calculate the product of the first N elements of each list\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= max(nums1[i], nums2[i])\n        product2 *= max(nums1[N-i-1], nums2[N-i-1])\n    \n    # Calculate the product of the last N elements of each list\n    last_product1 = 1\n    last_product2 = 1\n    for i in range(N):\n        last_product1 *= nums1[-i-1]\n        last_product2 *= nums2[-i-1]\n    \n    # Calculate the product of the largest elements of each list\n    largest_product1 = max(product1, last_product1)\n    largest_product2 = max(product2, last_product2)\n    \n    # Find the specified number of largest products using this formula:\n    # (product1/largest_product1)**(1/N) * (product2/largest_product2)**(1/N)\n    num_large_products = int(1/N)\n    large_products1 = (product1/largest_product1)**num_large_products\n    large_products2 = (product2/largest_product2)**num_large_products\n    \n    return large_products1, large_products2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = list(str1)\n    return tuple(str_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    chars = list(str1)\n    # convert the list to a tuple of characters\n    tuple_chars = tuple(chars)\n    return tuple_chars"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Set all bits to 1 except the leftmost one\n    n |= ((1 << (n.bit_length() - 1)) - 1)\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through each bit in the number\n    for i in range(31, -1, -1):\n        # If the current bit is unset, set it in the result and break out of the loop\n        if n & (1 << i) == 0:\n            result |= (1 << i)\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while (n & bit) == 0:\n        bit <<= 1\n    return n | bit\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Get the bitmask of all unset bits\n    unset_mask = (n & -n)\n    # Get the leftmost unset bit\n    unset_bit = unset_mask.bit_length() - 1\n    # Set the leftmost unset bit to 1\n    n |= 1 << unset_bit\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through the bits of the input number in reverse order\n    for i in range(31, -1, -1):\n        # Check if the i-th bit of the input number is set to 1\n        if n & (1 << i):\n            # If it is, set the i-th bit of the result variable to 1\n            result |= (1 << i)\n            # Stop iterating once we find a set bit\n            break\n    \n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a number n.\n    \"\"\"\n    while (n & 1) == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the rightmost set bit\n    rightmost_set_bit = -1\n\n    # Loop through the binary representation of the number n\n    for i in range(len(bin(n)[2:])):\n        if bin(n)[2+i] == '1':\n            rightmost_set_bit = i\n            break\n\n    # If there is no unset bit, return n\n    if rightmost_set_bit == -1:\n        return n\n\n    # Otherwise, set the leftmost unset bit to 1\n    else:\n        n = n & ~(2**rightmost_set_bit - 1)\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert the integer to binary representation\n    binary_representation = bin(n)[2:]\n    \n    # Find the leftmost unset bit\n    leftmost_unset_bit = len(binary_representation) - binary_representation.index('1')\n    \n    # Set the leftmost unset bit to 1\n    return int(binary_representation[:leftmost_unset_bit] + '1' + binary_representation[leftmost_unset_bit+1:], 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in the binary representation of the input number.\n    '''\n    bit_count = 0\n    while n:\n        bit_count += 1\n        n &= (n-1) # clears the least significant set bit\n    if bit_count == 0:\n        return 0\n    return 1 << bit_count - 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the unset bit\n    unset_bit = 0\n\n    # Loop through all the bits in the binary representation of n\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            unset_bit = i\n            break\n\n    # Set the left most unset bit in n\n    n |= 1 << (unset_bit - 1)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters: the radius of the cone and its height.\n    It calculates the volume of the cone using the following formula: V = 1/3 * pi * r^2 * h\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone as input parameters\n    and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n\n    # Calculate the base area of the cone\n    base_area = math.pi * r ** 2\n\n    # Calculate the volume of the cone\n    volume = base_area * h / 3\n\n    # Return the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume using formula V = \u03c0r\u00b2h/3\n    volume = math.pi * (r**2) * h / 3\n    \n    # return the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, radius and height, and returns the volume of a cone with those dimensions.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2**highest_Power_of_2(n//2) + n%2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return 2 * highest_Power_of_2(n/2)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 ** (int(n.bit_length() - 1))"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes a positive integer n as input and returns the highest power of 2 that is less than or equal to n.\n    If n is already a power of 2, it returns n itself.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 2 ** highest_Power_of_2(n >> 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 as 1\n    max_power = 1\n    \n    # loop until the highest power of 2 is less than or equal to n\n    while max_power <= n:\n        # if max power is a power of 2, return max power\n        if max_power == 1<<max_power:\n            return max_power\n        \n        # increment the highest power of 2 by 1\n        max_power += 1\n    \n    # if max power is greater than n, it means n is already a power of 2\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    \n    # Find the highest power of 2 that is less than or equal to n\n    highest_pow_2 = 1\n    while highest_pow_2 < n:\n        highest_pow_2 <<= 1\n    \n    return highest_pow_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas = [0, 1]\n    for i in range(2, n + 1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return n\n\n    prev = 0\n    curr = 1\n\n    for i in range(2, n+1):\n        next = prev + curr\n        prev = curr\n        curr = next\n\n    return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize variables \n    lucas_num = 2\n    lucas_next = 1\n\n    # Iterate n-1 times to calculate then'th lucas number \n    for i in range(n-1): \n        # Calculate the next lucas number \n        lucas_next = lucas_num + lucas_next \n        # Update the lucas_num variable \n        lucas_num = lucas_next \n\n    # Return then'th lucas number \n    return lucas_num "
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_numbers = [2]\n    for i in range(1, n):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n    return lucas_numbers[-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize the first two lucas numbers\n    lucas = [0, 1]\n    for i in range(2, n+1):\n        # Add the two previous lucas numbers to get the next one\n        lucas.append(lucas[i-1] + lucas[i-2])\n        \n    return lucas[n]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = [string.format(i) for i in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list and apply the format string to it\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): A list of strings.\n    string (str): A format string that will be applied to each element of the list.\n\n    Returns:\n    A list of strings with the format string applied to each element.\n    \"\"\"\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = (l1[i], l2[j], l3[k])\n                value = (l1[i], l2[j], l3[k])\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n        *lists (list): A list of lists to be converted to nested dictionaries.\n\n    Returns:\n        dict: A nested dictionary representing the concatenated lists.\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for item in list_:\n            if isinstance(item, list):\n                for subitem in item:\n                    if subitem not in result:\n                        result[subitem] = []\n                    result[subitem].append(list_)\n            else:\n                if item not in result:\n                    result[item] = []\n                result[item].append(list_)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        temp = {'name': l1[i]}\n        temp.update({l2[i]: l3[i]})\n        result.append(temp)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for arg in args:\n        for item in arg:\n            key = item[0]\n            value = item[1]\n            if key in result:\n                if isinstance(result[key], list):\n                    result[key].append(value)\n                else:\n                    result[key] = [result[key], value]\n            else:\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i*len(l2)+j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): List of strings.\n    l2 (list): List of integers.\n    l3 (list): List of tuples.\n\n    Returns:\n    dict: Nested dictionary where each key is a tuple from l1 and the corresponding value is the integer value of the corresponding tuple from l2.\n    '''\n\n    # Convert the lists to dictionaries\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n\n    # Combine the dictionaries into a single dictionary\n    d3 = {**d1, **d2}\n\n    return d3"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List 1 of strings.\n        l2 (list): List 2 of integers.\n        l3 (list): List 3 of floats.\n\n    Returns:\n        dict: Nested dictionary containing the lists as values.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'l2': l2[i], 'l3': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to hold the nested data\n    data = {}\n    # Loop through each list and add data to the nested dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                # Add the nested data to the dictionary\n                data[(l1[i], l2[j], l3[k])] = f\"{l1[i]}-{l2[j]}-{l3[k]}\"\n    return data"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Calculate the maximum sum possible using the given equation\n    max_sum = max(n*n*n*n*n, n)\n\n    # Return the maximum sum possible\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(num, i, memo):\n        if num == 1:\n            return num\n        if i == 1:\n            return max(helper(num - 1, i, memo), num)\n        else:\n            return max(helper(num - 1, i - 1, memo), helper(num - 1, i, memo), num)\n    return helper(n, 5, {})"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, memo):\n        if n == 1:\n            return n\n        elif n in memo:\n            return memo[n]\n        else:\n            memo[n] = max(n, helper(n//2, memo) + helper(n//3, memo) + helper(n//4, memo) + helper(n//5, memo))\n            return memo[n]\n\n    return helper(n, {})"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize a list to store the values of f(n) for all n from 1 to n\n    values = [1]\n\n    # Calculate the values of f(n) by following the given equation\n    while len(values) < n+1:\n        if len(values) == 1:\n            values.append(values[0])\n        else:\n            sum_f_div_2 = values[-2] + values[-3] + values[-4] + values[-5]\n            values.append(max(sum_f_div_2, values[-1]))\n\n    # Return the maximum value of f(n)\n    return max(values)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        max_sum = get_max_sum(n//2)\n        max_sum = max(max_sum, get_max_sum(n//3))\n        max_sum = max(max_sum, get_max_sum(n//4))\n        max_sum = max(max_sum, get_max_sum(n//5))\n        max_sum = max(max_sum, n)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 21\n    elif n == 5:\n        return 55\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the tuple and add each element to the set\n    for element in test_tup:\n        unique_set.add(element)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If all characters have a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n            \n    # Loop through each character in the string again\n    for char in str1:\n        # If the count of the character is 1, it's the first non-repeating character\n        if char_count[char] == 1:\n            return char\n            \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # find the first non-repeated character in the dictionary and return its index\n    for index, char in enumerate(str1):\n        if freq_dict[char] == 1:\n            return index"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Given a string, find the first non-repeating character.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # iterate over each character in the string and update the frequency count in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate over each character in the string and update the frequency count in the dictionary\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # create a dictionary to store the characters and their frequencies\n    char_freq = {}\n\n    # iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # iterate through the string again and find the first non-repeating character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    str1 = set(str1)\n    \n    # Loop through the set to find the first non-repeated character\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of characters\n    char_count = {}\n    \n    # loop through the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count by 1\n            char_count[char] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # find the first non-repeating character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Match the first part of the string\n    match = re.match(regex, string)\n\n    # If there is no match, return False\n    if not match:\n        return False\n\n    # Extract the character from the match object\n    char = match.group(1)\n\n    # Check if the last character matches the first character\n    if string[-1] == char:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string starts with the same character as the end of the string\n    if re.match(regex, string):\n        # Check if the string ends with the same character as the beginning of the string\n        if re.match(regex.replace('.', '.*'), string):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    arr.sort()\n    median = quickselect(arr, 0, len(arr) - 1, len(arr) // 2)\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted list\n    length = len(numbers)\n\n    # Check if the length of the list is odd or even\n    if length % 2 == 0:\n        # If the length is even, calculate the median as the average of the two middle numbers\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        # If the length is odd, calculate the median as the middle number\n        median = numbers[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted array\n    length = len(sorted_numbers)\n\n    # Determine the median\n    if length % 2 == 0:\n        # If the length of the array is even, the median is the average of the two middle numbers\n        mid_index = length // 2\n        median = (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2\n    else:\n        # If the length of the array is odd, the median is the middle number\n        mid_index = length // 2\n        median = sorted_numbers[mid_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the median of the three numbers\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1]) / 2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    sorted_list = sorted([a, b, c])\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        return (sorted_list[mid-1] + sorted_list[mid])/2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # find the middle number\n    middle = len(numbers) // 2\n\n    # calculate the median based on the middle number and the size of the array\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle - 1] + numbers[middle]) / 2\n    else:\n        median = numbers[middle]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    numbers = sorted([a,b,c])\n\n    # Finding the length of the sorted array\n    length = len(numbers)\n\n    # Finding the middle index of the array\n    middle = length // 2\n\n    # If the length is odd, then the median is the middle number\n    if length % 2 == 1:\n        return numbers[middle]\n\n    # If the length is even, then the median is the average of the two middle numbers\n    else:\n        return (numbers[middle-1] + numbers[middle]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as arguments and returns their median.\n    '''\n    # sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    # find the median\n    if len(nums) % 2 == 0:\n        # if there are two middle numbers, take the average\n        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        # if there is only one middle number, return that number\n        median = nums[len(nums)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Determine the length of the sorted list\n    n = len(sorted_nums)\n    # If the list has an odd number of elements, the median is the average of the middle two elements\n    if n % 2 == 1:\n        return (sorted_nums[n//2] + sorted_nums[n//2-1]) / 2\n    # If the list has an even number of elements, the median is the average of the two middle elements\n    else:\n        return (sorted_nums[n//2] + sorted_nums[n//2-1]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    n = len(sorted_list)\n\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n\n    return median\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        for digit in str(num):\n            result += int(digit)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits of each number\n    sum_of_digits_list = []\n\n    # loop through each number in the input list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        num_str = str(num)\n        digits_list = [int(digit) for digit in num_str]\n\n        # compute the sum of digits of the current number\n        sum_of_digits = sum(digits_list)\n\n        # add the sum of digits of the current number to the sum of digits list\n        sum_of_digits_list.append(sum_of_digits)\n\n    # return the sum of digits of each number in the input list\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        for digit in str(num):\n            result += int(digit)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a list to store the sum of digits for each number\n    sum_list = []\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        # Compute the sum of digits for the current number\n        digit_sum = sum(map(int, digits))\n        # Append the sum to the list of sums\n        sum_list.append(digit_sum)\n    # Return the list of sums\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        result += temp\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = sum([int(digit) for digit in str(num)])\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables for the sum of the tuples and the count of non-zero digits in the sum\n    sum_tup = 0\n    count_non_zero = 0\n\n    # Loop through the tuples and perform bitwise xor operation for each element\n    for i in range(len(test_tup1)):\n        sum_tup |= test_tup1[i] ^ test_tup2[i]\n\n        # Count the number of non-zero digits in the bitwise xor operation result\n        count_non_zero += sum_tup & 1\n\n        # Shift the sum_tup to the right by one bit\n        sum_tup = sum_tup >> 1\n\n    # Check if the count of non-zero digits is odd or even\n    if count_non_zero % 2 == 1:\n        # Return the bitwise xor operation result as a tuple\n        return (sum_tup, count_non_zero)\n    else:\n        # Return the bitwise xor operation result as a list\n        return list(sum_tup)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = test_tup1 ^ test_tup2\n    print(f\"The bitwise xor of the given tuples is {xor_result}\")"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the result of the bitwise xor operation\n    result_tup = ()\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # If the i-th bit of the first tuple is 1, then its corresponding bit of the result tuple will be 1 as well\n        if test_tup1[i]:\n            result_tup += (1,)\n        # If the i-th bit of the first tuple is 0, then its corresponding bit of the result tuple will be 0 as well\n        else:\n            result_tup += (0,)\n    # Iterate through the second tuple\n    for i in range(len(test_tup2)):\n        # If the i-th bit of the second tuple is 1, then its corresponding bit of the result tuple will be 1 as well\n        if test_tup2[i]:\n            result_tup += (1,)\n        # If the i-th bit of the second tuple is 0, then its corresponding bit of the result tuple will be 0 as well\n        else:\n            result_tup += (0,)\n    # Return the result tuple after performing the bitwise xor operation\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    num_unique_tuples = len(unique_tuples)\n    return num_unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a dictionary to store unique tuples\n    freq_dict = {}\n    # Loop through the list and add unique tuples to the dictionary\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    # Return the number of unique tuples\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # count the number of unique tuples in the set\n    freq = len(unique_set)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # count the number of unique tuples in the list\n    freq = len(unique_tuples)\n    \n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item[0], item[1]) in freq_dict:\n            freq_dict[(item[0], item[1])] += 1\n        else:\n            freq_dict[(item[0], item[1])] = 1\n    unique_tuples = list(freq_dict.keys())\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for i in test_list:\n        unique_tuples.add(i)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            new_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            new_tup.append(test_tup1[i] + test_tup2[i])\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # iterate through the first tuple and add its elements to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n        \n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result tuple\n    result_tup = ()\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the element of the first tuple at the current index\n        first_elem = test_tup1[i]\n        # Loop through the elements of the second tuple\n        for j in range(len(test_tup2)):\n            # Extract the element of the second tuple at the current index\n            second_elem = test_tup2[j]\n            # Perform index-wise addition of the two elements and append the result to the result tuple\n            result_tup += (first_elem + second_elem,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    n = max(len(test_tup1), len(test_tup2))\n    for i in range(n):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create a new empty list to store the result\n    result_list = []\n    \n    # Get the length of the first tuple\n    length1 = len(test_tup1)\n    \n    # Get the length of the second tuple\n    length2 = len(test_tup2)\n    \n    # Check if both tuples have the same length\n    if length1 == length2:\n        # Loop through each index of the first tuple and add the corresponding elements of the second tuple\n        for i in range(length1):\n            result_list.append(test_tup1[i] + test_tup2[i])\n        # Return the result list\n        return result_list\n    # If not, raise an error message\n    else:\n        raise ValueError('Both tuples must have the same length.')"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new empty list to store the result of the addition\n    result_list = []\n    # Loop through each element in the first tuple and add it to the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        # Check if the indices are within the bounds of the two tuples\n        if i < len(test_tup2):\n            result_list.append(test_tup1[i] + test_tup2[i])\n        else:\n            # If the index is out of bounds, append a 0 to the result list\n            result_list.append(0)\n    return tuple(result_list)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their minimum.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} is present in {tuple1}\")\n        else:\n            print(f\"{element} is not present in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(element, \"exists in\", tuple1)\n        else:\n            print(element, \"does not exist in\", tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"Element exists in tuple\") \n    else: \n        print(\"Element does not exist in tuple\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            print(element, 'is in', tuple1)\n            return True\n    print(tuplex, 'is not in', tuple1)\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuple1 in tuplex"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1,x+1):\n        if x%i == 0:\n            parity += 1\n    if parity%2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns whether it is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a positive integer as input and returns True if the parity of the number is odd and False otherwise.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x%2==0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(x,\"is even\")\n    else:\n        print(x,\"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while True:\n        digits = list(str(n))\n        digits.sort(reverse=True)\n        digits.append(0)  # add a 0 at the end of the list\n        next_bigger = int(''.join(str(d) for d in digits))\n        if next_bigger > n:\n            break\n        n = next_bigger\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Create a list to store the digits of the number\n    num_digits = []\n\n    # Loop through each digit and add it to the list\n    for digit in num_str:\n        num_digits.append(digit)\n\n    # Sort the list in descending order (i.e., from largest to smallest)\n    num_digits.sort(reverse=True)\n\n    # Convert the sorted list back to a string and add a zero for any leading zeros\n    num_str = ''.join(num_digits)\n    num_str = '0' * (len(num_str) - 1) + num_str\n\n    # Convert the string back to an integer\n    new_num = int(num_str)\n\n    # Return the next bigger number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the result as 0\n    result = 0\n\n    # loop through each digit of the given number\n    for digit in str(n):\n        # check if the digit is 9\n        if int(digit) == 9:\n            # check if the next digit is 9\n            if int(str(int(digit) + 1)) == 9:\n                # if both conditions are true, append the current digit to the result\n                result += int(digit)\n            else:\n                # if the next digit is not 9, append the next digit to the result\n                result += int(str(int(digit) + 1))\n        else:\n            # if the digit is not 9, append the current digit to the result\n            result += int(digit)\n\n    # return the result as a string\n    return str(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Find the digits of the input number\n    digits = list(str(n))\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Concatenate the sorted digits into a string\n    sorted_digits = ''.join(digits)\n    # Convert the sorted string back to an integer\n    next_bigger = int(sorted_digits)\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    new_num_str = ''\n    \n    # Rearrange digits in reverse order\n    for i in range(len(num_str)-1, -1, -1):\n        new_num_str += num_str[i]\n    \n    # Convert the new string to an integer and add 1\n    new_num = int(new_num_str) + 1\n    \n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # extract the digits of n\n    digits = [int(digit) for digit in str(n)]\n    # sort the digits in non-decreasing order\n    digits.sort(reverse=True)\n    # concatenate the sorted digits into a string\n    sorted_digits = ''.join(str(digit) for digit in digits)\n    # convert the sorted digits into an integer and return it\n    return int(sorted_digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits in the given number\n    digits = [int(digit) for digit in str(n)]\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # convert the sorted digits back to a string and add a zero in front\n    result = ''.join(str(digit) if digit!= 0 else '0' for digit in digits)\n    # add 1 to the first digit if the result is a valid number\n    while not str(int(result)).isdigit():\n        result = str(int(result) + 1)\n    # convert the result back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # split the string into a list of characters\n    char_list = list(num_str)\n    # reverse the list of characters\n    char_list.reverse()\n    # convert the list of characters back to a string\n    new_str = ''.join(char_list)\n    # convert the new string to an integer\n    new_num = int(new_str)\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # initialize the result string\n    result_str = \"\"\n    # iterate over the digits of the number and append them to the result in reverse order\n    for digit in num_str:\n        result_str = digit + result_str\n    # convert the result string back to an integer and return it\n    return int(result_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    num = 0\n    for digit in digits:\n        num = num * 10 + int(digit)\n    return num\n\nprint(rearrange_bigger(1234))  # Output: 4321\nprint(rearrange_bigger(9876543210))  # Output: 9876543210\nprint(rearrange_bigger(1000000))  # Output: 1000001"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    :param nums1: first array of integers\n    :param nums2: second array of integers\n    :param k: number of pairs to find\n    :return: list of tuples representing the k smallest pairs\n    \"\"\"\n\n    # Find the length of the shorter array\n    n = len(nums1) if len(nums1) <= len(nums2) else len(nums2)\n\n    # Create a min heap of size k to store the smallest k elements\n    min_heap = []\n\n    # Initialize a variable to store the current smallest pair\n    current_smallest_pair = None\n\n    # Loop through the first array\n    for i in range(n):\n        # Loop through the second array\n        for j in range(i + 1, n + 1):\n            # If the current pair is smaller than the current smallest pair, update it\n            if (current_smallest_pair is None) or (nums1[i] + nums2[j] < current_smallest_pair[0]):\n                current_smallest_pair = (nums1[i], nums2[j])\n\n            # If the min heap is not full and the smallest element in the heap is greater than the current smallest pair, add it to the heap\n            if len(min_heap) < k and (current_smallest_pair[0] < min_heap[0][0]) or (current_smallest_pair[0] == min_heap[0][0] and current_smallest_pair[1] < min_heap[0][1]):\n                heapq.heappush(min_heap, current_smallest_pair)\n\n            # If the min heap is not empty and the smallest element in the heap is greater than the current smallest pair, remove the smallest element from the heap\n            if len(min_heap) > 0 and (current_smallest_pair[0] > min_heap[0][0]) or (current_smallest_pair[0] == min_heap[0][0] and current_smallest_pair[1] > min_heap[0][1]):\n                heapq.heappop(min_heap)\n\n    # Return the list of k smallest pairs\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n\n    # Create a min heap to store the minimum elements of the first array\n    min_heap1 = []\n    heapq.heapify(min_heap1)\n\n    # Create a min heap to store the minimum elements of the second array\n    min_heap2 = []\n    heapq.heapify(min_heap2)\n\n    # Initialize two variables to store the minimum element of the first array and the minimum element of the second array\n    min1 = float('inf')\n    min2 = float('inf')\n\n    # Initialize a set to store the pair of indices that we have already added to the result list\n    result = set()\n\n    # Iterate through the first array and add each element to the min heap\n    for i in range(len(nums1)):\n        if nums1[i] < min1:\n            heapq.heappush(min_heap1, -nums1[i])\n        elif nums1[i] == min1:\n            heapq.heappush(min_heap1, -nums1[i])\n\n        if min_heap1 and len(min_heap1) > k:\n            heapq.heappop(min_heap1)\n\n        min1 = -heapq.heappop(min_heap1)\n\n        if min1!= float('inf'):\n            # Iterate through the second array and add each element to the min heap\n            for j in range(len(nums2)):\n                if nums2[j] < min2:\n                    heapq.heappush(min_heap2, -nums2[j])\n                elif nums2[j] == min2:\n                    heapq.heappush(min_heap2, -nums2[j])\n\n                if min_heap2 and len(min_heap2) > k:\n                    heapq.heappop(min_heap2)\n\n                min2 = -heapq.heappop(min_heap2)\n\n                if min2!= float('inf'):\n                    # Check if the pair of indices we just added is already in the result set\n                    if (i, j) not in result:\n                        result.add((i, j))\n                        result.add((j, i))\n\n                        if len(result) == k:\n                            return [nums1[i], nums2[j]]\n\n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    min_heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == 0 or j == 0:\n                heapq.heappush(min_heap, (nums1[i]+nums2[j], (i,j)))\n            elif nums1[i] == nums1[i-1] or nums2[j] == nums2[j-1]:\n                continue\n            else:\n                heapq.heappush(min_heap, (nums1[i]+nums2[j], (i,j)))\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n\n        while len(min_heap) > 0:\n            pair = heapq.heappop(min_heap)\n            pairs.append((pair[1][0], pair[1][1]))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to keep track of the k smallest pairs\n    min_heap = []\n    # iterate through the two arrays and add the smallest elements to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # return the smallest pairs\n    result = []\n    while min_heap:\n        _, (num1, num2) = heapq.heappop(min_heap)\n        result.append((num1, num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # First, we need to sort the two arrays in non-descending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Next, we can use a priority queue to find the k smallest pairs\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            elif heap[0][0] > nums1[i] + nums2[j]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n    # Finally, we can extract the k smallest pairs from the heap\n    pairs = []\n    for i in range(k):\n        pairs.append(heapq.heappop(heap)[1])\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n    heapq.heapify(heap)\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            elif heap[0][0] > nums1[i] + nums2[j]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements from the two arrays\n    min_heap = [(-num1, -num2) for num1 in nums1 for num2 in nums2][:k]\n    heapq.heapify(min_heap)\n    \n    # Initialize two pointers to track the current smallest pair\n    i, j = 0, 0\n    result = []\n    \n    while k > 0 and i < len(nums1) and j < len(nums2):\n        # Add the current pair to the result\n        pair = (-nums1[i], -nums2[j])\n        result.append(pair)\n        \n        # Remove the smallest element from the two arrays and update the min heap\n        if -pair[0] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            if k > 0:\n                heapq.heappush(min_heap, (-pair[0], -pair[1]))\n        i += 1\n        j += 1\n        k -= 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    count = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n            else:\n                min_heap[0] = (num1+num2, (min_heap[0][0], min_heap[0][1]+(num1, num2)))\n            count += 1\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Convert the lists to sets for efficient membership testing\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    \n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    \n    # Iterate over the first array and for each element, iterate over the second array and for each element, check if the pair (x, y) exists in the first and second sets, respectively. If it does, add it to the min heap.\n    for num1 in nums1:\n        if num1 in nums1_set:\n            for num2 in nums2:\n                if num2 in nums2_set:\n                    heapq.heappush(min_heap, (num1, num2))\n                    if len(min_heap) > k:\n                        heapq.heappop(min_heap)\n    \n    # Extract and return the k smallest pairs\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k elements from both arrays\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Calculate the index of the corresponding element in the second array\n        index2 = bisect_left(nums2, num1)\n        \n        # Iterate through the elements in the second array until we have k elements in the min heap\n        while len(min_heap) < k and index2 < len(nums2):\n            # Add the smallest element to the heap\n            heapq.heappush(min_heap, (nums1[index2], index2))\n            \n            # Update the index of the next element in the second array to consider\n            index2 += 1\n        \n        # Iterate through the min heap to find the k smallest pairs\n        for i in range(k):\n            # Get the smallest element from both arrays and their corresponding indices\n            smallest_pair = heapq.heappop(min_heap)\n            \n            # Print the pair\n            print(smallest_pair[0], nums1[smallest_pair[1]])"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    min_product = float('inf')\n    pair_product = 1\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Check if the current pair of tuples has a smaller product\n        if list1[i][0] * list1[i][1] < min_product:\n            # If so, update the minimum product and pair product\n            min_product = list1[i][0] * list1[i][1]\n            pair_product = list1[i][0]\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        return \"List should have an even length\"\n    else:\n        min_value = 999999999\n        min_product = 1\n        for i in range(0, len(list1), 2):\n            product = list1[i] * list1[i+1]\n            if product < min_product:\n                min_product = product\n                min_value = list1[i]\n        return min_value * min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of two tuples within the list.\n    '''\n\n    # sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_list = sorted(list1, key=lambda x: x[1])\n\n    # initialize the minimum product to be the first tuple in the list\n    min_product = sorted_list[0]\n\n    # loop through the sorted list and find the minimum product of two tuples\n    for i in range(1, len(sorted_list)):\n        # calculate the product of the two tuples and update the minimum product if necessary\n        product = sorted_list[i][0] * sorted_list[i][1]\n        if product < min_product[0]:\n            min_product = (sorted_list[i][0], sorted_list[i][1])\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Create a dictionary to store the product of each tuple in the list\n    product_dict = {}\n\n    # Loop through the list and calculate the product of each tuple\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is already in the dictionary\n            if product in product_dict:\n                # If it is, add the index to the existing tuple\n                product_dict[product] += (i, j)\n            else:\n                # If it isn't, create a new tuple with the product and the indices of the two tuples\n                product_dict[product] = (i, j)\n\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n\n    # Loop through the dictionary to find the minimum product of pairs of tuples\n    for product, indices in product_dict.items():\n        # Calculate the product of the two tuples and add it to the minimum product\n        min_product = min(min_product, product * list1[indices[0]][0] * list1[indices[1]][1])\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables for the minimum product and the minimum tuple\n    min_product = float('inf')\n    min_tuple = None\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n\n            # If the product is smaller than the current minimum, update the minimum product and the minimum tuple\n            if product < min_product:\n                min_product = product\n                min_tuple = (list1[i], list1[j])\n\n    # Return the minimum product and the minimum tuple\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    # initialize minimum product and tuple count\n    min_product = float('inf')\n    count = 0\n\n    # iterate through list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate product of tuple elements\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k]\n            product *= 1\n            for k in range(len(list1[j])):\n                product *= list1[j][k]\n\n            # check if product is smaller than minimum product\n            if product < min_product:\n                min_product = product\n                count = 1\n            elif product == min_product:\n                count += 1\n\n    # return minimum product and count of tuples\n    return min_product, count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of pairs of tuples.\n    \"\"\"\n    if not list1:\n        return 0\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = list1[i][0] * list1[j][1]\n            if current_product < min_product:\n                min_product = current_product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to be positive infinity\n    min_product = float('inf')\n    # Initialize a boolean variable to store whether the minimum product has been found or not\n    found_min = False\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuple pair\n            product = list1[i][0] * list1[j][1]\n            # If the product is less than the minimum product and not found yet, update the minimum product and set the flag\n            if product < min_product and not found_min:\n                min_product = product\n                found_min = True\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of any type of elements and returns the minimum value in the list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list and compare each element with the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return \"The list is empty!\"\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    elif len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first value in the list\n    min_value = listval[0]\n    # iterate over the rest of the list and compare each value to the current minimum\n    for value in listval[1:]:\n        if value < min_value:\n            min_value = value\n    # return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # initialize the minimum value to the first element of the list\n    for i in range(1, len(listval)): # loop through the remaining elements of the list\n        if listval[i] < min_val: # if the current element is less than the minimum value, update the minimum value\n            min_val = listval[i]\n    return min_val # return the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n\n    # initialize minimum value as the first element of the list\n    min_val = listval[0]\n\n    # iterate through the list and find the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the list from the second element to the last\n    for i in range(1, len(listval)):\n        # Check if the current element is less than the minimum value\n        if listval[i] < min_val:\n            # Update the minimum value to the current element\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to a camel case string.\n\n    Args:\n        word: a string in snake case (i.e. with underscores between words)\n\n    Returns:\n        a string in camel case (i.e. with first letter in lowercase and all subsequent letters in uppercase)\n    \"\"\"\n    word = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n\n    # Capitalize the first letter of each word\n    result = []\n    for word in words:\n        if word.isupper():\n            result.append(word)\n        else:\n            result.append(word.capitalize())\n\n    # Join the words back into a single string\n    return ''.join(result)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if char.isupper():\n            if i > 0 and word[i-1].isupper():\n                camel_case += \"_\" + char.lower()\n            else:\n                camel_case += char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Replace underscores with spaces\n    word = re.sub('_','', word)\n\n    # Capitalize the first letter\n    word = word.capitalize()\n\n    # Remove spaces from the beginning and end\n    word = word.strip()\n\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake_case to CamelCase\n    camel_case = re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)\n    # Remove the first underscore from the first character if present\n    if camel_case.startswith('_'):\n        camel_case = camel_case[1:]\n    # Return the camel_case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)')\n    return pattern.sub(lambda match: match.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words using the underscore as a separator\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words back into a camel case string using the first letter of each word\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.)', re.IGNORECASE)\n    word = pattern.sub(lambda match: match.group(1).upper(), word)\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    return word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    word_list = re.findall(r'_\\w', word)\n    # Convert the word list to camel case\n    camel_case = ''.join(word.title().split(word_list[0])[1:])\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create a new list to store the even numbers\n    result = []\n    # loop through each number in the input list\n    for num in l:\n        # if the number is odd, add it to the result list\n        if num % 2!= 0:\n            result.append(num)\n    # return the new list with even numbers removed\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return 'Invalid input'\n    else:\n        return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1[0]) is tuple:\n        return list(zip(*list1))[n-1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif n == 1:\n        return list1[0][1]\n    else:\n        return extract_nth_element(list1[1:], n-1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the input list is not empty\n    if not list1:\n        print(\"Error: Input list is empty.\")\n        return\n    \n    # Check if the input list contains only one element\n    if len(list1) == 1:\n        print(f\"Error: Input list has only one element. Element: {list1[0]}\")\n        return\n    \n    # Check if the input list contains only tuples\n    if not all(isinstance(i, tuple) for i in list1):\n        print(\"Error: Input list contains non-tuple elements.\")\n        return\n    \n    # Check if the input list contains only n tuples\n    if len(set(map(tuple, list1)))!= len(list1):\n        print(\"Error: Input list contains duplicate tuples.\")\n        return\n    \n    # Check if the input list contains only n tuples of length 2\n    if not all(len(i) == 2 for i in list1):\n        print(\"Error: Input list contains tuples of different length.\")\n        return\n    \n    # Extract the nth element from the list\n    try:\n        nth_element = list1[n-1][1]\n    except IndexError:\n        print(f\"Error: Index {n} is out of range.\")\n        return\n    \n    # Print the extracted element\n    print(f\"The {n}th element of the input list is: {nth_element}\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for tup in list1:\n        if n == 1:\n            return tup[1]\n        n -= 1"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns a boolean value indicating whether any value exists in either sequence.\n    '''\n    # loop through the first list and check if any value exists in the second list\n    for item in list1:\n        if item in list2:\n            return True\n    # if no values found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether there exists any value in the first list that is also in the second list.\n    Returns True if such a value exists, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    \n    for item in list1:\n        if item in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list1 for x in list2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n\n    # Check if both lists are empty\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n\n    # Check if only one list is empty\n    elif len(list1) == 0 or len(list2) == 0:\n        return False\n\n    # Check if there is any common value between the lists\n    elif any(x in list1 for x in list2) or any(x in list2 for x in list1):\n        return True\n\n    # If no common values found, return False\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create a set to store the values in list2\n    set2 = set(list2)\n    # iterate over each value in list1\n    for value in list1:\n        # check if value is in set2\n        if value in set2:\n            # if it is, return True\n            return True\n    # if no value is found in list1 that is also in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n        \n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    min_product = float('inf')\n    min_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        if arr[i] > max_pair[0]:\n            max_pair = (arr[i], i)\n        elif arr[i] < max_pair[0]:\n            max_pair = (arr[i], i)\n\n        if arr[i] > min_pair[0]:\n            min_pair = (arr[i], i)\n        elif arr[i] < min_pair[0]:\n            min_pair = (arr[i], i)\n\n        product = arr[max_pair[1]] * arr[min_pair[1]]\n        if product > max_product:\n            max_product = product\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    # Initialize variables for maximum product and maximum negative product\n    max_product = float('-inf')\n    max_negative_product = float('-inf')\n    \n    # Loop through the array and update max_product and max_negative_product\n    for num in arr:\n        if num > 0:\n            max_product = max(max_product, num)\n        else:\n            max_negative_product = max(max_negative_product, num)\n            \n    # Return the pair with the highest product\n    return arr[arr.index(max_product):arr.index(max_negative_product)+1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if len(arr) < 2:\n        return -1\n\n    max_pair = [arr[0], arr[1]]\n    min_pair = [arr[0], arr[1]]\n\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+2):\n            if j > len(arr):\n                break\n            product = arr[i] * arr[j]\n            if product > max_pair[0] * max_pair[1]:\n                if product > min_pair[0] * min_pair[1]:\n                    max_pair = [arr[i], arr[j]]\n                else:\n                    max_pair = [arr[j], arr[i]]\n            if product < min_pair[0] * min_pair[1]:\n                if product < max_pair[0] * max_pair[1]:\n                    min_pair = [arr[i], arr[j]]\n                else:\n                    min_pair = [arr[j], arr[i]]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # get the two highest numbers and the two lowest numbers\n    max_pair = arr[0], arr[1]\n    min_pair = arr[-1], arr[-2]\n    # find the maximum product of the two highest numbers\n    max_product = max(max_pair[0] * max_pair[1], max_pair[1] * max_pair[0])\n    # find the maximum product of the two lowest numbers\n    min_product = min(min_pair[0] * min_pair[1], min_pair[1] * min_pair[0])\n    # return the maximum product\n    return max(max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the second largest element\n    max1 = arr[1]\n\n    # Find the first element\n    min2 = arr[0]\n\n    # Calculate the second largest element's product\n    max2 = max1 * min2\n\n    # Return the pair\n    return max2, min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Find the product of the first and second elements\n    product1 = arr[0]*arr[1]\n    # Find the product of the last and second-to-last elements\n    product2 = arr[-1]*arr[-2]\n    # Return the pair with highest product\n    return (product1, product2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a pair of integers\n    that form the highest product of two elements in the array.\n    \n    For example, if the input array is [2, 3, 4, 5, 6], the function should return (2, 3)\n    since the pair (2, 3) has the highest product of 6 x 4 = 24.\n    \"\"\"\n    # Initialize the maximum product to be the first element of the array\n    max_product = arr[0]\n    \n    # Initialize the first element to be the first element of the array\n    first = arr[0]\n    \n    # Loop over the rest of the array\n    for i in range(1, len(arr)):\n        # Calculate the product of the first and current elements\n        product = first * arr[i]\n        \n        # If the current product is greater than the maximum product, update the maximum product\n        if product > max_product:\n            max_product = product\n        \n        # Update the first element to be the current element\n        first = arr[i]\n    \n    # Return the pair of integers that form the highest product\n    return (max_product // first, max_product % first)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # initialize empty dictionary\n    common_dict = {}\n    \n    # loop through each tuple in the list\n    for i in Input:\n        \n        # get the first element of each tuple\n        first_element = i[0]\n        \n        # check if the first element is already in the dictionary\n        if first_element in common_dict:\n            # if it is, increment the count for the first element\n            common_dict[first_element] += 1\n        else:\n            # if it isn't, add the first element as a key with a count of 1\n            common_dict[first_element] = 1\n    \n    # find the key with the highest count\n    max_count = max(common_dict.values())\n    common_key = None\n    \n    for key, value in common_dict.items():\n        if value == max_count:\n            common_key = key\n            break\n    \n    # create a new list of tuples with the common key\n    result = [i for i in Input if i[0] == common_key]\n    \n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    common_elements = set()\n    for i in range(len(Input)):\n        first_element = Input[i][0]\n        if first_element in common_elements:\n            common_elements.remove(first_element)\n        else:\n            common_elements.add(first_element)\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n    # Loop through the input list of tuples\n    for tup in Input:\n        # Extract the first element of the tuple\n        elem = tup[0]\n        # If the element is not already in the dictionary, add it with a count of 1\n        if elem not in common_dict:\n            common_dict[elem] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            common_dict[elem] += 1\n    # Create an empty list to store the common elements with their count\n    common_list = []\n    # Loop through the dictionary to find the common elements and their count\n    for key, val in common_dict.items():\n        # If the count is greater than 1, append the tuple to the list\n        if val > 1:\n            common_list.append((key, val))\n    # Return the common elements with their count\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    # Create an empty list to store the common elements in each tuple\n    common_elements = []\n    # Iterate over each tuple in the input list\n    for tuple in Input:\n        # If the first element of the current tuple is not in the common_elements list, add it\n        if tuple[0] not in common_elements:\n            common_elements.append(tuple[0])\n    # Return the list of common elements found in all the tuples\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples containing all the tuples where the first element is the same for all tuples in the input list.\n    \"\"\"\n    # Initialize an empty list to store the unique tuples\n    unique_tuples = []\n    # Loop through the input list of tuples\n    for i in range(len(Input)):\n        # Loop through the remaining tuples in the input list\n        for j in range(i+1, len(Input)):\n            # If the first element of the i-th tuple is the same as the first element of the j-th tuple, add the tuple to the unique_tuples list\n            if Input[i][0] == Input[j][0]:\n                unique_tuples.append(tuple(sorted(Input[i] + Input[j])))\n    # Return the unique_tuples list\n    return unique_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # initialize an empty dictionary to store common elements\n    common_elements = {}\n\n    # iterate through the list of tuples\n    for i in Input: \n        # get the first element of the current tuple\n        current_element = i[0]\n\n        # if the current element is not already in the dictionary, add it\n        if current_element not in common_elements: \n            common_elements[current_element] = []\n\n        # add the current tuple to the corresponding list of tuples\n        common_elements[current_element].append(i)\n\n    # iterate through the dictionary to find the common elements\n    for key in common_elements: \n        # check if the length of the list of tuples for the current key is greater than 1\n        if len(common_elements[key]) > 1: \n            # print the key and the list of tuples for that key\n            print(f\"Common element: {key}\")\n            for t in common_elements[key]: \n                print(t)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        elif i[0] == common_element:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples and returns a list of lists, where each sublist contains tuples with the same first element.\n    \"\"\"\n    groups = []\n    for i in range(len(Input)):\n        group = []\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                group.append(Input[j])\n        groups.append(group)\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for item in Input:\n        first_elem = item[0]\n        if first_elem not in common_first:\n            common_first.append(first_elem)\n    return common_first"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Using list comprehension to find the maximum element\n    max_element = max(lst, key=len)\n\n    # Printing the maximum element\n    print(\"The maximum element in the list is:\", max_element)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for i in lst: \n        length = len(i) \n        if length > max_length: \n            max_length = length \n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n\n    # Initialize max_len and max_element variables\n    max_len = 0\n    max_element = None\n\n    # Traverse through the list\n    for element in lst:\n        # Find the length of the element\n        len_element = len(str(element))\n        # If the length is greater than max_len, update max_len and max_element\n        if len_element > max_len:\n            max_len = len_element\n            max_element = element\n\n    # Return the max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    return [x for x in lst if len(x) == max_len][0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    # initializing max_length to the first element of the list\n    max_length = len(lst[0])\n    # initializing max_element to the first element of the list\n    max_element = lst[0]\n    # iterating over the list and updating max_length and max_element if a longer string is found\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    # returning the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    max_elem = [x for x in lst if len(x) == max_len][0]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = \"\"\n    for i in lst: \n        if len(str(i)) > max_len: \n            max_len = len(str(i)) \n            max_ele = str(i) \n    return max_ele "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    \n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n\n    result = total_sum * len(list1)\n    print(\"The result is:\", result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in lst:\n        total += round(i)\n    print(total*len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # calculate the sum of the rounded numbers\n    rounded_sum = sum([round(num) for num in list1])\n    \n    # print the total sum multiplied by the length of the list\n    print(rounded_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num)\n    return total_sum * len(list1)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i*i*i\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0 \n    for i in range(1, n+1, 2):\n        sum += i**3 \n    return sum "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of i\n        cube = i ** 3\n        # add cube to sum\n        sum += cube\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    # Initialize the sum variable to zero\n    cube_sum = 0\n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of i\n        cube = i ** 3\n        # Add the cube to the sum\n        cube_sum += cube\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + ','\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1] # remove the last delimiter from the string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"\"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n        delimiter = \",\"\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"\"\n    concatenated_tuple = []\n    for item in test_tup:\n        concatenated_tuple.append(str(item))\n    concatenated_str = delimiter.join(concatenated_tuple)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    result = result[:-2] # remove the trailing comma and space\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average\n\nprint(find_Average_Of_Cube(5))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    count = 0\n    sum_of_cubes = 0\n    \n    # loop through first n natural numbers\n    for i in range(n):\n        # calculate cube of i\n        cube = i ** 3\n        \n        # add cube to sum of cubes\n        sum_of_cubes += cube\n        \n        # increment count\n        count += 1\n        \n    # calculate average of cubes and return it\n    return sum_of_cubes / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    \n    total = 0  \n    count = 0  \n    \n    for i in range(1, n+1):  \n        total += i ** 3  \n        count += 1  \n        \n    return total / count  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    avg = sum / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    average = sum/float(n)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n    for i in range(1,n+1):\n        cube_sum += i*i*i\n        count += 1\n    return cube_sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    average_cube = sum_cube / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nn = int(input(\"Enter the number of natural numbers: \"))\naverage_of_cubes = find_Average_Of_Cube(n)\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", average_of_cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i*i*i\n    average = cube_sum/n\n    print(\"The average of cubes of first n natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(len(string) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(i-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_list.append(test_tuple[i][-1])\n        else:\n            rear_list.append(test_tuple[i][0])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize an empty list to store the rear index elements\n    rear_elements = []\n\n    # Loop through each string in the tuple\n    for string in test_tuple:\n        # Split the string into a list of characters and get the last element (rear index)\n        rear_index = string[-1]\n        # Append the rear index element to the list of rear elements\n        rear_elements.append(rear_index)\n\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[len(string)-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and a element x as input and returns the count of sublists in the list that contain x.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n    - nums (list): a list of integers\n\n    Returns:\n    - list: a new list with only odd numbers from the original list\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list of odd integers in the original list.\n\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(regex, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use re.search() method to search for pattern in date string\n    match = re.search(pattern, dt)\n    # if match is found, replace hyphens with slashes and return the modified date string\n    if match:\n        # replace hyphens with slashes in date string\n        dt = dt.replace('-', '/')\n        return dt\n    # if no match is found, return the original date string as it is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search the input string for the date format using the regular expression pattern\n    match = re.search(pattern, dt)\n\n    # If a match is found, use string manipulation to convert the date format\n    if match:\n        # Extract the year, month, and day values from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Format the date string in dd-mm-yyyy format\n        new_date = day + '-' + month + '-' + year\n\n        # Return the new date string\n        return new_date\n\n    # If no match is found, return the input string unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.sub function to replace the date format with the new one\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # define regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # define regular expression pattern to match dd-mm-yyyy format\n    pattern_reverse = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    \n    # convert yyyy-mm-dd format to dd-mm-yyyy format\n    dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    # convert dd-mm-yyyy format to yyyy-mm-dd format\n    dt = re.sub(pattern_reverse, r'\\3-\\1-\\2', dt)\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Match pattern for yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Replace date format with dd-mm-yyyy\n    dt = re.sub(pattern, r'\\g<2>-\\g<1>-\\g<3>', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regular expression to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern and replace the matched groups with the appropriate format\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    # return the new date in the desired format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the date pattern in the input string\n    match = re.match(pattern, dt)\n\n    # Extract the date components\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # Convert the date components to the new format\n    new_date = f'{day}-{month}-{year}'\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # use the re.sub function to replace all matches of the pattern with the desired format\n    new_dt = re.sub(pattern, lambda match: '-'.join(match.group(0)[::-1]), dt)\n\n    # return the new formatted date string\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(regex, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    # Determine the maximum value in the array\n    max_val = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_val:\n            max_val = my_list[i]\n\n    # Calculate the increment value for the sorting\n    increment = max_val // 2\n    while increment > 0:\n        for i in range(len(my_list) - increment):\n            # Swap adjacent elements if they are in the wrong order\n            if my_list[i] > my_list[i + increment]:\n                my_list[i], my_list[i + increment] = my_list[i + increment], my_list[i]\n        # Decrease the increment value until it becomes 0\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # The first gap is the largest gap such that gap*10 > n\n    gap = n // 2\n    while gap > 0:\n        # Insertion sort on the sublist of elements\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reducing the gap to find the next gap\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the maximum value in the array\n    max_value = max(my_list)\n\n    # Perform the shell sort for each gap size\n    gap = max_value // 2\n\n    while gap > 0:\n        # Insertion sort for each gap size\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    \n    # Insertion sort on smallest arrays\n    for gap in range(n//2):\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n            \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their element-wise and tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(zip(*[t1 & t2 for t1, t2 in zip(test_tup1, test_tup2)]))\n    else:\n        raise ValueError(\"The two tuples should have the same length.\")"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n    \n    # Loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements of the two tuples at index i\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # Perform the elementwise and operation between the elements of the two tuples\n        and_elem = elem1 & elem2\n        \n        # Add the and_elem to the and_tuples_list\n        and_tuples_list.append(and_elem)\n        \n    # Return the and_tuples_list as a tuple\n    return tuple(and_tuples_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[tuple(test_tup1), tuple(test_tup2)]))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return None\n    else:\n        and_tup = ()\n        for i in range(len(test_tup1)):\n            and_tup += (test_tup1[i] & test_tup2[i],)\n        return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The equation has no real roots\"\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        x2 = x1\n        return \"The equation has two real roots, x1 = {:.2f}, x2 = {:.2f}\".format(x1, x2)\n    else:\n        x1 = (-b + discriminant**(1/2))/(2*a)\n        x2 = (-b - discriminant**(1/2))/(2*a)\n        return \"The equation has two distinct real roots, x1 = {:.2f}, x2 = {:.2f}\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is greater than 0\n    if discriminant > 0: \n        # calculate the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # print the directrix\n        print(\"The directrix is:\", root1)\n        print(\"The directrix is:\", root2)\n    \n    # if the discriminant is equal to 0\n    elif discriminant == 0: \n        # calculate the root of the discriminant\n        root = -b/(2*a)\n        \n        # print the directrix\n        print(\"The directrix is:\", root)\n    \n    # if the discriminant is less than 0\n    else: \n        print(\"The discriminant is less than 0.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola has no real roots.\"\n    elif discriminant == 0:\n        return \"The parabola has a single real root.\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is the point where the discriminant is zero.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix of the parabola is:\", root)\n    else:\n        print(\"There are no real roots of the equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    This function takes three parameters: a, b, and c, which are the coefficients of the parabola. \n    It returns the directrix of the parabola as a float.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative or zero\n    if disc < 0:\n        print(\"The equation of the parabola has no real solutions.\")\n        return None\n    elif disc == 0:\n        # Find the root of the equation\n        root = -b / (2*a)\n        print(\"The directrix is equal to\", root)\n        return root\n    else:\n        # Calculate the second discriminant\n        second_disc = math.sqrt(disc)\n        \n        # Find the two roots of the equation\n        x1 = (-b + second_disc) / (2*a)\n        x2 = (-b - second_disc) / (2*a)\n        \n        # Sort the roots in ascending order\n        if x1 > x2:\n            x1, x2 = x2, x1\n        \n        print(\"The directrix is between\", x1, \"and\", x2)\n        return (x1 + x2) / 2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D > 0:\n        x1 = (-b + D**0.5) / (2*a)\n        x2 = (-b - D**0.5) / (2*a)\n        print(\"Two distinct roots:\", x1, x2)\n    elif D == 0:\n        x = -b / (2*a)\n        print(\"Single root:\", x)\n    else:\n        print(\"Parabola is degenerate\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant < 0:\n        print(\"No real roots\")\n    elif discriminant == 0:\n        print(\"One real root\")\n        x = -b/2/a\n        print(\"The directrix is\", x)\n    else:\n        print(\"Two real roots\")\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root\n    else:\n        return \"The given values of a, b, and c do not produce a parabola.\"\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of the first list\n    set1 = set(list1)\n    # loop through the second list and check if each element is in the set of the first list\n    for element in list2:\n        if element in set1:\n            return True\n    # if no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for i in list1:\n        if i in list2 and i not in common_list:\n            common_list.append(i)\n    return True if len(common_list) > 0 else False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set to store the elements from both lists\n    common_set = set(list1) & set(list2)\n    # If the length of the set is greater than 0, then there is at least one common element\n    if len(common_set) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the lengths of the bases and the height of the trapezium\n    base_1 = float(base1)\n    base_2 = float(base2)\n    height = float(height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base_1 * height + 0.5 * base_2 * height\n\n    # Calculate the length of the shorter base\n    shorter_base = (base_1 + base_2) / 2\n\n    # Calculate the length of the longer base\n    longer_base = 0.5 * (base_1 + base_2)\n\n    # Calculate the length of the shorter base from the area\n    shorter_base_from_area = shorter_base * height / area\n\n    # Calculate the length of the longer base from the area\n    longer_base_from_area = 0.5 * longer_base * height / area\n\n    # Compare the lengths of the shorter and longer base\n    if shorter_base_from_area < longer_base_from_area:\n        return shorter_base_from_area\n    else:\n        return longer_base_from_area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the length of the median of a trapezium.\n    The length is calculated using the trapezium formula:\n\n    L = (b1 + b2) / 2\n\n    where b1 and b2 are the two bases of the trapezium and h is the height.\n\n    The function takes in the base1, base2, and height as parameters and returns the median length.\n    '''\n\n    b1 = base1\n    b2 = base2\n    h = height\n\n    L = (b1 + b2) / 2\n\n    if L > h / 2:\n        return b1\n    elif L < h / 2:\n        return b2\n    else:\n        return L"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the lengths of the sides of the trapezium\n    a = base1 + base2\n    b = 0.5 * (base1 + base2) * height\n    c = a + b\n    \n    # Calculate the length of the shorter side of the trapezium\n    if c <= a:\n        shorter = c\n    else:\n        shorter = a\n    \n    # Calculate the length of the longer side of the trapezium\n    if c <= b:\n        longer = c\n    else:\n        longer = b\n    \n    # Calculate the median length of the trapezium\n    median = shorter * 2 + (longer - shorter) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium given the base and height of each side.\n    \"\"\"\n    # calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n\n    # calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * area / semi_perimeter\n    side2 = 0.5 * area / semi_perimeter\n\n    # sort the sides in ascending order\n    sorted_sides = sorted([side1, side2])\n\n    # calculate the median length of the trapezium\n    median_length = sorted_sides[1]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the base of the trapezium\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the height of the trapezium\n    trapezium_height = height\n\n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * base * trapezium_height\n\n    # Calculate the area of the top half of the trapezium\n    top_area = area - base_area\n\n    # Calculate the area of the bottom half of the trapezium\n    bottom_area = 0.5 * base * (height - trapezium_height)\n\n    # Find the area of the trapezium\n    trapezium_area = top_area + bottom_area\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 * trapezium_height + base2 * (height - trapezium_height))\n\n    # Calculate the midpoint of the trapezium\n    midpoint = 0.5 * (base1 + base2 + trapezium_length)\n\n    # Calculate the length of the trapezium's base\n    base_length = 0.5 * base\n\n    # Calculate the height of the trapezium's base\n    base_height = trapezium_height\n\n    # Calculate the width of the trapezium's base\n    base_width = 2 * base\n\n    # Calculate the area of the base of the trapezium's base\n    base_base_area = 0.5 * base_width * base_height\n\n    # Calculate the area of the top half of the trapezium's base\n    top_base_area = base_area - base_base_area\n\n    # Calculate the area of the bottom half of the trapezium's base\n    bottom_base_area = 0.5 * base_width * (base_height - trapezium_height)\n\n    # Find the area of the trapezium's base\n    base_area = top_base_area + bottom_base_area\n\n    # Find the area of the trapezium's base\n    area_base_area = 0.5 * base * trapezium_height\n\n    # Calculate the area of the trapezium's base's base\n    base_base_base_area = 0.5 * base_width * base_width\n\n    # Calculate the area of the trapezium's base's top half\n    top_base_base_area = base_base_area - base_base_base_area\n\n    # Calculate the area of the trapezium's base's bottom half\n    bottom_base_base_area = 0.5 * base_width * base_height\n\n    # Find the area of the trapezium's base's base\n    base_base_area = top_base_base_area + bottom_base_base_area\n\n    # Calculate the area of the trapezium's base's base's base\n    base_base_base_base_area = 0.5 * base_width * base_width\n\n    # Calculate the area of the trapezium's base's base's top half\n    top_base_base_base_area = base_base_base_area - base_base_base_base_area\n\n    # Calculate the area of the trapezium's base's base's bottom half\n    bottom_base_base_base_area = 0.5 * base_width * (base_height + trapezium_height)\n\n    # Find the area of the trapezium's base's base's base\n    base_base_base_area = top_base_base_base_area + bottom_base_base_base_area\n\n    # Calculate the area of the trapezium's base's base's base's base\n    base_base_base_base_area = 0.5 * base_width * base_width\n\n    # Calculate the area of the trapezium's base's base's base's base's top half\n    top_base_base_base_base_area = base_base_base_base"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the height of each half of the trapezium\n    half_height = height / 2\n\n    # Calculate the length of each half of the trapezium\n    half_base1 = area / half_height\n    half_base2 = area - half_base1\n\n    # Calculate the length of the middle half of the trapezium\n    middle_base = area / (2 * half_height)\n\n    # Determine the median length of the trapezium\n    if middle_base > half_base1:\n        median_length = half_base2\n    elif middle_base < half_base1:\n        median_length = half_base1\n    else:\n        median_length = middle_base\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the lengths of the bases and the top of the trapezium\n    base_lengths = [base1, base2]\n    top_length = height\n    \n    # Sort the bases in ascending order\n    base_lengths.sort()\n    \n    # Calculate the two middle lengths of the trapezium\n    middle1 = area / base_lengths[0]\n    middle2 = area / base_lengths[-1]\n    \n    # Calculate the sum of the two middle lengths\n    middle_sum = middle1 + middle2\n    \n    # Return the median length of the trapezium\n    return max(middle1, middle2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median = 0.5 * (base1 + base2) * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the lengths of the two equal sides of the trapezium\n    base_length = 0.5 * (base1 + base2)\n    side_length = height\n    \n    # Calculate the number of equal sides of the trapezium\n    num_equal_sides = int(area / (base_length + side_length))\n    \n    # Calculate the lengths of the equal sides of the trapezium\n    equal_side_length = height / num_equal_sides\n    \n    # Find the median length of the trapezium\n    median_length = 0.5 * (base_length + equal_side_length)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the length of the trapezium sides\n    side1 = 0.5 * area\n    side2 = 0.5 * area - base1 - base2\n    \n    # Calculate the lengths of the two trapezium sides that are shorter than the other\n    shorter_side = min(side1, side2)\n    \n    # Calculate the length of the longer trapezium side\n    longer_side = max(side1, side2)\n    \n    # Calculate the length of the median trapezium side\n    median_side = (longer_side + shorter_side) / 2\n    \n    # Calculate the length of the median trapezium\n    median_trapezium = 2 * median_side\n    \n    # Return the median trapezium length\n    return median_trapezium"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr)!= list:\n        return False\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_num = False\n    \n    for element in arr:\n        if element > number:\n            greater_than_num = True\n            break\n    \n    return greater_than_num"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            print(num, \"is greater than\", number)\n            return True\n    print(number, \"is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(\"The entered number is greater than the elements of the given array.\")\n            return True\n    print(\"The entered number is not greater than the elements of the given array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array of integers and a number as input and returns True if the entered number is greater than the elements of the array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    # Define a regular expression pattern to match \"a\" followed by one or more \"b\" characters\n    pattern = re.compile(r'a.*b')\n    \n    # Find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return the number of matches found\n    return len(matches)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'[ab](?=[^b]*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba[b]*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # create a regex pattern to match the given string\n    pattern = r'a.*b'\n\n    # compile the regex pattern\n    compiled_pattern = re.compile(pattern)\n\n    # find all the matches of the regex pattern in the given string\n    matches = compiled_pattern.findall(text)\n\n    # return the first match found\n    return matches[0] if matches else None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing only the negative numbers in the given list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with only negative numbers from the input list.\n    '''\n    neg_lst = []\n    for i in lst:\n        if i < 0:\n            neg_lst.append(i)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Create an empty list to store the even characters\n    even_chars = []\n    # Loop through each character in the string\n    for char in string:\n        # If the character is even (i.e. not divisible by 2), append it to the even_chars list\n        if char % 2 == 0:\n            even_chars.append(char)\n    # Join the even characters into a string\n    even_string = ''.join(even_chars)\n    # Return the even_string\n    return even_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2 == 0:\n                str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert the string to a list\n    str_list = list(str1)\n    # loop through the list and remove odd characters\n    for i in range(len(str_list)):\n        if i % 2!= 0:\n            str_list.pop(i)\n    # convert the list back to a string\n    str_result = ''.join(str_list)\n    # return the string\n    return str_result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over the list of characters\n    for char in char_list:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, add it to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize empty string to store the even characters\n    even_str = ''\n    # loop through each character in the string\n    for char in str1:\n        # if the character is odd, append it to the even_str\n        if char % 2!= 0:\n            even_str += char\n    # return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty string to hold the new string\n    new_str = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is an even number, add it to the new string\n        if int(char) % 2 == 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Initialize an empty string to store the even characters\n    even_chars = \"\"\n    # Loop through the list of characters\n    for char in str_list:\n        # If the character is even, add it to the even_chars string\n        if char % 2 == 0:\n            even_chars += char\n    # Return the even_chars string\n    return even_chars"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] or test_list[j] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] and (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list or (test_list[j][0], test_list[i][1]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for i in L:\n        total *= i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result with the first element of the list\n    result = L[0]\n    # Loop over the rest of the list\n    for num in L[1:]:\n        # Check if the current number is a multiple of 10\n        if num % 10 == 0:\n            # Add 10 to the result\n            result += 10\n        # Add the current number to the result\n        else:\n            result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers to a string of integers separated by commas\n    s = \",\".join(map(str, L))\n    # Convert the string to an integer and return it\n    return int(s)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all numbers in the list\n    total = 0\n    \n    # Iterate over each number in the list\n    for num in L:\n        # Check if the number is a multiple of 3 or 5\n        if num % 3 == 0 or num % 5 == 0:\n            # Add the number to the total if it's a multiple of 3 or 5\n            total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the single integer\n    result = 0\n    \n    # Iterate over each element in the list\n    for num in L:\n        # Check if the current number is a multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the result variable\n            result += num\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all the numbers in the list\n    total = 0\n    \n    # Iterate over each number in the list\n    for num in L:\n        # Add the current number to the total\n        total += num\n    \n    # Return the single integer value of the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b([a-zA-Z]+)([.,;!?])\\b'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Sort the matches by position (first match has position 0)\n    matches.sort(key=lambda x: x[1])\n\n    # Extract the first match (which should be the adverb with the lowest position)\n    adverb = matches[0][0]\n    position = matches[0][1]\n\n    # Return the adverb and its position\n    return adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and finds the first adverb and their positions in it.\n    The adverb should be defined using the regular expression pattern \".*ing$\".\n    The function returns a list of tuples containing the adverb and its position in the sentence.\n    '''\n    pattern = r'.*ing$'\n    adverbs = re.findall(pattern, text)\n    positions = []\n    for i, adverb in enumerate(adverbs):\n        positions.append((adverb, i+1))\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for an adverb\n    pattern = r'(\\w+)(\\W+)?'\n    # Find all the matches using the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and extract the adverb and its position\n    for match in matches:\n        adverb, position = match\n        if adverb.lower() =='very':\n            # Return the position of the adverb\n            return position\n    # If no adverb is found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b\\w*[aeiou][a-z]*\\b'\n    positions = []\n    adverb_matches = re.findall(adverb_pattern, text)\n    for i, match in enumerate(adverb_matches):\n        positions.append(text.find(match))\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(?:not|very|well|so|very|rather|also|just|often|always|always|too|quite|little|seldom|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Pattern for finding the adverb\n    pattern = r'\\b\\w+(ing|ed|inged|ed|edly|ingly|ly|lyly|ly)\\b'\n\n    # Find all adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of adverbs and their positions\n    return matches, len(matches)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(not|really|really)\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        first_pos = text.find(adverb)\n        second_pos = text.find(adverb, first_pos+len(adverb))\n        return f\"{adverb} appears at positions {first_pos} and {second_pos}\"\n    else:\n        return \"No adverb found in the text.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match the adverb\n    pattern = r'\\b(much|very|extremely|hardly|somewhat|slightly|actually|substantially)\\b'\n    # Use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    # If the pattern is found, return a tuple of the adverb and its position in the sentence\n    if match:\n        return match.group(1), match.start()\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for matching adverbs\n    pattern = r'\\b(\\w+\\s*adverb\\s*(\\w+))'\n\n    # Find all the matches in the text using the regular expression pattern\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Initialize a dictionary to store the adverb position and its word\n    adverb_dict = {}\n\n    # Loop through all the matches and store their positions and words in the dictionary\n    for match in matches:\n        if match[2] in adverb_dict:\n            adverb_dict[match[2]].append(match[1])\n        else:\n            adverb_dict[match[2]] = [match[1]]\n\n    # Return the dictionary of adverb positions and words\n    return adverb_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all the adverbs in the given sentence\n    adverbs = re.findall('\\b[A-Z]\\w*\\b', text)\n\n    # Check if there are any adverbs in the sentence\n    if adverbs:\n        # Find the position of the first adverb\n        position = text.find(adverbs[0])\n        # Print the first adverb and its position in the sentence\n        print(f\"The first adverb is '{adverbs[0]}' and its position is {position}\")\n    else:\n        # If there are no adverbs in the sentence, print a message\n        print(\"There are no adverbs in the sentence.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube with side length l\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    area = 6 * (l ** 2)\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l ** 2 # multiply by 6 for the surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8  # Using the formula for the surface area of a cube\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of type 'i' to store integers\n    arr = array('i', nums)\n    \n    # Count the number of positive integers\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    \n    # Calculate the ration of positive integers\n    ratio = count / len(arr)\n    \n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize variables\n    positive_count = 0\n    count = 0\n    # iterate through the array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            positive_count += 1\n        count += 1\n    # calculate the ration of positive numbers\n    if count == 0:\n        return 0\n    return positive_count / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negative_count = 0\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        else:\n            negative_count += 1\n    pos_ratio = len(positives) / (len(positives) + negative_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            positive_count.itemset(0, positive_count[0] + 1)\n    return positive_count[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of integers\n    arr = array('i', nums)\n\n    # Initialize the counters for positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Loop through the array and count the positive and negative numbers\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers and return the result\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos = [0] * 10\n    neg = [0] * 10\n    zero = 0\n    for num in nums:\n        if num > 0:\n            pos[num // 10] += 1\n        elif num < 0:\n            neg[-num // 10] += 1\n        else:\n            zero += 1\n    pos_count = sum(pos)\n    neg_count = sum(neg)\n    zero_count = zero\n    pos_ratio = 0 if zero_count == 0 else pos_count / zero_count\n    neg_ratio = 0 if zero_count == 0 else neg_count / zero_count\n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an empty array to store positive numbers\n    positive_numbers = array('i')\n    \n    # Loop through the array and add positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n    \n    # Calculate the ratio of positive numbers to total numbers in the array\n    total_numbers = len(nums)\n    positive_ratio = len(positive_numbers) / total_numbers\n    \n    # Return the positive ratio\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            positive_count += 1\n    ration = positive_count / len(arr)\n    return ration"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_max = None\n    for num in list1:\n        if num < 0:\n            if neg_max is None or num > neg_max:\n                neg_max = num\n    return neg_max"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]  # initialize max_neg to the first element of the list\n    for num in list1:\n        if num < 0 and num > max_neg:  # if the number is negative and larger than max_neg\n            max_neg = num  # update max_neg to the new number\n    return max_neg  # return the max_neg value"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an argument and returns the largest negative number in the list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and max_neg is None:\n            max_neg = num\n        elif num < 0 and max_neg is not None and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) >= K:\n            trimmed_list.append(test_list[i][:K])\n        else:\n            trimmed_list.append(test_list[i])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[K:])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j:j+K] for j in range(len(test_list[i])))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i == 0:\n                test_list[i][j] = test_list[i][j][:K]\n            else:\n                test_list[i][j] = test_list[i][j][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        # Remove the first K elements of each tuple\n        new_tup = tuple(tup[i+K:] for i in range(len(tup)-K))\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # loop through the tuple list\n    for tup in test_list:\n        # check if the length of the tuple is greater than k\n        if len(tup) > K:\n            # trim the tuple by removing the first K elements and add it to the trimmed list\n            trimmed_list.append(tup[K:])\n        else:\n            # if the length of the tuple is less than or equal to k, add the entire tuple to the trimmed list\n            trimmed_list.append(tup)\n    \n    # return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate through the list of tuples and trim each tuple by K\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # loop through the two tuples and perform index wise multiplication\n    for i in range(len(test_tup1)):\n        result_tup = (result_tup[0] + (test_tup1[i] * test_tup2[i]), result_tup[1])\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both the tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Iterate through the tuple elements\n    for i in range(len(test_tup1)):\n        # Perform index multiplication\n        result_tup += (test_tup1[i] * test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the length of the two tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples are not same.\")\n        return\n\n    # Multiply the tuple elements index by index\n    result_tup = (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the result tuple with zeros\n    result = (0, 0, 0)\n    \n    # iterate over the two tuples and perform index multiplication\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] * test_tup2[i]\n        \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst) \n    count_dict = {}\n    \n    for i in tup: \n        count_dict[i] = counter[i] \n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    count_tup = tuple(count.get(i, 0) for i in tup)\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Using Counter() from collections module to count the occurrence of all elements of list in a tuple\n    count_dict = Counter(tup)\n    \n    # Counting the occurrence of all elements of list in a tuple\n    count_lst = []\n    for i in count_dict:\n        count_lst.append(count_dict[i])\n        \n    # Returning the count of all elements of list in a tuple\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter to count the occurrence of all elements in the list in the tuple\n    count = Counter(tup)\n    # Returning the counts of all elements in the list in the tuple\n    return dict(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        if element not in count_dict:\n            count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in tup:\n        count[i] += 1\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Initialize a dictionary to store the count of each element in the tuple\n    count = Counter(tup) \n    # Loop through each element in the list and increment the count for each element in the dictionary\n    for i in lst: \n        count[i] += 1\n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store the cubes of the elements\n    cubes = []\n    # Loop through the elements in the list\n    for num in nums:\n        # Calculate the cube of the element and append it to the cubes list\n        cubes.append(num ** 3)\n    # Return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    Args:\n    n (int): The number of terms to include in the sum.\n\n    Returns:\n    int: The sum of the first n perrin numbers.\n    \"\"\"\n\n    sum = 1  # initialize sum to 1\n\n    for i in range(n):\n        sum += 1/2**i\n\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    def perrin_sum(n):\n        '''\n        A recursive function to calculate the sum of perrin numbers.\n        '''\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * n + perrin_sum(n-1)\n\n    return perrin_sum(n)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # calculate the value of the perrin number\n        perrin_num = 2*i - 1\n        # add the value of the perrin number to the total sum\n        total += perrin_num\n    # return the total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i ** 4 - i ** 2 + 1\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1,n+1):\n        p += i\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_sum(i)\n    return sum\n\ndef perrin_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers up to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += pow(i, 3)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i*i)\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n        if sum > n:\n            break\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # initialize an empty list to store the extracted strings\n    extracted_list = []\n    # iterate over the list of strings\n    for s in str_list:\n        # check if the length of the string is equal to the specified size\n        if len(s) == size:\n            # if the length is equal to the specified size, add it to the extracted_list\n            extracted_list.append(s)\n    # return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings\n    of the specified size extracted from the original list.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Create a list to store the extracted strings\n    extracted_strings = []\n\n    # Iterate through each string in the input list\n    for s in l:\n        # If the length of the current string is greater than or equal to the desired length, add it to the list\n        if len(s) >= l:\n            extracted_strings.append(s)\n\n    # Return the extracted strings\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer value representing the size of the strings to be extracted.\n    It returns a new list containing the extracted strings.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) <= l:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(l), l):\n        extracted_strings.append(' '.join(l[i:i+l]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_str.append(str_list[i])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if i < size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with a single space\n    text1 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all spaces and tabs from the string\n    text2 = re.sub(r'\\s+','', text1)\n    \n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n\n    :param text: The string from which all whitespaces need to be removed.\n    :return: The string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Removes all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n    else:\n        loss = 0\n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two parameters - actual cost and sale amount.\n    It returns the loss amount if sale amount is less than actual cost, else returns 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0\n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            sum += i\n            n //= i\n            if n == 1:\n                break\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            count += 1\n            total += n // i\n    if count % 2 == 0:\n        return total\n    else:\n        return total + n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n % (2 * i) == 0:\n                even_sum += n // (2 * i)\n    if n > 1:\n        count += 1\n        if n % 2 == 0:\n            even_sum += n // 2\n    return even_sum, count"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n\n    # function to find even factors of a number\n    def find_even_factors(n):\n        factors = []\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                factors.append(i)\n                if i*i!= n:\n                    factors.append(n//i)\n        return factors\n\n    # finding even factors of n\n    even_factors = find_even_factors(n)\n\n    # calculating sum of even factors\n    sum = 0\n    for i in even_factors:\n        if i%2 == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes an integer 'n' as input and returns the sum of all even factors of 'n'.\n    '''\n    # initialize sum variable to 0 \n    sum = 0\n    \n    # loop through all odd factors of n \n    for i in range(3, int(math.sqrt(n))+1, 2): \n        # check if the current factor is even \n        if n % i == 0: \n            # add the factor to sum \n            sum += i\n    \n    # return the sum of even factors of n \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ]\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\bz\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz_pattern = r'\\b[a-zA-Z]+z\\b'\n    wordz_matches = re.findall(wordz_pattern, text)\n    return wordz_matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)\n\ntext = '''\nThe quick brown fox jumps over the lazy dog.\nThe cat in the hat jumped over the dog.\nThe dog barked at the cat.\nThe quick brown fox is still quick and brown.\nThe lazy dog slept in the sand.\n'''\n\nprint(text_match_wordz(text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    else:\n        num_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                num_days[2] = 29\n            else:\n                num_days[2] = 28\n        return num_days[monthnum2-1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check if the given month number has 31 days or not.\n\n    :param monthnum: The month number to check.\n    :type monthnum: int\n    :return: True if the month has 31 days, False otherwise.\n    :rtype: bool\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10:\n        return True\n    elif monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                days_in_month[1] = 29\n            else:\n                days_in_month[1] = 28\n        return days_in_month[monthnum2-1]\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2 and year % 4 == 0:\n        return True\n    elif monthnum in [4, 6, 9, 11] and year % 4 == 0:\n        return True\n    elif monthnum == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as an input and returns True if it contains 31 days and False otherwise.\n    \"\"\"\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        if monthnum % 2 == 0 and monthnum % 4 == 0:\n            days[1] = 29\n        return days[monthnum-1]\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 2 == 0:\n        return False\n    else:\n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if monthnum2 in range(1,13):\n            if monthnum2 == 2 and leap_year(year):\n                return False\n            else:\n                return days_in_month[monthnum2-1] in [31, 29]\n        else:\n            return False\n\n\ndef leap_year(year):\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return \"The month number should be odd to check for 31 days.\"\n    if monthnum2 % 100 == 0:\n        return \"The month number should be odd to check for 31 days.\"\n    if monthnum2 % 400 == 0:\n        return \"The month number should be odd to check for 31 days.\"\n    if monthnum2 % 100!= 0:\n        return \"The month number should be odd to check for 31 days.\"\n    if monthnum2 == 2:\n        return \"The month number should be odd to check for 31 days.\"\n    return \"The month number should be odd to check for 31 days.\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in range(len(stringlist)):\n        reversed_list.append(stringlist[i][::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_lst = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = lst\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                sublist = lst[i:j+1]\n                min_len = len(lst[i:j+1])\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length to infinity\n    min_length = float('inf')\n    # initialize minimum sublist to empty list\n    min_sublist = []\n    # loop through each element in the list\n    for i in lst: \n        # check if the length of the sublist is less than the current minimum length\n        if len(i) < min_length: \n            # update the minimum length and sublist\n            min_length = len(i)\n            min_sublist = i\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    if len(lst) == 1:\n        return lst\n    else:\n        min_lst = Find_Min(lst[1:])\n        if len(min_lst) < len(lst[0]):\n            return min_lst\n        else:\n            return lst[0:1]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min_sublist = []\n    min_len = float('inf')\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert string to lowercase\n    str2 = str1.lower()\n    # Find all uppercase substrings using regular expression\n    pattern = re.compile(r'([A-Z]+)')\n    matches = pattern.findall(str2)\n    # Loop through matches and remove each match from str2\n    for match in matches:\n        str2 = str2.replace(match, '')\n    # Return updated string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'([A-Z]+)')\n    \n    # Iterate over all matches of the pattern in the given string\n    for match in pattern.finditer(str1):\n        # Extract the uppercase substring from the match\n        substring = match.group(1)\n        \n        # Check if the substring is in uppercase\n        if substring.isupper():\n            # If yes, replace it with an empty string\n            str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings found in the string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the re.sub() method to replace all uppercase substrings with an empty string\n    result = re.sub(pattern, '', string)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression pattern for uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z].*?[A-Z]')\n    # Find all uppercase substrings in the string\n    upper_subs = re.findall(pattern, str1)\n    # Remove all uppercase substrings from the string\n    for sub in upper_subs:\n        str1 = str1.replace(sub, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Remove all uppercase substrings\n    str1 = re.sub(r'(?i)\\b[A-Z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z][A-Z]+\\b')\n    return uppercase_pattern.sub('', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # creating an empty list to store the extracted elements\n    extracted = []\n    # iterating over the given list\n    for sublist in lst:\n        # checking if the sublist is not empty\n        if sublist:\n            # adding the first element of the sublist to the extracted list\n            extracted.append(sublist[0])\n        # else, if the sublist is empty, append None to the extracted list\n        else:\n            extracted.append(None)\n    # returning the extracted list\n    return extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        yield sublist[0]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Iterate over all possible combinations of the first element\n    for i in range(len(list1)+1):\n        # Create a new list with only the first element and concatenate it with the rest of the list\n        sublist = list1[i:] + list1[:i]\n        # Append the new combination to the list of combinations\n        combinations.append(sublist)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            res.append((lst[i], lst[j]))\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through each element of the list\n    for i in range(len(list1)):\n        # loop through each element in the list starting from the next element\n        for j in range(i+1, len(list1)+1):\n            # add the combination to the list of combinations\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n    list1 (list): A list of elements for which to find all possible combinations.\n\n    Returns:\n    list: A list of all possible combinations of the elements in `list1`.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for combo in itertools.combinations(list1, i):\n            result.append(list(combo))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n\n    # Create a list of all possible combinations using itertools.combinations()\n    comb_list = list(itertools.combinations(list1, len(list1)))\n\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = list(list1)\n    combinations = []\n    \n    for i in range(1, len(list1)+1):\n        for j in range(len(list2)-i+1):\n            combinations.append(list2[j:j+i])\n    \n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(lst)):\n            new_lst = lst[:i] + lst[i+1:]\n            for comb in combinations_list(new_lst):\n                result.append([lst[i]] + comb)\n        return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables to keep track of maximum subarray and its product\n    max_subarray = arr[0]\n    max_product = arr[0]\n    \n    # Iterate through the array and update the maximum subarray and its product\n    for i in range(1, len(arr)):\n        temp_product = arr[i]\n        \n        # If the current element is negative, multiply it with the previous maximum subarray product\n        if arr[i] < 0:\n            temp_product *= max_subarray\n        \n        # Update the maximum subarray and its product\n        if temp_product > max_product:\n            max_subarray = temp_product\n            max_product = temp_product\n            \n    # Return the maximum product subarray\n    return max_subarray"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Calculate the product of the current number and the previous product\n        current_product *= num\n        \n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n        \n        # Calculate the product of the current number and the previous negated product\n        negated_current_product = -current_product\n        \n        # Update the maximum product if the negated current product is greater\n        if negated_current_product > max_product:\n            max_product = negated_current_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(arr[0], max_ending_here * arr[0])\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0], 1\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        if max_ending_here >= 0:\n            max_so_far = max(max_so_far, max_ending_here)\n            \n    return max_so_far, max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf') #initialize max_product with a very negative value\n    current_product = 1 #initialize current_product with 1\n\n    for num in arr:\n        if num < 0: #if a number becomes negative, then we need to reset the product\n            current_product = 1\n        else:\n            current_product *= num #if a number becomes positive, then we multiply the current_product with it\n\n        max_product = max(max_product, current_product) #update max_product with the maximum of the current_product and max_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function checks if all values are same in a dictionary.\n    \"\"\"\n    for i in dict.values():\n        if i!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    for key in dict:\n        if len(set(dict[key])) == 1:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a dictionary with the first key\n    first_key = dict.keys()[0]\n    # initialize a set with the first value\n    first_set = set([dict[first_key]])\n    # check if the length of the first set is equal to 1\n    if len(first_set) == 1:\n        # if yes, check if all values are same in the remaining keys\n        for key in dict.keys():\n            if dict[key]!= first_key:\n                return False\n            else:\n                # add the remaining keys to the set\n                set_key = set([dict[key]])\n                first_set.update(set_key)\n        # if all keys are same, check if all the values in the set are same\n        if len(first_set) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.values():\n        return False\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value of the dictionary\n    first_value = next(iter(dict.values()))\n    # Loop through the dictionary and check if all values are same as the first value\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    # If all values are same as the first value, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if len(dict.keys()) == 1:\n            return True\n        if dict[list(dict.keys())[0]]!= dict[list(dict.keys())[1]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    # convert the dictionary into a list of tuples\n    list_of_tuples = list(dict.items())\n    \n    # check if the length of the list is same as the value of n\n    if len(list_of_tuples) == n:\n        \n        # loop through the list and get the first element of each tuple\n        first_elements = [element[0] for element in list_of_tuples]\n        \n        # check if all the elements are same\n        if all(element == first_elements[0] for element in first_elements):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function takes a dictionary and a number n and returns True if all values in the dictionary are same, otherwise False.\n    \"\"\"\n    # Iterate through the keys in the dictionary\n    for key in dict:\n        # Check if the value of the key is same as n\n        if dict[key]!= n:\n            # If any value is not same as n, return False\n            return False\n    # If all values are same as n, return True\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key in dict1.keys():\n        if not dict1[key]:\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value!= '':\n            dict1[key] = value\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list): The array to search for the maximum product.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence of `arr`.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize variables for the maximum product and the maximum subsequence\n    max_product_so_far = max_product_ending_here = arr[0]\n    max_ending_here = arr[0]\n    max_ending_here_left = arr[0]\n\n    # Iterate through the array from the second element to the end\n    for i in range(1, n):\n        # Update the maximum subsequence ending here\n        max_ending_here = max(max_ending_here_left * arr[i], max_ending_here)\n        max_ending_here_left = max_ending_here\n\n        # Update the maximum product so far\n        max_product_ending_here = max(max_product_so_far, max_product_ending_here + arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n\n    for num in arr:\n        if num > 0:\n            current_product *= num\n            max_product = max(max_product, current_product)\n            min_product = min(min_product, current_product)\n        else:\n            current_product = 1\n\n    return max_product * min_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        else:\n            min_ending_here *= arr[i]\n            max_ending_here = 1\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        dp[i] = max(arr[i] * dp[i - 1], arr[i] * dp[i - 2])\n\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0] * arr[1]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = dp[j][i] + arr[i]\n            else:\n                dp[i][j] = dp[i][j]\n\n    max_prod = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            max_prod = max(max_prod, dp[i][j] * (arr[i] - arr[j]))\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, n):\n        temp = arr[i]\n        arr[i] = min(min_product * temp, max_product * temp, temp)\n        max_product = max(max_product, temp)\n        min_product = min(min_product, temp)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    def increasing_subsequence(arr, n):\n        \"\"\"\n        Given an array, calculate the increasing subsequence and its length.\n        \"\"\"\n        prev_max = float('-inf')\n        curr_max = arr[0]\n        for i in range(1, n):\n            if arr[i] > curr_max:\n                curr_max = arr[i]\n            elif arr[i] < curr_max:\n                curr_max = prev_max\n            prev_max = curr_max\n        return curr_max\n\n    length = len(arr)\n    increasing_seq = increasing_subsequence(arr, length)\n    increasing_seq_length = len(increasing_seq)\n    product = increasing_seq[0]\n\n    if increasing_seq_length > 1:\n        for i in range(1, increasing_seq_length):\n            product *= increasing_seq[i]\n            if product <= 0:\n                break\n        else:\n            return product\n\n    return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 3:\n        return -1\n\n    max_product = float('-inf')\n    cur_product = 1\n\n    for i in range(n):\n        if i == 0:\n            cur_product = arr[i]\n        elif i == 1:\n            cur_product = max(arr[i], cur_product)\n        elif i == n-1:\n            cur_product = max(arr[i], cur_product)\n        else:\n            cur_product = max(arr[i], cur_product, arr[i]*arr[i-1]*arr[i-2])\n\n        max_product = max(max_product, cur_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    # initialize variables\n    max_product = float('-inf')\n    curr_product = 1\n\n    # loop through the array\n    for i in range(len(arr)):\n        # check if the current product is greater than the maximum product\n        if curr_product > max_product:\n            max_product = curr_product\n        # update the current product\n        curr_product *= arr[i]\n\n    # return the maximum product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return \"The tuple is empty.\"\n    elif len(test_tup) == 1:\n        return \"The tuple has only one element.\"\n    else:\n        total = 0\n        for i in range(len(test_tup)-1):\n            total += test_tup[i] + test_tup[i+1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n <= 1:\n        return test_tup\n    else:\n        a, b = test_tup[:2]\n        c = a + b\n        return c, add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum variable to 0\n    sum_var = 0\n    # loop through the tuple to find the sum of the neighboring elements\n    for i in range(len(test_tup) - 1):\n        sum_var += test_tup[i] + test_tup[i+1]\n    # return the sum of the neighboring elements\n    return sum_var"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables for sum of first and last elements\n    first_sum = 0\n    last_sum = 0\n    \n    # Loop through tuple\n    for i in range(len(test_tup)):\n        # Check if current element is the first or last element\n        if i == 0:\n            first_sum = test_tup[i]\n        elif i == len(test_tup) - 1:\n            last_sum = test_tup[i]\n        # If current element is neither the first nor last, add it to sum\n        else:\n            first_sum += test_tup[i]\n            last_sum += test_tup[i]\n            \n    # Return sum of first and last elements\n    return first_sum + last_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length == 1:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1], add_pairwise(test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        first_element = test_tup[0]\n        second_element = test_tup[1]\n        pairwise_sum = first_element + second_element\n        next_pairwise = add_pairwise(test_tup[2:])\n        return pairwise_sum + next_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_pair = []\n    for i in range(len(test_tup)-1):\n        sum_pair.append(test_tup[i]+test_tup[i+1])\n    return sum_pair"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup)-1):\n            result.append(test_tup[i] + test_tup[i+1])\n        return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # Initialize the result as 1\n    result = 1\n    \n    # Iterate through each element in the array\n    for i in arr:\n        # Multiply the current element with the result modulo n\n        result = (result * i) % n\n        \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer n and returns the remainder of the product of array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array of integers and a number n and returns the product of the array \n    multiplication modulo n.\n    '''\n    # Initialize a variable to store the product\n    product = 1\n    # Iterate through the array\n    for num in arr:\n        # Multiply the current number by the product\n        product = (product * num) % n\n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a number n as input and returns the remainder of the product of the array multiplied by n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for x in arr:\n        product = (product * x) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number as input and returns the remainder of their product modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    elif l[0] == l[-1]:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False \n    return True \n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as an argument and returns True if the list contains consecutive numbers, otherwise it returns False.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        return \"The list should contain at least two elements.\"\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Use a set to store the elements from both lists\n    set_intersection = set(test_list1) & set(test_list2)\n    # Convert the set back to a list and return it\n    return list(set_intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create a dictionary to store the count of each element in the given list\n    element_count = {}\n    for item in test_list1:\n        if item not in element_count:\n            element_count[item] = 1\n        else:\n            element_count[item] += 1\n\n    # iterate through the second list and add each item to the dictionary if it exists in the first list\n    for item in test_list2:\n        if item in element_count and element_count[item] > 0:\n            element_count[item] -= 1\n        else:\n            del element_count[item]\n\n    # return the keys of the dictionary which are the intersection of the elements in the first and second list\n    return element_count.keys()"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty list to store the intersection of the two lists\n    intersection_list = []\n\n    # Iterate through both lists\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            # If the tuple exists in the second list, append it to the intersection list\n            intersection_list.append(test_list1[i])\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for tup in test_list1:\n        if tup in test_list2 and tup not in intersection:\n            intersection.append(tup)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from test_list2 so that we can easily check if each element is in the first list\n    set_2 = set(test_list2)\n\n    # iterate over each element in test_list1 and check if it is in the set of elements from test_list2\n    result_list = []\n    for item in test_list1:\n        if item in set_2:\n            result_list.append(item)\n\n    # return the result_list\n    return tuple(result_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of all unique elements in both lists\n    unique_set = set(test_list1 + test_list2)\n    # Create a set of all tuples in the first list\n    set1 = set(test_list1)\n    # Create an empty set to store the intersection of the two sets\n    intersection = set()\n    # Loop through the set of unique elements\n    for elem in unique_set:\n        # If the element is in both sets, add it to the intersection set\n        if elem in set1 and elem in set1:\n            intersection.add(elem)\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_elements = []\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.append(element)\n    return common_elements\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the current character matches the input character\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # create a Counter object from the dictionary\n    count_dict = Counter(dict1)\n\n    # sort the counter object by values in descending order\n    sorted_count_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n\n    # return the sorted dictionary\n    return sorted_count_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by values\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the counter by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # convert the sorted counter back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object to get the count of each value\n    counter = Counter(dict1.values())\n\n    # Sort the Counter object by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # Sort the counter object by values\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Convert the sorted counter object to a dictionary and return it\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = min(nums)\n    smallest = max(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize two variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initializing variables\n    max_val = nums[0]\n    min_val = nums[0]\n    sum_val = nums[0]\n\n    # iterating through the array and finding the largest and smallest value\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # finding the sum of the largest and smallest value\n    for num in nums:\n        if num == max_val:\n            sum_val += num\n        elif num == min_val:\n            sum_val += num\n\n    # printing the result\n    print(\"The sum of the largest and smallest value is:\", sum_val)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # calculate the sum of the largest and smallest values\n    sum = largest + smallest\n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = min(nums)\n    smallest = max(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values\n    max_val = float('-inf')\n    min_val = float('inf')\n    # Loop through the array and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    # Return the sum of the max and min values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Use a list comprehension to extract the maximum and minimum values from the list\n    max_num = min_num = max(nums, key=lambda x: x)\n    \n    # Return the sum of the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case using the lower() method\n    lower_string = string.lower()\n    # Return the lower case string\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert a string to lowercase using the built-in `lower()` method.\n\n    :param string: The string to convert to lowercase.\n    :return: The lowercase string.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case using the `lower()` method.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all the lowercase substrings in the string\n    matches = re.findall('[a-z]+', string)\n    # Remove the lowercase substrings from the string\n    result = string.replace(''.join(matches), '')\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'(?i)[a-z]')\n\n    # find all substrings that match the pattern\n    matches = pattern.findall(str1)\n\n    # loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove all lowercase substrings from a given string.\n    \"\"\"\n    # Create a regular expression pattern to match all lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n\n    # Find all lowercase substrings in the string\n    matches = pattern.findall(string)\n\n    # Remove all matches from the string and return the modified string\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'  # matches one or more lowercase letters\n    result = re.sub(pattern, '', str1)  # removes substrings matched by pattern\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # split the string into individual words\n    words = string.split()\n    # loop through each word and remove any lowercase substrings\n    new_words = []\n    for word in words:\n        if word.isalpha():\n            if not word.islower():\n                new_words.append(word)\n    # join the new words back into a string\n    result =''.join(new_words)\n    # return the result\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Use a regular expression to find all lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # Find all the matches and replace them with an empty string\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove the lowercase substrings from the string\n    str2 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.findall(r'[a-z]+', str1)\n    for i in lowercase:\n        str1 = str1.replace(i, '')\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    # Initialize a variable to store the first digit\n    first_digit = ''\n\n    # Check if the number is greater than 0\n    if n > 0:\n        # Convert the number to a string\n        str_n = str(n)\n\n        # Get the first character of the string\n        first_char = str_n[0]\n\n        # Append the first character to the first_digit variable\n        first_digit += first_char\n\n    # Return the first_digit variable\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # use string slicing to extract the first digit of the input number\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Get the first digit of the number using string slicing\n    first_digit = str(n)[0]\n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Find the first character in the string\n    first_char = num_str[0]\n\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of that number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # find the first digit of the number\n    first_digit = num_str[0]\n    # return the first digit of the number\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns only the odd integers.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns the odd ones only.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(n)])\n    sum_of_natural_numbers = sum(range(n))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(num**3 for num in range(1, n+1))\n\n    # Calculate the sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    first_n = [i for i in range(1, n+1)]\n    sum_first_n = sum(first_n)\n    return sum_cubes - sum_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    natural_sum = sum(range(1, n+1))\n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n = [x for x in range(1, n+1)]\n    sum_cubes = sum([x**3 for x in first_n])\n    sum_natural = sum(first_n)\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n = [i for i in range(1, n+1)]\n    sum_of_cubes = sum([i**3 for i in first_n])\n    sum_of_natural_numbers = sum(first_n)\n\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n\n    # function to calculate the sum of the first n natural numbers\n    def sum_of_numbers(n):\n        return sum(range(1, n+1))\n\n    # find the sum of cubes of the first n natural numbers\n    cube_sum = sum_of_cubes(n)\n\n    # find the sum of the first n natural numbers\n    num_sum = sum_of_numbers(n)\n\n    # calculate the difference between the sum of cubes and the sum of numbers\n    difference = cube_sum - num_sum\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i ** 3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_numbers = sum(range(1,n+1))\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i]!= A[j]:\n                xor = A[i] ^ A[j]\n                if xor % 2 == 1:\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in an array A and its size N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes a list A of integers and an integer N as input.\n    It returns the count of odd pairs whose xor value is odd.\n\n    For example, if A = [1, 3, 5, 7, 9, 11] and N = 12, then the output will be 2 (since 1 xor 11 is 10 and 10 is odd).\n    '''\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(i):\n            xor_sum = xor_sum ^ A[j]\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables for count and xor value\n    count = 0\n    xor_val = 0\n\n    # Iterate through the array A\n    for i in range(N):\n        # If the current element is odd, add it to xor_val\n        if A[i] % 2!= 0:\n            xor_val ^= A[i]\n\n        # If xor_val is odd, increment count and xor_val\n        if xor_val % 2!= 0:\n            count += 1\n            xor_val ^= A[i]\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and an integer N and returns the number of odd pairs in the list.\n    The pairs are defined as (x,y) where 0 <= x < N and 0 <= y < N and A[x] XOR A[y] is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i]!= A[j] and A[i] % 2 == 1 and A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n                xor_sum -= xor\n                if xor_sum % 2!= 0:\n                    count -= 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize count to 0\n    count = 0\n    # loop through A to find odd pairs\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the character is a lowercase letter\n        if string[i].islower():\n            # Convert the character to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # Check if the character is an uppercase letter\n        elif string[i].isupper():\n            # Convert the character to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert the character to lowercase and add it to the result\n            result += char.lower()\n        else:\n            # Convert the character to uppercase and add it to the result\n            result += char.upper()\n    # Return the result string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    # Initialize the sum to 0\n    sum_of_differences = 0\n    # Loop over each digit of the two numbers\n    for i in range(len(num1_digits)):\n        # Compute the difference between the corresponding digits of the two numbers\n        difference = num1_digits[i] - num2_digits[i]\n        # Add the difference to the sum of differences\n        sum_of_differences += difference\n    # Return the sum of differences\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(int(n1) - int(n2))\n        sum_diff += diff * (int(n1) - int(n2)) % 10\n        n1 = str(int(n1) // 10) if int(n1) // 10 > 0 else str(int(n1) // 10) + '0'\n        n2 = str(int(n2) // 10) if int(n2) // 10 > 0 else str(int(n2) // 10) + '0'\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum to 0\n    total_sum = 0\n    \n    # loop through each digit of n1 and n2\n    for i in range(10):\n        # calculate the difference between the two digits\n        diff = abs(n1 % 10 - n2 % 10)\n        \n        # add the difference to the sum\n        total_sum += diff\n        \n        # divide n1 and n2 by 10 to remove the least significant digit\n        n1 //= 10\n        n2 //= 10\n        \n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n    \n    # initialize variables\n    sum_diff = 0\n    \n    # loop through each digit in the strings\n    for i in range(len(num1_str)):\n        # subtract the corresponding digits\n        diff = int(num1_str[i]) - int(num2_str[i])\n        \n        # add the difference to the sum\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # convert the two integers to a list of their digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # calculate the sum of the absolute differences between the two digits lists\n    total_diff = 0\n    for i in range(len(digits1)):\n        total_diff += abs(digits1[i] - digits2[i])\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1 = list(str(n1))\n    num2 = list(str(n2))\n\n    # Calculate the per-digit difference between the two numbers\n    diff = []\n    for i in range(len(num1)):\n        diff.append(abs(int(num1[i]) - int(num2[i])))\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        num1 = int(str(n1)[i])\n        num2 = int(str(n2)[i])\n        sum_diff += abs(num1 - num2)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Calculate the difference between the two integers\n    diff = [int(n1_str[i]) - int(n2_str[i]) for i in range(max(n1_len, n2_len))]\n\n    # Calculate the sum of the differences for each digit\n    digit_diff_sum = 0\n    for digit_diff in diff:\n        digit_diff_sum += digit_diff * digit_diff\n\n    # Calculate the total sum of the per-digit differences\n    total_sum = digit_diff_sum * max(n1_len, n2_len)\n\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the numbers to strings and convert them to lists of digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_list = list(map(int, num1_str))\n    num2_list = list(map(int, num2_str))\n\n    # Initialize the sum of the differences to 0\n    diff_sum = 0\n\n    # Loop through each digit in the lists\n    for i in range(len(num1_list)):\n        # Calculate the difference between the digits\n        diff = num1_list[i] - num2_list[i]\n        # Add the difference to the sum of differences\n        diff_sum += diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n    \n    # Initialize variables to store the sum of differences for each digit\n    digit_sum_1 = 0\n    digit_sum_2 = 0\n    \n    # Loop through each digit of the first number\n    for digit_1 in num1_str:\n        # Find the difference between the corresponding digit in the second number\n        digit_diff = int(digit_1) - int(num2_str[num2_str.index(digit_1)])\n        \n        # Add the difference to the sum for that digit\n        if digit_diff < 0:\n            digit_sum_1 += 9\n        else:\n            digit_sum_1 += digit_diff\n    \n    # Loop through each digit of the second number\n    for digit_2 in num2_str:\n        # Find the difference between the corresponding digit in the first number\n        digit_diff = int(digit_2) - int(num1_str[num1_str.index(digit_2)])\n        \n        # Add the difference to the sum for that digit\n        if digit_diff < 0:\n            digit_sum_2 += 9\n        else:\n            digit_sum_2 += digit_diff\n    \n    # Return the sum of the differences for each digit\n    return digit_sum_1 + digit_sum_2"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    elif size == 2:\n        return max(a[0], a[1])\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size > len(a):\n        raise ValueError(\"The size parameter should be less than or equal to the length of the given list.\")\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        if a[i] > current_sum + a[i]:\n            current_sum += a[i]\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = a[i]\n    max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the maximum sublist sum and the current sublist sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list and add each element to the current sublist sum\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sublist sum is greater than the maximum sublist sum, update the maximum sublist sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sublist sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Find the union of the elements of the two tuples using the set() function\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the combined list in ascending order\n    combined_list.sort()\n    # Output the sorted list\n    return combined_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one and sort it\n    combined_tup = sorted(test_tup1 + test_tup2)\n    # Iterate over the sorted tuple and print the elements\n    for element in combined_tup:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Using set() to remove duplicates and sorted() to sort the elements\n    union_set = sorted(set(test_tup1) | set(test_tup2))\n\n    # Printing the union of the elements\n    print(\"Union of the elements of the tuples:\", union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    for element in test_tup1:\n        union_set.add(element)\n    for element in test_tup2:\n        union_set.add(element)\n    sorted_union = sorted(list(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of elements in both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # convert set to list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n    # output the sorted union\n    print(\"The union of the elements in the given tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # sort the combined tuple in ascending order\n    combined_tup.sort()\n    # output the sorted tuple\n    print(combined_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert tuples to lists to manipulate them\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # Find the union of the two lists using set operations\n    lst_union = list(set(lst1 + lst2))\n\n    # Sort the list and print the result\n    lst_union.sort()\n    print(lst_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into one\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the combined tuple in ascending order\n    union_tup = sorted(union_tup)\n\n    # Output the sorted union tuple\n    print(union_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the maximum length of any sublist in the list.\n    '''\n    longest_length = 0  \n    current_length = 0  \n    for i in range(len(lst)):  \n        if len(lst[i]) > current_length:  \n            current_length = len(lst[i])  \n            longest_length = current_length  \n    return longest_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    temp_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            temp_length = 1\n        else:\n            temp_length += 1\n        if temp_length > max_length:\n            max_length = temp_length\n        elif temp_length == max_length and lst[i] > lst[i-1]:\n            max_length += 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        curr_len = 0\n        j = i\n        while j < len(lst):\n            if lst[j] == lst[i]:\n                curr_len += 1\n            else:\n                break\n            j += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_length = 0\n    length = 0\n\n    # loop through each element in the list\n    for i in range(len(lst)):\n\n        # check if the current element is the start of a sublist\n        if i == 0 or lst[i-1] < lst[i]:\n\n            # increment the length counter\n            length = 1\n\n            # loop through each subsequent element in the list\n            for j in range(i+1, len(lst)):\n\n                # check if the current element is part of a sublist\n                if lst[i] < lst[j]:\n                    break\n\n                # increment the length counter\n                length += 1\n\n            # check if the current sublist has a longer length\n            if length > max_length:\n                max_length = length\n\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n\n    for i in range(len(lst)):\n        length = 0\n        for j in range(i+1, len(lst)):\n            length += 1\n        if length > max_length:\n            max_length = length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            length = len(sublist)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max length as 1\n    max_length = 1\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        # find the length of the current sublist\n        length = 0\n        j = i\n        while j < len(lst):\n            length += 1\n            j += 1\n        # update max length if current sublist is longer\n        if length > max_length:\n            max_length = length\n    # return max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_len = 1\n            continue\n        for j in range(i):\n            if lst[j] in lst[i]:\n                if max_len < i-j:\n                    max_len = i-j\n                break\n        else:\n            max_len += 1\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:\\\\\"|[^\"])*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function takes a string as input and extracts the values between quotation marks.\n    \"\"\"\n    pattern = re.compile(r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"', re.IGNORECASE)\n    matches = re.findall(pattern, text)\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[\"\\'])(.*?)(?=[\"\\'])'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\')(?:(?!\\')\\S)+(?=\\')'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = r'(?<=\")(?:\\w+|[^\"\\s])*(?=\")'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\b)\"(.*?)\"(?=\\b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\"(?:[^\"\\\\]|\\\\.)*\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(\\w+)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    # Initialize a counter to store the count of pairs\n    count = 0\n\n    # Loop through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if both elements are unequal and add to the count if they are\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] == arr[j]\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the string into characters\n    characters = list(word)\n    # Return the characters as a list\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n\n    Args:\n    word (str): a string to split\n\n    Returns:\n    list: a list of characters in the string\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in that string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Splitting the string into characters\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the input number and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Calculate the sum of the digits\n    sum_digits = sum(digits)\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if n is a non-negative integer\n    if type(n)!= int or n < 0:\n        return \"Invalid input\"\n    # Convert n to a string\n    str_n = str(n)\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each character in the string\n    for char in str_n:\n        # Convert the character to an integer and add it to the total\n        total += int(char)\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Calculate the sum of the digits\n    sum_digits = sum(digits)\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    # Convert the input number to a string\n    num_str = str(n)\n    # Loop through each character in the string\n    for digit in num_str:\n        # Convert the character to an integer and add it to the sum\n        total += int(digit)\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and then use the sum() function to get the sum of the digits.\n    return sum(str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Returns True if the specified list is sorted, False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] <= lst[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes in a list as input and checks whether it is sorted or not.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted and False otherwise.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) == 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        length (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    This function takes a list of lists as input and sorts each sublist of strings.\n    '''\n\n    # Loop through each sublist of strings in the list of lists\n    for i in range(len(list1)):\n        # Split the sublist into individual strings\n        sublist = list1[i]\n        # Sort the strings in the sublist\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        list1[i] = sorted_sublist\n\n    # Return the modified list of lists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the given list\n    for sublist in list1:\n        # Sort the sublist in ascending order using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the built-in sort method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # loop through each list in the given list\n    for i in range(len(nums)):\n        # initialize a set to store unique numbers in the list\n        unique_nums = set()\n        # loop through each number in the list\n        for num in nums[i]:\n            # add the number to the set if it's not already in it\n            if num not in unique_nums:\n                unique_nums.add(num)\n        # replace the original list with a new list that only contains unique numbers\n        nums[i] = list(unique_nums)\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Create an empty list to store unique numbers\n    unique_nums = []\n\n    # Loop through each list in the input list\n    for num in nums:\n        # If the number is not already in the unique_nums list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists and removes the duplicates from all lists.\n    It returns the list with the duplicates removed.\n    '''\n    # create an empty dictionary to store the unique numbers\n    unique_nums = {}\n\n    # iterate through each list in the input list\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # check if the number is already in the dictionary\n            if num in unique_nums:\n                # if it is, remove it from the list\n                num_list.remove(num)\n            else:\n                # if it isn't, add the number to the dictionary\n                unique_nums[num] = True\n\n    # return the list with the duplicates removed\n    return [num_list for num_list in nums if num_list]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate over each list in the input list\n    for num_list in nums:\n        # Iterate over each number in the current list\n        for num in num_list:\n            # Add each unique number to the set\n            unique_nums.add(num)\n            \n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list of lists): A list of lists of numbers.\n\n    Returns:\n        list: A list of unique numbers from the given number of lists.\n    \"\"\"\n\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n\n    # Iterate through each list of numbers\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # If the number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n\n    # Convert the dictionary to a list of unique numbers\n    unique_list = list(unique_nums.keys())\n\n    # Sort the list of unique numbers in ascending order\n    unique_list.sort()\n\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Use set to remove duplicates from each list in nums\n    result = [num for sublist in nums for num in sublist if num not in result]\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store unique numbers\n    unique_nums = {}\n    \n    # loop through each list and add unique numbers to the dictionary\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums[num] = True\n            \n    # create a new list with only the unique numbers\n    unique_nums_list = [num for num in unique_nums.keys()]\n    \n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate integers from a list of lists of integers.\n    \"\"\"\n    # Flatten the nested lists\n    flat_nums = [num for sublist in nums for num in sublist]\n    # Use a set to remove duplicates\n    unique_nums = list(set(flat_nums))\n    # Convert the list of unique integers back to a list of lists\n    unique_lists = [list(set(num)) for num in unique_nums]\n    # Return the list of lists\n    return unique_lists"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Initialize an empty dictionary to store the unique numbers and their multiplicities\n    unique_numbers = {}\n    # Loop through the list and count the unique numbers\n    for num in list_data:\n        if num in unique_numbers:\n            unique_numbers[num] += 1\n        else:\n            unique_numbers[num] = 1\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num ** unique_numbers[num]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    unique_product = 1\n    \n    for num in unique_nums:\n        unique_product *= num\n        \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers in the list\n    unique_nums = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))  # convert the list to set to remove duplicates, then back to list\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to remove duplicates\n    unique_product = 1  # initialize the product to 1\n    for number in unique_numbers:\n        unique_product *= number  # multiply the current product by the current number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n    # Use list comprehension to calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \n    Args:\n    - r (float): The radius of the cylinder.\n    - h (float): The height of the cylinder.\n    \n    Returns:\n    - float: The surface area of the cylinder.\n    \"\"\"\n    \n    # Formula for the surface area of a cylinder\n    area = 2 * r * h\n    \n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    area = pi * r**2  # formula to find surface area of a circle\n    volume = pi * r**2 * h  # formula to find volume of a cylinder\n    surface_area = 2 * area + 2 * volume  # formula to find surface area of a cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    area = pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h\n    return area\n\n\npi = 3.14159\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\narea = surfacearea_cylinder(radius, height)\n\nprint(\"The surface area of the cylinder is\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #calculate the surface area of a cylinder using the formula:\n    #S = 2*pi*r*h\n    #where S is the surface area, pi is a mathematical constant and r is the radius of the cylinder and h is the height of the cylinder.\n    return 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r ** 2 * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n\n    Parameters:\n    A (list): The first list to check.\n    B (list): The second list to check.\n\n    Returns:\n    bool: True if B is a sublist of A, else False.\n    \"\"\"\n    # Check if B is a sublist of A\n    if all(elem in B for elem in A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if the list A is sublist of list B or not\n    if len(A) <= len(B):\n        for i in range(len(B)):\n            if B[i] in A:\n                return True\n    else:\n        for i in range(len(B)):\n            if B[i] in A:\n                if len(A) == len(B):\n                    return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        return True\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input. It checks whether list A is a sublist of list B or not.\n\n    Args:\n        A: A list of elements.\n        B: Another list of elements.\n\n    Returns:\n        A boolean value indicating whether A is a sublist of B or not.\n\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n        B = B[B.index(A[i])+1:]\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is in A\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the sublist is empty\n    if len(B) == 0:\n        return True\n    # Initialize two pointers i and j\n    i = 0\n    j = 0\n    # Loop through the list A\n    while i < len(A):\n        # If the element at index i is equal to the first element of the sublist B\n        if A[i] == B[j]:\n            # Move the pointers j and i to the next position\n            j += 1\n            i += 1\n        else:\n            # If the element at index i is not equal to the first element of the sublist B,\n            # then move the pointer j to the next position\n            j = 0\n            i += 1\n    # If the entire list A is checked and the pointer j has reached the end of the sublist B,\n    # then the list B is a sublist of list A\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B and returns True if B is a sublist of A or False otherwise.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit in its factorial.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the length of the number string\n    length = len(num_str)\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Loop through the digits of the number string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the current digit with the last digit\n        last_digit = last_digit * digit_int\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # calculate factorial of given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # extract last digit of factorial\n    last_digit = int(str(factorial)[-1])\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Get the last digit of the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit in the factorial\n    last_digit = 0\n    \n    # calculate the factorial of n and store the last digit in the variable\n    while n > 0:\n        last_digit = n % 10\n        n //= 10\n    \n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Get the length of the string\n    length = len(num)\n    # Initialize a variable to store the last digit\n    last_digit = 0\n    # Loop through each digit of the number\n    for i in range(length-1):\n        # Convert the current digit to an integer\n        digit = int(num[i])\n        # Calculate the factorial of the current digit\n        factorial = 1\n        for j in range(1, digit+1):\n            factorial *= j\n        # Append the factorial to a list\n        factorials.append(factorial)\n    # Get the last factorial\n    last_factorial = factorials[-1]\n    # Convert the last factorial to a string\n    last_factorial = str(last_factorial)\n    # Get the last digit of the last factorial\n    last_digit = int(last_factorial[-1])\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Split the string into a list of digits\n    num_list = [int(digit) for digit in num_str]\n\n    # Calculate the last digit in the factorial\n    last_digit = num_list[-1]\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of its factorial.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    # base case\n    if n == 0:\n        return 0\n\n    # recursive case\n    else:\n        return n % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # combine the lists into a single list using zip()\n    combined_list = list(zip(list1, list2, list3))\n    # flatten the list using itertools.chain()\n    flat_list = list(itertools.chain.from_iterable(combined_list))\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # get the length of the lists\n    length = len(list1)\n    \n    # create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # loop through each element of the first list and append it to the interleaved list\n    for element in list1:\n        interleaved_list.append(element)\n    \n    # loop through each element of the second list and append it to the interleaved list\n    for element in list2:\n        interleaved_list.append(element)\n    \n    # loop through each element of the third list and append it to the interleaved list\n    for element in list3:\n        interleaved_list.append(element)\n    \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to hold the final result\n    result = []\n\n    # iterate through each element in each of the input lists\n    for i in range(len(list1)):\n        # add the element from list1 to the result list\n        result.append(list1[i])\n        # add the element from list2 to the result list\n        result.append(list2[i])\n        # add the element from list3 to the result list\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the maximum length of all the lists\n    max_length = max(len(list1), len(list2), len(list3))\n    # Create a new list of the maximum length\n    new_list = [None] * max_length\n    # Fill the new list with the first list\n    for i in range(len(list1)):\n        new_list[i] = list1[i]\n    # Fill the new list with the second list\n    for i in range(len(list2)):\n        new_list[i+len(list1)] = list2[i]\n    # Fill the new list with the third list\n    for i in range(len(list3)):\n        new_list[i+len(list1)+len(list2)] = list3[i]\n    # Return the new list\n    return new_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Determine the length of the resulting list\n    length = len(list1) + len(list2) + len(list3)\n    \n    # Create an empty list to hold the interleaved list\n    result = []\n    \n    # Loop through each element of the first list\n    for i in range(len(list1)):\n        # Add the current element to the result list\n        result.append(list1[i])\n    \n    # Loop through each element of the second list\n    for i in range(len(list2)):\n        # Add the current element to the result list\n        result.append(list2[i])\n    \n    # Loop through each element of the third list\n    for i in range(len(list3)):\n        # Add the current element to the result list\n        result.append(list3[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize variables to store the dissimilar elements\n    dissimilar_elements = []\n\n    # loop through each element in the first tuple and check if it is present in the second tuple\n    for element1 in test_tup1:\n        if element1 not in test_tup2:\n            # if it is not present, add it to the dissimilar elements list\n            dissimilar_elements.append(element1)\n\n    # return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Creating a dictionary to store the counts of elements in each tuple\n    count_dict = {}\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in count_dict:\n            count_dict[test_tup1[i]] = 1\n        else:\n            count_dict[test_tup1[i]] += 1\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in count_dict:\n            count_dict[test_tup2[i]] = 1\n        else:\n            count_dict[test_tup2[i]] += 1\n\n    # Calculating the dissimilar elements by iterating through the dictionary\n    dissimilar_list = []\n    for key, value in count_dict.items():\n        if value > 1:\n            dissimilar_list.append(key)\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty set to store dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is present in the second tuple\n        if element not in test_tup2:\n            # If it's not, add it to the set of dissimilar elements\n            dissimilar_set.add(element)\n\n    # Return the set of dissimilar elements\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert the tuples to sets so that we can perform set operations on them.\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the common elements in both sets.\n    common_elements = set1.intersection(set2)\n    # Find the elements that are present only in set1.\n    only_in_set1 = set1.difference(set2)\n    # Find the elements that are present only in set2.\n    only_in_set2 = set2.difference(set1)\n    # Combine the results and return them as a list.\n    result = list(common_elements)\n    result.extend(list(only_in_set1))\n    result.extend(list(only_in_set2))\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    # iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Function to check if an element is even or odd\n    def is_even(num):\n        return num % 2 == 0\n\n    # Create a list to store even elements\n    even_list = []\n\n    # Iterate through each element of the tuple\n    for elem in test_tuple:\n        # Check if the element is even or odd\n        if is_even(elem):\n            # If the element is even, append it to the even_list\n            even_list.append(elem)\n        # If the element is odd, check if it's an even element of the same level\n        elif isinstance(elem, tuple):\n            even_elem = even_fnc(elem)\n            if is_even(even_elem):\n                # If it's an even element, append it to the even_list\n                even_list.append(even_elem)\n\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple: \n        if isinstance(item, tuple): \n            new_tuple.append(even_ele(item, even_fnc)) \n        elif isinstance(item, list): \n            new_item = []\n            for subitem in item: \n                if even_fnc(subitem): \n                    new_item.append(subitem)\n            new_tuple.append(new_item)\n        elif even_fnc(item): \n            new_tuple.append(item)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_elements = [even_fnc(x) for x in test_tuple if isinstance(x, (list, tuple))]\n\n    return tuple(even_elements)\n\ndef is_even(x): \n    '''\n    A helper function to check if an element is even.\n    '''\n\n    if isinstance(x, int): \n        return x % 2 == 0\n    elif isinstance(x, float): \n        return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # flatten the tuple to a single list\n    flat_list = [item for sublist in test_tuple for item in sublist]\n    # filter out all elements that are not even using the even_fnc function\n    even_list = [item for item in flat_list if even_fnc(item)]\n    # return the even_list as the result\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_tuple.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for tup in test_tuple:\n        for item in tup:\n            if even_fnc(item):\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            even_elements.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_elements.append(item)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_list.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def inner_even_fnc(elem):\n        if type(elem) == tuple:\n            return all(inner_even_fnc(i) for i in elem)\n        elif type(elem) == list:\n            return all(inner_even_fnc(i) for i in elem)\n        elif even_fnc(elem):\n            return True\n        else:\n            return False\n    \n    def remove_uneven(elem):\n        if type(elem) == tuple:\n            return tuple(inner_even_fnc(i) for i in elem if inner_even_fnc(i))\n        elif type(elem) == list:\n            return list(inner_even_fnc(i) for i in elem if inner_even_fnc(i))\n        else:\n            return inner_even_fnc(elem)\n    \n    return remove_uneven(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple using a custom function.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4 * b * s) + (4 * b * b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    #Calculate the surface area of the pyramid\n    surf_area = 6 * b * s\n\n    #Return the surface area\n    return surf_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the square pyramid\n    area = b * s / 2\n\n    # Return the surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b+s)*b\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of each side of the square pyramid\n    area_base = b*b\n    area_height = s*s\n\n    # calculate the total area of the square pyramid\n    area_total = 2*(area_base + area_height)\n\n    # return the total area\n    return area_total"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the side of the pyramid\n    a = b / 2\n    # calculate the number of levels\n    n = int(s / b)\n    # calculate the surface area of each level of the pyramid\n    area = a * a + (a * (a+1))\n    # calculate the total surface area of the pyramid\n    total_area = n * area\n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # finding the area of the base\n    A_base = b**2\n    # finding the area of the top \n    A_top = 2*b*s\n    # finding the area of the whole pyramid\n    A_pyramid = A_base + A_top\n    # finding the perimeter of the pyramid\n    P_pyramid = 4*b + 2*b*s\n    # finding the surface area of the pyramid\n    SA_pyramid = 2*(A_base + A_top)\n    # printing the results\n    print(\"The surface area of the pyramid is: \", SA_pyramid)\n    print(\"The base area is: \", A_base)\n    print(\"The top area is: \", A_top)\n    print(\"The pyramid area is: \", A_pyramid)\n    print(\"The pyramid perimeter is: \", P_pyramid)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b*s+s*b)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, h):\n    return (b * h) + (h * b) + (b * b) + (h * h)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b**2)*(s/3)) + (b*(s**2)/2)\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \n    Args:\n    dict1 (dict): A dictionary that needs to be checked\n    \n    Returns:\n    bool: True if the dictionary is empty, False otherwise\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    # Recursive case\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_list = [0]*(num+1)\n        catalan_list[0] = 1\n        for i in range(1,num+1):\n            catalan_list[i] = catalan_list[i-1] + catalan_list[i-2]\n        return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \"\"\"\n    if n < 0 or n % 1!= 0:\n        raise ValueError(\"Input must be an integer greater than or equal to 0.\")\n    if n == 0:\n        return 1\n    else:\n        num = 1\n        for i in range(1, n + 1):\n            num *= i\n        return num // math.factorial(n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculates the nth Catalan number.\n\n    Parameters:\n    n (int): The value of n for which to calculate the Catalan number.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    # Initialize the first two Catalan numbers\n    catalan_numbers = [0, 1]\n\n    # Calculate the remaining Catalan numbers using the formula:\n    # C(n,k) = (2k)! / ((2k-1)! * (2k+1)!)\n    for i in range(2, n+1):\n        new_number = 0\n        for j in range(i):\n            new_number += catalan_numbers[j] * catalan_numbers[i-j-1]\n        catalan_numbers.append(new_number)\n\n    # Return the nth Catalan number\n    return catalan_numbers[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        numerator = (2*n-1) * catalan_number(n-1)\n        denominator = catalan_number(n-2)\n        return numerator / denominator"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = [0]*(n+1)\n        c[0] = 1\n        for i in range(1,n+1):\n            c[i] = 2*c[i-1]\n        c[0] = 1\n        c[n] = c[n-1]\n        return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    catalan_numbers = [1]\n    for i in range(2, n+1):\n        catalan_numbers.append((4*i-1)//(i+1)*catalan_numbers[i-1])\n    return catalan_numbers[n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all the occurrences of the pattern \".*ly.*\" in the text\n    pattern = re.compile(r'.*ly.*')\n    matches = pattern.findall(text)\n    \n    # Loop through the matches and return the first adverb ending with \"ly\" and its positions\n    for i in range(len(matches)):\n        if re.match(r'.*ly.*', matches[i]):\n            return (matches[i], i)\n    \n    # If no adverb is found, return None\n    return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regex pattern for adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n\n    # search the text for adverbs ending with ly\n    matches = re.findall(pattern, text)\n\n    # return a list of tuples containing the adverb and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the pattern to search for adverbs ending with ly\n    pattern = r'\\b([a-z]+ly)\\b'\n\n    # use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # loop through the matches and print the adverb and its position in the text\n    for match in matches:\n        print(f'Adverb \"{match[0]}\" found at position {text.index(match[0])}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n\n    # Find all adverbs in the text\n    match = re.findall(r'\\b\\w+(ly)\\b', text, re.IGNORECASE)\n\n    # Iterate over the matches and add them to the list\n    for m in match:\n        # Check if the match ends with ly\n        if m[-2:] == 'ly':\n            # Check if the match contains the word \"not\"\n            if 'not' in m:\n                # If yes, skip the match\n                continue\n            # Add the match to the list of adverbs\n            adverbs.append(m)\n\n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the pattern for the adverb ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n\n    # use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # return a list of tuples containing the adverb ending with \"ly\" and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[aeiou][aeiou]*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return 'Adverb ending with ly found at positions {} and {}'.format(start, end)\n    else:\n        return 'No adverb ending with ly found in the text.'"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Find all occurrences of adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define a regular expression pattern for adverbs ending with ly\n    pattern = r'(?<![aeiou])ly$'\n    # use the re.findall() function to find all matches in the string\n    matches = re.findall(pattern, text)\n    # create a dictionary to store the adverb positions and lengths\n    adverb_positions = {}\n    # iterate over all matches and store their positions and lengths in the dictionary\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        adverb_positions[start_index] = (end_index - start_index)\n    # sort the dictionary by keys (the start positions of the matches) and return the result\n    sorted_adverbs = sorted(adverb_positions.items())\n    return sorted_adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\b(ly)\\b\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb found at position {match.start()}: {match.group()}\")\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        adverbs.append((match, text.find(match)))\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n\n    # Create a min heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        # Remove the least expensive item from the heap if the heap size exceeds n\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the items in the heap, sorted in decreasing order\n    return [-x for x in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of items into a heap with the prices as values\n    prices = [(price, item) for item, price in items]\n    heapq.heapify(prices)\n    \n    # Extract the n most expensive items and return them as a list\n    return [item for _, item in heapq.nsmallest(n, prices)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add them to the heap if their price is less than the minimum price in the heap\n    for item in items:\n        if len(heap) < n or item[1] < heap[0][1]:\n            heapq.heappush(heap, item)\n\n    # Extract and return the n most expensive items from the heap\n    return [item for item in heapq.nlargest(n, heap)[::-1]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input,\n    and returns the n most expensive items in the list.\n    '''\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Return the first n items from the sorted list\n    return [item[0] for item in sorted_items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Convert the dataset into a set to remove duplicates and keep only the prices\n    prices = set(item['price'] for item in items)\n    # Create a min-heap of the prices (highest to lowest)\n    heap = [heapq.heappushpop(heap, price) for price in sorted(prices, reverse=True)]\n    # Extract the n most expensive items from the heap\n    return [item for item in items if item['price'] in heap][:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the top n items\n    heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the item to the heap\n        heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    # Use a set to store the unique items in the dataset\n    unique_items = set(items)\n\n    # Loop through the unique items and update the min heap\n    for item in unique_items:\n        heapq.heappush(min_heap, (-item, item))\n\n        # If the size of the min heap exceeds n, pop the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the min heap and return them as a list\n    return [item for _, item in sorted(min_heap, key=lambda x: x[0])]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n        items: list of tuples containing (price, item_name)\n        n: integer representing the number of most expensive items to find\n\n    Returns:\n        A list of the n most expensive items in the dataset\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    \n    # Add all items to the min heap\n    for price, item_name in items:\n        heapq.heappush(min_heap, (price, item_name))\n    \n    # Remove the least expensive item from the heap and return it\n    return [heapq.heappop(min_heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the number of items to return.\n    It finds the n most expensive items in the list and returns them as a list.\n    '''\n\n    # Use a min-heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size exceeds n, remove the least expensive item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items from the heap as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= len(l):\n        new_list = l[n:]\n        l = l[:n]\n        return [l] + new_list\n    else:\n        return None"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    l = first_part + second_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        return l[:n] + [l[n]]\n    else:\n        return None"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < len(l):\n        return [l[n:]] + [l[:n]]\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    else:\n        mid = n // 2\n        first_half = l[:mid]\n        second_half = l[mid:]\n        return first_half + [second_half[0]] + split_Arr(second_half[1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return split_Arr(l[n:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        raise ValueError(\"n cannot be negative\")\n    elif n >= len(l):\n        return l, []\n    else:\n        return l[n:], l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_index = n\n    if split_index < 0:\n        split_index = 0\n    elif split_index > len(l):\n        split_index = len(l)\n\n    return l[:split_index] + l[split_index:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # split the list at the nth eelment\n    first_half = l[:n]\n    second_half = l[n:]\n\n    # add the first half to the end of the second half\n    l = first_half + second_half\n\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert list to tuple\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n\n    Args:\n    lst (list): A list of values to be converted to a tuple.\n\n    Returns:\n    A tuple containing the values of the input list.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return \"List must have at least two elements.\"\n    \n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between the largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 'Error: Empty list!'\n    elif len(nums) == 1:\n        return 'Error: List must have at least 2 elements to compare!'\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    \n    # find the minimum and maximum values in the list\n    min_val = nums[0]\n    max_val = nums[0]\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # find the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # sort the list in ascending order\n    nums.sort()\n    # find the largest and smallest values in the list\n    largest = nums[-1]\n    smallest = nums[0]\n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize the smallest and largest values to the first element of the list\n    smallest = nums[0]\n    largest = nums[0]\n\n    # Loop through the list and update the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    # Return the difference between the smallest and largest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a list to store perfect squares\n    perfect_squares_list = []\n\n    # loop through the range of numbers between a and b\n    for num in range(a, b+1):\n\n        # check if the square of the number is within the range of numbers between a and b\n        if num ** 2 >= a and num ** 2 <= b:\n\n            # add the square of the number to the list\n            perfect_squares_list.append(num ** 2)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            if (i*i + j*j) == a**2 and (i*i + j*j) == b**2:\n                print((i,j))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize two variables to store the result\n    result1 = 0\n    result2 = 0\n\n    # Iterate through each number in the range between a and b\n    for i in range(a, b+1):\n        # Calculate the square of the current number\n        square = i ** 2\n\n        # Check if the square is a perfect square\n        if int(square ** 0.5) ** 2 == square:\n            # If the square is a perfect square, add it to the result1 variable\n            result1 += square\n        else:\n            # If the square is not a perfect square, check if it is a perfect cube\n            if int(square ** 0.5) ** 3 == square:\n                # If the square is a perfect cube, add it to the result2 variable\n                result2 += square\n\n    # Return the two result variables\n    return result1, result2"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i**2 == j**2:\n                squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        n = int(i**0.5)\n        if i == n*n:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        squares.append(i*i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(int(a ** 0.5) + 1, b + 1):\n        if num ** 2 == a or num ** 2 == b:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the point.\n    theta (float): The angle of the point in radians.\n    \n    Returns:\n    tuple: A tuple containing the x and y coordinates of the point.\n    \"\"\"\n    \n    # Convert the angle to degrees\n    theta = cmath.phase(theta) / 180 * math.pi\n    \n    # Calculate the x and y coordinates using the polar formulae\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Return the coordinates as a tuple\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    :param r: The radius of the circle.\n    :param theta: The angle of the circle in radians.\n    \n    :return: A tuple containing the x and y coordinates of the point on the circle at the given angle.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the point.\n    y (float): The angle of the point, in radians.\n\n    Returns:\n    (float, float): A tuple containing the x and y coordinates of the point in rectangular coordinates.\n    '''\n\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(y/x)\n\n    # Convert radius and angle to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x.real, x.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(1j * theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    :param r: The radius of the circle from origin.\n    :param theta: The angle of the line from the origin.\n    :return: A tuple of the x and y coordinates of the point on the line.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List should have at least two elements.\"\n    else:\n        # swapping first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Using list slicing to swap the first and last elements\n    newList = newList[1:] + [newList[0]] + newList[2:]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Initialize the first and last index of the list\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    \n    # Swap the first and last elements\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the updated list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is greater than 1\n    if length > 1:\n        # Get the first and last elements of the list\n        first = newList[0]\n        last = newList[length-1]\n        \n        # Interchange the first and last elements\n        newList[0] = last\n        newList[length-1] = first\n        \n        # Print the new list\n        print(newList)\n    else:\n        # Print an error message\n        print(\"Error: The list must have at least two elements to swap them.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # swap the first and last elements using tuple unpacking\n    return newList # return the modified list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0 or k > n:\n        return 0\n    else:\n        return (n + 1) * binomial_Coeff(n - 1, k - 1)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k) + (n-k+1)*binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return (n * binomial_Coeff(n - 1, k - 1)) + (binomial_Coeff(n - 1, k))\n\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of consecutive product\n    consecutive_product = 1\n    \n    # Loop through the range of binomial coefficients\n    for i in range(1, k+1):\n        # Calculate the binomial coefficient\n        binomial_coeff = (n+1) * (k-i+1) // (i*2)\n        \n        # Calculate the product of consecutive binomial coefficients\n        consecutive_product *= binomial_coeff\n    \n    # Return the sum of consecutive product\n    return consecutive_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a Python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Calculate the sum of product of consecutive binomial co-efficients\n    sum_product = 0\n    for i in range(k, n + 1):\n        product = 1\n        for j in range(1, i + 1):\n            product *= j\n        sum_product += product\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the first binomial coefficient to 1 \n    first_coeff = 1 \n    # Initialize the sum of the product of consecutive binomial co-efficients to 0 \n    sum_of_products = 0 \n    # Initialize the loop counter to 1 \n    loop_counter = 1 \n    # Loop while the loop counter is less than or equal to n-k+1 \n    while loop_counter <= n-k+1: \n        # Calculate the binomial coefficient of the current loop counter \n        current_coeff = ((n-loop_counter+1)*(loop_counter))/(loop_counter*(loop_counter-1))\n        # Add the binomial coefficient to the sum of the product of consecutive binomial co-efficients \n        sum_of_products += current_coeff\n        # Increment the loop counter \n        loop_counter += 1 \n    # Return the sum of the product of consecutive binomial co-efficients \n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of binomial coefficients to zero\n    sum_bc = 0\n    \n    # Initialize the two pointers to 0\n    i = 0\n    j = k\n    \n    # Calculate the product of consecutive binomial co-efficients using nested loops\n    for i in range(n + 1):\n        for j in range(1, k + 1):\n            sum_bc += binomial(n, j - 1) * binomial(n - i, j - 1) * binomial(n - i - j + 1, j - 1)\n            \n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_bc"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #initialize sum of product of co-efficients\n    sum = 0\n    #initialize variables to iterate through all possible combinations of k consecutive numbers\n    i = 1\n    j = 1\n    #iterate through all possible combinations of k consecutive numbers\n    while i <= n-k+1:\n        #iterate through all possible combinations of k consecutive numbers\n        while j <= n:\n            #calculate the product of the current numbers\n            prod = 1\n            for l in range(1,k+1):\n                prod *= j\n                j += 1\n            #add the product of the current numbers to the sum\n            sum += prod\n            #increment j\n            j += 1\n        #increment i\n        i += 1\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integer parameters, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Calculate the product of consecutive binomial coefficients\n    product = 1\n    for i in range(k):\n        product *= (n - i) / (i + 1)\n\n    # Return the sum of the product\n    return product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet\n        return '.'.join([x.lstrip('0') for x in ip.split('.')])\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n    if pattern.match(ip):\n        ip = ip.lstrip('0')\n        return ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regular expressions to extract the ip address components\n    ip_components = re.findall(r'\\d+', ip)\n    # loop over the components and remove leading zeroes\n    for i in range(len(ip_components)):\n        ip_components[i] = ip_components[i].lstrip('0')\n    # join the components back into an ip address string\n    ip_address = '.'.join(ip_components)\n    return ip_address"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match an IP address\n    pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    # Replace all zeroes in the IP address with 0\n    ip = re.sub(pattern, '0', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regex pattern for validating ip address\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    \n    # check if ip address matches pattern\n    if re.match(pattern, ip):\n        # remove leading zeroes from each octet\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            ip_list[i] = str(int(ip_list[i]) & 255)\n        # recompose the ip address\n        ip_new = '.'.join(ip_list)\n        # return the new ip address\n        return ip_new\n    else:\n        # return the original ip address if it doesn't match the pattern\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regex pattern to match ip address with leading zeroes\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n\n    # Check if ip address matches the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from ip address\n        ip = ip.lstrip('0')\n\n        # Check if ip address has any leading zeroes\n        if ip.startswith('0'):\n            # If so, return the original ip address\n            return ip\n\n        # If ip address does not have any leading zeroes, return the modified ip address\n        return ip\n    else:\n        # If ip address does not match the pattern, return the original ip address\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Remove leading zeroes from octets\n    ip = re.sub(r'^\\d+\\.0\\.0\\.', '', ip)\n    ip = re.sub(r'^0+\\.', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return None\n    \n    even_num = list1[0]\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = lst[0]\n    odd = lst[1]\n    if even % 2 == 0:\n        return abs(even - odd)\n    else:\n        return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    if even_num is None or odd_num is None:\n        return \"The list does not have any even or odd numbers.\"\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    diff = even_num - odd_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2!= 0), None)\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n            \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even_num = odd_num = 0\n    # Iterate through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is, add it to the even number variable\n            even_num += num\n        else:\n            # If it's odd, add it to the odd number variable\n            odd_num += num\n    # Return the difference between the even and odd numbers\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if first_even is None:\n                first_even = num\n            else:\n                first_even = None\n        else:\n            odd_count += 1\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd = None\n    \n    if even_count == 0:\n        return None\n    elif odd_count == 0:\n        return None\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    # Initialize a dictionary to store the frequency of each digit.\n    freq = {}\n    # Iterate through the binary strings and count the frequency of each digit.\n    for i in range(len(str1)):\n        if str1[i] == '1':\n            if str2[i] == '0':\n                freq[str1[i]] = freq.get(str1[i], 0) + 1\n            else:\n                freq[str2[i]] = freq.get(str2[i], 0) + 1\n        else:\n            if str2[i] == '1':\n                freq[str2[i]] = freq.get(str2[i], 0) + 1\n            else:\n                freq[str1[i]] = freq.get(str1[i], 0) + 1\n    # Initialize two lists to store the digits of the first binary string and digits of the second binary string.\n    num1_digits = []\n    num2_digits = []\n    # Iterate through the dictionary and append the digits of the binary string to the corresponding list.\n    for key, value in freq.items():\n        for i in range(value):\n            num1_digits.append(key)\n    for key, value in freq.items():\n        for i in range(value):\n            num2_digits.append(key)\n    # Count the number of swaps required to convert the first binary string to the second binary string.\n    count = 0\n    for i in range(len(num1_digits)):\n        if num1_digits[i]!= num2_digits[i]:\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize two strings to store binary numbers\n    num1 = \"\"\n    num2 = \"\"\n\n    # Convert the binary numbers in the given strings to integers\n    for i in range(len(str1)):\n        if str1[i] == \"1\":\n            num1 += \"1\"\n            num2 += \"0\"\n        else:\n            num1 += \"0\"\n            num2 += \"1\"\n\n    # Initialize variables to store the lengths of the two binary numbers\n    len1 = len(num1)\n    len2 = len(num2)\n\n    # Initialize variables to store the maximum lengths of the two binary numbers\n    max_len = max(len1, len2)\n\n    # Initialize variables to store the minimum length of the two binary numbers\n    min_len = min(len1, len2)\n\n    # Initialize variables to store the number of swaps required to convert the two binary numbers\n    swaps = 0\n\n    # Check for the minimum number of swaps required to convert the two binary numbers\n    for i in range(max_len):\n        # If num1 is smaller than num2, swap the digits and increment the swaps count\n        if num1[i] < num2[i]:\n            swaps += 1\n            num1 = num1[:i] + \"1\" + num1[i+1:]\n            num2 = num2[:i] + \"0\" + num2[i+1:]\n        # If num2 is smaller than num1, swap the digits and decrement the swaps count\n        elif num1[i] > num2[i]:\n            swaps -= 1\n            num1 = num1[:i] + \"0\" + num1[i+1:]\n            num2 = num2[:i] + \"1\" + num2[i+1:]\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    diff = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            diff += 1\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # initialize two dictionary to store count of each bit \n    # in the given binary numbers\n    count1 = {}\n    count2 = {}\n\n    # count the frequency of each bit in the first binary number\n    for i in range(len(str1)):\n        if str1[i] in count1:\n            count1[str1[i]] += 1\n        else:\n            count1[str1[i]] = 1\n\n    # count the frequency of each bit in the second binary number\n    for i in range(len(str2)):\n        if str2[i] in count2:\n            count2[str2[i]] += 1\n        else:\n            count2[str2[i]] = 1\n\n    # calculate the minimum number of swaps required to convert\n    # the first binary number to the second binary number\n    swaps = 0\n    for i in range(len(str1)):\n        if count1[str1[i]] > count2[str2[i]]:\n            count1[str1[i]] -= 1\n            count2[str2[i]] += 1\n            swaps += 1\n\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # To count number of swaps required, we need to compare each digit of both strings\n    # First, we convert both strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Now, we need to count number of swaps required for each digit\n    # We will use a while loop to iterate through each digit of both integers\n    swaps = 0\n    while int1 > 0 or int2 > 0:\n        # We will compare the least significant digit of int1 with the least significant digit of int2\n        if int1 % 2 == int2 % 2:\n            # If the digits are equal, then we do not need to swap any digits\n            # We will move both integers by 2 to the right\n            int1 = int1 // 2\n            int2 = int2 // 2\n        else:\n            # If the digits are not equal, then we need to swap a digit\n            # We will move the least significant digit of int1 to the least significant digit of int2 and vice versa\n            # We will also move both integers by 2 to the right\n            swaps += 1\n            int1 = int1 * 2 + int2 % 2\n            int2 = int2 // 2\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # Calculate the maximum number of swaps required to convert str1 to str2\n    max_swaps = n\n    for i in range(n):\n        if str1[i] == '0' and str2[i] == '1':\n            max_swaps = min(max_swaps, i+1)\n        elif str1[i] == '1' and str2[i] == '0':\n            max_swaps = min(max_swaps, n-i)\n\n    return max_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to binary lists\n    list1 = [int(x) for x in str1]\n    list2 = [int(x) for x in str2]\n\n    # Find the length of the longer binary string\n    length = max(len(str1), len(str2))\n\n    # Initialize a dictionary to store the differences between binary lists\n    diff_dict = {}\n\n    # Calculate the differences between the binary lists\n    for i in range(length):\n        if i < len(str1):\n            diff_dict[list1[i]] = diff_dict.get(list1[i], 0) + 1\n        if i < len(str2):\n            diff_dict[list2[i]] = diff_dict.get(list2[i], 0) - 1\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = length\n\n    # Iterate through the dictionary to find the minimum number of swaps\n    for key in diff_dict:\n        if diff_dict[key] > 0:\n            min_swaps = min(min_swaps, diff_dict[key])\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    # check if both strings have the same length\n    if len(str1)!= len(str2):\n        return \"Error: Both strings must have the same length\"\n\n    # check if both strings are binary numbers\n    if not all(c in {'0', '1'} for c in str1) or not all(c in {'0', '1'} for c in str2):\n        return \"Error: Both strings must be binary numbers\"\n\n    # convert both strings to integers and check if they are of the same length\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    if len(bin(num1)[2:])!= len(bin(num2)[2:]):\n        return \"Error: Both numbers must be of the same length\"\n\n    # calculate the number of swaps required\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    min_swaps = 0\n    # check if both strings have the same number of digits\n    if n!= len(str2):\n        return \"Invalid input strings\"\n    # convert the strings to binary numbers\n    binary1 = bin(int(str1))[2:]\n    binary2 = bin(int(str2))[2:]\n    # check if both binary numbers have the same number of digits\n    if n!= len(binary1) or n!= len(binary2):\n        return \"Invalid input strings\"\n    # compare the binary numbers\n    for i in range(n):\n        if binary1[i]!= binary2[i]:\n            min_swaps += 1\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert strings to binary\n    bin_str1 = bin(int(str1, 2))[2:]  # remove '0b' prefix and convert to binary\n    bin_str2 = bin(int(str2, 2))[2:]\n    # find common elements in binary strings\n    common_elements = set(bin_str1).intersection(set(bin_str2))\n    # count swaps required\n    swaps_required = 0\n    for i in range(len(bin_str1)):\n        if bin_str1[i]!= bin_str2[i]:\n            swaps_required += 1\n    # return minimum swaps required\n    return swaps_required"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # find the size of the tuple in bytes using the sys.getsizeof() function\n    size = sys.getsizeof(tuple_list)\n    # return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of each tuple in bytes.\n    '''\n    if isinstance(tuple_list, list):\n        size = 0\n        for i in range(len(tuple_list)):\n            size += sys.getsizeof(tuple_list[i])\n        return size\n    else:\n        print(\"Error: Input is not a list of tuples\")\n        sys.exit()\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write('The size of the given tuple is:'+ str(sys.getsizeof(tuple_list)) +'bytes\\n')"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # check if the input is a tuple\n    if isinstance(tuple_list, tuple):\n        # get the size of the tuple\n        size = sys.getsizeof(tuple_list)\n        # return the size in bytes\n        return size\n    else:\n        # return an error message if the input is not a tuple\n        return \"Error: Input must be a tuple.\""
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Get the size of the tuple using the sys.getsizeof() function\n    size = sys.getsizeof(tuple_list)\n\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple_item in tuple_list:\n        total_size += sys.getsizeof(tuple_item)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth smallest element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return min(arr1[i], arr2[j])\n            k -= 1\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    \n    if k == 0:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    low = 0\n    high = len(arr2) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] == arr2[k-mid-1]:\n            k -= 1\n            if k == 0:\n                return arr1[mid]\n            low = mid + 1\n        elif arr1[mid] < arr2[k-mid-1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1: List[int]\n        The first sorted array.\n    arr2: List[int]\n        The second sorted array.\n    k: int\n        The value of k.\n\n    Returns:\n    int\n        The kth element from the two sorted arrays.\n    \"\"\"\n\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    # Concatenate both arrays and sort them\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Return the kth element from the sorted array\n    return arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters: the first array, the second array, and the value of k.\n    It sorts the two arrays in ascending order and returns the kth element of the sorted arrays.\n    \"\"\"\n    # Sort the two arrays in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # Initialize two pointers, one at the beginning of each array, and another at k\n    i = j = k\n\n    # Loop until one of the pointers reaches the end of the array\n    while i < len(arr1) and j < len(arr2):\n        # If the value of the i-th element of arr1 is less than the value of the j-th element of arr2,\n        # increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the value of the i-th element of arr1 is greater than the value of the j-th element of arr2,\n        # increment j\n        else:\n            j += 1\n\n    # Return the value of the k-th element of the sorted arrays\n    return arr1[k-1] if i == len(arr1) else arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = k = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 0:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 0:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n            \n    if i == len(arr1):\n        return arr2[j:]\n    else:\n        return arr1[i:]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    # Helper function to check if a number is armstrong or not\n    def check_power(n, p):\n        # Recursive function to check if n raised to p is equal to 1\n        if p == 0:\n            return True\n        if p % 2 == 1:\n            if n % p == 0:\n                return check_power(n, p-1)\n        else:\n            if n % p == 0:\n                return check_power(n, p/2)\n        return False\n    \n    # Check if the number is divisible by 3 and greater than 0\n    if num % 3 == 0 and num > 0:\n        # Check if the number is equal to the sum of the cubes of its digits\n        digits = [int(digit) for digit in str(num)]\n        return sum(digits) == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize variables\n    sum_of_powers = 0\n    temp_num = number\n    # Calculate the sum of powers of the number\n    while temp_num > 0:\n        digit = temp_num % 10\n        sum_of_powers += digit ** len(num_str)\n        temp_num //= 10\n    # Check if the sum of powers is equal to the original number\n    if number == sum_of_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to a string\n    number_str = str(number)\n    # calculate the sum of the squares of each digit in the number\n    sum_of_squares = sum([int(digit)**len(number_str) for digit in number_str])\n    # compare the sum of squares with the original number\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    n = len(str(number))\n    sum_of_squares = 0\n\n    for i in range(1, n+1):\n        digit = number % 10\n        sum_of_squares += digit ** i\n        number //= 10\n\n    return number == sum_of_squares\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    elif number == 10:\n        return True\n    else:\n        return armstrong_number(sum([int(digit)**len(str(number)) for digit in str(number)]))"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_str = num_str.replace('0', '')\n    num_length = len(num_str)\n    \n    for i in range(1, num_length + 1):\n        power = i\n        temp = 0\n        while power > 0:\n            digit = int(num_str[-power])\n            temp += digit ** power\n            power -= 1\n        if temp == int(number):\n            return True\n    return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    num = str(num)\n    num_length = len(num)\n    sum = 0\n    for i in range(num_length):\n        power = num_length - 1 - i\n        digit = int(num[i])\n        sum += digit ** power\n    if sum == num:\n        return True\n    else:\n        return False\n\ndef armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    if is_armstrong(number):\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and checks whether it is an armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example: 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n\n    # Create a list of the digits of the input number\n    digits = [int(digit) for digit in str(number)]\n\n    # Check if the input number is a palindrome or not\n    is_palindrome = str(number) == str(number)[::-1]\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(digit**len(digits) for digit in digits)\n\n    # Check if the sum of the digits is equal to the input number\n    if is_palindrome and sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Return True if the given number is an Armstrong number, else False.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        total = 0\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            total += digit ** 3\n            temp //= 10\n        return n == total\n\ndef armstrong_number(n):\n    \"\"\"\n    Return True if the given number is an Armstrong number, else False.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        digits = []\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            digits.append(digit)\n            temp //= 10\n        digits.reverse()\n        armstrong_num = 0\n        for digit in digits:\n            armstrong_num += digit ** len(digits)\n        return n == armstrong_num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an armstrong number and False otherwise.\n    '''\n    number = int(number)\n    sum_of_square = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum_of_square += digit ** 3\n        num //= 10\n    return number == sum_of_square"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize variables\n    sum_num = 0\n    count = 0\n    # Loop through the first n natural numbers\n    for i in range(1, number+1):\n        sum_num += i\n        count += 1\n    # Find the average\n    average = sum_num / count\n    # Return the sum and average\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_num += i\n        count += 1\n    avg_num = sum_num / count\n    print(\"Sum of first\", number, \"natural numbers is:\", sum_num)\n    print(\"Average of first\", number, \"natural numbers is:\", avg_num)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    else:\n        sum = 0\n        count = 0\n        for i in range(1, n+1):\n            sum += i\n            count += 1\n        average = sum / count\n        return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    # Calculate the sum of first n natural numbers\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    \n    # Calculate the average of first n natural numbers\n    average = sum/n\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    This function takes an integer as input and returns the sum of the first n natural numbers and the average.\n    '''\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, number+1):\n        # Add the current natural number to sum\n        sum += i\n        # Increment count\n        count += 1\n        \n    # Calculate average and return results\n    return sum/count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    count = 0\n    # iterate n times\n    for i in range(1, n+1):\n        # add i to sum\n        sum += i\n        # increment count\n        count += 1\n    # calculate average\n    average = sum/count\n    # return the result\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n        \n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < n:\n        total += count\n        count += 1\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function calculates the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    return (total, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If the number is even, print 'Even'\n        print(\"Even\")\n    else:\n        # If the number is odd, print 'Odd'\n        print(\"Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as an argument and returns True if the number is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    This function takes a number as input and returns True if the number is even and False otherwise.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer input 'n' and returns True if it is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n            \n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize variables\n    char_count = {}\n    first_char = None\n\n    # Loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            first_char = char\n            break\n\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    unique_str = set(str1)\n    # Iterate through the set to find the first repeated character\n    for char in unique_str:\n        if str1.count(char) > 1:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string and update the frequency in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first character with a frequency greater than 1\n    for char in freq:\n        if freq[char] > 1:\n            return char\n\n    # If no character has a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary again and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n + 1):\n        for j in range(i ** 2, n + 1, i):\n            ludic_numbers.append(j)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if sum(int(digit)**i for digit in str(i)) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i % 13 == 0:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers\n\nprint(get_ludic(1000))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            j = 3\n            while j <= i/2:\n                if i % j == 0:\n                    break\n                j += 2\n            else:\n                lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Define a set to store the lucid numbers\n    lucid_set = set()\n\n    # Initialize variables for calculating the lucid numbers\n    i = 1\n    curr_lucid = 2\n\n    # Keep iterating until the current lucid number is greater than n\n    while curr_lucid <= n:\n\n        # Check if the current lucid number is prime\n        if all(curr_lucid % j!= 0 for j in range(2, int(curr_lucid**0.5) + 1)):\n\n            # If it is prime, add it to the set of lucid numbers\n            lucid_set.add(curr_lucid)\n\n        # Update the current lucid number\n        curr_lucid += i\n        i += 1\n\n    # Return the set of lucid numbers\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(3*i - 1)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    reversed_words = words[::-1]  # reverse the list of words using slicing\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list and join them back into a string\n    reversed_words = \" \".join([word[::-1] for word in words])\n    # Return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    words.reverse()  # reverse the words in the list\n    return''.join(words)  # join the words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n    # Split the string into words using whitespaces as separators\n    words = s.split()\n    # Reverse the order of the words\n    words = words[::-1]\n    # Join the words back into a string with spaces as separators\n    s =''.join(words)\n    # Remove leading and trailing whitespaces again\n    s = s.strip()\n    return s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if the given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    else:\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.pi * degree / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Search for the pattern in the text and return the match if found, else return None\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.group(), matches.start(), matches.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Initialize the list of matching substrings and their start and end indices\n    literals = []\n    for match in matches:\n        substring = match.group()\n        start = match.start()\n        end = match.end()\n        # Check if the substring is already in the list of literals\n        found = False\n        for lit in literals:\n            if substring == lit[0]:\n                found = True\n                break\n        # If it's not, add it to the list\n        if not found:\n            literals.append((substring, start, end))\n    # Return the list of literals\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and return the corresponding substrings\n    for match in matches:\n        # Get the start and end indices of the match\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        \n        # Return the substring, start index, and end index\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.search() function to search the text for the pattern\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return the matching subtring, a start index and an end index\n    if match:\n        sub_string = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return sub_string, start_index, end_index\n    \n    # If the pattern is not found, return None for the sub_string, start index and end index\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        match = matches[0]\n        start = text.index(match)\n        end = start + len(match)\n        return match, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    # Use the re.findall function to find all substrings that match the pattern\n    matches = re.findall(pattern, text)\n    \n    # Create an empty list to store the results\n    results = []\n    \n    # Loop through all the matches and add them to the results list\n    for match in matches:\n        # The start and end index of the match are the indices of the first and last characters in the match\n        start = text.index(match[0])\n        end = start + len(match) - 1\n        \n        # Add the match, start and end indices to the results list\n        results.append((match, start, end))\n        \n    # Return the results list\n    return results"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    This function calculates the nth bell number using the \n    Bell's theorem.\n\n    Args:\n    n (int): the index of the bell number to be found\n\n    Returns:\n    int: the nth bell number\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (1 / (2 * n - 1)) * (1 + bell_Number(n - 1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        b0 = 0\n        b1 = 1\n        for i in range(2, n+1):\n            b = (2*i+1) / (i+1) * (i-1) + i\n            b0 = b1\n            b1 = b\n        return b0"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth bell number.\n\n    Parameters:\n    n (int): The value of n.\n\n    Returns:\n    int: The nth bell number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1) / (2 * n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize bell number as 0\n    bell = 0\n    \n    # Loop for n number of iterations\n    for i in range(n):\n        # Calculate current bell number\n        bell = (2*bell + 1)**2\n        \n        # Print the bell number\n        print(\"Bell number:\", bell)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # function to find nth bell number using recursion\n    def nth_bell(n, k, m):\n        # base case of recursion\n        if n == 0:\n            return m\n        # recursive case of recursion\n        return nth_bell(n-1, k+1, (k*(m-k+1))//2)\n    # calling the function to find nth bell number\n    return nth_bell(n, 0, 0)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # initialize variables\n    bell_numbers = [1]\n    count = 1\n    # loop through numbers and calculate bell numbers\n    for i in range(2, n+1):\n        # check if the current number is prime\n        if is_prime(i):\n            # calculate the next bell number\n            bell_number = i * count\n            # add the bell number to the list\n            bell_numbers.append(bell_number)\n            # increment the count for the next bell number\n            count += 1\n    # return the list of bell numbers\n    return bell_numbers"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": ""
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(lst, k):\n    new_lst = []\n    for i in range(len(lst)):\n        if i!= k-1:\n            new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a positive integer L as input, and returns a new list with the same elements\n    except for the L-th element (where L is the value of L).\n    '''\n    return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and an integer k as input and removes the kth element from the list.\n\n    Args:\n    lst (list): A list of integers.\n    k (int): An integer representing the index of the element to remove.\n\n    Returns:\n    list: A list with the same elements as the input list, except for the kth element.\n\n    \"\"\"\n    # Check if k is less than 1 or greater than the length of the list.\n    if k < 1 or k > len(lst):\n        return lst\n\n    # Remove the kth element from the list and return the modified list.\n    lst.pop(k - 1)\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input. It removes the L'th element from the list and returns the modified list.\n    '''\n    if L >= len(list1):\n        raise ValueError(\"L should be less than or equal to the length of the list.\")\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    result = []\n    i = 0\n    while i < len(list1):\n        if i!= L-1:\n            result.append(list1[i])\n        i += 1\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    list2 = list1[:k] + list1[k+1:]\n    return list2"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')  # initialize max value to negative infinity\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N-1])  # update max value if current row hasn'th column greater than current max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists and a non-negative integer N, returns the maximum value of then'th column.\n\n    Example:\n        matrix = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]\n        N = 2\n        output = 7\n\n    Note:\n        The function assumes that all the rows have the same length.\n    \"\"\"\n    # initialize the maximum value to zero\n    max_val = 0\n    \n    # loop through each row of the matrix\n    for row in matrix:\n        # loop through the first N columns\n        for i in range(N):\n            # compare the current value with the maximum value\n            if row[i] > max_val:\n                max_val = row[i]\n    \n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the length of the first row in the matrix\n    first_row_length = len(test_list[0])\n    # initialize the result variable to the first value in the first row\n    max_value = test_list[0][N-1]\n    # loop through the remaining rows\n    for i in range(1, len(test_list)):\n        # check if then'th column value is greater than the current max\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the first list in the matrix\n    length = len(test_list[0])\n    \n    # Initialize a variable to hold the maximum value\n    max_val = None\n    \n    # Iterate over the rows in the matrix\n    for i in range(len(test_list)):\n        # Check if then'th column value is greater than the current maximum value\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N-1], col_max))\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n            return max_val\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Initialize a variable to store the maximum value\n    max_value = None\n    \n    # Loop through each row in the matrix\n    for i in range(num_rows):\n        # Check if then'th column value is greater than the current maximum value\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in matrix:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    result = []\n    for i in range(n):\n        max_val = float('-inf')\n        for j in range(len(test_list)):\n            if j!= i:\n                if test_list[j][i] > max_val:\n                    max_val = test_list[j][i]\n        result.append(max_val)\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Sort the row in ascending order\n        sorted_row = sorted(row)\n        # Get the N'th element of the sorted row and return it\n        return sorted_row[N-1]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        result.append([first_element, second_element])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    result = []  \n    for sublist in lst:  \n        result.append([sublist[0], sublist[1]])  \n    return result  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Loop through each element in the list\n    for i in test_list:\n        # Add the element to the cumulative sum\n        cum_sum += i\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to hold the cumulative sum\n    cum_sum = 0\n    \n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Add each value in the tuple to the cumulative sum\n        for val in tup:\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list) or not all(isinstance(item, tuple) for item in test_list):\n        raise ValueError(\"Input should be a list of tuples\")\n    cumsum = 0\n    for item in test_list:\n        for value in item:\n            cumsum += value\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for num in nums:\n        total += num\n        count += 1\n    average = total / count\n    return [average]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num) / len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        tuple_sum = 0\n        for j in range(len(nums[i])):\n            tuple_sum += nums[i][j]\n        tuple_avg = tuple_sum / len(nums[i])\n        result.append(tuple_avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for item in nums:\n        total = 0\n        count = 0\n        for num in item:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create a list to store the averages for each tuple\n    avg_list = []\n    # Loop through each tuple in the input list\n    for t in nums:\n        # Calculate the sum of the numbers in each tuple\n        total = sum(t)\n        # Calculate the average of the numbers in each tuple\n        avg = total/len(t)\n        # Add the average to the average list\n        avg_list.append(avg)\n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total/len(tup)\n        averaged_list.append(avg)\n    return averaged_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store averages\n    avg_list = []\n    \n    # loop through each tuple in the tuple of tuples\n    for tup in nums:\n        # initialize sum to 0\n        sum = 0\n        # loop through each element in the tuple\n        for num in tup:\n            # add the element to the sum\n            sum += num\n        # calculate the average of the tuple\n        avg = sum / len(tup)\n        # append the average to the avg_list\n        avg_list.append(avg)\n    \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        tup = nums[i]\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be the same!\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the two tuples must have the same length!\")\n        return None\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jump_count = 0\n    current_pos = 0\n    target_pos = (d, 0)\n\n    # Loop through steps\n    for i in range(steps):\n        # Check if current position is equal to target position\n        if current_pos == target_pos:\n            return jump_count\n\n        # Update current position\n        if current_pos[0] == 0:\n            current_pos = (current_pos[0] + 1, current_pos[1])\n        else:\n            current_pos = (current_pos[0] - 1, current_pos[1])\n        jump_count += 1\n\n    # If the loop completes without finding the target position, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Parameters:\n        steps (int): The total number of steps in the 2d plane.\n        d (int): The target distance to reach the point (d, 0).\n\n    Returns:\n        int: The minimum number of jumps required to reach the target point.\n    \"\"\"\n\n    # Define a dictionary to store the number of jumps required to reach each point\n    jumps = {0: 0}\n\n    # Initialize the current point to (0, 0)\n    current = (0, 0)\n\n    # Keep track of the number of jumps made in each iteration\n    jumps_made = 1\n\n    # Iterate through the remaining number of steps\n    for step in range(1, steps):\n\n        # Calculate the next point to visit\n        next_point = (current[0] + d * (current[0] > 0), current[1])\n\n        # If the next point is not reachable, there is no more jumps to make\n        if next_point not in jumps:\n            break\n\n        # Update the current point and the number of jumps made\n        current = next_point\n        jumps_made += jumps[next_point]\n\n        # Update the jumps dictionary with the new value\n        jumps[current] = jumps_made\n\n    # Return the minimum number of jumps made\n    return min(jumps.values())"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the maximum number of jumps possible with given length\n    max_jumps = int(steps / d)\n    if max_jumps == 0:\n        return 1\n    elif max_jumps == 1:\n        return 2\n    else:\n        # Initialize the count and the number of jumps\n        count = 1\n        jumps = 1\n        \n        # Calculate the remaining steps and the distance\n        steps_left = steps - d * max_jumps\n        distance_left = d\n        \n        # Calculate the remaining steps and the distance at each step\n        while steps_left > 0:\n            # If the remaining steps are less than the distance left, then calculate the number of jumps\n            if steps_left < distance_left:\n                count += 1\n                steps_left = 0\n            # If the remaining steps are more than the distance left, then calculate the number of jumps and update the remaining steps\n            else:\n                steps_left -= distance_left\n                jumps += 1\n                count += 1\n        \n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "The time complexity of this solution is O(n*m), where n and m are the dimensions of the array. The space complexity is also O(n*m), as we are creating a 2D array of size n*m to store the minimum number of jumps required to reach each point `(j, 0)` from the origin."
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] == (d, 0):\n            return jumps\n        i += 1\n        if i >= len(steps):\n            jumps += 1\n            i = 0\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    L = steps * d\n    C = (L + d) ** 2 / d\n    P = C * (L - 1) / 2\n    return P"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    \n    jumps = 1\n    length = 0\n    current_distance = 0\n    \n    for i in range(steps):\n        if i == 0:\n            length = 1\n            current_distance = d\n        else:\n            length += 1\n            current_distance += d\n        \n        if length <= steps and abs(d - current_distance) < abs(d - current_distance - d):\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    j = 0\n    while i < len(steps) and steps[i] <= j + d:\n        if steps[i] == 0:\n            j += 1\n        i += 1\n        jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    def helper(j, k, s, d):\n        if (j, k) == (d, 0) and s >= steps:\n            return 0\n        if j > d or k < -d or abs(j - k) > d:\n            return float('inf')\n        if j == d and k == 0:\n            return 1\n        return helper(j + 1, k - 1, s + 1, d) + helper(j, k + 1, s + 1, d)\n\n    return helper(0, 0, 0, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    steps += 1\n    i = 1\n    while i <= steps:\n        if i <= d:\n            i += 1\n        else:\n            steps -= i\n            jumps += 1\n            i = 1\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have equal length\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            if nums2[i]!= 0:\n                result.append(nums1[i]/nums2[i])\n            else:\n                result.append(float('inf'))\n        return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero\")\n        else:\n            result.append(nums1[i] // nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    \"\"\"\n    This function takes two lists and returns a list of the element-wise division of the lists.\n    \"\"\"\n    return [num1/num2 for num1, num2 in zip(nums1,nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have equal length\")\n        return\n    div_result = []\n    for i in range(len(nums1)):\n        div_result.append(nums1[i]/nums2[i])\n    return div_result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            numbers.append(test_str[i])\n        else:\n            test_str = ''.join(numbers) + test_str + ''.join(numbers)\n            numbers = []\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    nums.sort(reverse=True)\n    result = ''.join(nums) + test_str\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    if num_list:\n        for i in test_str:\n            if i not in num_list:\n                print(i, end='')\n        for i in num_list:\n            print(i, end='')\n    else:\n        print(test_str)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # initialize variables\n    number_found = False\n    num_start = -1\n    num_end = -1\n    # loop through the string\n    for i in range(len(test_str)):\n        # if we find a number, mark its start and end indices\n        if test_str[i].isdigit():\n            number_found = True\n            num_start = i\n            num_end = i\n            # loop through the remaining characters until we find a non-number\n            while i < len(test_str) and test_str[i].isdigit():\n                i += 1\n                num_end = i\n            # if we found a number, move it to the end of the string\n            if num_start!= num_end:\n                test_str = test_str[:num_start] + test_str[num_end:]\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n\n    # Initialize two pointers - one for the beginning of the string and one for the end\n    # of the string\n    begin = 0\n    end = len(char_list) - 1\n\n    # Loop through the string from the beginning to the end\n    while begin < end:\n\n        # If the character at the beginning of the string is a number\n        if char_list[begin].isdigit():\n\n            # Move the character at the beginning of the string to the end of the string\n            char_list[end] = char_list[begin]\n\n            # Move the pointer one position to the right\n            end -= 1\n\n            # Move the pointer one position to the right as well, so that we don't count the\n            # same number multiple times\n            begin += 1\n\n        # If the character at the end of the string is a number\n        elif char_list[end].isdigit():\n\n            # Move the character at the end of the string to the beginning of the string\n            char_list[begin] = char_list[end]\n\n            # Move the pointer one position to the left\n            begin += 1\n\n            # Move the pointer one position to the left as well, so that we don't count the\n            # same number multiple times\n            end -= 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a set of all numbers in the string\n    num_set = set(filter(str.isdigit, test_str))\n\n    # move all numbers to the end of the string\n    num_set = sorted(num_set, key=lambda x: x, reverse=True)\n    return ''.join([char for char in test_str if char not in num_set])"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the given string to a list of characters\n    char_list = list(test_str)\n    # Initialize two pointers, one at the beginning of the string and one at the end of the string\n    left = 0\n    right = len(char_list) - 1\n    # Loop through the list until both pointers meet or cross each other\n    while left < right:\n        # If the character at the left pointer is a number, swap it with the character at the right pointer\n        if char_list[left].isdigit():\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            # Increment the left pointer\n            left += 1\n        # If the character at the right pointer is a number, swap it with the character at the left pointer\n        elif char_list[right].isdigit():\n            char_list[right], char_list[left] = char_list[left], char_list[right]\n            # Decrement the right pointer\n            right -= 1\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    non_num_str = ''.join([char for char in test_str if char.isdigit() == False])\n    return num_str + non_num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty list to store the numbers\n    nums = []\n    \n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the nums list\n        if char.isdigit():\n            nums.append(char)\n            \n    # reverse the nums list to move it to the end\n    nums = nums[::-1]\n    \n    # join the nums list back into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(a)\n    # create a dictionary to store the frequency of each element in the list\n    frequency_dict = {}\n    # iterate through the unique elements of the list\n    for element in unique_elements:\n        # check if the element is already in the dictionary\n        if element in frequency_dict:\n            # increment the frequency of the element by 1\n            frequency_dict[element] += 1\n        else:\n            # add the element to the dictionary with frequency 1\n            frequency_dict[element] = 1\n    # sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True))\n    # initialize the largest subset size as 0\n    largest_subset_size = 0\n    # iterate through the sorted dictionary\n    for element, frequency in sorted_dict.items():\n        # check if the frequency of the element is odd\n        if frequency % 2!= 0:\n            # increment the largest subset size by 1\n            largest_subset_size += 1\n        # if the frequency of the element is even, we can break the loop\n        else:\n            break\n    # return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    max_sum = 0\n    max_size = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_sum = max(max_sum, dp[i])\n        max_size = max(max_size, dp[i])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Returns:\n        The size of the largest subset of a list of numbers so that every pair is divisible.\n\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i - 1] % a[j] == 0:\n                dp[i][j] = dp[j][i - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[j][i])\n\n    return dp[n][0]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a new list to store the largest subsets\n    largest_subsets = []\n\n    # Loop through the list of numbers\n    for num in a:\n        # Create a new list to store the current subset\n        current_subset = [num]\n\n        # Loop through the remaining numbers in the list\n        for i in range(len(a)):\n            # If the current number is divisible by the remaining number, add it to the current subset\n            if num % a[i] == 0:\n                current_subset.append(a[i])\n                # If the current subset is larger than any existing subset, add it to the largest_subsets list\n                if len(current_subset) > len(largest_subsets):\n                    largest_subsets = [current_subset]\n                # If the current subset is equal to or smaller than any existing subset, check if it is larger than all previously found subsets\n                elif len(current_subset) == len(largest_subsets):\n                    for sub in largest_subsets:\n                        if len(current_subset) < len(sub):\n                            break\n                    else:\n                        largest_subsets.append(current_subset)\n                current_subset = current_subset[1:]\n\n    # Return the size of the largest subset\n    return len(largest_subsets)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # Sort the list in ascending order\n    n = len(a) # Get the length of the list\n    count = 0 # Initialize a counter\n    result = 0 # Initialize the result variable\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the sum of the two numbers is divisible by 2\n            if a[i] + a[j] % 2 == 0:\n                # Increment the count if the condition is true\n                count += 1\n                # Update the result if the count is greater than the current result\n                if count > result:\n                    result = count\n    \n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n    \n    max_size = 1\n    curr_size = 1\n    max_start = 0\n    \n    for i in range(1, len(a)):\n        if a[i] % a[max_start] == 0 and a[i] % a[i-1] == 0:\n            curr_size += 1\n        else:\n            curr_size = 1\n        \n        if curr_size > max_size:\n            max_size = curr_size\n            max_start = i\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the variables\n    max_length = 0\n    length = 1\n    count = 1\n    current_sum = a[0]\n\n    # Traverse the list\n    for i in range(1, len(a)):\n        # If the current element is not divisible by the current sum\n        if a[i] % current_sum!= 0:\n            # If the length of the subset is greater than the current max length\n            if length > max_length:\n                # Update the max length and count\n                max_length = length\n                count = 1\n\n            # Reset the length and sum\n            length = 1\n            current_sum = a[i]\n\n        # Update the length and sum\n        length += 1\n        current_sum += a[i]\n\n        # Increment the count if the current element is divisible by the current sum\n        if a[i] % current_sum == 0:\n            count += 1\n\n    # If the length of the subset is greater than the current max length\n    if length > max_length:\n        # Update the max length and count\n        max_length = length\n        count = 1\n\n    # Return the max length\n    return max_length\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    count = 1\n\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            count += 1\n            if count > max_size:\n                max_size = count\n        else:\n            count = 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n    \n    a.sort()\n    \n    subset_size = 1\n    current_size = 1\n    \n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            subset_size = max(subset_size, current_size)\n            current_size = 1\n    \n    subset_size = max(subset_size, current_size)\n    \n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # First, check if the list is empty or contains only one element\n    if len(a) <= 1:\n        return 0\n\n    # Initialize variables for keeping track of the current subset size and the maximum size seen so far\n    current_size = 0\n    max_size = 0\n\n    # Iterate over the list of numbers\n    for i in range(1, len(a)):\n        # If the current element is divisible by the previous element, increase the current subset size\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n\n        # If the current subset size is greater than the maximum size seen so far, update the maximum size\n        if current_size > max_size:\n            max_size = current_size\n\n        # If the current element is not divisible by the previous element, reset the current subset size\n        else:\n            current_size = 0\n\n    # If the list is not divisible by every number except for the last one, add the remaining number to the subset size\n    if a[-1] % a[-2]!= 0:\n        current_size += 1\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Get the length of the sorted list\n    length = len(sorted_list)\n\n    # Calculate the median\n    if length % 2 == 0:\n        median = (sorted_list[length//2] + sorted_list[length//2-1]) / 2\n    else:\n        median = sorted_list[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns the median.\n    '''\n    # Concatenate the two lists\n    merged = arr1 + arr2\n    \n    # Sort the concatenated list\n    merged.sort()\n    \n    # Calculate the median index\n    mid = n // 2\n    \n    # Return the element at the median index\n    return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate both lists to get a single sorted list\n    merged_list = arr1 + arr2\n\n    # Find the middle index of the merged list\n    mid = n // 2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # If the number of elements is odd, the median is the middle element\n    if n % 2!= 0:\n        return sorted_list[mid]\n\n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in three arrays and their size n and returns the median of the two sorted arrays.\n    \"\"\"\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = merge_sorted_arrays(arr1, arr2, n)\n\n    # Find the middle element of the merged array\n    mid = n // 2\n\n    # If the length of the array is odd, then the median is the middle element\n    if n % 2 == 1:\n        median = merged_arr[mid]\n\n    # If the length of the array is even, then the median is the average of the middle two elements\n    else:\n        median = (merged_arr[mid - 1] + merged_arr[mid]) / 2\n\n    return median\n\n\ndef merge_sorted_arrays(arr1, arr2, n):\n    \"\"\"\n    This function takes in three arrays and their size n and returns the merged sorted array.\n    \"\"\"\n    # Create an empty array to hold the merged sorted array\n    merged_arr = []\n\n    # Initialize two pointers to the start of the two input arrays\n    i = 0\n    j = 0\n\n    # Iterate until we have added all elements from both arrays\n    while i < n and j < n:\n        # If the element at index i in arr1 is smaller, add it to the merged array and increment i\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n\n        # If the element at index j in arr2 is smaller, add it to the merged array and increment j\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Append any remaining elements from arr1 or arr2 to the merged array\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n\n    return merged_arr\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Check if the two lists are of equal length\n    if len(arr1)!= len(arr2):\n        return \"Lists must be of equal length\"\n    \n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Calculate the median\n    median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Find the minimum element in the two lists\n    min_val = min(arr1[0], arr2[0])\n\n    # Iterate over the lists\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < min_val:\n            min_val = arr1[i]\n            i += 1\n        elif arr2[j] < min_val:\n            min_val = arr2[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    # Check if the number of elements is odd or even\n    if n % 2 == 0:\n        # Find the average of the middle two elements\n        median = (min_val + arr1[i-1] + arr2[j-1]) / 3\n    else:\n        # Find the middle element\n        median = min_val + arr1[i-1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    combined = arr1 + arr2\n\n    # Sort the combined array\n    combined.sort()\n\n    # Calculate the median index\n    mid = n // 2\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (combined[mid - 1] + combined[mid]) / 2\n    else:\n        median = combined[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the two middle numbers\n        mid1 = n // 2\n        mid2 = n // 2\n        return (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        mid1 = n // 2\n        return arr1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): first sorted list\n    arr2 (list): second sorted list\n    n (int): length of both lists\n\n    Returns:\n    float: median of arr1 and arr2\n    \"\"\"\n    # Combine both lists into one and sort it\n    combined = arr1 + arr2\n    combined.sort()\n\n    # Get the midpoint of the combined list\n    mid = len(combined) // 2\n\n    # Check if the midpoint is even or odd\n    if len(combined) % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (combined[mid - 1] + combined[mid]) / 2\n    else:\n        # If odd, return the middle element\n        return combined[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Check if size of the list is odd\n    if n % 2 == 1:\n        # Return the middle element of the list\n        return arr[n//2]\n    else:\n        # Return the average of the middle two elements of the list\n        return (arr[n//2 - 1] + arr[n//2]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers to compute the n-th power of.\n    n (int): The power to compute.\n\n    Returns:\n    list: A list of the n-th power of each number in nums.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and an integer n and returns a new list with the nth power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and a positive integer n as input,\n    computes the n-th power of each number in the list and returns a new list with the results.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if the string contains only uppercase letters, False otherwise.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function converts a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string is in uppercase or not.\n    '''\n\n    # converting all characters in the string to uppercase\n    uppercase_string = string.upper()\n\n    # checking if the resulting string is equal to the original string\n    if uppercase_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase, and False otherwise.\n    \"\"\"\n    for char in string:\n        if char.isupper():\n            return True\n    return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The given list is too short to swap its first and last element.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is 2 or less\n    if len(newList) <= 2:\n        return newList\n    # swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n        return\n    else:\n        # interchanging the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"After swapping:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # checking the length of the list\n    if len(newList) == 0:\n        print(\"The given list is empty.\")\n    elif len(newList) == 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # swapping the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # calling the recursive function to swap the remaining elements\n        swap_List(newList[1:-1])\n        # swapping the last and first element\n        newList[-1], newList[0] = newList[0], newList[-1]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n    # Get the first and last element of the list\n    first = newList[0]\n    last = newList[-1]\n    # Swap the first and last element\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) >= 2:\n        # Get the first and last elements of the list\n        first = newList[0]\n        last = newList[-1]\n        # Swap the first and last elements of the list\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The list must have at least 2 elements to swap.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: list must have at least two elements\")\n        return\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    s = 2 * math.sqrt(3)\n    a = (3 * s / 2) * r\n    b = (math.sqrt(3) / 2) * r\n    area = math.sqrt(a ** 2 + b ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r\n    s = (3 * r**2) / (4 * math.tan(math.pi/3))\n    area = math.sqrt(s * (s - a) * (s - a) + a * a)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    angle = 0\n    angle_increment = math.pi / 3  # triangle sides are a = 1\n    while angle < 2 * math.pi:\n        a = math.sin(angle) * r\n        b = math.cos(angle) * r\n        area = max(area, a * b)\n        angle += angle_increment\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to calculate the area of the largest triangle that can be inscribed in a semicircle\n    # r^2 = (a^2 + b^2 + c^2) / (2ab)\n    # a^2 = b^2 + c^2 - r^2\n    # a^2 = r^2 + c^2 - b^2\n    # a^2 = r^2 - c^2 + b^2\n    # a^2 = r^2 - (c^2 - b^2)\n    # a^2 = r^2 - (c^2)^2 + 2br^2 - 2bc^2\n    # a^2 = r^2 - (c^2)^2 + 4br^2 - 2bc^2\n    # a^2 = r^2 - (c^2)^2 + 4br^2 - 2bc^2 - 4br^2 + b^2\n    # a^2 = r^2 - (c^2)^2 + 4br^2 - 2bc^2 - 4br^2 + b^2 - r^2\n    # a^2 = r^2 - (c^2)^2 + 4br^2 - 2bc^2 - 4br^2 + b^2 - r^2 + c^2\n    # a^2 = r^2 - (c^2)^2 + 4br^2 - 2bc^2 - 4br^2 + b^2 - r^2 + c^2 + r^2\n    # a^2 = r^2 + c^2 - b^2\n    # a = c + sqrt(r^2 - b^2)\n    \n    # We need to find c using the given radius and the formula for the area of the largest triangle\n    # We are given that the largest triangle can have sides of length (c, b, a)\n    # and the angle between the longest side and any other side of the triangle must be less than 180 degrees\n    \n    # Let's first find the values of a, b, and c that satisfy the given constraints\n    c = math.sqrt(r**2 - r**2) # c is the longest side of the triangle\n    b = 2*c\n    a = math.sqrt(r**2 + b**2) # a is the smallest side of the triangle\n    \n    # Now we need to find the angle between the longest side and any other side of the triangle\n    # We will use the Pythagorean theorem to find the hypotenuse of the right triangle\n    # and the angle between the longest side and the right angle\n    right_angle = math.acos((a**2 + b**2 - c**2) / (2*a*b))\n    \n    # Now we need to find the angle between the longest side and any other side of the triangle\n    # We will use the Pythagorean theorem to find the hypotenuse of the right triangle\n    # and the angle between the longest side and the right angle\n    left_angle = math.acos((a**2 + b**2 - c**2) / (2*a*b))\n    \n    # We need to check if the angle between the longest side and any other side of the triangle is less than 180 degrees\n    # We can do this by comparing the left and right angles\n    if left_angle < right_angle:\n        # The angle between the longest side and any other side of the triangle is less than 180 degrees\n        # So, we can use the Pythagorean theorem to find the hypotenuse of the right triangle\n        # and the angle between the longest side and the right angle\n        right_hypotenuse = math.sqrt(a**2 + b**2)\n        right_angle = math.acos((a**2 + b**2 - c**2) / (2*a*b))\n        \n        # The area of the largest triangle that can be inscribed in a semicircle with a given radius is calculated as the product of the hypotenuse and the right angle\n        area = right_hypotenuse * right_angle\n        \n    else:\n        # The angle between the longest side and any other side of the triangle is greater than 180 degrees\n        # So, we can use the Pythagorean theorem to find the hypotenuse of the left triangle\n        # and the angle between the longest side and the"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Define the formula for the area of a triangle using Heron's formula:\n    # area = sqrt(s*(s-a)*(s-b)*(s-c))\n    # where s is the semiperimeter of the triangle\n    s = (3*r*r) / 4  # semiperimeter of a triangle with sides of length 2r\n    # find the largest semiperimeter:\n    max_s = max(s, 2*r*r)  # the largest semiperimeter is the smallest of the two sides of a triangle\n    # use Heron's formula to find the area:\n    area = max_s * (max_s - s) / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # First we calculate the semi-perimeter of the triangle\n    s = 2 * r\n    \n    # Next we calculate the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    s_max = (3 * r * r) / (4 * (1 + sqrt(5)))\n    \n    # Finally, we calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_max = (s_max * s_max) / (s * s_max)\n    \n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle\n    with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle\n\n    Returns:\n    float: The area of the largest triangle inscribed in the semicircle with radius r\n    '''\n\n    # The base of the triangle is the distance from the center of the semicircle to the equator\n    base = r\n\n    # The height of the triangle is the distance from the center of the semicircle to the point of\n    # maximum slope\n    height = r * (1 + 1 / r)\n\n    # The area of the triangle is the base times the height\n    area = base * height\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle's diameter\n    s = 2*r\n\n    # Calculate the areas of each triangle\n    a = math.sqrt(s*(s-r)*(s-2*r))\n    b = math.sqrt(s*(s-r)*(s-2*r))\n    c = math.sqrt(s*(s-r)*(s-2*r))\n\n    # Calculate the areas of the three largest triangles\n    max_area = max(a, b, c)\n\n    # Calculate the semi-circle's area\n    area = math.pi * r**2\n\n    # Return the maximum triangle's area\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = math.sqrt(3) / 2  # Height of the base of the triangle\n    area = 0.5 * r * (h ** 2)  # Area of the largest triangle that can be inscribed in a semicircle with radius r\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return None\n\n    mid = (start + end) // 2\n\n    if array[mid] < mid:\n        return find_First_Missing(array, mid + 1, end)\n    elif array[mid] > mid:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, start, mid - 1)\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not end:\n        end = max(array)\n\n    if start > end:\n        return 1\n\n    # Use binary search to find the first missing number\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < len(array) and array[mid] == mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (array) and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Check if the array is sorted\n    if len(array)!= len(set(array)):\n        return \"The given array is not sorted.\"\n\n    # Find the range of numbers in the array\n    if end is None:\n        end = max(array)\n\n    # Initialize the smallest missing number as None\n    smallest_missing = None\n\n    # Iterate over the range of numbers from start to end\n    for num in range(start, end + 1):\n        # Check if the current number is present in the array\n        if num not in array:\n            # If it is not present, set the smallest missing number as current number\n            if smallest_missing is None:\n                smallest_missing = num\n            else:\n                # If the current number is smaller than the current smallest missing number, update the smallest missing number\n                if num < smallest_missing:\n                    smallest_missing = num\n\n    # If no missing number is found, return None\n    if smallest_missing is None:\n        return None\n\n    # Return the smallest missing number\n    return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n            \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] == i:\n            continue\n        else:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    # Initialize an empty list to store even numbers\n    even_list = []\n\n    # Iterate through the list and append even numbers to the even_list\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list with all the even numbers from the input list.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    dx, dy = (-1, 0), (1, 0), (0, -1), (0, 1)\n    n = len(dx)\n    for i in range(n):\n        for j in range(n):\n            x += dx[i]\n            y += dy[j]\n            if x >= 0 and y >= 0 and x < 9 and y < 9:\n                if (x, y) not in sub:\n                    sub.append((x, y))\n            x -= dx[i]\n            y -= dy[j]\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 and j!= 0:\n                if (i, j)!= (0, 0):\n                    new_coord = (ele[0] + i, ele[1] + j)\n                    if new_coord not in sub:\n                        adj.append(new_coord)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    # add the starting point to the sublist\n    sub.append(ele)\n\n    # get the adjacent coordinates\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\n    # return the sublist of adjacent coordinates\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Check if the element is a tuple\n    if isinstance(ele, tuple):\n        # Append the tuple to the sub list\n        sub.append(ele)\n        # Extract the adjacent coordinates from the tuple\n        x1, y1 = ele\n        for x2 in range(x1 - 1, x1 + 2):\n            for y2 in range(y1 - 1, y1 + 2):\n                # Check if the coordinates are within the boundaries of the matrix\n                if 0 <= x2 < n and 0 <= y2 < m:\n                    # Append the adjacent coordinate to the sub list\n                    sub.append((x2, y2))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if x == y == 0:\n                continue\n            adj = tuple(ele[0] + x, ele[1] + y)\n            if adj not in sub:\n                sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x, y = ele\n    if y > 0:\n        adj.append((x, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if y < 3:\n        adj.append((x, y+1))\n    if x < 3:\n        adj.append((x+1, y))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # extract x and y coordinates from the given element\n    x, y = ele\n\n    # create a list to store the adjacent coordinates\n    adjacents = []\n\n    # iterate over all possible adjacent pairs of x and y coordinates\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            # check if the adjacent pair is within the boundaries of the grid and if it's not already in the list\n            if 0 <= i < len(sub) and 0 <= j < len(sub[0]):\n                if (i,j) not in adjacents and sub[i][j] =='':\n                    adjacents.append((i,j))\n\n    return adjacents"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == y:\n        return []\n    elif x < y:\n        return [(x+1,y), (x,y-1), (x-1,y)]\n    else:\n        return [(x+1,y), (x,y+1), (x-1,y)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n\n    if isinstance(ele, tuple) and len(ele) == 2:\n        x, y = ele\n        sub.append((x-1, y))\n        sub.append((x+1, y))\n        sub.append((x, y-1))\n        sub.append((x, y+1))\n\n        return sub\n    else:\n        return adjac(ele[0], sub) + adjac(ele[1], sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # extract row and column coordinates of the given element\n    row, col = ele\n\n    # create a list to store adjacent coordinates\n    adj = []\n\n    # iterate over all possible adjacent row and column coordinates\n    for i in range(row - 1, row + 2):\n        for j in range(col - 1, col + 2):\n\n            # check if the adjacent element is within the matrix boundaries and if it's not the same element\n            if 0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and i!= row and j!= col:\n\n                # append the adjacent coordinate to the list\n                adj.append((i, j))\n\n    # return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    new_text = text.replace(\" \", \"_\") # replace spaces with underscores\n    new_text = new_text.replace(\"_\", \" \") # replace underscores with spaces\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    # Split the input string into words\n    words = text.split()\n    \n    # Iterate over each word\n    for i, word in enumerate(words):\n        # Check if the word contains whitespaces\n        if any(c.isspace() for c in word):\n            # Replace spaces with underscores\n            words[i] = word.replace(' ', '_')\n        else:\n            # Replace underscores with spaces\n            words[i] = word.replace('_','')\n    \n    # Join the words back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all spaces to underscores\n    text = text.replace(\" \", \"_\")\n    # Convert all underscores to spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n\n    # Replace underscores with spaces\n    text = text.replace('_','')\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a dictionary to replace whitespaces with underscores\n    replace_dict = {' ': '_',\n                    '\\t': '_',\n                    '\\n': '_',\n                    '\\r': '_',\n                    '\\f': '_',\n                    '\\v': '_',\n                    '\\a': '_',\n                    '\\b': '_',\n                    '\\x1b': '_'}\n\n    # Loop through each character in the string\n    for i in range(len(text)):\n        # If the character is in the dictionary, replace it with the corresponding underscore\n        if text[i] in replace_dict:\n            text = text[:i] + replace_dict[text[i]] + text[i+1:]\n        # If the character is not in the dictionary, do nothing\n        else:\n            pass\n\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Loop through each character of the string\n    for i in range(len(text)):\n        # If the character is a whitespace, replace it with an underscore\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        # If the character is not a whitespace, replace it with a space\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    # Return the modified string\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n\n    for i in range(len(num_list)-1, zero_index-1, -1):\n        num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = None\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            zero_index = index\n            break\n    if zero_index is not None:\n        for i in range(len(num_list)-1, zero_index, -1):\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store the non-zero numbers\n    non_zero_list = []\n    # iterate through the given list\n    for num in num_list:\n        # if the number is not zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    # append all the zeros to the end of the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    # initialize two pointers - one at the beginning of the list and one at the end\n    # pointers will keep moving until they meet each other\n    i = 0\n    j = len(num_list) - 1\n\n    while i < j:\n        # if the element at the beginning of the list is not zero, move it to the next element\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            # if the element at the beginning of the list is zero, move it to the end of the list\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, left and right, at the beginning of the list\n    left = 0\n    right = 0\n    \n    # while right is less than the length of the list\n    while right < len(num_list):\n        # if the current element is not zero\n        if num_list[right]!= 0:\n            # move the current element to the left pointer\n            num_list[left] = num_list[right]\n            left += 1\n            # move the right pointer to the next element\n            right += 1\n        # if the current element is zero, move the right pointer to the next element\n        else:\n            right += 1\n    \n    # return the updated list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    for i in range(len(num_list)-1, zero_count-1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_count-1] = num_list[zero_count-1], num_list[i]\n            zero_count -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a copy of the list to avoid modifying the original list\n    temp_list = num_list.copy()\n    # Initialize two pointers, one at the beginning of the list and the other at the end\n    i = 0\n    j = len(temp_list) - 1\n    # Traverse the list from both ends\n    while i < j:\n        # If the current element is not zero\n        if temp_list[i]!= 0:\n            # Move the current element to the next position\n            temp_list[i], temp_list[j] = temp_list[j], temp_list[i]\n            # Move the pointers towards each other\n            i += 1\n            j -= 1\n        # If the current element is zero, move the pointer towards the middle\n        else:\n            i += 1\n    # Return the modified list\n    return temp_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n\n    # Find the first index of zero\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    # Move all zeroes to the end of the list\n    if zero_index!= -1:\n        for i in range(len(num_list)-1, zero_index, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum variable to 0\n    sum_xor = 0\n\n    # Iterate through the array and calculate the xor of each pair of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n\n    # Return the sum of xor of all pairs of elements\n    return sum_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            total_sum += xor\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate over the first n elements of the array\n    for i in range(n):\n        # iterate over the next n-1 elements of the array\n        for j in range(i+1, n):\n            # calculate the xor of the current pair\n            xor = arr[i] ^ arr[j]\n            # add the xor to the sum\n            sum += xor\n    # return the sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor = sum(arr)\n\n    # XOR of all pairs of elements\n    xor_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_pairs ^= arr[i] ^ arr[j]\n\n    # Return the sum of xor of all pairs of elements and the xor of all elements\n    return xor_pairs + xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of n integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor += arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n\n    # Sort the heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n\n    # create a max heap from the list\n    hq.heapify(iterable)\n\n    # create a new list to store the sorted elements\n    sorted_list = []\n\n    # while the heap is not empty\n    while hq.heapq():\n        # extract the maximum element from the heap\n        max_element = hq.heappop(iterable)\n\n        # add the maximum element to the sorted list\n        sorted_list.append(max_element)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the list to a heap\n    heap = iterable\n    hq.heapify(heap)\n\n    # Sorting the heap\n    for i in range(len(iterable)-1, 0, -1):\n        # Extracting the maximum element from the heap\n        max_val = hq.heappop(heap)\n        # Inserting the maximum element at the end of the sorted list\n        iterable[i] = max_val\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the iterable\n    heap = hq.heapify(iterable)\n\n    # remove and return the minimum element from the heap\n    return [hq.heappop(heap) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    heap = hq.heapify(iterable)\n\n    # Extract the minimum element from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted_list = []\n    # Build heap\n    for item in iterable:\n        hq.heappush(sorted_list, item)\n    # Pop items from heap and add to sorted_list\n    while sorted_list:\n        sorted_list.append(hq.heappop(sorted_list))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given iterable using the heap sort algorithm.\n\n    Args:\n    iterable: An iterable object to be sorted.\n\n    Returns:\n    A sorted iterable.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Initialize profit and loss variables\n    profit = 0\n    loss = 0\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is greater than or equal to zero and loss is less than or equal to zero\n    if profit >= 0 and loss <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return \"Profit or Loss cannot be determined\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount <= actual_cost:\n        print(\"No profit and no loss\")\n        return True\n    else:\n        print(\"Profit or loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (float): The actual cost of the sale\n        sale_amount (float): The amount that was sold\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise\n    \"\"\"\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount >= actual_cost:\n        print(\"The given amount has no profit and no loss\")\n        return True\n    else:\n        print(\"The given amount has a profit\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Check if actual_cost is greater than sale_amount\n    if actual_cost > sale_amount:\n        return False\n    \n    # Check if actual_cost is equal to sale_amount\n    elif actual_cost == sale_amount:\n        return True\n    \n    # Check if actual_cost is less than sale_amount\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        return True \n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < 0:\n        raise ValueError(\"Temperature cannot be negative\")\n    if v < 0:\n        raise ValueError(\"Wind velocity cannot be negative\")\n    if v == 0:\n        return 0\n\n    # Calculate the heat index using the formula:\n    #   (t - 32) * (1.8 - 0.14 * t) / (v * (1 - 0.14 * t)) + 32\n    # where t is the temperature in celsius, v is the wind velocity in km/h, and the constant values are from the National Weather Service.\n    heat_index = int((t - 32) * (1.8 - 0.14 * t) / (v * (1 - 0.14 * t)) + 32)\n\n    # Convert the heat index to a wind chill index using the following formula:\n    #   wind chill = round(heat index - 459.67 * math.log(v * 0.06115 / (t + 273.15)))\n    wch = round(heat_index - 459.67 * math.log(v * 0.06115 / (t + 273.15)))\n\n    # Check if the wind chill index is within the valid range of 0 to 35.\n    if wch < 0:\n        wch = 0\n    elif wch > 35:\n        wch = 35\n\n    return wch"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 20\n    R = 287.05 # J/kg/K\n    T = t + 273.15 # K\n    A = 6.112 * math.exp((17.67*(T/237.3))/((T/237.3) + 243.5)) # K\n    V = v * 1.60934 # m/s -> km/h\n    P = A * math.exp(17.67 * (T/237.3) / ((T/237.3) + 243.5)) # Pa\n    q = 131.25 * math.exp(0.0065 * (T/237.3)) # K/m^2\n    h = (2 * P * R * T) / (V ** 2) # J/kg\n    S = h + 0.6219 * (1 - 0.622 * (T/237.3)) * T # J/kg\n    delta_h = (2 * P * R * T) / (V ** 2) - S\n    chill = round(delta_h / (1 - q * (1 - 0.14 * (T/237.3))))\n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to Kelvin\n    t = t + 273.15\n\n    # calculate the absolute temperature difference\n    delta = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(t, 3)\n\n    # calculate the heat index\n    hi = math.floor(v / (2 * math.exp(17.625 * ((t - delta) / delta))))\n\n    # calculate the wind chill index\n    wci = 23 - hi\n\n    # round the result to the nearest integer\n    result = math.ceil(wci)\n\n    return result"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    celsius_to_kelvin = 273.15\n    kelvin_to_fahrenheit = 9/5\n    kelvin_to_rankine = 5/9\n    kelvin_to_celsius = 1\n\n    kelvin = v * celsius_to_kelvin + (t + 273.15) * kelvin_to_fahrenheit * kelvin_to_celsius\n    rankine = kelvin_to_rankine * kelvin\n    chill_index = round((13.12 + 0.6215 * t + 11.37 * math.pow(t, 0.16)) / (math.pow(rankine, 0.16) + 11.37))\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.621972  # specific heat capacity of dry air at constant pressure [J/kg/K]\n    r = 0.0065  # ratio of water vapor pressure to dry air pressure [kg/kg]\n    v_wind = v * 1.60934  # convert wind velocity from km/h to m/s\n    # calculate the heat capacity ratio\n    delta_c = c / r\n    # calculate the absolute temperature difference\n    delta_T = abs(t - 273.15)\n    # calculate the heat capacity at constant pressure\n    cp = c * (t + 273.15) / 2  # dry air at constant pressure [J/kg/K]\n    # calculate the heat capacity at constant pressure and temperature difference\n    cp_diff = cp + delta_c * delta_T\n    # calculate the temperature difference at constant pressure\n    delta_T_const = (cp_diff - cp) / cp\n    # calculate the temperature difference at constant pressure and temperature difference\n    delta_T_const_diff = delta_T_const + delta_c * delta_T\n    # calculate the wind chill index\n    wchill = 35.74 + 0.6215 * v_wind - 35.75 * math.log(v_wind) + 0.4275 * delta_T_const_diff\n    # round the wind chill index to the nearest integer\n    wchill_rounded = math.ceil(wchill)\n    return wchill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the dew point temperature (\u00b0C) from the given temperature (\u00b0C) and wind speed (m/s)\n    def dew_point(T, u):\n        return 243.04 * (17.625 * T) / (T + 243.04 * (17.625 * T) / (u + 0.35))\n    \n    # Calculate the wind chill (\u00b0C) from the dew point temperature and wind speed\n    def wind_chill_calc(T, u):\n        return math.floor((23.44 * math.log(T/dew_point(T,u))) - 36.77)\n    \n    # Calculate the wind chill index (\u00b0C) from the wind chill (\u00b0C)\n    def wind_chill_index(wc):\n        return math.ceil(wc / 10.0) * 10.0\n    \n    # Call the wind chill function and return the result\n    return wind_chill_index(wind_chill_calc(t, v))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature using the formula:\n    # Chill = (13.12 + 0.6215T) - (0.3965V^0.16) + 11.37\n    chill = (13.12 + 0.6215*t) - (0.3965*v**0.16) + 11.37\n\n    # Calculate the wind chill index using the formula:\n    # WCI = 13.12 - 0.7557 * T + 0.2246 * V + 10.44 * log(R)\n    wci = 13.12 - 0.7557*t + 0.2246*v + 10.44*math.log(v/34.5)\n\n    # Round the wind chill index to the nearest integer\n    wci_rounded = round(wci)\n\n    # Return the rounded wind chill index\n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_mps = v * 1609.34 # convert from km/h to m/s\n    temp_c = t - 273.15 # convert from celsius to kelvin\n    \n    chill_temp = 23.7 + 0.6215 * temp_c + 10.794 * math.exp((temp_c - 23.7) / (23.7 + 0.4275 * temp_c))\n    chill_temp = max(chill_temp, 13.12 + 0.6215 * temp_c + 10.794 * math.exp((temp_c - 13.12) / (13.12 + 0.4275 * temp_c)))\n    \n    chill_index = round((chill_temp - wind_speed_mps ** 0.16) / (temp_c - wind_speed_mps ** 0.16))\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 0.621371 # Convert km/h to m/s\n    \n    if wind_speed <= 0.5: # If the wind speed is below 0.5 m/s, calculate the temperature in Fahrenheit\n        temperature = (t * 9/5) + 32\n    else: # If the wind speed is above 0.5 m/s, calculate the temperature in Celsius\n        temperature = t\n    \n    # Calculate the wind chill index using the formula:\n    wind_chill_index = (66.45 + (0.4275 * temperature) - (35.75 * math.log(wind_speed))) * (1 - 0.0065 * temperature)\n    \n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 3.6 # convert km/h to m/s\n    c = 100 # convert celsius to Kelvin\n    k = 25.0 # constant temperature (Kelvin)\n    rv = 10.0 # relative vapour pressure (mbar)\n    alpha = 0.611 # gas constant of dry air (J/(kg*K))\n\n    # calculate the air density (kg/m^3)\n    rho = math.sqrt(rv/k)*math.exp(alpha*(k-t)/(t+273.15))\n\n    # calculate the moisture content (kg/kg)\n    wv = v*w/rho # wind speed in m/s\n    wv = wv*math.sqrt(1+(math.pow(wv,2)/math.pow(rho,2))) # correction factor for moisture content\n\n    # calculate the wind chill index\n    wc = 35.72 + 0.6215*t - 35.75*math.log(wv) + 0.4275*t*math.log(wv) - 0.1462*math.pow(t,2) + 0.0177*math.pow(t,3)\n\n    # round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a counter to keep track of the sum of the lengths of the names\n    length_sum = 0\n    \n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # if it is, skip it and move on to the next name in the list\n            continue\n        # if the first letter is not lowercase, add the length of the name to the length_sum counter\n        length_sum += len(name)\n    \n    # return the length_sum counter\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of the lengths of the names\n    name_sum = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If it is, skip to the next name\n            continue\n        else:\n            # If it's not, add the length of the name to the sum\n            name_sum += len(name)\n\n    # Return the sum of the lengths of the names after removing the lowercase names\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Define a list of lowercase letters\n    lowercase_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # Loop through the list of names\n    total_length = 0\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it\n        if name[0].lower() in lowercase_letters:\n            continue\n        # Add the length of the name to the total length\n        total_length += len(name)\n\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    start_with_lower = []\n    \n    # iterate over each name in the sample_names list\n    for name in sample_names:\n        # check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # if it is, append the name to the start_with_lower list\n            start_with_lower.append(name)\n    \n    # initialize the total length of the names to 0\n    total_length = 0\n    \n    # iterate over each name in the start_with_lower list\n    for name in start_with_lower:\n        # add the length of the name to the total_length\n        total_length += len(name)\n    \n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    matches = re.findall(pattern, items)\n\n    for match in matches:\n        items = items.replace('({})'.format(match), '', 1)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define the regular expression pattern to match parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    # apply the pattern to the input string\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to remove the parenthesis and what is inbetween them\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression to match parenthesis\n    pattern = r'\\((.*?)\\)'\n    # Use the findall() function to find all matches in the string\n    matches = re.findall(pattern, items)\n    # Loop through each match and remove the parentheses and what's between them\n    for match in matches:\n        items = items.replace(match, match.replace('(', '').replace(')', ''))\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an input and returns a new string without the parenthesis and what is inbetween them.\n    '''\n    pattern = r'\\([^)]*\\)' # regex pattern to match parenthesis\n    result = re.sub(pattern, '', items) # remove the parenthesis using re.sub()\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    matches = re.findall(pattern, items)\n    items_without_parenthesis = []\n    for item in matches:\n        items_without_parenthesis.extend(item.split())\n    return''.join(items_without_parenthesis)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile('\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    return n*(n+1)/2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the variable to store the result\n    result = 0\n\n    # Loop through the range from 1 to n\n    for i in range(1, n + 1):\n        # Add the square of i to the result\n        result += i ** 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # initialize variables for a and b\n    a = 1\n    b = 4\n\n    # loop through the first n-1 rows\n    for i in range(1, n-1):\n        # calculate the current row by summing up the squares of its two adjacent numbers\n        row = a**2 + b**2\n\n        # update variables for a and b\n        a = b\n        b = row\n\n    # return the final value of b, which is the nth nonagonal number\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    else:\n        # Initialize variables for the sum of squares and the number of squares\n        square_sum = 1\n        square_count = 1\n\n        # Initialize variables for the sum of cubes and the number of cubes\n        cube_sum = 1\n        cube_count = 1\n\n        # Loop through all numbers less than or equal to n\n        for i in range(1, n+1):\n            # Add the sum of squares and the number of squares to the sum of squares and the number of squares for the next iteration\n            square_sum += square_sum + square_count\n            square_count += 1\n\n            # Add the sum of cubes and the number of cubes to the sum of cubes and the number of cubes for the next iteration\n            cube_sum += cube_sum + cube_count\n            cube_count += 1\n\n            # Check if the sum of squares and the number of squares exceeds n and if the sum of cubes and the number of cubes equals n\n            if square_sum > n and cube_sum == n:\n                # Return the sum of squares and the number of squares\n                return square_sum + square_count\n\n        # If no nonagonal numbers are found, return None\n        return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * (2*i - 1)\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    for i in range(n+1):\n        nonagonal += i*(2*i-1)\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n    \"\"\"\n    # Define the number of rows in a triangle\n    num_rows = n // 2\n\n    # Compute the height of each row\n    row_heights = [i * 2 for i in range(num_rows)]\n\n    # Compute the total number of nonagonal numbers\n    num_nonagons = 0\n    for i in range(num_rows):\n        num_nonagons += (row_heights[i] + 1) * (row_heights[i] + 2) // 2\n\n    return num_nonagons"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n+1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Create a list of integers from 1 to n\n    nums = list(range(1, n+1))\n\n    # Calculate the sum of the squares of the even numbers\n    even_squares_sum = sum(x**2 for x in nums if x % 2 == 0)\n\n    # Calculate the sum of the squares of the odd numbers\n    odd_squares_sum = sum(x**2 for x in nums if x % 2!= 0)\n\n    # Return the sum of the squares of the odd numbers\n    return odd_squares_sum - even_squares_sum"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ].*[zZ]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    words = word_pattern.findall(text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern for matching 'z' except at the start and end of a word\n    pattern = r'\\b(z)\\w+\\b'\n    # Use the re.search() method to search for the pattern in the text\n    result = re.search(pattern, text)\n    # Check if the result is None, indicating that the pattern was not found\n    if result is None:\n        return False\n    # Check if the result is at the beginning or end of the string\n    elif result.start() == 0 or result.end() == len(text):\n        return False\n    # If the result is in the middle of the string, check if the character before it is a vowel and after it is not a vowel\n    elif text[result.start() - 1].lower() in ['a', 'e', 'i', 'o', 'u'] and text[result.end()].lower() not in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b[a-zA-Z]*\\b'\n    regex = re.compile(pattern)\n    return regex.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z][a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[a-zA-Z]{2,}\\b')\n    return pattern.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    \n    # Check if the word 'z' exists in the middle of the words\n    for i in range(len(words)):\n        # Check if the word is at the start of the string\n        if i == 0 and words[i] == 'z':\n            continue\n        # Check if the word is at the end of the string\n        elif i == len(words) - 1 and words[i] == 'z':\n            continue\n        # Check if the word is in the middle of the string\n        else:\n            if 'z' in words[i]:\n                return True\n    \n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b[a-zA-Z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r\"\\b[a-z]*z[a-z]*\\b\"\n    return bool(re.search(regex, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]+z[a-zA-Z0-9]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array starting from the first index.\n    input.reverse()\n    # Reverse the array up to the given position.\n    input[:k].reverse()\n    # Return the reversed array.\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n): \n        if i < k-1: \n            input[i], input[k-1-i] = input[k-1-i], input[i] \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new list\n    output = []\n    # Loop through the input array\n    for i in input:\n        # If the current index is less than k, append the current element to the output list\n        if i < k:\n            output.append(i)\n        # If the current index is equal to k, append the reversed array from index k-1 to n to the output list\n        elif i == k:\n            n = len(input)\n            for j in range(k, n):\n                output.append(input[j])\n            # Reverse the output list\n            output.reverse()\n        # If the current index is greater than k, ignore it\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to end\n    input[k:] = input[k:][::-1]\n    # Reverse the entire array\n    input[:] = input[:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)):\n        if i > k:\n            input[i], input[k] = input[k], input[i]\n            k -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Define the initial and final position of the reversed array\n    start_pos = 0\n    end_pos = k-1\n    \n    # Iterate over the input array from start to end_pos and swap elements\n    while start_pos < end_pos:\n        input[start_pos], input[end_pos] = input[end_pos], input[start_pos]\n        start_pos += 1\n        end_pos -= 1\n    \n    # Print the reversed array\n    print(\"Reversed Array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    for i in range(k): \n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # if k is greater than or equal to n, return the original array\n    if k >= n:\n        return input\n    \n    # store the first k elements of the array in reverse order\n    reverse_array = input[0:k][::-1]\n    \n    # copy the remaining elements of the array to the end of the reverse array\n    for i in range(k, n):\n        reverse_array.append(input[i])\n    \n    # return the reversed array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # reverse the first k elements of the array\n    input = input[:k][::-1]\n    # reverse the remaining elements of the array\n    input = input[k:][::-1]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict, **test_tup}\n    return new_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (value, )\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    return tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict} # unpacking the dictionary into a new dictionary\n    new_tup = tuple(test_tup) + (new_dict,) # concatenating the tuple and the new dictionary into a new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a tuple\n    test_dict = tuple(test_dict.items())\n    # concatenate the tuple with the input tuple\n    new_tup = test_tup + test_dict\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    test_tup += (test_dict,)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_avg = float('-inf')\n    max_path = None\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j] and i == 0 and j == 0:\n                visited[i][j] = True\n                avg = cost[i][j]\n                visited[i][j] = False\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(i, j)]\n                elif avg == max_avg:\n                    max_path.append((i, j))\n                if i == N - 1 and j == N - 1:\n                    break\n                if not visited[i+1][j] and i+1 < N:\n                    visited[i+1][j] = True\n                    avg += cost[i+1][j]\n                    visited[i+1][j] = False\n                if not visited[i][j+1] and j+1 < N:\n                    visited[i][j+1] = True\n                    avg += cost[i][j+1]\n                    visited[i][j+1] = False\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def is_valid_path(path):\n        # Check if all rows and columns are visited only once.\n        rows = {}\n        cols = {}\n        for i, cell in enumerate(path):\n            rows[i] = rows.get(i, 0) + 1\n            cols[cell[1]] = cols.get(cell[1], 0) + 1\n            if rows[i] > 1 or cols[cell[1]] > 1:\n                return False\n        return True\n\n    def is_better_path(path1, path2):\n        # Check if path1 is better than path2 in terms of average cost.\n        if sum(cost[i][j] for i, j in path1) == sum(cost[i][j] for i, j in path2):\n            return sum(cost[i][j] for i, j in path1) > sum(cost[i][j] for i, j in path2)\n        else:\n            return sum(cost[i][j] for i, j in path1) < sum(cost[i][j] for i, j in path2)\n\n    def dfs(node, path, visited_cells):\n        # Base case: if node is bottom right cell, update max_path and return.\n        if node[0] == N-1 and node[1] == N-1:\n            path_cost = sum(cost[i][j] for i, j in path)\n            max_path_cost = max(max_path_cost, path_cost)\n            return\n\n        # Check if this cell is already visited or if the path is not valid.\n        if (node[0], node[1]) in visited_cells or not is_valid_path(path):\n            return\n\n        # Otherwise, update visited_cells and move to the next cell.\n        visited_cells.add((node[0], node[1]))\n        path.append((node[0], node[1]))\n\n        # DFS for the next cell.\n        dfs((node[0], node[1]+1), path, visited_cells)\n        dfs((node[0]+1, node[1]), path, visited_cells)\n\n        # Backtrack and remove the last cell from the path.\n        visited_cells.remove((node[0], node[1]))\n        path.pop()\n\n    # Initialize max_path_cost and visited_cells.\n    max_path_cost = 0\n    visited_cells = set()\n\n    # DFS starting from the top-left cell.\n    dfs((0, 0), [(0, 0)], visited_cells)\n\n    # Return max_path_cost.\n    return max_path_cost / len(visited_cells)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(x, y, visited, path, max_avg, total_cost):\n        visited[x][y] = True\n        path.append((x, y))\n        if x == n-1 and y == n-1:\n            avg = total_cost / (len(path) * (n-1))\n            if avg > max_avg:\n                max_avg = avg\n        else:\n            if x < n-1:\n                dfs(x+1, y, visited, path, max_avg, total_cost)\n            if y < n-1:\n                dfs(x, y+1, visited, path, max_avg, total_cost)\n        path.pop()\n        visited[x][y] = False\n    \n    n = len(cost)\n    max_avg = 0\n    visited = [[False for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if cost[i][j] == 0 and not visited[i][j]:\n                dfs(i, j, visited, [(i, j)], max_avg, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    \n    # Helper function to check if the path is valid\n    def is_valid(path, visited):\n        \"\"\"\n        Helper function to check if the path is valid\n        \"\"\"\n        top, bottom = len(path), len(cost)\n        left, right = len(path[0]), len(cost[0])\n        \n        if path[0][0]!= (0, 0) or path[-1][-1]!= (top-1, right-1):\n            return False\n        \n        for i, j in path:\n            if i < 0 or i >= top or j < 0 or j >= right or (i, j) in visited:\n                return False\n        \n        return True\n    \n    # Helper function to compute the average of the path\n    def compute_average(path):\n        \"\"\"\n        Helper function to compute the average of the path\n        \"\"\"\n        total_cost = 0\n        visited = set()\n        for i, j in path:\n            total_cost += cost[i][j]\n            visited.add((i, j))\n        \n        return total_cost / len(visited)\n    \n    # Helper function to find the maximum average path\n    def find_max_average_path(i, j, visited, path, max_avg):\n        \"\"\"\n        Helper function to find the maximum average path\n        \"\"\"\n        if is_valid(path, visited):\n            avg = compute_average(path)\n            if avg > max_avg:\n                max_avg = avg\n        \n        if i < len(cost)-1:\n            find_max_average_path(i+1, j, visited, path, max_avg)\n        \n        if i > 0:\n            find_max_average_path(i-1, j, visited, path, max_avg)\n        \n        if j < len(cost[0])-1:\n            find_max_average_path(i, j+1, visited, path, max_avg)\n        \n        if j > 0:\n            find_max_average_path(i, j-1, visited, path, max_avg)\n        \n        return max_avg\n    \n    # Helper function to initialize the visited set\n    def init_visited():\n        \"\"\"\n        Helper function to initialize the visited set\n        \"\"\"\n        visited = set()\n        for i in range(len(cost)):\n            for j in range(len(cost[0])):\n                visited.add((i, j))\n        return visited\n    \n    # Initialize the maximum average and visited set\n    max_avg = 0\n    visited = init_visited()\n    \n    # Find the maximum average path\n    find_max_average_path(0, 0, visited, [(0, 0)], max_avg)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    max_avg = 0\n    \n    # Iterate through all paths\n    for i in range(N):\n        for j in range(N):\n            \n            # Check if current cell is a valid path endpoint\n            if (i == N-1 and j == N-1) or (i+1 == N and j == N-1) or (i == N-1 and j+1 == N) or (i+1 == N and j+1 == N):\n                \n                # Initialize variables for current path\n                curr_path = []\n                curr_sum = 0\n                curr_count = 0\n                \n                # Recursively calculate average for current path\n                def pathAverage(x, y):\n                    nonlocal curr_path, curr_sum, curr_count\n                    curr_count += 1\n                    \n                    # Check if current cell is the path endpoint\n                    if (x == N-1 and y == N-1) or (x+1 == N and y == N-1) or (x == N-1 and y+1 == N) or (x+1 == N and y+1 == N):\n                        curr_sum += cost[x][y]\n                        \n                        # Check if the path has a higher average\n                        if curr_count > 1:\n                            avg = curr_sum / curr_count\n                            if avg > max_avg:\n                                max_avg = avg\n                                \n                        # Add current cell to path\n                        curr_path.append([x, y])\n                        \n                    # Move to next cell in the path\n                    if x+1 < N:\n                        pathAverage(x+1, y)\n                    if y+1 < N:\n                        pathAverage(x, y+1)\n                    \n                    # Backtrack to remove the last cell from the path\n                    if len(curr_path) > 1:\n                        curr_sum -= cost[curr_path[-2][0]][curr_path[-2][1]]\n                        curr_count -= 1\n                        curr_path.pop()\n                        \n                # Start the path at the current cell\n                pathAverage(i, j)\n                \n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            left = cost[i-1][j]\n            top = cost[i][j-1]\n            bottom = cost[i][j+1]\n            right = cost[i+1][j]\n            top_left = cost[i-1][j-1]\n            if left < top_left:\n                dp[i][j] = dp[i-1][j] + left + top_left + top + bottom + right\n            elif top < top_left:\n                dp[i][j] = dp[i][j-1] + top + top_left + left + bottom + right\n            elif top_left < left:\n                dp[i][j] = dp[i-1][j-1] + left + top_left + top + bottom + right\n            else:\n                dp[i][j] = dp[i-1][j-1] + left + top_left + top + bottom + right\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    # Base case: If cost at top-left is zero, then there is no path to visit\n    dp[0][0] = 0 if cost[0][0] == 0 else float('inf')\n    \n    # Fill up the dp array\n    for i in range(1, N):\n        for j in range(1, N):\n            # If cost at top-left is zero, then there is no path to visit\n            if cost[i][j] == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                # If cost at current cell is greater than cost at top-left, then\n                # there is no path to visit, otherwise, take the maximum of the two options\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                # Add the cost of the current cell to the path and subtract it from the maximum\n                dp[i][j] += cost[i][j]\n                \n    # Find the maximum average of all paths\n    max_avg = max(dp[N-1][N-1])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    max_avg = 0\n    max_path = None\n    \n    # loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            # compute current cell cost\n            curr_cost = cost[i][j]\n            \n            # if this is the starting cell, update max_avg\n            if i == 0 and j == 0:\n                max_avg = curr_cost\n                max_path = [(i,j)]\n                \n            # if this is not the starting cell, check if we can move to adjacent cells\n            else:\n                # check if we can move right\n                if i < len(cost)-1 and cost[i+1][j] < curr_cost:\n                    curr_cost = min(cost[i+1][j], curr_cost)\n                # check if we can move down\n                elif j < len(cost[0])-1 and cost[i][j+1] < curr_cost:\n                    curr_cost = min(cost[i][j+1], curr_cost)\n                    \n                # update max_avg if we found a better path\n                if curr_cost > max_avg:\n                    max_avg = curr_cost\n                    max_path = [(i,j)]\n                    \n    # if no path is found, return None\n    if max_path is None:\n        return None\n    \n    # compute total cost and number of cells visited in the path\n    total_cost = 0\n    num_cells = 1\n    for cell in max_path:\n        total_cost += cost[cell[0]][cell[1]]\n        num_cells += 1\n        \n    # compute average cost and return result\n    avg_cost = total_cost/num_cells\n    return avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    \n    # initialize the first row and column\n    row_sum = [0]*N\n    col_sum = [0]*N\n    \n    # compute the sums for each row and column\n    for i in range(N):\n        row_sum[i] += cost[0][i]\n        col_sum[i] += cost[i][0]\n    \n    # compute the sum of the diagonal elements\n    diag_sum = sum(cost[i][i] for i in range(N))\n    \n    # compute the maximum average over all paths\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                row_sum[i] += cost[i][j]\n                col_sum[j] += cost[i][j]\n                diag_sum += cost[i][j]\n                \n            # compute the sum of the elements in this path\n            path_sum = row_sum[i] + col_sum[j] + diag_sum\n            \n            # update the max_avg if this path has a higher average than the current max_avg\n            if path_sum > max_avg:\n                max_avg = path_sum\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the matrix with the top-left cell as 0,0 and the bottom-right cell as N-1,N-1\n    for i in range(len(cost)):\n        cost[i][0] += cost[0][i]\n    for i in range(len(cost)-1):\n        cost[i][len(cost)-1] += cost[i][len(cost)-1]\n    for j in range(len(cost[0])-1):\n        cost[0][j] += cost[0][j]\n        cost[len(cost)-1][j] += cost[len(cost)-1][j]\n\n    # Initialize the maximum average to be the first cell's cost\n    max_avg = cost[0][0]\n\n    # Loop through the matrix and compute the average of the paths that start from each cell\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[0])):\n            # Compute the total cost of the path starting from (i,j) and ending at (i-1,j-1)\n            cost_i_j = cost[i-1][j-1] + cost[i][j] - cost[i-1][j] - cost[i][j-1]\n\n            # Update the maximum average if necessary\n            if cost_i_j > max_avg:\n                max_avg = cost_i_j\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    # Iterate over each student\n    filtered_students = {}\n    for name, data in students.items():\n        # Extract the height and weight of the student\n        height, weight = data\n\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered dictionary\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize an empty dictionary to store the count of each element\n    count = {}\n    \n    # Loop through the first list\n    for i in range(len(nums1)):\n        # If the element exists in the dictionary, increment the count\n        if nums1[i] in count:\n            count[nums1[i]] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count[nums1[i]] = 1\n            \n    # Loop through the second list\n    for i in range(len(nums2)):\n        # If the element exists in the dictionary and its count is equal to 1, increment the count for the element in the dictionary\n        if nums2[i] in count and count[nums2[i]] == 1:\n            count[nums2[i]] += 1\n        # If the element exists in the dictionary but its count is not equal to 1, increment the count for the element in the dictionary\n        elif nums2[i] in count:\n            count[nums2[i]] += 1\n            \n    # Initialize an empty list to store the indices of the elements with the same value\n    same_indices = []\n    \n    # Loop through the dictionary and append the indices to the same_indices list where the count is equal to 1\n    for i in count:\n        if count[i] == 1:\n            same_indices.append(i)\n            \n    # Return the same_indices list\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize the count variable to 0\n    count = 0\n\n    # loop through the lists\n    for i in range(len(nums1)):\n        # check if the element at the current index in both lists is equal using the eq operator\n        if eq(nums1[i], nums2[i]):\n            # increment the count variable by 1\n            count += 1\n\n    # return the count variable\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize a variable to hold the sum of digits\n    total = 0\n    \n    # loop through each digit in the base\n    for digit in str(base):\n        # convert the digit to an integer\n        digit_int = int(digit)\n        \n        # calculate the power of the digit and add to the total\n        total += digit_int ** power\n    \n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Calculate the sum of all digits of the base to the specified power\n    sum_of_digits = sum(int(digit)**power for digit in base_str)\n\n    # Return the result\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    \n    # calculate the sum of digits of base raised to power\n    sum_digits = 0\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n    \n    # return the sum of digits\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Convert the base to a string\n    base_str = str(base)\n    # Convert the power to an integer\n    power_int = int(power)\n    # Calculate the sum of digits to the power\n    for digit in base_str:\n        digit_int = int(digit)\n        sum += digit_int ** power_int\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum variable\n    sum = 0\n    # iterate through each digit in the base string\n    for digit in base_str:\n        # convert each digit to an integer\n        digit_int = int(digit)\n        # calculate the sum of the power of the digit to the power of the power\n        digit_power_sum = sum_digits_powers(digit_int, power)\n        # add the digit power sum to the sum variable\n        sum += digit_power_sum\n    # return the sum\n    return sum\n\n\ndef sum_digits_powers(digit, power):\n    '''\n    Write a function that takes a digit and power as arguments and calculates the sum of the digit to the power of the power.\n    '''\n    # initialize the sum variable\n    sum = 0\n    # iterate through each power of 10\n    for i in range(power):\n        # calculate the power of the digit to the power of i\n        digit_pow_i = digit ** i\n        # add the digit power to the sum variable\n        sum += digit_pow_i\n    # return the sum\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes two arguments, base and power, and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    total_sum = 0\n    # loop through each digit in the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the total sum\n        total_sum += int(digit)\n    # calculate the sum of the base raised to the specified power\n    result = total_sum ** power\n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Check if the base is a valid integer\n    if not base.isdigit():\n        raise ValueError(\"Base must be an integer\")\n    # Check if the power is a valid integer\n    if not power.isdigit():\n        raise ValueError(\"Power must be an integer\")\n    # Convert the base and power to integers\n    base_int = int(base)\n    power_int = int(power)\n    # Calculate the sum of digits of the base raised to the power\n    sum_of_digits = 0\n    while power_int > 0:\n        # Get the last digit of the base\n        digit = base_int % 10\n        # Add the digit to the sum\n        sum_of_digits += digit\n        # Remove the last digit from the base and divide by 10 to remove it from the power\n        base_int //= 10\n        power_int -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # calculate sum of digits to the power of power\n    power_sum = 0\n    for digit in base_str:\n        power_sum += int(digit) ** power\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit\n        power -= 1\n        base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Initialize the sum variable to 0\n    sum_of_digits = 0\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_of_digits += int(digit)\n\n    # Calculate the sum of digits raised to the power and return the result\n    return sum_of_digits ** power"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    quotation = re.findall(pattern, text1)\n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    results = re.findall(pattern, text1)\n    return results"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"' # matches anything between double quotes\n    match = re.search(pattern, text, re.DOTALL) # searches for the pattern in the text and returns a match object\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" of the string.\n    '''\n    # Use regular expression to match all the instances of quotation marks\n    matches = re.findall('\"([^\"]*)\"', text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to find all quotation marks in the string\n    quote_pattern = r'\"[^\"]*\"'\n    matches = re.findall(quote_pattern, text1)\n    \n    # remove the quotation marks from the matches\n    cleaned_matches = [match[1:-1] for match in matches]\n    \n    # return the cleaned matches\n    return cleaned_matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define a regular expression pattern to match quoted text\n    pattern = r'\"([^\"]*)\"'\n    # Use the re.finditer() function to find all occurrences of quoted text\n    matches = re.finditer(pattern, text1)\n    # Create an empty list to store the extracted values\n    extracted = []\n    # Loop over all matches and add their values to the extracted list\n    for match in matches:\n        extracted.append(match.group(1))\n    # Join the extracted values into a single string and return it\n    return''.join(extracted)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\b)(.*?)(?=\\b)' # match all characters within quotation marks\n    matches = re.findall(pattern, text1) # find all matches using regex pattern\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # convert the input tuple into a list for easy indexing\n    test_list = list(test_tup)\n    # set the length of the output tuple to N\n    output_len = len(test_list)-1\n    # create an empty output tuple\n    output_tup = ()\n    # loop through the input tuple, multiplying each element with the next element, and appending the result to the output tuple\n    for i in range(output_len):\n        output_tup += (test_list[i]*test_list[i+1],)\n    # return the output tuple\n    return output_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1  # assuming the last element is not a product\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N+1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize the result tuple\n    result = []\n    \n    # Loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current element with the next element\n        product = test_tup[i] * test_tup[i+1]\n        # Add the product to the result tuple\n        result.append(product)\n    \n    # Append the last element to the result tuple\n    result.append(test_tup[-1])\n    \n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Check if the length of lst1 and lst2 are equal\n    if len(lst1)!= len(lst2):\n        print(\"Error: The two lists should have the same length.\")\n        return\n    \n    # Initialize an empty list to store the sum of the two lists\n    result = []\n    \n    # Iterate over each element of lst1 and lst2 and add them to the result list\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # creating an empty list to store the result\n    result = []\n\n    # checking if both lists have the same length\n    if len(lst1) == len(lst2):\n        # iterating over the two lists and appending the sum to the result list\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        # returning the result list\n        return result\n    else:\n        # if the lengths are not equal, returning an error message\n        print(\"Error: The two lists have different lengths.\")"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list into a dictionary using itertools.groupby\n    groups = groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)\n    \n    # Create a list of the elements from each group\n    result = [list(group)[0] for group in groups]\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n\n    Args:\n    nums: list of integers\n\n    Returns:\n    A list of integers containing consecutive duplicates removed.\n    '''\n    return list(accumulate(nums, lambda x, y: x if y == x else None))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby function to group the list into tuples of consecutive duplicates\n    for item, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1):\n        # Get the list of consecutive duplicates and remove them from the original list\n        for i in range(len(group)):\n            nums.remove(group[i])\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums) if key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by the index and count consecutive duplicates\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    # filter out the groups that have more than 1 element and return the indices\n    return [idx for idx, group in grouped if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by the elements\n    grouped_nums = groupby(nums)\n    # Remove the consecutive duplicates\n    return [x[0] for x in grouped_nums if not x[1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, group in groupby(enumerate(nums), lambda x: x[0] - x[1]):\n        yield from map(lambda x: x[1], group)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for group in groupby(nums):\n        group = list(group)\n        if len(group) >= 2:\n            new_nums.append(group[0])\n        nums.remove(group[0])\n    return new_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*(r**2)\n    A = math.pi*(r**2)*(h/3)\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2) # pi is a mathematical constant representing the ratio of the circumference of a circle to its diameter"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h  # using formula for lateral surface area of a cone\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone base using Heron's formula\n    area_base = 0.5 * r * r * math.sqrt(3)\n\n    # Calculate the area of the cone using Heron's formula\n    area_cone = math.pi * r ** 2 + math.pi * h * h\n\n    # Calculate the lateral surface area\n    lateral_surface_area = area_base * area_cone\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (2 * r * math.tan(math.pi/6)) + (2 * r * math.tan(math.pi/4))\n    return s * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h + math.pi*r*h**2 - math.pi*r**2*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = 2*math.pi*(r**2 + h**2)\n    return surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2\n    B = math.pi * r * h\n    C = math.pi * h**2\n    surface_area = 0.5 * (A + B + C)\n    return surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([,.])', r' : ', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[., ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Replace all spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[ ]|[,|.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match all spaces, commas, or dots\n    pattern = r\"[\\s,\\.]\"\n\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, \":\", text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # create a regular expression pattern to match all special characters\n    pattern = re.compile(r'\\s|,|\\.')\n\n    # replace all matches with a colon\n    text = pattern.sub(':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'([.,])')\n    return pattern.sub(r':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for spaces, commas, and dots\n    pattern = re.compile(r'[^\\w\\s]')\n    \n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    \n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index to -1\n    first_occurrence_index = -1\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Loop until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the middle index\n        mid = left + (right - left) // 2\n        \n        # If the middle element is equal to the target element, check if it is the first occurrence\n        if A[mid] == x:\n            # If it is, update the first_occurrence_index to the current index\n            if mid == 0 or A[mid - 1]!= x:\n                first_occurrence_index = mid\n            \n            # Move the right pointer to the right of the middle index\n            right = mid\n        # If the middle element is less than the target element, move the left pointer to the right of the middle index\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than the target element, move the right pointer to the left of the middle index\n        else:\n            right = mid - 1\n    \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index to -1\n    index = -1\n\n    # Iterate through the array\n    for i in range(len(A)):\n        # If the current element is equal to the target, update the index\n        if A[i] == x:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index to -1 to mark that the number is not present in the array\n    index = -1\n    # traverse the array until the number is found or the end of the array is reached\n    for i in range(len(A)):\n        # if the current element is equal to the required number, return the index\n        if A[i] == x:\n            return i\n        # if the current element is less than the required number, set the index to the current index and continue\n        elif A[i] < x:\n            index = i\n        # if the current element is greater than the required number, stop traversing and return the index\n        else:\n            return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first occurrence of x in A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): The sorted array to search in.\n    x (int): The number to search for.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n\n    # Initialize the left and right pointers to the first and last elements of A, respectively\n    left = 0\n    right = len(A) - 1\n\n    # Iterate until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # Compute the middle index of the current subarray\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the target, we found the first occurrence\n        if A[mid] == x:\n            return mid\n\n        # If the middle element is greater than the target, we need to search the left half of A\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the middle element is less than the target, we need to search the right half of A\n        else:\n            right = mid - 1\n\n    # If the left pointer is equal to the right pointer, we didn't find the first occurrence\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x as input and returns the index of the first occurrence of x in A. If x is not found in A, the function returns -1.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input, and returns the index of the first occurrence of x in A.\n    If x is not present in A, the function returns -1.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n\n    if A[0] == x:\n        return 0\n\n    if A[len(A)-1] == x:\n        return len(A)-1\n\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if A[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate product of all elements in the list\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    \n    # Initialize variables to store sum of products and prefix sum\n    sum_prod = 0\n    prefix_sum = 0\n    \n    # Iterate through each element in the list and calculate sum of products of sublists\n    for i in range(n):\n        # Calculate sum of products of sublists\n        sum_prod += prod\n        # Calculate sum of products of previous sublists\n        prefix_sum += arr[i]*(prefix_sum)\n        # Update product of current element\n        prod *= arr[i]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1]*n\n    # Initialize first row of DP table\n    dp[0] = 1\n\n    for i in range(1, n):\n        # Calculate the product of all elements to the left of index i\n        left_prod = 1\n        for j in range(i):\n            left_prod *= arr[j]\n        # Update the DP table\n        dp[i] = dp[i-1]*left_prod\n\n    # Calculate the sum of products of all sublists\n    result = 0\n    for i in range(n):\n        result += dp[i]*arr[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Find the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    # Initialize sum of products to zero\n    sumprod = 0\n    # Initialize list of subarrays\n    subarray = []\n    # Initialize sum of subarrays to zero\n    sumpsum = 0\n    # Initialize list of indices\n    indices = []\n    # Initialize the left and right pointers of each subarray\n    left = 0\n    right = 0\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is greater than the current maximum element, update the maximum element\n        if arr[i] > arr[right]:\n            right = i\n        # If the current element is equal to the current maximum element, extend the current subarray\n        elif arr[i] == arr[right]:\n            right += 1\n        # If the current subarray has reached the end of the array, add its products to the sum of products and update the sum of subarrays\n        if right == n:\n            prod = 1\n            for j in range(left, right):\n                prod *= arr[j]\n            sumprod += prod\n            sumpsum += sum(arr[left:right+1])\n            subarray.append(arr[left:right+1])\n            left = right + 1\n            right = left\n    # Return the sum of products and the sum of subarrays\n    return sumprod, sumpsum, subarray"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if i - j == 1:\n                dp[i] += arr[i - 1] * dp[j]\n            elif i - j == 0:\n                dp[i] += arr[j] * dp[j]\n            else:\n                dp[i] += arr[i - 1] * arr[j] * dp[j]\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_sum = [0] * n\n    # Calculate the sum of products of subarrays\n    for i in range(1, n):\n        sub_sum[i] = arr[i] + sub_sum[i-1]\n    # Calculate the sum of products of all possible sublists\n    sublist_prod_sum = 0\n    for i in range(n):\n        sublist_prod_sum += sub_sum[i] * sub_sum[n-i-1]\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 1000000007\n    \n    # Calculate prefix sums of array\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[1] = arr[0]\n    for i in range(2, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    # Calculate cumulative sums of array\n    cum_sum = [0] * (n + 1)\n    cum_sum[1] = arr[0]\n    for i in range(2, n + 1):\n        cum_sum[i] = cum_sum[i - 1] + arr[i - 1]\n    \n    # Calculate product of prefix and suffix subarrays\n    prefix_suffix_prod = [0] * (n + 1)\n    prefix_suffix_prod[1] = 1\n    for i in range(2, n + 1):\n        prefix_suffix_prod[i] = (cum_sum[i - 1] - cum_sum[i - 2]) % mod\n    \n    # Calculate product of subarrays with prefix and suffix products\n    subarray_prod = [0] * (n + 1)\n    subarray_prod[1] = 1\n    for i in range(2, n + 1):\n        subarray_prod[i] = (subarray_prod[i - 1] * prefix_suffix_prod[i - 1]) % mod\n    \n    # Calculate sum of products of subarrays with prefix and suffix products\n    sum_of_subarray_prod = 0\n    for i in range(n - 1, -1, -1):\n        sum_of_subarray_prod = (sum_of_subarray_prod + subarray_prod[i]) % mod\n    \n    return sum_of_subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n        dp[i][1] = 0\n    \n    for i in range(2, n+1):\n        dp[i][0] = dp[i-1][0] + arr[i-1]*arr[i-1]\n        dp[i][1] = dp[i-1][1] + arr[i-1]\n    \n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + arr[i-1]*arr[j-1]*arr[i-1]*arr[j-1]\n    \n    sum_ = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if j-i+1 >= 2:\n                sum_ += dp[i][j]\n    \n    return sum_"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += prefix_sum[j + 1] * prefix_sum[n - j - 1]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n    # function to find sum of products of sublist\n    def sum_of_products(sublist):\n        \"\"\"\n        This function takes a list of integers as input and returns the sum of products of all possible sublists of the list.\n        \"\"\"\n        prod_sum = 0\n        for i in range(len(sublist)):\n            prod_sum += sublist[i] * sublist[i+1]\n        return prod_sum\n\n    # function to find sum of products of all sublists of the input list\n    def sum_of_products_of_all_sublists(arr):\n        \"\"\"\n        This function takes a list of integers as input and returns the sum of products of all possible sublists of the list.\n        \"\"\"\n        sublists = []\n        for i in range(len(arr)+1):\n            sublists.append(arr[i:])\n        sublists = [sublist for sublist in sublists]\n\n        prod_sum = 0\n        for sublist in sublists:\n            prod_sum += sum_of_products(sublist)\n        return prod_sum\n\n    # function to find sum of products of all sublists of the input list using memoization\n    memo = {}\n    def sum_of_products_of_all_sublists_using_memoization(arr, index=0):\n        \"\"\"\n        This function takes a list of integers as input and returns the sum of products of all possible sublists of the list.\n        \"\"\"\n        if index == len(arr):\n            return 0\n        if (arr, index) in memo:\n            return memo[(arr, index)]\n\n        sublists = []\n        for i in range(index, len(arr)+1):\n            sublists.append(arr[index:i])\n        sublists = [sublist for sublist in sublists]\n\n        prod_sum = 0\n        for sublist in sublists:\n            prod_sum += sum_of_products_of_all_sublists(sublist)\n\n        memo[(arr, index)] = prod_sum\n        return prod_sum\n\n    # main function to call all the above functions and print the result\n    result = sum_of_products_of_all_sublists_using_memoization(arr)\n    print(\"Sum of products of all possible sublists of the given list:\", result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    \n    Args:\n    arr (list): a list of integers\n    \n    Returns:\n    int: the sum of products of all possible sublists of arr\n    \n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    subarray_sum = 0\n    subarray_product = 1\n    \n    # Iterate through the array and calculate the sum of products of all possible sublists\n    for i in range(n):\n        subarray_sum += arr[i]\n        subarray_product *= arr[i]\n        \n        # Check if the sum of products is greater than 1\n        while subarray_sum > 1:\n            subarray_sum -= arr[i]\n            subarray_product //= arr[i]\n    \n    return subarray_product"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the binary representation of the given number\n    num_bin = bin(n)[2:]\n\n    # get the length of the binary representation\n    num_bin_len = len(num_bin)\n\n    # get the middle bits\n    middle_bits = num_bin[1:num_bin_len-1]\n\n    # toggle the middle bits\n    for bit in middle_bits:\n        if bit == '0':\n            n = n ^ (1 << int(bit))\n        else:\n            n = n ^ (0 << int(bit))\n\n    # return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # If the number is odd, then the last bit is 0\n    if n & 1 == 1:\n        n = n ^ 1\n    \n    # If the number is even, then the first and the last bits are swapped\n    else:\n        # Extract the first and last bits\n        first_bit = n & 1\n        last_bit = n >> 31\n        \n        # Combine the first and last bits and the middle bits\n        n = first_bit ^ last_bit ^ (n & ~(first_bit ^ last_bit))\n        \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    toggled_bits = first_bit ^ last_bit\n    return n ^ toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # get the length of the binary representation of n\n    n_len = len(bin(n)[2:])\n\n    # create a mask of the bits that need to be toggled\n    mask = 0\n    for i in range(n_len - 2):\n        mask |= 1 << i\n\n    # toggle the bits except the first and the last bit\n    n_new = (n & mask) ^ mask\n\n    return n_new"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the number to binary string\n    binary_str = bin(n)[2:]\n    # initialize the first and last bit values\n    first_bit = int(binary_str[0])\n    last_bit = int(binary_str[-1])\n    # toggle the first and last bits and update the other bits\n    toggled_bits = (first_bit ^ last_bit) ^ (first_bit ^ 1) ^ (last_bit ^ 1)\n    # convert the toggled bits to decimal and return it\n    return int(toggled_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bit of the number\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # Toggle all the bits except the first and the last bit\n    n = n ^ (first_bit ^ last_bit)\n\n    # Set the first and last bit of the number\n    n = (n ^ first_bit) << 31\n    n = (n ^ last_bit) << 31\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Calculate the first and last bits of n\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    \n    # Toggle the first and last bits\n    first_bit = 1 - first_bit\n    last_bit = 1 - last_bit\n    \n    # Toggle all other bits\n    n = n ^ (first_bit | last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Helper function to swap the bits of two numbers\n    def swap_bits(x, y, bit):\n        if x & (1 << bit) == 0:\n            return x | (1 << bit)\n        else:\n            return x & ~(1 << bit)\n\n    # Calculate the position of the first and last bit\n    first_bit = bin(n).count('1') - 1\n    last_bit = len(bin(n)) - bin(n).count('1')\n\n    # Iterate over the middle bits\n    middle_bits = n & ~(1 << first_bit) & ~(1 << last_bit)\n    for i in range(len(bin(middle_bits))):\n        # Toggle the bit at position i\n        middle_bits = swap_bits(middle_bits, middle_bits, i)\n\n    # Combine the original number with the middle bits\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n_bits = len(bin(n)[2:]) # get the number of bits in n\n    \n    # toggle the bits except the first and last bit\n    for i in range(1, n_bits-2):\n        if n & (1 << i):\n            n ^= (1 << i) # flip the bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Calculate the middle index of the number\n    middle_index = (n.bit_length() - 2) // 2\n    # Toggle the middle bits of the number\n    middle_bits = n ^ (1 << middle_index)\n    # Return the new number with the middle bits toggled\n    return n ^ middle_bits"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes a list and a value as input and returns the index of the left insertion point for the value in the list.\n    If the value is already present in the list, it returns the index of the value itself.\n    \"\"\"\n    # Use binary search to find the index of the left insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If the value is not present in the list, return the index of the left insertion point\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return left_insertion(a[i:], x)\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search algorithm to locate the insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # Return the insertion point\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x) - 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Using binary search to find the left insertion point\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n\n    # If the value is not found, return the left insertion point\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # use bisect to find the index of the left insertion point\n    index = bisect.bisect_left(a, x)\n    # if the value is less than the first element, the left insertion point is 0\n    if index == 0 and a[0] < x:\n        return 0\n    # if the value is equal to the first element, the left insertion point is 1\n    elif index == 1 and a[1] == x:\n        return 1\n    # if the value is greater than the first element, the left insertion point is 2\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a: list, sorted list to search in\n        x: integer, value to search for\n\n    Returns:\n        index of left insertion point, if found, or -1 otherwise.\n    \"\"\"\n    # binary search for left insertion point\n    low = 0\n    high = len(a) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # no left insertion point found, return -1\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    return idx"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        print(f\"{string} starts with a vowel\")\n    else:\n        print(f\"{string} does not start with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    This function takes a string as input and returns True if the string starts with a vowel and False otherwise.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*$')\n    return bool(pattern.match(string))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Args:\n    n: The integer n\n\n    Returns:\n    The geometric sum of n-1.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    return n * (1 - 1 / n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Args:\n    n (int): The number of terms to sum.\n\n    Returns:\n    float: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # initializing the index to 0 \n    index = 0 \n    \n    # initializing the triangular number with 1 digit \n    triangular_num = 1 \n    \n    # calculating the value of the triangular number with n digits \n    while len(str(triangular_num)) < n: \n        triangular_num += 1 \n        \n    # iterating until the triangular number becomes greater than the given number n \n    while triangular_num <= n: \n        \n        # updating the index \n        index += 1 \n        \n        # updating the triangular number with n digits \n        triangular_num = int(\"\".join(str(triangular_num) + str(triangular_num-1))) \n    \n    # returning the index of the smallest triangular number with n digits \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    triangular_numbers = [0] * (n + 1)\n    triangular_numbers[0] = 0\n    triangular_numbers[1] = 1\n    for i in range(2, n + 1):\n        triangular_numbers[i] = triangular_numbers[i-1] + triangular_numbers[i-2]\n\n    return triangular_numbers[n]"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def smallest_triangular_number(n):\n        triangular = 0\n        triangular_num = 1\n        while count_digits(triangular_num) < n:\n            triangular += 1\n            triangular_num *= triangular\n        return triangular\n\n    def find_index(n):\n        smallest_triangular = smallest_triangular_number(n)\n        index = smallest_triangular - 1\n        while count_digits(index) < n:\n            index -= 1\n        return index\n\n    return find_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n\n    def is_triangular(n):\n        \"\"\"\n        Check if a number is a triangular number or not.\n        \"\"\"\n        if n < 0:\n            return False\n        for i in range(int(math.sqrt(8*n+1))+1):\n            if 2*i*i-1 <= n <= 2*i*i:\n                return False\n        return True\n\n    def get_smallest_triangular(n):\n        \"\"\"\n        Get the smallest triangular number with n digits.\n        \"\"\"\n        if is_triangular(10**n-1):\n            return 10**n-1\n        elif is_triangular(10**n):\n            return 10**n\n        else:\n            return get_smallest_triangular(n-1)\n\n    smallest_triangular = get_smallest_triangular(n)\n    index = len(str(smallest_triangular)) - 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    limit = int(math.pow(10, n-1))\n    triangular_numbers = []\n    sieve = [True] * (limit+1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, limit+1):\n        if sieve[i]:\n            triangular_numbers.append(i)\n            for j in range(i*i, limit+1, i):\n                sieve[j] = False\n\n    for i, num in enumerate(triangular_numbers):\n        if len(str(num)) == n:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # find the first number with n digits\n    while len(str(n)) < n:\n        n += 1\n    \n    # initialize variables\n    i = 0\n    triangular = 1\n    smallest_triangular = 0\n    \n    # find the index of the smallest triangular number with n digits\n    while i <= n:\n        triangular += i\n        smallest_triangular = triangular\n        i += 1\n    \n    return smallest_triangular - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the smallest triangular number with n digits\n    triangular_numbers = [math.factorial(i) for i in range(1, n+1)]\n    smallest_triangular = min(triangular_numbers)\n\n    # Find the index of the smallest triangular number with n digits\n    triangular_number_index = triangular_numbers.index(smallest_triangular)\n\n    return triangular_number_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # calculate the smallest triangular number with n digits\n    smallest = 10**(n-1)\n    \n    # calculate the index of smallest triangular number\n    for i in range(2, smallest+1):\n        if (i-1) % 9 == 0:\n            continue\n        if int(math.log10(i)+1) == n:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n):\n    count = 0\n    for i in range(1, n+1):\n        sum_of_previous_n = (i * (i+1)) // 2\n        if sum_of_previous_n < n:\n            count += 1\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    triangular_numbers = []\n    # Generate all triangular numbers with n digits\n    for i in range(1, 10**n+1):\n        triangular_numbers.append(str(i))\n    # Sort the triangular numbers in ascending order\n    triangular_numbers.sort()\n    # Find the index of the smallest triangular number with n digits\n    smallest_triangular_number = int(triangular_numbers[0])\n    return math.ceil(math.log10(smallest_triangular_number))+1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[i] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Invalid input. Tuple should have an even number of elements.\")\n        return None\n    \n    dict_data = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_data[key] = value\n        \n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {k: test_tup[i+1] for i, k in enumerate(test_tup)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 0:\n        n = len(test_tup)\n        dict_ = {}\n        for i in range(n):\n            dict_[i] = test_tup[i]\n        for i in range(n//2, n):\n            dict_[i] = test_tup[i-1]\n        return dict_\n    else:\n        print(\"Tuple should have an even number of elements!\")"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Define an empty dictionary to store the key-value pairs\n    my_dict = {}\n    # Loop through the tuple using the range function and skip the first element\n    for i in range(1, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        my_dict[test_tup[i-1]] = test_tup[i]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list\n    lst = list(s)\n    # check if all the characters are same or not\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the length of the string is greater than 1\n    if len(s) > 1:\n        # Create a set of unique characters in the string\n        unique_chars = set(s)\n        # Check if the length of the set is equal to 1\n        if len(unique_chars) == 1:\n            # If yes, return True\n            return True\n        else:\n            # If no, return False\n            return False\n    else:\n        # If the length of the string is 1, return False\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all the characters in the string are same and False otherwise.\n    '''\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    # check if string is empty\n    if len(s) == 0:\n        return True\n    \n    # check if all characters are same in the string\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set()\n    for char in s:\n        char_set.add(char)\n    return len(char_set) == 1"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return True\n    \n    # Initialize the first character as first_char\n    first_char = s[0]\n    \n    # Loop through the remaining characters of the string\n    for i in range(1, len(s)):\n        # If the current character is not equal to the first character, return False\n        if s[i]!= first_char:\n            return False\n    \n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, and False otherwise.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif len(s) > 1:\n        for i in range(1, len(s)):\n            if s[0]!= s[i]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron given its base side.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # convert side to float to ensure proper calculation of area\n    side = float(side)\n    # calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = side * (1.0 / 3.0)\n    # calculate the area using Heron's formula\n    area = (1.0 / 6.0) * math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - 2*side) * (semi_perimeter - 3*side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c)*(s-d))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2 * math.sqrt(3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side * (1 / 3))\n\n    # calculate the area of the tetrahedron\n    area = (4 / 3) * math.sqrt(s * (s - side) * (s - (2 * side)) * (s - (3 * side)))\n\n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (side ** 0.5) / 2\n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 + side ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = 3 * side / 2\n    area = (math.sqrt(3) / 4) * half_perimeter * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Check if list is empty or has only one item\n    if n <= 1:\n        return list\n    # Check if m is greater than or equal to n\n    if m >= n:\n        # If m is greater than or equal to n, simply return list\n        return list\n    # Reverse the list from start to mid point\n    list = list[m:] + list[:m]\n    # Reverse the list from mid to end\n    list = list[::-1]\n    # Reverse the whole list\n    list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If the list has only one element, return it\n    if n == 1:\n        return list[0]\n    # If the rotation distance is greater than or equal to the length of the list, return the entire list\n    if m >= n:\n        return list\n    # Perform the right rotation by shifting the elements one position to the left and adding the first element at the end\n    for i in range(m):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Base case for when m is 0 or n is 1\n    if m == 0 or m == n - 1:\n        return list\n    # Case when m is greater than n-1\n    if m > n - 1:\n        m = m % n\n    # Return the last m elements of the list, followed by the first n-m elements\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and a number n as input and rotates the list to the right by n items.\n    \"\"\"\n    # Find the length of the list\n    length = len(lst)\n    # Check if n is greater than the length of the list\n    if n > length:\n        return lst\n    # If n is 0 or n is equal to the length of the list, return the list as it is\n    elif n == 0 or n == length:\n        return lst\n    # If n is less than 0, rotate n modulus the length of the list\n    else:\n        n = n % length\n        # Create a new empty list to store the rotated elements\n        rotated_lst = []\n        # Traverse through the original list and add n items from the end to the new list\n        for i in range(n):\n            rotated_lst.append(lst[length-1])\n        # Traverse through the original list and add the remaining elements to the new list\n        for i in range(length-n):\n            rotated_lst.append(lst[i])\n        # Return the new list\n        return rotated_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer as input and returns the list rotated by m items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m is greater than n, rotate by n-m items to the right\n    if m > n:\n        list = list[m:] + list[:m]\n        return list\n    # If m is less than n, rotate by m items to the right\n    else:\n        # Reverse the list using slicing\n        list = list[::-1]\n        # Reverse the first m elements using slicing\n        list = list[m:] + list[:m]\n        # Reverse the list again using slicing\n        list = list[::-1]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    k = m % n\n    \n    # Rotating the list by k items\n    list = list[-k:] + list[:-k]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n\n    # Calculate the number of rotations required\n    rotations = m % n\n\n    # Initialize the two pointers\n    start = 0\n    end = n - 1\n\n    # Swap the last m elements with the first n - m elements\n    for i in range(rotations):\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n\n    # Shift the rest of the elements to the right\n    for i in range(n - rotations):\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a new list which is the rotation of the original list by n items.\n\n    Example:\n\n    rotate_right([1, 2, 3, 4, 5], 2) # Output: [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 3) # Output: [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 0) # Output: [1, 2, 3, 4, 5]\n    \"\"\"\n    # Get the length of the list\n    length = len(lst)\n\n    # If n is greater than the length of the list, return the original list\n    if n > length:\n        return lst\n\n    # If n is equal to zero, return the original list\n    if n == 0:\n        return lst\n\n    # Get the number of items to be rotated\n    rotations = n % length\n\n    # Initialize the new list with the last rotations of the original list\n    new_lst = lst[-rotations:]\n\n    # Add the first rotations of the original list to the new list\n    new_lst.extend(lst[:-rotations])\n\n    # Return the new list\n    return new_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[m:] + list[:m]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n\n    for item in test_tup:\n        if item is None:\n            return True\n\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_value = None\n    for item in test_tup:\n        if item is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(d) % num == 0 for d in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(num) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(d) for d in str(startnum)]\n    for num in range(startnum, endnum+1):\n        digits_in_num = [int(d) for d in str(num)]\n        if all(digit in digits_in_num for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, and returns a list of numbers\n    within the given range from startnum to endnum, where every number is divisible by every digit\n    it contains.\n\n    The function uses a lambda function as an optimization to filter out the numbers that don't meet\n    the condition.\n\n    Example:\n    >>> divisible_by_digits(10, 50)\n    [25, 30, 35, 40, 45, 50]\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a lambda function that takes a number as an input and checks if it is divisible by every digit in the number\n    is_divisible = lambda x: all(int(d) % x == 0 for d in str(x))\n    \n    # iterate over the numbers in the given range and check if they are divisible by every digit in the number\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda n: all(d in str(n) for d in str(n)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        num_str = str(num)\n        return all(int(digit) % num == 0 for digit in num_str)\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Use a list comprehension to create a list of lists of digits\n    digits = [[int(d) for d in str(num)] for num in range(startnum, endnum+1)]\n\n    # Use a list comprehension to create a list of lists of divisible numbers\n    divisible_nums = [[num for num in row if sum(1 for digit in digits[row.index(num)]) % 2 == 0] for row in digits]\n\n    # Use a list comprehension to find the divisible numbers that have the maximum number of digits\n    max_digits = max(len(num) for row in digits for num in row)\n    divisible_num_with_max_digits = [num for row in digits for num in row if len(num) == max_digits and sum(1 for digit in digits[row.index(num)]) % 2 == 0]\n\n    # Use a list comprehension to find the divisible numbers with the smallest number of digits\n    min_digits = min(len(num) for row in digits for num in row)\n    divisible_num_with_min_digits = [num for row in digits for num in row if len(num) == min_digits and sum(1 for digit in digits[row.index(num)]) % 2 == 0]\n\n    # Return the divisible numbers with the maximum and minimum number of digits\n    return divisible_num_with_max_digits + divisible_num_with_min_digits"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % int(d) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as input. It returns the area of the sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r**2 * a/360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area of sector\n    area = math.pi * r * r * (a/360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is greater than 360 degrees\n    if a > 360:\n        return None\n\n    # Convert angle from degrees to radians\n    a = math.radians(a)\n\n    # Calculate area of sector\n    area = (math.pi * r**2) * a\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r*r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within valid range (0 to 360 degrees)\n    if a > 360:\n        print(\"Angle should be less than or equal to 360 degrees.\")\n        return None\n\n    # Calculate area of sector using formula\n    area = r * math.sin(math.radians(a/360))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * a"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store lengths of LCS for all subproblems\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # fill the 3D table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # print the lengths of LCS for all subproblems\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                print(L[i][j][k], end=\" \")\n\n    # return the length of LCS for the given string sequence\n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        p = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    p[i][j] = p[i - 1][j - 1] + 1\n                else:\n                    p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n        return p[m][n]\n\n    LCS = []\n    while len(LCS) < 3:\n        i, j = min(X), min(Y)\n        if X[i] == Y[j]:\n            LCS.append(X[i])\n            X = X[:i] + X[i+1:]\n            Y = Y[:j] + Y[j+1:]\n        elif p[i][j] == p[i - 1][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(LCS)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z) \n\n    # Step 1: Create a 2D table to store lengths of LCS for subproblems \n    L = [[0] * (p + 1) for _ in range(m + 1)] \n\n    # Step 2: Fill the L[i][j] in bottom up manner. Note that L[i][j] contains length of LCS of X[0...i-1], Y[0...j-1] and Z[0...p-1]. \n    for i in range(1, m + 1): \n        for j in range(1, p + 1): \n            if X[i - 1] == Y[j - 1] == Z[p - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    # Step 3: Trace back to get LCS of three strings \n    i, j, k = m, p, 0 \n    lcs = \"\" \n    while i > 0 and j > 0 and k > 0: \n        if X[i - 1] == Y[j - 1] == Z[k - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                elif dp[i - 1][j][k] > dp[i][j - 1][k]:\n                    dp[i][j][k] = dp[i - 1][j][k]\n                elif dp[i][j - 1][k] > dp[i][j][k - 1]:\n                    dp[i][j][k] = dp[i][j - 1][k]\n\n    lcs = []\n    i = m\n    j = n\n    k = p\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] > dp[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    m = len(X) # length of X\n    n = len(Y) # length of Y\n    o = len(Z) # length of Z\n    \n    # create a 3D table to store lengths of LCS for all possible prefixes of X, Y, and Z\n    # LCS[i][j][k] represents the length of LCS of X[:i], Y[:j], and Z[:k]\n    LCS = [[[0 for x in range(o+1)] for x in range(m+1)] for x in range(n+1)]\n    \n    # fill the table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i-1][j-1][k-1])\n    \n    # return the length of LCS of X, Y, and Z\n    return LCS[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common suffix of three strings\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # Fill in L[m+1][n+1] in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Construct the lcs string\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find the length of the longest common substring of X, Y and Z\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a table to store the lengths of the longest common subsequences\n    L = [[0]*(p+1) for _ in range(n+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i][j-1][k], L[i-1][j][k], L[i-1][j-1][k-1])\n\n    # Build the lcs by tracing back from the table\n    i = n\n    j = m\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the lcs and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n\n    # create a 3D table to store lengths of LCS of subsequences\n    dp = [[[0] * (p + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # create a list of tuples representing the LCS\n    lcs = []\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append((X[i - 1], dp[i - 1][j - 1][k - 1]))\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a 3D table to store the length of LCS for all possible substrings\n    table = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # fill the table using dynamic programming\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j][k-1])\n\n    # backtrack to find the longest common subsequence\n    i, j, k = len(X), len(Y), len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] == table[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the lcs and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    def backtrack(L, i, j, k):\n        if i == 0 or j == 0 or k == 0:\n            return 0\n        if L[i-1] == X[j-1] and L[i-1] == Y[k-1]:\n            return 1 + backtrack(L, i-1, j-1, k-1)\n        return max(backtrack(L, i-1, j, k), backtrack(L, i, j-1, k), backtrack(L, i, j, k-1))\n\n    L = [0] * (len(X) + 1)\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                L[i] = max(L[i], backtrack(L, i-1, j-1, k-1))\n\n    return L"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Function to capitalize the first letter of the words\n    def capitalize_words(text):\n        return re.sub(r'\\b\\w+\\b', lambda x: x.group(0).capitalize(), text)\n\n    # Split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', capitalize_words(str1))\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through the words and check if the first character is a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If the first character is a capital letter, add a space between the word and its capitalized form\n            words[i] = words[i][0] + \" \" + words[i][1:]\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Create a new string with spaces between capital letters\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Find all the words in the string\n    words = re.findall('\\w+', string)\n    \n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    \n    # Join the capitalized words back into a string\n    result =''.join(capitalized_words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match words starting with capital letters\n    pattern = r'(?<=[A-Z])(?=[A-Z][a-z]+[0-9]*|\\b)'\n    # Use re.sub to replace the matched words with spaces\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into a list of words\n    words = str1.split()\n    # Capitalize the first word and add spaces between the rest of the words\n    new_words = [words[0]] + [''+ word.capitalize() for word in words[1:]]\n    # Join the list of words with spaces\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Use list comprehension to iterate over the list and capitalize the first word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string by spaces and removing the empty strings\n    str1 = list(filter(None, re.split('\\s+', str1)))\n    \n    # Iterating through the list and adding spaces before each capital letter\n    new_str = ''\n    for word in str1:\n        new_str +='' + word.capitalize()\n        \n    return new_str.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9 ]+', '', str1)\n    # Split the string into words and capitalize the first letter of each word\n    words = str1.split()\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words using the regular expression \"\\w+\"\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # iterate over the words and replace the first letter with a space\n    result =''.join(word.capitalize() if word.istitle() else word for word in words)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float\n    nums_float = [float(num_str) for num_str in nums_str]\n    \n    # Sort the float list in numeric order\n    nums_float.sort()\n    \n    # Convert back to strings\n    sorted_nums_str = [str(num_float) for num_float in nums_float]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if num.isdigit():\n            nums.append(int(num))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # Define a function to check if a string is a number\n    def is_number(num_str):\n        try:\n            float(num_str)\n            return True\n        except ValueError:\n            return False\n    \n    # Split the list of strings into a list of numeric strings\n    nums = [num_str for num_str in nums_str if is_number(num_str)]\n    \n    # Sort the list of numeric strings\n    nums.sort(key=lambda x: float(x))\n    \n    # Join the sorted list of numeric strings into a single string\n    sorted_nums_str =''.join(nums)\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list to list of int\n    nums_int = [int(num) for num in nums_str]\n\n    # sort the list in ascending order\n    nums_int.sort()\n\n    # convert the sorted list to list of strings\n    nums_str = [str(num) for num in nums_int]\n\n    # join the sorted list of strings with commas and return the result\n    return \",\".join(nums_str)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float values\n    nums = [float(num) for num in nums_str]\n\n    # Sort the list of float values in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # create a list of integers from the strings in the input list\n    nums = [int(num_str) for num_str in nums_str]\n    # sort the list of integers numerically\n    nums.sort()\n    # convert the sorted list of integers back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = [int(x) for x in nums_str if x.isdigit()]\n    nums.sort()\n    return nums_str[0:2] + str(nums[0]) + \",\" + str(nums[-1]) + nums_str[-2:]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The new list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # Check if the current element is a tuple\n        if isinstance(test_list[i], tuple):\n            # Loop through each element in the tuple\n            for j in range(len(test_list[i])):\n                # If a match is found, add the corresponding element to the sum\n                if test_list[i][j] == test_tup[j]:\n                    test_list[i] += test_tup[j]\n                    break\n        # If the current element is not a tuple, add it to the sum\n        else:\n            test_list[i] += test_tup[0]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        test_list.append(i)\n    for i in test_tup:\n        test_list.append(i)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.extend(test_tup)\n    # print the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # create a new list to hold the sum of the two lists\n    new_list = []\n    # loop through each element in the input list\n    for num in test_list:\n        # add the element to the new list\n        new_list.append(num)\n    # loop through each element in the input tuple\n    for num in test_tup:\n        # add the element to the new list\n        new_list.append(num)\n    # return the new list\n    return new_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[parent(i)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, parent(i))\n\ndef parent(i):\n    return (i-1)//2\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif i % 2 == 0:\n        return arr[i] > arr[i//2] and check_min_heap_helper(arr, i//2)\n    else:\n        return arr[i] < arr[i//2] and check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n\n    # Base case\n    if i >= len(arr):\n        return True\n\n    # If not, check if the left child of the current node is smaller than the current node\n    if arr[i] < arr[2 * i + 1]:\n        return False\n\n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i < 0:\n        return True\n\n    # If current element is smaller than its parent, then return False\n    if arr[i] < arr[int(i/2)]:\n        return False\n\n    # Recursively check the parent element\n    return check_min_heap_helper(arr, int(i/2))\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Initialize an empty stack\n    stack = []\n\n    # Push all non-leaf nodes of the given array onto the stack\n    for i in range(len(arr)):\n        if i < len(arr) // 2:\n            stack.append(i)\n\n    # Pop nodes from stack and compare with parent elements. If not smaller, return False\n    while stack:\n        i = stack.pop()\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # If all nodes are popped, then array represents a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    left = 2 * i\n    right = 2 * i + 1\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i >= len(arr) // 2:\n        # check if the last element of the array is greater than or equal to the second last element\n        if arr[i] >= arr[i - 1]:\n            return True\n        else:\n            return False\n\n    # recursive case\n    if check_min_heap_helper(arr, 2 * i + 1) and arr[i] >= arr[2 * i + 1]:\n        return True\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n//2)\n    else:\n        return 2*jacobsthal_num((n-1)//2)+1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0  # jacobsthal number\n    l = 1  # lucas number\n    while n > 0:\n        if n & 1:\n            j += l\n        l, j = l + j, l\n        n //= 2\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # initializing variables\n    a, b = 1, 1\n    c, d = 0, 1\n    jacobsthal = 1\n\n    # iterating n times\n    for i in range(n):\n        # updating values of a, b, c, d\n        a, b = b, a + b\n        c, d = d, a + b\n        jacobsthal = (a + b + c + d) // 4\n\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    # Initialize jacobsthal number and lucas number to 0\n    jacob = 0\n    lucas = 0\n    \n    # Loop through n-th iteration\n    for i in range(n):\n        # Update jacobsthal number\n        jacob += lucas\n        \n        # Update lucas number\n        lucas += 4\n    \n    # Return the final jacobsthal number\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n    return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n//2) + 1\n    else:\n        return 2*jacobsthal_num(n//2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two numbers\n    j0 = 0\n    j1 = 1\n\n    # Initialize the nth number\n    if n == 0:\n        return j0\n    elif n == 1:\n        return j1\n    else:\n        for i in range(2, n+1):\n            j = j0 + j1\n            j0 = j1\n            j1 = j\n        return j1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num((n-1)//2) + jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_records = []\n    for i in range(K):\n        min_records.append(test_list[i])\n    return min_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        min_list.append(test_list[i])\n        if len(min_list) > K:\n            min_list.pop(0)\n    min_list = sorted(min_list)\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(test_list)\n\n    # initialize the result list\n    result = []\n\n    # traverse the list\n    for i in range(len(sorted_list)):\n        # if the length of result is less than k\n        if len(result) < K:\n            # add the current element to the result list\n            result.append(sorted_list[i])\n        else:\n            # if the length of result is greater than k\n            # find the minimum element among the elements in the result list\n            min_val = result[0][0]\n            min_index = 0\n\n            for j in range(1, K):\n                if result[j][0] < min_val:\n                    min_val = result[j][0]\n                    min_index = j\n\n            # if the minimum element is equal to the current element\n            if sorted_list[i][0] == min_val:\n                # add the current element to the result list\n                result[min_index] = (sorted_list[i][0], sorted_list[i][1])\n            else:\n                # if the minimum element is not equal to the current element\n                # remove the smallest element from the result list and add the current element\n                result.pop(0)\n                result.append(sorted_list[i])\n\n    # return the result list\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_records = []\n    for i in range(len(test_list)):\n        min_records.append(min(test_list[i]))\n    min_records.sort(reverse=True)\n    return min_records[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Define a helper function to find minimum distance from a given point\n    def distance(point, reference_point):\n        return sum([(p - q) ** 2 for p, q in zip(point, reference_point)]) ** 0.5\n    \n    # Sort the test list by the distance from the reference point\n    test_list.sort(key=lambda x: distance(x[0], test_list[0][0]))\n    \n    # Initialize the minimum distance and the minimum k records\n    minimum_distance = test_list[0][1]\n    minimum_k_records = [test_list[0]]\n    \n    # Iterate over the remaining test list\n    for i in range(1, len(test_list)):\n        # If the current distance is less than the minimum distance, update the minimum distance and update the minimum k records\n        if test_list[i][1] < minimum_distance:\n            minimum_distance = test_list[i][1]\n            minimum_k_records = [test_list[i]]\n        # If the current distance is equal to the minimum distance, append the current record to the minimum k records if it satisfies the condition\n        elif test_list[i][1] == minimum_distance and len(minimum_k_records) < K:\n            minimum_k_records.append(test_list[i])\n    \n    # Return the minimum k records\n    return minimum_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list by the first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Initialize minimum k records as first k elements\n    min_k_records = sorted_list[:K]\n    # Initialize minimum count as maximum count\n    min_count = len(sorted_list)\n    # Iterate over the remaining elements\n    for i in range(K, len(sorted_list)):\n        # Increment the count\n        sorted_list[i] = (sorted_list[i][0], sorted_list[i][1] + 1)\n        # If the count is less than minimum count, update minimum count and minimum k records\n        if sorted_list[i][1] < min_count:\n            min_count = sorted_list[i][1]\n            min_k_records = [sorted_list[i]]\n        # If the count is same as minimum count and the element is less than the smallest element in the minimum k records, update minimum k records\n        elif sorted_list[i][1] == min_count and sorted_list[i][0] < min_k_records[0][0]:\n            min_k_records = [sorted_list[i]]\n        # If the count is same as minimum count and the element is same as the smallest element in the minimum k records, add the element to the list\n        elif sorted_list[i][1] == min_count and sorted_list[i][0] == min_k_records[0][0]:\n            min_k_records.append(sorted_list[i])\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input\n    and returns the minimum K records from the list.\n\n    The function uses a min-heap data structure to efficiently find the minimum K records.\n    The heap is implemented using a list.\n\n    The time complexity of this function is O(n * log(K)) where n is the number of elements in the list.\n\n    Parameters:\n        test_list (list): A list of tuples.\n        K (int): The minimum number of records to find.\n\n    Returns:\n        list: A list containing the K minimum records from the list.\n\n    Example:\n        test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n        K = 2\n\n        Output: [2, 4]\n    '''\n\n    heap = []\n\n    # Insert all elements of the list into the heap\n    for element in test_list:\n        heapq.heappush(heap, element)\n\n    # Extract the minimum K elements from the heap and add them to a new list\n    result = []\n    while K > 0:\n        result.append(heapq.heappop(heap))\n        K -= 1\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = sorted(test_list, key=lambda x: x[0])\n    min_list = []\n    for i in range(len(test_list)):\n        if i < K:\n            min_list.append(test_list[i])\n        elif i == K:\n            min_list.append(test_list[i])\n            break\n        else:\n            min_list.append(min_list[-1])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a list of tuples.\n    The first K tuples in the list are returned, sorted in ascending order based on their second element.\n    If there are fewer than K tuples in the list, then the entire list is returned.\n    '''\n\n    # Sort the list of tuples based on the second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first K tuples in the sorted list\n    if len(sorted_list) < K:\n        return sorted_list\n    else:\n        return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a list of tuples and an integer k as input and returns the minimum k records from the list.\n    '''\n    # Create a dictionary to store the count of each record in the list\n    count_dict = {}\n    for record in test_list:\n        if record[1] in count_dict:\n            count_dict[record[1]] += 1\n        else:\n            count_dict[record[1]] = 1\n\n    # Initialize a variable to store the minimum count\n    min_count = float('inf')\n\n    # Iterate through the dictionary and update the minimum count\n    for key, value in count_dict.items():\n        if value <= min_count:\n            min_count = value\n\n    # Return the minimum count as a list\n    min_list = [record for record in test_list if count_dict[record[1]] == min_count]\n\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # create an empty dictionary to store the common elements\n    common_elements = {}\n\n    # iterate through each element in l1\n    for i in range(len(l1)):\n        # if the element is already in the common_elements dictionary, increment its count\n        if l1[i] in common_elements:\n            common_elements[l1[i]] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            common_elements[l1[i]] = 1\n\n    # iterate through each element in l2\n    for i in range(len(l2)):\n        # if the element is already in the common_elements dictionary, increment its count\n        if l2[i] in common_elements:\n            common_elements[l2[i]] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            common_elements[l2[i]] = 1\n\n    # iterate through each element in l3\n    for i in range(len(l3)):\n        # if the element is already in the common_elements dictionary, increment its count\n        if l3[i] in common_elements:\n            common_elements[l3[i]] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            common_elements[l3[i]] = 1\n\n    # create an empty list to store the common elements\n    common_element_list = []\n\n    # iterate through the dictionary and add elements with a count greater than 1 to the list\n    for key, value in common_elements.items():\n        if value > 1:\n            common_element_list.append(key)\n\n    return common_element_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # iterate through the indices of the lists\n    for i in range(len(l1)):\n        # if the element at the current index is in all the lists, add it to the list of common elements\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # check if all lists have the same length\n    if len(l1)!= len(l2) or len(l2)!= len(l3):\n        return \"All lists must have the same length\"\n    # iterate over the indices of the lists and check if the element is common\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Initialize the smallest and second smallest variables\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    # Loop through the rest of the list\n    for i in range(2, len(numbers)):\n        # If the current number is smaller than the smallest number, update both smallest and second smallest\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        # If the current number is smaller than the second smallest number and not equal to the smallest number, update only the second smallest\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_smallest(numbers[1:])\n        if smallest is not None:\n            return min(smallest, numbers[0])\n        else:\n            return numbers[0]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = None\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n    else:\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < second_smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+b?'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.b+'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string '{}' contains the pattern '{}'\".format(text, pattern))\n    else:\n        print(\"The string '{}' doesn't contain the pattern '{}'\".format(text, pattern))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba[b]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'Hello there abcd'\nresult = text_match_zero_one(text)\nprint(result) # Output: True\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The text '{}' matches the pattern '{}'\".format(text, pattern))\n    else:\n        print(\"The text '{}' doesn't match the pattern '{}'\".format(text, pattern))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(\"Match found\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    reverse_pairs = 0\n    count = {}\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                if test_list[i] not in count:\n                    count[test_list[i]] = 1\n                else:\n                    count[test_list[i]] += 1\n\n                if test_list[j] not in count:\n                    count[test_list[j]] = 1\n                else:\n                    count[test_list[j]] += 1\n\n                reverse_pairs += 2\n\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    count = 0\n    \n    for string in test_list:\n        reverse_str = string[::-1]\n        if reverse_str in reverse_list:\n            index = reverse_list.index(reverse_str)\n            count += len(string) - len(reverse_str) + 1\n            reverse_list.pop(index)\n        else:\n            reverse_list.append(reverse_str)\n            \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        reverse = string[::-1]\n        if reverse in reverse_dict:\n            count += reverse_dict[reverse]\n        else:\n            reverse_dict[string] = 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if string[i:j] == string[j:i][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    \"\"\"\n    # Create a dictionary to store the count of pairs of reverse strings\n    count = {}\n    # Loop through the string list\n    for i in range(len(test_list)):\n        # Get the first string and reverse it\n        s1 = test_list[i][::-1]\n        # Loop through the remaining strings\n        for j in range(i+1, len(test_list)):\n            # Get the second string and reverse it\n            s2 = test_list[j][::-1]\n            # Check if the reversed second string is already in the dictionary\n            if s2 in count:\n                # Increment the count of pairs of reverse strings\n                count[s2] += 1\n            # Check if the reversed first string is already in the dictionary\n            elif s1 in count:\n                # Increment the count of pairs of reverse strings\n                count[s1] += 1\n    # Return the count of pairs of reverse strings\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    reverse_dict = {}\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j!= 0:\n                reverse_str = test_list[i][j:] + test_list[i][:j]\n                if reverse_str not in reverse_dict:\n                    reverse_dict[reverse_str] = 0\n                reverse_dict[reverse_str] += 1\n\n    result = 0\n    for value in reverse_dict.values():\n        result += value\n\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists[tuple(list1[i:j])] = sublists.get(tuple(list1[i:j]), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    # loop through each list in the input list\n    for lst in list1:\n        # convert the list to a tuple and check if it is already in the dictionary\n        if (tuple(lst),) in count_dict:\n            # if it is, increment its count\n            count_dict[(tuple(lst),)] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            count_dict[(tuple(lst),)] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    count = {}\n    # loop through the list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in count:\n            # if it does, increment the count of the tuple\n            count[tuple(sublist)] += 1\n        else:\n            # if it doesn't, add the tuple and set its count to 1\n            count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in counts:\n                counts[subitem] = 0\n            counts[subitem] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to tuples\n    tuples = [(tuple(i), i.count(tuple(i))) for i in list1]\n\n    # Create a dictionary to store the counts\n    count_dict = {}\n\n    # Loop through the tuples and update the count in the dictionary\n    for tup in tuples:\n        if tup[0] not in count_dict:\n            count_dict[tup[0]] = tup[1]\n        else:\n            count_dict[tup[0]] += tup[1]\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Iterate over each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        tuple_element = tuple(element)\n        # If the tuple is already in the dictionary, increment its count\n        if tuple_element in counts:\n            counts[tuple_element] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[tuple_element] = 1\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublist_dict = {}\n    \n    for item in list1:\n        sublist = tuple(item)\n        if sublist in sublist_dict:\n            sublist_dict[sublist] += 1\n        else:\n            sublist_dict[sublist] = 1\n            \n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of unique sublists\n    counts = {}\n    # loop through the list\n    for i in range(len(list1)):\n        # check if the list is a unique sublist\n        is_unique = True\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                is_unique = False\n                break\n        # if the list is unique, add it to the dictionary with its count\n        if is_unique:\n            counts[tuple(list1[i])] = counts.get(tuple(list1[i]), 0) + 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            sublist = tuple(list1[i])\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1_set = set(list1)\n    # Create an empty dictionary\n    sublist_count = {}\n    # Iterate through the list of sets\n    for sublist in list1_set:\n        # If the sublist is not in the dictionary, add it with a count of 1\n        if sublist not in sublist_count:\n            sublist_count[sublist] = 1\n        # Otherwise, increment the count of the sublist in the dictionary\n        else:\n            sublist_count[sublist] += 1\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    if num.split('.')[1].startswith('0'):\n        return False\n    if num.split('.')[1].endswith('0'):\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num % 1 == 0 and num >= 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    decimal_places = num.split('.')[-1]\n    if len(decimal_places) > 2:\n        return False\n    for char in decimal_places:\n        if char not in '0123456789':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n\n    for part in num_parts:\n        if not part.isdigit() or int(part) >= 10:\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.split('.')[1].isdigit():\n        decimal_point = num.split('.')[-1]\n        if len(decimal_point) <= 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Convert the given string to a float\n    num = float(num)\n    # Get the integer part of the float\n    int_part = int(num)\n    # Get the decimal part of the float\n    decimal_part = num - int_part\n    # Check if the decimal part is greater than or equal to 0.5\n    if decimal_part >= 0.5:\n        # If it is, round up the integer part\n        int_part += 1\n    # Check if the integer part is 0\n    if int_part == 0:\n        # If it is, the number is already a decimal number with a precision of 2\n        return True\n    # Check if the integer part has a precision of 2\n    if int_part % 10 == 0:\n        # If it does, the number is already a decimal number with a precision of 2\n        return True\n    # Otherwise, return False\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if int(float_num) == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    \n    # Split the number by '.' and check if the number of digits after the decimal point is 2\n    num_parts = num.split('.')\n    if len(num_parts[1])!= 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num % 1 == 0 and str(num).replace('.', '', 1).isdigit():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the list is 1\n    if len(arr) == 1:\n        return True\n\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Iterate through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary to check if there is only one distinct element\n    for key, value in freq.items():\n        if value == 1:\n            return True\n\n    # If no element is found to have a frequency of 1, return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        # print that the list contains only one distinct element\n        print(\"The list contains only one distinct element:\", unique_set)\n        return True\n\n    # if the length of the set is not equal to 1, it means the list contains more than one distinct element\n    else:\n        print(\"The list contains more than one distinct element:\", unique_set)\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store the unique elements\n    unique_set = set()\n\n    # Add each element of the list to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Check if the set has only one element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    seen = set()\n    for num in arr:\n        if num in seen:\n            unique_count -= 1\n        else:\n            seen.add(num)\n            unique_count += 1\n    if unique_count == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct = []\n    for num in arr:\n        if num not in distinct:\n            distinct.append(num)\n    return len(distinct) == len(arr)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    If the list contains only one distinct element, it returns True, else it returns False.\n    \"\"\"\n    # Converting the list to a set to remove duplicate elements\n    unique_set = set(arr)\n    \n    # Checking if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n\n    # Check whether the given month number contains 30 days or not\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 2:\n        print(\"This month has 28 or 29 days depending on the year.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    if monthnum3 in [4,6,9,11]:\n        return False\n    if monthnum3 % 2 == 0:\n        return True\n    if monthnum3 % 2!= 0:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 5 == 0:\n        print(\"30 days\")\n    else:\n        print(\"Not a leap year\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 % 2 == 0:\n            if monthnum3 in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 in [2, 4, 6, 8, 10, 12]:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the minimum difference between any two elements in the list.\n    \"\"\"\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and second element\n    min_diff = abs(arr[1] - arr[0])\n\n    # Iterate over the rest of the elements in the list\n    for i in range(2, n):\n        # Calculate the difference between the current element and the next element in the list\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return None\n\n    arr.sort()  # sorting the array\n    diff = float('inf')  # initialising the minimum difference\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = min(diff, arr[j] - arr[i])  # finding the minimum difference between the i-th and j-th elements\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() # sort the array\n    min_diff = float('inf') # initialize minimum difference as infinity\n    for i in range(n-1): # iterate from 0 to n-2\n        diff = arr[i+1] - arr[i] # calculate difference\n        if diff < min_diff: # if difference is smaller than current minimum difference\n            min_diff = diff # update minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Initialize two variables to store the minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[0]\n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the minimum difference between any two elements in the array\n    min_diff = abs(max_val - min_val)\n\n    # Calculate the minimum difference between any two elements in the array\n    for i in range(n - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Function to find the minimum difference between any two elements in a given array.\n    '''\n    min_diff = float('inf')\n    min_pair = (0,0)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    return min_diff, min_pair\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n    # initialize the minimum difference to be the difference between the first and last elements\n    min_diff = abs(arr[n-1] - arr[0])\n    # iterate over the array\n    for i in range(n-1):\n        # calculate the difference between the current element and the next element\n        diff = abs(arr[i+1] - arr[i])\n        # update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # loop through the array\n    for i in range(1, n):\n        # calculate the difference between current element and the previous one\n        diff = abs(arr[i] - arr[i-1])\n\n        # update the minimum difference if the difference is smaller than the current minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    # return the minimum difference found\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(string):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 0\n    for i in range(n): \n        polite += math.factorial(i)\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Helper function to check if a number is polite or not\n    def is_polite_helper(x):\n        if x % 10 == 3:\n            return True\n        elif x % 10 == 7:\n            return False\n        else:\n            return x % 2 == 0\n    \n    # Find the first polite number greater than or equal to n\n    i = 2\n    while True:\n        if is_polite_helper(i):\n            break\n        i += 1\n    \n    # Find the nth polite number using the formula n^2 - 2n + 7\n    while True:\n        nth_polite = i**2 - 2*i + 7\n        if nth_polite >= n:\n            break\n        i += 1\n    \n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    # Calculate the nth polite number\n    def nth_polite_number(n):\n        # Initialize the count to 0\n        count = 0\n\n        # Initialize the first polite number to 1\n        first_polite = 1\n\n        # Initialize the second polite number to 2\n        second_polite = 2\n\n        # Loop for n-1 iterations\n        for i in range(n-1):\n            # Check if the first polite number is odd\n            if first_polite % 2 == 1:\n                # If odd, increment the count by 1\n                count += 1\n\n            # Calculate the next polite number\n            next_polite = (2*first_polite + 1) % 1000000007\n\n            # Update the first and second polite numbers\n            first_polite = second_polite\n            second_polite = next_polite\n\n        # Check if the last polite number is odd\n        if second_polite % 2 == 1:\n            # If odd, increment the count by 1\n            count += 1\n\n        # Return the count\n        return count\n\n    # Call the nth_polite_number function and print the result\n    print(nth_polite_number(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Check if the sum of squares of odd numbers is greater than or equal to the square of the sum of odd numbers\n        if i * (i + 1) * (2 * i + 1) >= (i * (i + 1) * i) ** 2:\n            # If it is, add the result to the variable\n            result += i\n\n    # Return the result\n    return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a polite number, False otherwise.\n\n    A polite number is a natural number that is divisible by 2, 3 or 5.\n    A natural number is said to be divisible by a number k if there exists a whole number m such that m is not less than n/k and m*k is equal to n.\n\n    A polite number is called a palindromic number if it is equal to its reverse.\n\n    \"\"\"\n\n    # Check if n is divisible by 2, 3 or 5\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n\n    # Check if n is a palindromic number\n    reverse = 0\n    temp = n\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n\n    if reverse == n:\n        return True\n    else:\n        return False\n\ndef nth_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n\n    \"\"\"\n    count = 0\n    i = 1\n    polite_number = 1\n    while count < n:\n        if is_polite(polite_number):\n            count += 1\n        i += 1\n        polite_number = i\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 4 * is_polite(n // 2) + 2\n    else:\n        return 3 * is_polite(n - 1) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_between(num, l, r):\n        if num < l:\n            return False\n        if num > r:\n            return False\n        return True\n\n    def is_prime_between(num, l, r):\n        return is_prime(num) and is_between(num, l, r)\n\n    def is_nth_polite(l, r, n):\n        count = 0\n        num = l\n        while count < n:\n            if is_prime_between(num, l, r):\n                count += 1\n            num += 1\n        return num\n\n    # Initial values\n    l = 1\n    r = 10**6\n    polite_number = 10**9\n\n    # Find nth polite number\n    if n > 0:\n        if l % 2 == 1:\n            r = l + 1\n        else:\n            l = l + 1\n        for i in range(n):\n            if is_prime(polite_number):\n                polite_number += 1\n            else:\n                l = polite_number + 2\n                r = polite_number * 10 + 2\n\n    # Print nth polite number\n    if n > 0:\n        return polite_number\n    else:\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    if n == 1:\n        return \"The first polite number is 4.\"\n    elif n == 2:\n        return \"The second polite number is 5.\"\n    else:\n        for i in range(3, n+1, 2):\n            if is_prime(i) and is_prime(math.ceil(i/2)):\n                return f\"The {n}th polite number is {i}.\"\n        for i in range(5, n+1, 2):\n            if is_prime(i) and is_prime(math.ceil(i/2)):\n                return f\"The {n}th polite number is {i}.\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # calculate the nth polite number \n    i = 1\n    polite = 1\n    while i <= n:\n        if i <= 10:\n            polite *= 2 * i + 1\n        else:\n            polite *= 2 * i + 1 + math.floor(math.log(i, 2)) + 1\n        i += 1\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        count += 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                break\n        else:\n            return num\n    return -1  # n is too large"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(*[iter(l1)]*2))\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes two lists as input,\n    the first one contains the first set of numbers and the second one contains the second set of numbers.\n    '''\n    count = 0\n    for num in arr:\n        for num2 in arr:\n            if num + num2 == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as inputs. It returns the count of pairs whose sum is equal to the given sum.\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements in list1 that are not present in list2.\n    \"\"\"\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    diff_list = []\n    # Loop through the elements of the first list\n    for element in li1:\n        # Check if the element is in the second list\n        if element in li2:\n            # If it is, remove it from the second list\n            li2.remove(element)\n        else:\n            # If it's not, append it to the difference list\n            diff_list.append(element)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not present in the second list.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # check if the lists are the same length\n    if len(li1)!= len(li2):\n        print(\"Error: Lists are not of the same length.\")\n    else:\n        # loop through the lists and find the difference\n        diff = [x for x in li1 if x not in li2]\n        print(\"The difference between the two lists is:\", diff)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a new list to store the difference\n    diff = []\n    # loop through each element in list 1\n    for i in li1:\n        # check if the element exists in list 2\n        if i in li2:\n            # if it does, remove it from list 2\n            li2.remove(i)\n        # if it doesn't, add it to the new list\n        else:\n            diff.append(i)\n    # return the new list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    for i in li2:\n        if i not in li1:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the difference between the two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i*i\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initializing the sum and count variables to zero\n    sum = 0\n    count = 0\n\n    # loop through the first n odd numbers\n    for i in range(2, n+1, 2):\n        # calculate the fourth power of the current odd number and add it to the sum\n        sum += i ** 4\n        # increment the count variable for each fourth power calculation\n        count += 1\n\n    # return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n\n    Args:\n    n (int): The number of odd natural numbers to find the sum of fourth power of.\n\n    Returns:\n    int: The sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_power = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum_of_fourth_power += i ** 4\n        i += 1\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum_fourth = 0\n    \n    # iterate n times\n    for i in range(n):\n        # get the ith odd natural number\n        num = i * 2 + 1\n        \n        # add its fourth power to the sum\n        sum_fourth += num ** 4\n    \n    # return the sum\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_4th_power = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum_4th_power += i ** 4\n    return sum_4th_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = i+1\n        sum += num ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if not (char in ['(', '{'] == stack[-1] in [')', '}']):\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack for the expression\n    stack = deque()\n    # Iterate over the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the top element from the stack and check if it's a closing parenthesis\n        elif char == ')':\n            if stack:\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    # If the stack is not empty at the end of the loop, the expression is not balanced\n    return stack == []"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    \n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                balanced = False\n                break\n            else:\n                stack.pop()\n    \n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return \"Not balanced\"\n            else:\n                stack.pop()\n\n    return \"Balanced\" if not stack else \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to keep track of open parentheses\n    stack = deque()\n    # loop through each character in the expression\n    for i in range(len(exp)):\n        # check if the current character is an open parenthesis\n        if exp[i] == '(':\n            # push it onto the stack\n            stack.append(i)\n        # check if the current character is a close parenthesis\n        elif exp[i] == ')':\n            # pop the top open parenthesis from the stack\n            if not stack:\n                return \"Invalid expression: unbalanced parentheses\"\n            j = stack.pop()\n            # check if the close parenthesis is balanced\n            if not (j < len(exp) and exp[j+1] == '('):\n                return \"Invalid expression: unbalanced parentheses\"\n    # if we reach here, the expression is balanced\n    return \"Expression is balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack or stack.pop()!= open_brackets[char]:\n                return False\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if j > i:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store the opening and closing parentheses\n    stack = deque()\n\n    # iterate through the expression\n    for char in exp:\n        # if the character is an opening parenthesis, add it to the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a closing parenthesis, check if the stack is not empty and the topmost character is the opening parenthesis\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n    # if the loop completes without finding any unmatched parentheses, return True\n    return True if not stack else False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Remove all words with k length in the given string.\n    \"\"\"\n    # split the string into words\n    words = test_str.split()\n    # loop through the words and remove those with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    # join the remaining words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    # Iterate over each word in the list\n    for i in range(len(words)):\n        # If the length of the word is equal to K, remove the word\n        if len(words[i]) == K:\n            del words[i]\n    # Join the list of words into a single string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # split the string into words\n    result = []\n    for word in words:\n        if len(word)!= K:  # if the length of the word is not equal to K\n            result.append(word)  # add it to the result list\n    return''.join(result)  # join the result list back into a string with spaces in between"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize a list to store the words without k length\n    result = []\n    # Iterate through each word\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the result list\n            result.append(word)\n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n\n    # Split the given string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with k length\n    k_length_words = []\n\n    # Loop through all the words in the list\n    for word in words:\n\n        # Check if the length of the current word is equal to K\n        if len(word) == K:\n\n            # If yes, append it to the list of words with k length\n            k_length_words.append(word)\n\n    # Join the list of words with k length to form a new string\n    new_str =''.join(k_length_words)\n\n    # Return the new string\n    return new_str"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # find all occurrences of pattern in text using re.findall()\n    occurrences = re.findall(pattern,text)\n    \n    # if no occurrences found, return None\n    if not occurrences:\n        return None\n    \n    # loop through all occurrences and find their positions in text\n    for i,occurrence in enumerate(occurrences):\n        occurrence_position = text.find(occurrence)\n        occurrences[i] = (occurrence_position,occurrence_position+len(occurrence))\n    \n    return occurrences"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # use re.search() function to find the pattern in the text\n    match = re.search(pattern, text)\n    \n    # if match object is not None, then return the match object\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return (match.start(), match.end(), match.group())"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        for match in matches:\n            position = text.find(match)\n            return match, position"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(nums[i]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and nums[i] % 2 == (i % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            odd_count += 1\n        if odd_count == len(nums):\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                print(False)\n                return True\n    print(True)\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            count = 0\n            for num in nums:\n                if num % 2 == 1:\n                    count += 1\n                if count > 0:\n                    break\n            else:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i] in vowels:\n                count += 1\n        elif i == len(test_str) - 1:\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i - 1] not in vowels) and (i == len(test_str) - 1 or test_str[i + 1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels) and (i == len(test_str)-1 or test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] not in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # find the sum of unique elements in the list\n    unique_sum = sum(unique_set)\n    # return the sum of unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)  # Create a set of unique elements from the input list\n    sum_of_unique = sum(unique_elements)  # Find the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a set to store the non-repeated elements\n    unique_set = set(arr)\n    # summing the unique elements\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the unique elements in the list\n    unique_set = set(arr)\n\n    # sum up the unique elements in the list\n    sum_of_unique = sum(unique_set)\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # convert the set to a list to retrieve the elements\n    unique_list = list(unique_set)\n    # calculate the sum of the unique elements in the list\n    unique_sum = sum(unique_list)\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the unique elements and their count\n    unique_dict = {}\n    # Loop through the list and add the unique elements to the dictionary\n    for num in arr:\n        if num in unique_dict:\n            unique_dict[num] += 1\n        else:\n            unique_dict[num] = 1\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Loop through the dictionary and add the elements that appear only once to the sum\n    for num, count in unique_dict.items():\n        if count == 1:\n            sum_non_repeated += num\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of all non-repeated elements in a given list.\n    \"\"\"\n    # Create a set of unique elements in the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum\n    sum_non_repeated = 0\n    # Loop through each unique element in the set\n    for element in unique_elements:\n        # Add the element to the sum if it's not repeated yet\n        if arr.count(element) == 1:\n            sum_non_repeated += element\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # convert the list to a set, to remove duplicates\n    unique_elements = set(arr)\n    # calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n    return sum_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a list where consecutive duplicates of elements are packed into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    current_group = []\n    for element in list1:\n        if element in current_group:\n            current_group.append(element)\n        else:\n            groups.append(current_group)\n            current_group = [element]\n    groups.append(current_group)\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, list(g)] for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() function to group consecutive duplicates\n    grouped_list = list(groupby(list1, lambda x: x))\n    \n    # Create an empty list to store sublists\n    sublists = []\n    \n    # Iterate over the grouped list\n    for group in grouped_list:\n        # Check if the current group has only one element\n        if len(list(group)) == 1:\n            # If yes, append the group to the sublists list\n            sublists.append(list(group))\n        # If not, create a sublist for the group and append it to the sublists list\n        else:\n            sublist = list(group)\n            sublists.append(sublist)\n    \n    # Return the sublists list\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped_list = sorted(list(set(list1)), key=lambda x: (x[0], x[1]))\n    packed_list = []\n    for key, group in groupby(grouped_list, lambda x: x[0]):\n        packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if isinstance(i, list):\n            sublist = tuple(i)\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = set()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            sublists.add(sublist)\n    sublist_count = {}\n    for sublist in sublists:\n        sublist_count[sublist] = sublist_count.get(sublist, 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        element_tuple = tuple(element)\n\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if element_tuple not in count_dict:\n            count_dict[element_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[element_tuple] += 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists[tuple(list1[i:j])] = sublists.get(tuple(list1[i:j]), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    # Loop through the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it already exists in the dictionary\n        if tuple(sublist) not in result:\n            # If not, add it to the dictionary with a count of 1\n            result[tuple(sublist)] = 1\n        # Otherwise, increment the count of the tuple in the dictionary\n        else:\n            result[tuple(sublist)] += 1\n    # Return the dictionary of results\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a set to store unique sublists\n    unique_sublists = set()\n\n    # iterate over each list in the input list\n    for i in list1:\n        # convert the list to tuple and add it to the set of unique sublists\n        unique_sublists.add(tuple(i))\n\n    # create a dictionary to store the counts of unique sublists\n    sublist_counts = {}\n\n    # iterate over each unique sublist in the set and update the count in the dictionary\n    for sublist in unique_sublists:\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    sublists = {}\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    \n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    counts = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[sublist_tuple] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # initialize empty list to store the combinations\n    result = []\n\n    # loop through the given list of tuples\n    for i in range(len(test_list)):\n        # loop through the remaining elements of the list\n        for j in range(i+1, len(test_list)+1):\n            # create a tuple of the elements\n            tup = tuple(test_list[i:j])\n            # calculate the sum of the elements in the tuple\n            sum_tup = sum(tup)\n            # check if the sum of the tuple is equal to zero\n            if sum_tup == 0:\n                # add the tuple to the result list\n                result.append(tup)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of all the sums in the list of tuples\n    sums = set(sum(t) for t in test_list)\n    # Create a dictionary to store the combinations of sums\n    combinations_dict = {}\n\n    # Iterate through the set of sums\n    for s in sums:\n        # Create a list of tuples with the sum s\n        combination = [(t[0], t[1]) for t in test_list if sum(t) == s]\n        # Add the list of tuples as a key in the dictionary and its value as a list of tuples\n        combinations_dict[s] = combination\n\n    # Create a list of tuples of all the combinations of sums in the list of tuples\n    combinations_list = [combination for s, combination in combinations_dict.items()]\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    \n    # Function to find all possible combinations of sums\n    def find_combinations_helper(lst, target_sum):\n        \"\"\"\n        Recursive function to find all possible combinations of sums with tuples in the given tuple list.\n        \"\"\"\n        if not lst:\n            if target_sum == 0:\n                yield []\n            return\n        \n        for i in range(len(lst)):\n            new_lst = lst[:i] + lst[i+1:]\n            for sub_lst in find_combinations_helper(new_lst, target_sum - lst[i]):\n                yield [lst[i]] + sub_lst\n    \n    # Apply the helper function to find all possible combinations of sums with tuples in the given tuple list\n    result = []\n    for tup in test_list:\n        for combination in find_combinations_helper(tup, 0):\n            result.append(combination)\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    all_combinations = []\n\n    for i in range(1, len(unique_tuples) + 1):\n        for combination in combinations(unique_tuples, i):\n            all_combinations.append(tuple(combination))\n\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # iterate over all possible pairs of elements in the tuple list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the sum of these two elements is in the tuple list\n            if sum((test_list[i], test_list[j])) in test_list:\n                # if it is, print the tuple and its sum\n                print((test_list[i], test_list[j]), sum((test_list[i], test_list[j])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    comb_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            if i!= j:\n                comb = tuple(sorted((test_list[i], test_list[j])))\n                if comb not in comb_list:\n                    comb_list.append(comb)\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combination = tuple(test_list[i:j])\n            if sum(combination) in test_list:\n                result.append(combination)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations([x for x in test_list if len(x) >= 2], 2))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns all the combinations of sums with tuples in the given list. \n    '''\n    # Sorting the list of tuples\n    test_list.sort()\n\n    # Finding the unique combinations of tuples\n    unique_combinations = set(combinations(test_list, len(test_list)))\n\n    # Returning the list of unique combinations of sums with tuples\n    return list(unique_combinations)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # initialize empty list to store the combinations\n    combinations_list = []\n\n    # loop through all possible combinations of tuples in the given tuple list\n    for comb in combinations(test_list, len(test_list)):\n        # calculate the sum of the tuples in the combination\n        total_sum = sum(comb)\n        # if the total sum is equal to the target sum, add the combination to the list\n        if total_sum == target_sum:\n            combinations_list.append(comb)\n\n    # return the list of combinations with sums equal to the target sum\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i == n//i:\n                count += 1\n    if n > 1 and count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes a number as input and returns True if the count of divisors is even.\n    '''\n    divisors = []\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            i += 1\n    if n > 1:\n        divisors.append(n)\n    divisors.sort()\n    count = len(divisors)\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if len(divisors) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return \"The count of divisors is greater than 2\"\n    return \"The count of divisors is even\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to count the number of divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    divisors.append(n)\n    divisors.sort()\n    count_divisors = len(divisors)\n    if count_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef even_divisors(n):\n    '''\n    This function checks whether the count of divisors of a given number is even.\n    '''\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    # initialize a counter variable \n    count = 0 \n    # loop through all numbers from 1 to n \n    for i in range(1, n+1): \n        # check if i is a divisor of n \n        if n % i == 0: \n            # if it is, increment the counter \n            count += 1 \n    # return True if the count of divisors is even, else return False \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = []\n\n    # calculate the number of divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n\n    # count the number of divisors of n\n    count = len(divisors)\n\n    # check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def count_factors(num):\n        factors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    def count_divisor(num, factors):\n        count = 0\n        for factor in factors:\n            if num % factor == 0:\n                count += 1\n        return count\n\n    # Get the factors of n\n    factors = count_factors(n)\n\n    # Get the count of divisors of n\n    count = count_divisor(n, factors)\n\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Initialize a dictionary to store the sum of odd length subarrays\n    odd_sum = {}\n\n    # Traverse through the array and calculate the sum of odd length subarrays\n    for i in range(n):\n        if i < n - 1:\n            odd_sum[i] = arr[i] + arr[i+1]\n        else:\n            odd_sum[i] = arr[i]\n\n    # Traverse through the dictionary and calculate the sum of all subarrays\n    sum_of_subarrays = 0\n    for key in odd_sum:\n        sum_of_subarrays += odd_sum[key]\n\n    # Return the sum of all subarrays\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1 % 2!= 0:\n                sum += arr[i:j].sum()\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd and its index is less than the current index\n        if arr[i] % 2!= 0 and i < len(arr) - 1:\n            # Initialize a variable to store the sum of the current odd length subarray\n            subarray_sum = 0\n\n            # Iterate through the remaining elements of the array\n            for j in range(i+1, len(arr)):\n                # Add the current element to the subarray sum\n                subarray_sum += arr[j]\n\n            # Add the current odd length subarray sum to the sum of all odd length subarrays\n            sum_odd += subarray_sum\n\n    # Return the sum of all odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n    for i in range(n):\n        if i == n-1 or arr[i+1] % 2 == 0:\n            if i == 0 or arr[i-1] % 2 == 0:\n                sum_odd_length += arr[i]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2!= 0: # check if odd length subarray\n                sum_odd += arr[j] - arr[i] # add subarray sum\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    :param arr: the input array\n    :type arr: list\n    :return: the sum of all odd length subarrays\n    :rtype: int\n    \"\"\"\n\n    # Calculate the sum of all subarrays of length 1 to n\n    subarray_sum = sum(arr)\n\n    # Initialize the sum of all odd length subarrays to 0\n    odd_length_sum = 0\n\n    # Iterate through the array\n    for i in range(1, len(arr) + 1):\n        # Calculate the sum of all subarrays of length i to n\n        subarray_sum_i = sum(arr[j:j+i] for j in range(0, len(arr)-i+1))\n\n        # If the sum is odd, add it to the sum of all odd length subarrays\n        if subarray_sum_i % 2 == 1:\n            odd_length_sum += subarray_sum_i\n\n    return odd_length_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable to 0\n    sum_odd = 0\n\n    # Iterate over the input array\n    for i in range(len(arr)):\n        # If the current element is odd, add it to the sum variable\n        if arr[i] % 2!= 0:\n            sum_odd += arr[i]\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_list = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_list.append(sum(arr[i:j]))\n    return sum_list"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_odd += sum(arr[i:j+1])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all odd length subarrays\n    odd_sum = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is odd, add it to the sum\n        if i % 2 == 1:\n            odd_sum += arr[i]\n        # If the current element is even, check if the previous element was odd\n        else:\n            if i > 0 and arr[i-1] % 2 == 1:\n                # If it was, add it to the sum\n                odd_sum += arr[i]\n    # Return the sum of all odd length subarrays\n    return odd_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    h = 0\n    s = 0\n    v = max_color / 255\n    \n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = 60 * ((g - b) / delta)\n    elif max_color == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    \n    if max_color == 0:\n        s = 0\n    else:\n        s = delta / max_color\n        \n    h = int(h)\n    s = int(s * 100)\n    v = int(v * 100)\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HEX\n    hex_color = '#{:02x}{:02x}{:02x}'.format(r, g, b)\n\n    # Convert HEX to RGB\n    r, g, b = [int(hex_color[i:i+2], 16) for i in (1, 3, 5)]\n\n    # Convert RGB to HSV\n    h, s, v = 0, 0, max(r, g, b)\n    delta = v - min(r, g, b)\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / v\n\n    if max(r, g, b) == r:\n        h = (g - b) / delta\n    elif max(r, g, b) == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60\n    if h < 0:\n        h += 360\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in an RGB (red, green, blue) tuple and returns the corresponding HSV (hue, saturation, value) tuple.\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = s = 0 # achromatic color\n    else:\n        s = delta / max_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        h = round(h * 60) # convert to degrees\n    \n    v = max_val\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    h = 0.0\n    s = 0.0\n    v = 0.0\n\n    # calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # calculate delta value\n    delta = max_val - min_val\n\n    # calculate value of hue\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60.0\n\n    # calculate saturation\n    if delta == 0:\n        s = 0\n    else:\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n    # calculate value\n    v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = ((g - b) / delta) % 6\n    elif max_rgb == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta / max_rgb\n\n    if max_rgb == min_rgb:\n        v = max_rgb\n    else:\n        v = max_rgb / 255\n\n    # Convert HSV to RGB\n    if s == 0:\n        r, g, b = v, v, v\n    else:\n        if h < 0:\n            h += 6\n        i = int(h)\n        f = h - i\n        p = v * (1 - s)\n        q = v * (1 - s * f)\n        t = v * (1 - s * (1 - f))\n\n        if i == 0:\n            r, g, b = v, t, p\n        elif i == 1:\n            r, g, b = q, v, p\n        elif i == 2:\n            r, g, b = p, v, t\n        elif i == 3:\n            r, g, b = p, q, v\n        elif i == 4:\n            r, g, b = t, p, v\n        elif i == 5:\n            r, g, b = v, p, q\n\n    # Convert RGB to HSV\n    hsv = (h * 360, s * 255, v * 255)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = max(r, g, b)\n\n    d = v - min(r, g, b)\n    if d == 0:\n        h = 0\n        s = 0\n    elif r == v:\n        h = 60 * (((g - b) / d) % 6)\n    elif g == v:\n        h = 60 * (((b - r) / d) + 2)\n    else:\n        h = 60 * (((r - g) / d) + 4)\n\n    if h < 0:\n        h += 360\n\n    h = round(h, 2)\n    s = round((v - min(r, g, b)) / (max(r, g, b) - min(r, g, b)), 2)\n    v = round(v, 2)\n\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to HSV color space\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    d = v - min(r, g, b)\n    \n    if d == 0:\n        s = 0\n    elif v == r:\n        h = (g - b) / d\n    elif v == g:\n        h = 2 + (b - r) / d\n    else:\n        h = 4 + (r - g) / d\n    \n    h = round(h * 60)\n    \n    if h < 0:\n        h += 360\n    \n    if h < 60:\n        s = d / v\n    else:\n        s = d / (2 - v)\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the RGB color model to HSV color model.\n    \"\"\"\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    if h < 0:\n        h += 6\n    \n    h = h / 6\n    \n    if v == 0:\n        s = 0\n    else:\n        s = delta / v\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if cmax == cmin:\n        h = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if r == cmax:\n            h = (g - b) / delta\n        elif g == cmax:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        h = h / 6\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2*cmax - 1))\n    \n    v = cmax\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the given RGB color to HSV color model.\n\n    :param r: Red component of the RGB color.\n    :param g: Green component of the RGB color.\n    :param b: Blue component of the RGB color.\n    :return: A tuple containing the Hue, Saturation, and Value of the input RGB color.\n    \"\"\"\n\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    h, s, v = 0, 0, max_value\n\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        d = max_value - min_value\n        s = d / max_value\n\n        if max_value == r:\n            h = (g - b) / d + (g < b) * 6\n        elif max_value == g:\n            h = (b - r) / d + 2\n        else:\n            h = (r - g) / d + 4\n\n        h = h / 6\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    \n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    product = even_sum * odd_sum\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    # Create an empty list to store the even and odd numbers\n    even_odd = []\n    # Loop through each element of the given list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If even, add it to the even_odd list\n            even_odd.append(num)\n        else:\n            # If odd, add it to the even_odd list\n            even_odd.append(num)\n    # Check if there are at least two even numbers and at least two odd numbers in the list\n    if len(even_odd) >= 2:\n        # Multiply the first even and first odd numbers\n        first_even_odd = even_odd[0] * even_odd[1]\n        # Multiply the first even and last odd numbers\n        first_even_last_odd = even_odd[0] * even_odd[-1]\n        # Multiply the last even and first odd numbers\n        last_even_first_odd = even_odd[-1] * even_odd[0]\n        # Multiply the last even and last odd numbers\n        last_even_last_odd = even_odd[-1] * even_odd[-1]\n        # Return the product of the first even and odd numbers, the first even and last odd numbers, the last even and first odd numbers, and the last even and last odd numbers\n        return first_even_odd * first_even_last_odd * last_even_first_odd * last_even_last_odd\n    else:\n        # If there are not at least two even numbers and at least two odd numbers in the list, return None\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    # Initialize the first even and odd number\n    first_even = None\n    first_odd = None\n    \n    # Loop through the list and find the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            elif first_even!= num:\n                first_even = None\n                break\n        else:\n            if first_odd is None:\n                first_odd = num\n            elif first_odd!= num:\n                first_odd = None\n                break\n    \n    # If there are no even or odd numbers, return None\n    if first_even is None and first_odd is None:\n        return None\n    \n    # Multiply the first even and odd numbers and return the result\n    return first_even * first_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n            if count == 2:\n                break\n        elif i % 2!= 0:\n            count += 1\n            if count == 2:\n                break\n    return list1[0] * list1[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 0\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            even = even * i\n            product = product * even\n        else:\n            odd = odd * i\n            product = product * odd\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even = 1\n    odd = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            if first_even == 0:\n                first_even = num\n            else:\n                product *= num\n        else:\n            if first_odd == 0:\n                first_odd = num\n            else:\n                product *= num\n\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to a tuple\n    tuple_str = tuple(test_str.split())\n    # convert the tuple to an integer tuple\n    int_tuple = tuple(map(int, tuple_str))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements using comma as separator\n    str_tuple = test_str.split(',')\n    # Convert each element to integer and append it to the integer_tuple list\n    integer_tuple = [int(i) for i in str_tuple]\n    # Return the integer_tuple\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert tuple string to tuple\n        tup = tuple(test_str.split(','))\n        # convert each tuple element to integer\n        int_tup = tuple(int(x.strip()) for x in tup)\n        return int_tup\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma and space\n    tuple_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").replace(\",\", \"\").split(\",\")\n\n    # Convert each string to integer\n    integer_tuple = tuple(int(x) for x in tuple_str)\n\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string in the list to an integer using int() function\n    int_list = [int(s) for s in str_list]\n    \n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of tuples\n    test_list = test_str.split(',')\n    # initialize an empty list to hold the integer tuples\n    int_list = []\n    # loop over the list of tuples\n    for tup in test_list:\n        # split each tuple into a list of strings and convert them to integers\n        int_tup = tuple(int(s) for s in tup.split())\n        # add the integer tuple to the list\n        int_list.append(int_tup)\n    # return the list of integer tuples\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the tuple to store the integers\n    integers = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a digit, convert it to an integer and add it to the list\n        if char.isdigit():\n            integers.append(int(char))\n        # If the character is not a digit, skip it\n        else:\n            continue\n\n    # Convert the list of integers to a tuple and return it\n    return tuple(integers)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize empty list for integer tuple\n    integer_tuple = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is an integer\n        if char.isdigit():\n            # if it is, convert it to an integer and append to the list\n            integer_tuple.append(int(char))\n\n    # return the integer tuple\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        result = tuple(int(s) for s in test_str)\n        return result\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split()])"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where the value should be inserted using binary search\n    i = bisect.bisect_right(a, x)\n    # Return the index of the next element if there is one, otherwise the index of the insertion point\n    return i if i < len(a) and a[i] == x else i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A list of sorted integers.\n    x (int): The value to locate.\n\n    Returns:\n    int: The index of the right insertion point for x.\n    \"\"\"\n\n    # Find the index where the value should be inserted using binary search.\n    i = bisect.bisect_right(a, x)\n\n    # Check if the value is already present in the list. If not, return the index where it should be inserted.\n    if i!= len(a) and a[i]!= x:\n        return i\n\n    # Check if the value should be inserted at the end of the list.\n    if i == len(a) or a[i] > x:\n        return i + 1\n\n    # Otherwise, the value should be inserted at the beginning of the list.\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index - 1\n    elif a[index] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index where x should be inserted using bisect_right\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a(?=.*b){3}b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    return pattern.search(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){2}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert list to tuple\n    new_list = tuple(test_list)\n    # convert string to list\n    new_str = list(test_str)\n    # join the two lists into a new tuple\n    new_tuple = tuple(new_list + new_str)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists and the string together into a new list\n    new_list = test_list + [test_str]\n    # Convert the new list into a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Join the given list and string into a single string\n    combined_str = test_str.join(test_list)\n    # Convert the combined string into a list of characters\n    char_list = list(combined_str)\n    # Convert the list of characters into a tuple\n    new_tuple = tuple(char_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of integers.\n        test_str (str): A string of characters.\n\n    Returns:\n        A new tuple containing the elements of the given list and string.\n\n    \"\"\"\n    # Combine the list and string into a single tuple\n    new_tuple = tuple(test_list + [ord(char) for char in test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Split the list into individual strings\n    list_strings = [str(x) for x in test_list]\n    # Concatenate the list strings and the test string\n    combined_str = test_str.join(list_strings)\n    # Convert the combined string to a tuple and return it\n    return tuple(combined_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and the string to get a single string\n    new_string = test_str + ''.join(str(x) for x in test_list)\n    # Split the new string into a list of characters\n    new_list = list(new_string)\n    # Convert the list of characters into a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a string and then convert the string to a tuple\n    new_tuple_str = \"\".join(map(str, test_list))\n    return tuple(new_tuple_str)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and not nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count == 0:\n                return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2 == 0:\n            count += 1\n    if count == len(nums)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n                if count > 2:\n                    return False\n        if count!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i].isdigit():\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n        if count == len(nums)//2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(remove_nested(item))\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while test_tup:\n        if type(test_tup[0]) == tuple:\n            test_tup = test_tup[0]\n        else:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup.extend(i)\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initializing empty list to store non-tuple elements\n    result = []\n    # iterating through tuple elements\n    for i in test_tup:\n        # if the element is not a tuple, add it to the result list\n        if not isinstance(i, tuple):\n            result.append(i)\n    # returning the result list\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flattened_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flattened_list += item\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        if isinstance(test_tup, tuple):\n            test_tup = tuple(remove_nested(elem) for elem in test_tup)\n        elif isinstance(test_tup, list):\n            test_tup = [remove_nested(elem) for elem in test_tup]\n        else:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup.extend(remove_nested(elem))\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    nested_tup = []\n    for element in test_tup:\n        if isinstance(element, tuple):\n            for sub_element in element:\n                if not isinstance(sub_element, tuple):\n                    nested_tup.append(sub_element)\n        else:\n            if not isinstance(element, tuple):\n                nested_tup.append(element)\n    return tuple(nested_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Traverse the array using two pointers\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    i = 0\n    while i < n and arr[i] < x:\n        i += 1\n    j = i - 1\n    while j >= 0 and arr[j] == x:\n        j -= 1\n    return j if arr[j] < x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if x > arr[-1]:\n        return -1\n    elif x < arr[0]:\n        return 0\n    else:\n        for i in range(l):\n            if arr[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a value x as input and returns the index of the last occurrence of x in the array. If x is not present in the array, it returns -1.\n    \"\"\"\n\n    # Find the index of the first occurrence of x in the array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not present in the array, return -1\n    if left > len(arr) - 1 or arr[left]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters: an array and an element.\n    It returns the index of the last occurrence of the element in the array.\n    \"\"\"\n\n    # Initialize the left pointer and the right pointer to the first and last indices of the array, respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left < right:\n\n        # Find the middle index of the array\n        mid = (left + right) // 2\n\n        # If the element is present at the middle index or in the left subarray, update the left pointer\n        if arr[mid] == x:\n            left = mid\n        # If the element is present in the right subarray, update the right pointer\n        elif arr[mid] > x:\n            right = mid\n        # If the element is present in the left subarray, update the left pointer\n        else:\n            left = mid + 1\n\n    # If the element is not present in the array, return -1\n    return -1 if arr[left]!= x else left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n\n    Parameters:\n    arr (list): The sorted array to search for x.\n    x (int): The element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of x in the array.\n    \"\"\"\n    # Initialize left and right pointers to first and last indices of the array respectively.\n    left = 0\n    right = len(arr) - 1\n\n    # Loop while left pointer is less than or equal to right pointer.\n    while left <= right:\n        # Calculate the middle index of the array.\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, return the index.\n        if arr[mid] == x:\n            return mid\n\n        # If the middle element is less than x, ignore the right half of the array.\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than x, ignore the left half of the array.\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n    \n    # Find the index of x in the array using binary search\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Return the index of x in the sorted array\n    return right + 1 if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    if x not in arr:\n        return -1\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b$'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(.*?)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(.*)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum_items = 0\n    for key, value in dict.items():\n        sum_items += value\n    return sum_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n        l (int): lower limit of the range\n        r (int): upper limit of the range\n\n    Returns:\n        int: the sum of all odd natural numbers within the range l and r\n    \"\"\"\n    if l < 1:\n        raise ValueError(\"The lower limit must be greater than or equal to 1.\")\n    if r < l:\n        raise ValueError(\"The upper limit must be greater than or equal to the lower limit.\")\n    return sum(i for i in range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # check if the input is greater than 0\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # iterate over all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the odd number to the sum\n        sum += i\n\n    # return the sum of all odd numbers within the range l and r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum to 0\n    sum_of_odds = 0\n    \n    # Iterate from l to r\n    for i in range(n):\n        \n        # If i is odd, add it to the sum_of_odds\n        if i % 2!= 0:\n            sum_of_odds += i\n    \n    # Return the sum of odd numbers\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input for l and r range\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the range of numbers and add the odd numbers to the sum\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    \n    # print the result\n    print(\"The sum of odd numbers between\", l, \"and\", r, \"is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # defining a range of odd natural numbers from 1 to n\n    odd_numbers = list(range(1, n+1, 2))\n    # initializing the sum variable to 0\n    sum = 0\n    # iterating over each odd number in the list and adding it to the sum\n    for num in odd_numbers:\n        sum += num\n    # returning the sum of all odd numbers within the given range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    i = 1\n    while i <= n:\n        total += i\n        i += 2\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_odd = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n        \n    return sum_odd"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:  \n        return 0  \n    else:  \n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if not arr: # check if the array is empty\n        return 0\n    return arr[0] + _sum(arr[1:]) # recursive call to the function with the rest of the array\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Find the number of bits in the number n\n    n_bits = 0\n    while n:\n        n_bits += 1\n        n >>= 1\n    # Rotate the bits by d bits\n    n_rotated = (n << d) | (n >> (32 - d))\n    # Return the rotated bits\n    return n_rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary number to integer and divide by 2^d to get the required shift value\n    shift = (d % 32) * 4 # % 32 is to get the remainders of d when d is divided by 32\n    # Convert integer to binary using bitwise operators\n    binary = bin(n)[2:] # convert the number to binary and remove the '0b' prefix\n    # Prepend zeroes to the binary representation to make the required length\n    while len(binary) < 32:\n        binary = '0' + binary\n    # Perform left rotation using bitwise operators\n    new_binary = binary[-shift:] + binary[:-shift]\n    # Convert the rotated binary representation back to decimal\n    new_number = int(new_binary, 2)\n    # Return the new rotated number\n    return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    \n    mask = 0xFFFFFFFF # Mask to extract last 32 bits\n    shift = 32 - d # Shift amount\n    shifted_bits = n >> shift # Shifted bits\n    left_bits = n & mask # Left bits\n    rotated_bits = shifted_bits | left_bits # Rotated bits\n    \n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # calculate the rotation count (the bit position at which we need to start shifting)\n    rotation_count = 32 - d\n    # rotate the binary string using the rotation count\n    rotated_binary = binary[rotation_count:] + binary[:rotation_count]\n    # convert the rotated binary string back to an integer and return it\n    return int(rotated_binary, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    return ((n<<d) | (n>>>(32-d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    \n    mask = 0xffffffff # 32-bit mask\n    \n    # If d is greater than 31, then rotate to the left by 31 bits\n    if d > 31:\n        d -= 32\n    \n    # Extract the low d bits of n\n    extracted = n & (mask << d)\n    \n    # Shift the remaining bits to the left by d bits\n    shifted = n >> d\n    \n    # Combine the extracted and shifted bits\n    rotated = extracted | shifted\n    \n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \"\"\"\n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    # check if n is negative\n    is_negative = False\n    if n < 0:\n        n = abs(n)\n        is_negative = True\n    # pad with zeros if binary string is less than d\n    if len(binary_str) < d:\n        binary_str = \"0\" * (d - len(binary_str)) + binary_str\n    # rotate left bits\n    rotated_str = binary_str[d:] + binary_str[:d]\n    # convert rotated string back to integer\n    rotated_int = int(rotated_str, 2)\n    if is_negative:\n        rotated_int = -rotated_int\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert binary string to integer\n    n = int(n, 2)\n    \n    # Calculate the shift value\n    shift_value = (d % 32)\n    \n    # Left rotate the binary string by shift value\n    n = ((n << shift_value) & 0xffffffff) | ((n >> (32 - shift_value)) & 0xffffffff)\n    \n    # Convert integer back to binary string and return\n    return format(n, '032b')"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Initialize result variable\n    result = 0\n    \n    # Extract the least significant d bits of n\n    mask = (1 << d) - 1\n    result = (n & mask) << (32 - d)\n    \n    # Extract the most significant bits of n and left shift by d\n    result |= (n >> d)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    elif d >= 32:\n        return n << (d - 32)\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # Define a regular expression pattern for whitespace characters\n    whitespace_pattern = re.compile(r'\\s')\n    # Remove all matches from the text\n    return whitespace_pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a given string and returns the modified string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all spaces using regular expression\n    text = re.sub(r'\\s+', '', text)\n    # remove multiple spaces\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    # Check if all three numbers are equal\n    if x == y == z:\n        count += 1\n    # Check if any two numbers are equal\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Initialize the count variable to zero\n    count = 0\n    \n    # Loop through each number and compare it to the other two numbers\n    for num in [x, y, z]:\n        # If the number is equal to any of the other two numbers, increment the count\n        if num == x or num == y or num == z:\n            count += 1\n    \n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if i == x - 1 and j == y - 1 and k == z - 1:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(10):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through the given list of integers\n    for num in [x, y, z]:\n        # Check if the current number is equal to the previous two numbers\n        if num == x:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # Sort the array in decreasing order\n    arr = sorted(arr, reverse=True)\n    # Traverse through the sorted array to find the number of rotations\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < arr[j]:\n            count += 1\n            i += 1\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize a counter variable\n    count = 0\n    # Check if the array is already sorted\n    if is_sorted(arr):\n        return 0\n    # Find the index of the smallest element\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    # Now, left points to the index of the first element greater than arr[right]\n    # Check if arr[left] is the first element of the sorted array\n    if left == 0 or arr[left - 1] < arr[left]:\n        count += 1\n    # Check if arr[right] is the last element of the sorted array\n    if right == n - 1 or arr[right + 1] < arr[right]:\n        count += 1\n    # If arr[left] is not the first element of the sorted array,\n    # then check if it can be moved to the first position\n    if left > 0 and arr[left - 1] > arr[left]:\n        count += 1\n    # If arr[right] is not the last element of the sorted array,\n    # then check if it can be moved to the last position\n    if right < n - 1 and arr[right + 1] < arr[right]:\n        count += 1\n    return count\n\n\ndef is_sorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n\n    # check for 2 rotations\n    for i in range(n-1):\n        if arr[i] < arr[n-i-1]:\n            return 2\n\n    # check for 1 rotation\n    return 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n\n    # Find the middle element of the sorted array\n    mid = n // 2\n\n    # Initialize the rotation count and the index of the middle element\n    count = 0\n    i = 0\n    j = mid\n\n    # Iterate through the remaining unsorted array and compare each element with the middle element\n    while j < n:\n        if arr[j] < arr[i]:\n            # The array is sorted after the current element\n            i = j\n            j += 1\n        elif arr[j] > arr[i]:\n            # The array is sorted before the current element\n            count += (mid - i)\n            j += 1\n        else:\n            # The array is sorted on the current element\n            i = j\n            j += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # find the first occurrence of a non-increasing subsequence\n    i = 0\n    for j in range(n):\n        if arr[j] > arr[i]:\n            i = j\n    # find the last occurrence of a non-increasing subsequence\n    j = n - 1\n    for k in range(n - 2, -1, -1):\n        if arr[k] > arr[j]:\n            j = k\n    # count the number of rotations required to generate the sorted subsequence\n    return j - i + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array to find the minimum element\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Find the minimum index of the minimum element\n    min_index = arr.index(min_element)\n    # Find the maximum element in the array\n    max_element = arr[n - 1]\n    # Traverse the array from right to left to find the maximum element\n    for i in range(n - 2, -1, -1):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    # Find the maximum index of the maximum element\n    max_index = arr.index(max_element)\n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    if max_index > min_index:\n        count += max_index - min_index\n        # Traverse the array from left to right to generate the sorted array\n        for i in range(n):\n            if i == max_index:\n                arr[i], arr[min_index] = arr[min_index], arr[i]\n                min_index += 1\n            elif i < max_index:\n                arr[i], arr[min_index] = arr[min_index], arr[i]\n                min_index += 1\n    else:\n        count += min_index - max_index\n        # Traverse the array from right to left to generate the sorted array\n        for i in range(n - 1, -1, -1):\n            if i == min_index:\n                arr[i], arr[max_index] = arr[max_index], arr[i]\n                max_index -= 1\n            elif i > min_index:\n                arr[i], arr[max_index] = arr[max_index], arr[i]\n                max_index -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        elif arr[i] < arr[j]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Base case\n    if n <= 1:\n        return 0\n    # Initialize minimum number of rotations to infinity\n    min_rotations = float('inf')\n    # Iterate through all possible rotations\n    for i in range(n):\n        # Calculate the number of rotations required to sort the array\n        rotations = n - i - 1\n        # Check if the sorted array is already sorted\n        if arr[i] <= arr[rotations] and arr[rotations] <= arr[n - 1]:\n            # Update the minimum number of rotations if the sorted array is shorter than the current minimum\n            if rotations < min_rotations:\n                min_rotations = rotations\n    return min_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # Count the number of swaps required to sort the array\n    count = 0\n    for i in range(n):\n        j = i+1\n        while j < n and arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        count += j - i - 1\n    \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n\n    :param n: the number to check\n    :return: True if the number is a perfect square, False otherwise\n    \"\"\"\n    if n < 0:\n        return False\n    left = 0\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    Returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    # check if the given number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # check if the given number is divisible by 1, which means its square is 1\n    if n % 1 == 0:\n        return True\n\n    # if the given number is not divisible by 1, its square can be found using the Pythagorean theorem\n    # we start by finding the square root of the given number\n    root = int(n ** 0.5) + 1\n\n    # we check all the integers from 1 to the square root of the given number\n    for i in range(1, root):\n        # if the square of the given number minus the square of the i-th integer is equal to 0, it means the given number is a perfect square\n        if n - i ** 2 == 0:\n            return True\n\n    # if we reach this point, the given number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Using the Babylonian method to check if the number is a perfect square\n    # Using the Pythagorean theorem to find the square root of the number\n    if n < 0:\n        return False\n\n    # Using the Pythagorean theorem to find the square root of the number\n    root = 0\n    while n > 0:\n        root += 1\n        n -= root\n\n    # Using the Pythagorean theorem to check if the square root is equal to the square of the original number\n    return root * root == n\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    :param n: The number to be checked\n    :return: True if n is a perfect square, False otherwise.\n    \"\"\"\n\n    # first check if n is negative\n    if n < 0:\n        return False\n\n    # next check if n is a square number\n    square = int(n ** 0.5) + 1\n    if square * square!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # A function to check whether a number is a perfect square or not\n    def is_perfect_square(num):\n        # To check if a number is a perfect square or not, we need to check if the square root of the number is an integer.\n        # If it is an integer, then it is a perfect square, otherwise not.\n        sqrt_num = int(num ** 0.5)\n        return sqrt_num ** 2 == num\n\n    # Check whether the given number is a perfect square or not\n    if is_perfect_square(n):\n        print(n, \"is a perfect square.\")\n    else:\n        print(n, \"is not a perfect square.\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # First, we check if the number is less than 2 (which is the smallest perfect square)\n    if n < 2:\n        return False\n\n    # We then loop through all the numbers between 2 and n-1\n    for i in range(2, n):\n        # We calculate the square root of the current number using the formula sqrt(num)\n        square_root = i * i\n        # We check if the square root is equal to the current number\n        if square_root == n:\n            return True\n        # If the square root is less than the current number, we have found the square root of the current number\n        elif square_root < n:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a perfect square and False otherwise.\n    A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because 16 = 4 * 4 = 16.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the given number is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # Initialize two variables to keep track of the square root and the remainder\n    square_root = n\n    remainder = 0\n\n    # Calculate the square root\n    while square_root > remainder:\n        square_root = (square_root + remainder) // 2\n        remainder = n - square_root * square_root\n\n    # Check if the square root is equal to the given number\n    if square_root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # If the given number is less than 1, return False\n    if n < 1:\n        return False\n\n    # Calculate the square root of the given number\n    root = n ** 0.5\n\n    # If the square root is an integer, return True\n    if root.is_integer():\n        return True\n\n    # Otherwise, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        if i*i == n:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes an array of integers as input and returns True if the product of the numbers in the array is even, and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    # iterate over the list and multiply each element with the product\n    for num in arr:\n        product *= num\n    \n    # check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return \"List is empty.\"\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        product = 1\n        for num in arr:\n            product *= num\n        if product % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        temp_sum = sum(lists[i])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        subsum = sum(sublist)\n        if subsum > max_sum:\n            max_sum = subsum\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum list and its corresponding sum\n    max_sum_list = []\n    max_sum = 0\n\n    # Iterate through each sublist in the main list\n    for sublist in lists:\n\n        # Initialize the current sublist and its corresponding sum\n        current_sum = 0\n        current_sublist = []\n\n        # Iterate through each element in the sublist\n        for element in sublist:\n\n            # Add the element to the current sublist and its corresponding sum\n            current_sublist.append(element)\n            current_sum += element\n\n            # Check if the current sublist is greater than the maximum sum list\n            if current_sum > max_sum:\n\n                # Update the maximum sum list and its corresponding sum\n                max_sum_list = current_sublist\n                max_sum = current_sum\n\n    # Return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as an input and returns the list in the list of lists with the maximum sum of elements.\n    '''\n    # Define a variable to store the maximum sum\n    max_sum = float('-inf')\n    \n    # Iterate through each sub-list in the input list\n    for sublist in lists:\n        # Calculate the sum of the sub-list\n        sublist_sum = sum(sublist)\n        \n        # If the sum is greater than the current maximum sum, update the maximum sum\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    \n    # Create a new list with the maximum sum of each sub-list\n    max_sublists = []\n    for sublist in lists:\n        if sum(sublist) == max_sum:\n            max_sublists.append(sublist)\n    \n    # Return the maximum sum sub-list(s)\n    return max_sublists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for list1 in lists:\n        for list2 in lists:\n            if list1!= list2:\n                current_sum = sum(list1) + sum(list2)\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = [list1, list2]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum to the first element in the first list\n    max_sum = lists[0][0]\n\n    # Loop through each sublist in the list of lists\n    for sublist in lists:\n        # Initialize the current sum to the first element of the sublist\n        current_sum = sublist[0]\n\n        # Loop through each element in the sublist\n        for i in range(1, len(sublist)):\n            # Add the current element to the current sum\n            current_sum += sublist[i]\n\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum to the current sum\n                max_sum = current_sum\n\n    # Return the list in a list of lists whose sum of elements is the highest\n    return [lists[i] for i in range(len(lists)) if lists[i][0] == max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum to the first element in the first list\n    max_sum = lists[0][0]\n    \n    # Loop through each list in the list of lists\n    for list in lists:\n        # Initialize running_sum to 0\n        running_sum = 0\n        \n        # Loop through each element in the list\n        for num in list:\n            # Add each element to running_sum\n            running_sum += num\n            \n            # Check if running_sum is greater than max_sum\n            if running_sum > max_sum:\n                # Update max_sum to running_sum\n                max_sum = running_sum\n                \n    # Return the list in a list of lists with the highest sum\n    return lists[max_sum_list.index(max_sum)]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i > 0 and j > 0:\n                lists[i][j] += max(lists[i-1][j], lists[i][j-1])\n            \n            current_sum = sum(lists[i])\n            \n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [lists[i]]\n            elif current_sum == max_sum:\n                result.append(lists[i])\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for sum of lists and maximum sum\n    max_sum = float('-inf')\n    max_list = []\n\n    # Loop through each list in the list of lists\n    for list in lists:\n        # Initialize a variable to store the sum of the elements in the list\n        list_sum = 0\n\n        # Loop through each element in the list and add it to the sum\n        for element in list:\n            list_sum += element\n\n        # Check if the sum of the elements in the list is greater than the current maximum sum\n        if list_sum > max_sum:\n            # Update the maximum sum and the list with the current maximum sum\n            max_sum = list_sum\n            max_list = list\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [[i, j]]\n            elif lists[i][j] == max_sum:\n                max_list.append([i, j])\n    \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    current_count = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_count += 1\n        else:\n            current_count = 0\n        if current_count > max_count:\n            max_count = current_count\n            start = i - max_count + 1\n    return test_str[start:start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    start = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                start = i - max_run + 1\n        else:\n            current_run = 0\n    return test_str[start:start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 1\n    max_run_length = 1\n    current_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i] == current_char:\n            run_length += 1\n        else:\n            if test_str[i].isupper():\n                max_run_length = max(max_run_length, run_length)\n            else:\n                run_length = 1\n            current_char = test_str[i]\n    if test_str[-1].isupper():\n        max_run_length = max(max_run_length, run_length)\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    Example:\n    >>> max_run_uppercase(\"Hello World\")\n    (6, 'WORLD')\n\n    \"\"\"\n    run_length = 0\n    run_start = 0\n    run_end = 0\n    max_run = (0, '')\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_length += 1\n            run_end = i\n        else:\n            if run_length > max_run[0]:\n                max_run = (run_length, test_str[run_start:run_end+1])\n            run_length = 0\n            run_start = i\n\n    if run_length > max_run[0]:\n        max_run = (run_length, test_str[run_start:])\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n                current_run = 1\n            else:\n                current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            uppercase_count = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start_index = 0\n    max_index = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_index = start_index\n            count = 0\n            start_index = i + 1\n    \n    if count > max_count:\n        max_count = count\n        max_index = start_index\n    \n    return test_str[max_index:max_index + max_count], max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run or (current_run == max_run and char.isupper()):\n            max_run = current_run\n            prev_char = char\n\n    return max_run, prev_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    start = 0\n    end = 0\n    max_len = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, update start and end\n        if test_str[i].isupper():\n            start = i\n            end = i\n        \n        # If the current character is not uppercase, check if its run of uppercase characters is longer\n        elif i - start + 1 > max_len:\n            max_len = i - start + 1\n            \n    # Return the maximum run of uppercase characters\n    return max_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    max_start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n            max_start = i - count + 1\n    return max_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run = 0\n    uppercase_count = 0\n    last_uppercase_pos = 0\n    \n    # Iterate over the string and count the number of uppercase characters and their runs\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count == 1:\n                run = 1\n                last_uppercase_pos = i\n            else:\n                run += 1\n        else:\n            # Update max_run if necessary\n            if run > max_run:\n                max_run = run\n            # Reset variables for next run\n            uppercase_count = 0\n            run = 0\n            last_uppercase_pos = i\n    \n    # Update max_run if necessary\n    if run > max_run:\n        max_run = run\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number.\n    If there are no odd numbers in the list, it will return None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(set(test_tup)) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if len(test_tup) == K:\n        for i in range(K):\n            if test_tup[i] not in test_tup:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) < K:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the i-th element of the first tuple is smaller than the i-th element of the second tuple\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    # If we reach this point, all elements of the second tuple are smaller than their corresponding element in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # check if each element in the first tuple is smaller than its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]