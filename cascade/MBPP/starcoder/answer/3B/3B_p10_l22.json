[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Using set() to convert lists to sets\n    list1 = set(test_tup1)\n    list2 = set(test_tup2)\n\n    # Finding the shared elements using set intersection\n    shared_elements = list1.intersection(list2)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # create two sets from the given tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # create two sets from the common elements in the two sets\n    common_elements = set1.intersection(set2)\n\n    # return a list of the common elements\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize a set to store the elements of the first list\n    set1 = set(test_tup1)\n    \n    # Initialize a set to store the elements of the second list\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the sets\n    intersect_set = set1.intersection(set2)\n    \n    # Convert the set back to a list and return it\n    return list(intersect_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elems.append(elem)\n    return shared_elems"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                shared_elements.append(elem1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a dictionary to store the count of each element in the first list\n    count1 = {}\n    for element in test_tup1:\n        if element in count1:\n            count1[element] += 1\n        else:\n            count1[element] = 1\n    \n    # Create a dictionary to store the count of each element in the second list\n    count2 = {}\n    for element in test_tup2:\n        if element in count2:\n            count2[element] += 1\n        else:\n            count2[element] = 1\n    \n    # Find the shared elements by comparing the counts of each element\n    shared = []\n    for element in count1:\n        if element in count2 and count1[element] == count2[element]:\n            shared.append(element)\n    \n    # Return the shared elements\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Loop through each element of the two tuples\n    for elem in test_tup1 + test_tup2:\n        # If the element is already in the shared_elements list, add it again\n        if elem in shared_elements:\n            continue\n        # If the element is not in the shared_elements list, add it\n        else:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n % 2 == 0:\n        return n < 6\n    elif n % 3 == 0:\n        return n < 10\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    \n    # Check if the number is divisible by any number between 4 and the square root of the number\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n    \n    # If none of the above conditions are met, then the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_prime(n):\n    \"\"\"\n    This function determines if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_not_prime(n):\n    \"\"\"\n    This function determines if a number is not prime or not.\n    \"\"\"\n    if is_prime(n):\n        return False\n    else:\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a\n    non-prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    \n    # Create a list of all numbers from 2 to n\n    nums = [True] * (n + 1)\n    nums[0] = nums[1] = False\n    \n    # Perform the sieve of Eratosthenes algorithm to mark non-prime numbers\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if nums[i]:\n            for j in range(i*i, n + 1, i):\n                nums[j] = False\n    \n    # Check if n is a prime number by iterating over all numbers from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if nums[i] and n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Check if a given number is not prime.\n\n    Args:\n        n (int): The number to check if it is not prime.\n\n    Returns:\n        bool: True if the given number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n\n    # check if n is divisible by any number between 2 and n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, otherwise False.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    min_heap = nums\n    \n    # Initialize the max heap with the first n elements\n    max_heap = []\n    for i in range(n):\n        max_heap.append(min_heap.pop())\n    \n    # Pop the smallest element from the min heap and add it to the max heap\n    while min_heap:\n        heapq.heappush(max_heap, min_heap.pop())\n    \n    # Return the elements of the max heap in descending order\n    return [max_heap.pop() for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap and add the first n elements of the input list\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    \n    # Add the remaining elements to the heap and extract the n largest elements\n    for num in nums[n:]:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n    \n    # Extract the n largest elements from the heap and return them in descending order\n    largest_nums = []\n    while max_heap:\n        largest_nums.append(hq.heappop(max_heap))\n    largest_nums.sort(reverse=True)\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n\n    # Add the remaining numbers to the heap in ascending order\n    for num in nums[n:]:\n        hq.heappush(max_heap, num)\n\n    # Return the n largest numbers from the heap in descending order\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Build a max heap from the given list of numbers\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n        \n    # Extract the n largest integers from the max heap\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(heapq.heappop(max_heap))\n        \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # heapify the list\n    largest = []\n    for _ in range(n): # pop the largest n elements from the heap\n        largest.append(hq.heappop(nums))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n and fill it with the first n elements of the input list\n    hq.heapify(nums[:n])\n    # Iterate over the remaining elements of the input list and add them to the heap if they are larger than the smallest element in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > nums[0]:\n            hq.heappushpop(nums[:i] + nums[i:])\n    # Return the n largest elements in descending order\n    return hq.nsmallest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a min-heap from the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # Remove and return the n largest elements from the min-heap\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    max_heap = []\n    for num in nums[:n]:\n        heapq.heappush(max_heap, -num)\n    # Add the remaining numbers to the max-heap\n    for num in nums[n:]:\n        heapq.heappush(max_heap, -num)\n    # Extract the largest n numbers from the max-heap and return them in descending order\n    return [-num for num in heapq.nlargest(n, max_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of the first n elements of the list\n    min_heap = hq.nsmallest(n, nums)\n    # Use heappop() to extract the n largest elements from the heap, and add them to a new list\n    result = []\n    for i in range(n):\n        result.append(min_heap[0])\n        # Remove the smallest element from the heap\n        hq.heappop(min_heap)\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        y = 1\n        while (x > 0):\n            y = y << 1\n            x = x >> 1\n        return y\n    else:\n        return 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given number to binary representation\n    binary = bin(x)[2:]\n    # Split the binary string into two parts, where the second part contains only one digit\n    ones_count = len(binary) - len(binary.split('1'))\n    # Check if the number differs at one bit position only\n    if ones_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the binary representation of x to a list of bits\n    binary_list = [int(digit) for digit in bin(x)[2:]]\n    \n    # Check if the length of the binary list is 1\n    if len(binary_list) == 1:\n        return True\n    \n    # Check if the first and last bits are different\n    if binary_list[0]!= binary_list[-1]:\n        return True\n    \n    # Check if the number is a power of two\n    for bit in binary_list:\n        if bit == 0:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: # XOR with all ones to check whether x is a power of 2 or not\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if x is a power of 2\n    if x == 0 or (x & (x - 1)) == 0: \n        return True\n    \n    # Find the first bit position where x and x-1 have a difference\n    for i in range(32):\n        if ((x >> i) & 1)!= ((x >> (i-1)) & 1):\n            return True\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    diff = x ^ (x - 1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the input number to binary representation\n    bin_x = bin(x)[2:]\n\n    # Initialize a variable to store the count of differing bits\n    count = 0\n\n    # Iterate over the binary representation of x and check for differing bits\n    for i in range(len(bin_x)):\n        if bin_x[i]!= bin_x[-1]:\n            count += 1\n\n    # Check if there are any differing bits\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the input integer x to binary representation\n    binary_x = bin(x)[2:]\n    \n    # Initialize the count of bits that differ from each other\n    count = 0\n    \n    # Iterate over the bits of the binary representation of x\n    for i in range(len(binary_x)):\n        if binary_x[i]!= binary_x[i+1]:\n            count += 1\n            if count > 1:\n                return False\n    \n    # If the loop completes without returning False, then the two numbers differ at one bit position only\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary string\n    x_binary = bin(x)[2:]\n    \n    # Check if the length of the binary string is equal to 1\n    if len(x_binary)!= 1:\n        return False\n    \n    # Check if the binary string is equal to all 1's or all 0's\n    if x_binary == '1' or x_binary == '0':\n        return True\n    \n    # Check if the binary string only differs at one bit position\n    for i in range(len(x_binary) - 2):\n        if x_binary[i]!= x_binary[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words with less than 4 characters\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Split the text into words using whitespace as the delimiter\n    words = text.split()\n\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to 4\n        if len(word) >= 4:\n            # Add the word to the result list\n            result.append(word)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Initialize an empty list to store the words with at least 4 characters long\n    result = []\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is at least 4\n        if len(word) >= 4:\n            # Append the word to the result list\n            result.append(word)\n    # Return the result list\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words which are at least 4 characters long\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through the list and square each element\n    for num in nums:\n        nums[nums.index(num)] = num**2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through the list and square each element\n    for num in nums:\n        print(num*num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # iterate through the list of numbers\n    for num in nums:\n        # find the square of the number and append it to a new list\n        squares.append(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1:\n        return 0\n    \n    min_rot = 1\n    for i in range(1, len(str)):\n        if str[i]!= str[i-1]:\n            min_rot = i\n            break\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    n = len(str)\n    rotations = 0\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if str[j-i:j] == str[i:j]:\n                rotations += 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    str = str.lower()\n    n = len(str)\n    count = 0\n    while count < n - 1:\n        if str[count] == str[count+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the length of the string is greater than 1\n    if len(str) > 1:\n        # Initialize two pointers at the beginning and end of the string\n        left = 0\n        right = len(str)-1\n        \n        # Initialize variables to keep track of the minimum number of rotations and the current number of rotations\n        min_rotations = float('inf')\n        current_rotations = 0\n        \n        # Iterate through the string and count the number of rotations required to get the same string\n        while left < right:\n            # If the left and right pointers are pointing to the same character, increment the left pointer\n            if str[left] == str[right]:\n                left += 1\n                right -= 1\n                current_rotations += 1\n            # If the left and right pointers are not pointing to the same character, rotate the string by one character and increment the left pointer\n            else:\n                str = str[-1]+str[:-1]\n                left += 1\n                current_rotations += 1\n                \n        # Update the minimum number of rotations if the current number of rotations is less than the minimum number of rotations\n        if current_rotations < min_rotations:\n            min_rotations = current_rotations\n            \n        # If the string is not the same after the minimum number of rotations, rotate the string until it is the same\n        while str!= str[::-1]:\n            str = str[-1]+str[:-1]\n            current_rotations += 1\n            \n        # Update the minimum number of rotations if the current number of rotations is less than the minimum number of rotations\n        if current_rotations < min_rotations:\n            min_rotations = current_rotations\n            \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize two pointers, one for each end of the string\n    left = 0\n    right = len(str)-1\n    # Initialize a flag to indicate if we have found the same string\n    found = False\n    # Initialize a variable to keep track of the minimum number of rotations\n    min_rot = 0\n    # Initialize a variable to keep track of the current number of rotations\n    cur_rot = 0\n    # Loop until we have found the same string or we have performed max_rotations rotations\n    while not found and cur_rot < max_rotations:\n        # If the characters at the left and right pointers are different, we have found a different string\n        if str[left]!= str[right]:\n            found = True\n        # If the characters at the left and right pointers are the same, we can rotate the string\n        elif str[left] == str[right]:\n            cur_rot += 1\n            # Update the left and right pointers\n            left += 1\n            right -= 1\n            # Update the minimum number of rotations if needed\n            if cur_rot < min_rot:\n                min_rot = cur_rot\n        # If we have performed max_rotations rotations, we have found the same string\n        if cur_rot == max_rotations:\n            found = True\n    \n    # Return the minimum number of rotations\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize the count of rotations to 0\n    count = 0\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n    # Check if the left pointer is greater than the right pointer\n    while left < right:\n        # Check if the characters at the left and right pointers are same\n        if str[left] == str[right]:\n            # If they are same, move the left and right pointers towards each other\n            left += 1\n            right -= 1\n        else:\n            # If they are different, increment the count and move the left pointer to the right\n            count += 1\n            left = right + 1\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    # Initialize an empty dictionary to store the count of characters for each rotation\n    char_count = {}\n    # Initialize the count of rotations as 0\n    count = 0\n\n    # Count the occurrence of each character in the string\n    for i in range(n):\n        if str[i] in char_count:\n            char_count[str[i]] += 1\n        else:\n            char_count[str[i]] = 1\n\n    # If the count of characters is equal to 1 for every character, then no rotations are needed\n    if all(count == 1 for count in char_count.values()):\n        return 0\n    # If the count of characters is equal to 2 for every character, then the string is already in its original form\n    elif all(count == 2 for count in char_count.values()):\n        return count\n    else:\n        # Find the minimum number of rotations required to get the same string\n        for i in range(1, n):\n            # If the count of characters for the first i characters is equal to the count of characters for the last n-i characters, then there is at least one rotation\n            if char_count[str[0:i]] == char_count[str[-i:]]:\n                count += 1\n        return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the count and max_count variables to 0\n    count = 0\n    max_count = 0\n\n    # Iterate through the string and count the frequency of each character\n    for i in range(len(str)):\n        char = str[i]\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Iterate through the string and check if the frequency of each character is same as the frequency of the first character\n    for i in range(1, len(str)):\n        char = str[i]\n        if freq_dict[char] == freq_dict[str[0]]:\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n\n    # Check if there is any rotation\n    if count == 0:\n        return 0\n\n    # Calculate the minimum number of rotations required\n    rotations = max_count\n    while rotations > 0:\n        count = 0\n        for i in range(len(str)):\n            char = str[i]\n            if freq_dict[char]!= freq_dict[str[i - rotations % len(str)]]:\n                count += 1\n        if count == 0:\n            break\n        rotations -= 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j):\n                if str[i:j+1] == str[k:i-1][::-1]:\n                    dp[i][j] = max(dp[i][j], dp[k][i-1] + 1)\n    return dp[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # create a dictionary to store the count of characters in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # check if the string can be rotated in-place\n    for i in range(len(str)-1):\n        if char_count[str[i]] > char_count[str[i+1]]:\n            return 0\n\n    # check if the string can be rotated by swapping characters\n    for i in range(len(str)):\n        if char_count[str[i]] > 1:\n            count = char_count[str[i]]\n            for j in range(count):\n                for k in range(i+1, len(str)):\n                    if char_count[str[k]] == count-1:\n                        char_count[str[i]], char_count[str[k]] = char_count[str[k]], char_count[str[i]]\n                        if str == ''.join(sorted(str)):\n                            return 1\n                        else:\n                            return 0\n                        char_count[str[i]], char_count[str[k]] = char_count[str[k]], char_count[str[i]]\n    return 2\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input.\n    It removes the first and last occurrence of the character ch from the string.\n    '''\n\n    if ch in s:\n        # Removing first occurrence of character ch\n        if s.find(ch) == 0:\n            return s[1:]\n        # Removing last occurrence of character ch\n        elif s.rfind(ch) == len(s)-1:\n            return s[:-1]\n    else:\n        # No occurrence of character ch found in the string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if not s: \n        return None \n    if s[0] == ch: \n        return remove_Occ(s[1:], ch) \n    elif s[-1] == ch: \n        return remove_Occ(s[:-1], ch) \n    else: \n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the string contains the given character\n    if ch in s: \n        # Remove first occurrence\n        s = s.replace(ch,'',1) \n        # Remove last occurrence\n        s = s.replace(ch,'',-1) \n    return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence\n    if s.startswith(ch):\n        s = s[1:]\n    # remove last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '')\n    if ch in s:\n        s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if s[0] == ch:\n        s.pop(0)\n    if s[-1] == ch:\n        s.pop()\n    return \"\".join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character to be removed is the first or last occurrence\n    if s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        # if the character is not the first or last occurrence, remove both occurrences\n        return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1: # if the count of character is only 1 in the string\n        if s.find(ch) == 0: # if the character is the first character in the string\n            return s[1:] # remove the first character\n        elif s.find(ch) == len(s)-1: # if the character is the last character in the string\n            return s[:-1] # remove the last character\n    else:\n        return s # if the count of character is greater than 1 in the string"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two parameters - string s and character ch.\n    The function removes the first and last occurrence of the character ch from the string s.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s[1:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # create a new matrix with the same dimensions as the original matrix\n    sorted_M = [[0 for j in range(cols)] for i in range(rows)]\n\n    # loop through each row in the original matrix\n    for i in range(rows):\n        # initialize the sum of the current row to 0\n        sum_i = 0\n\n        # loop through each element in the current row\n        for j in range(cols):\n            # add the value of the current element to the sum of the current row\n            sum_i += M[i][j]\n\n        # loop through each column in the original matrix and compare the sum of the current row with the sum of the previous row\n        for j in range(cols):\n            # if the current sum is less than the sum of the previous row, swap the values in the current column and the previous column\n            if sorted_M[i][j] < sum_i:\n                sorted_M[i][j], sorted_M[i][j-1] = sorted_M[i][j-1], sorted_M[i][j]\n\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Find the sum of each row and store it in a list\n    sums = [sum(row) for row in M]\n    # Sort the list of sums in ascending order\n    sums.sort()\n    # Create a list of sorted rows\n    sorted_rows = [M[i] for i in range(len(M)) if sums[i] == sums[0]]\n    # Create a list of sorted columns\n    sorted_cols = []\n    for col in range(len(M[0])):\n        sorted_cols.append([M[i][col] for i in range(len(M)) if sums[i] == sums[0]])\n    # Combine the sorted rows and columns into a 2D sorted matrix\n    sorted_matrix = []\n    for i in range(len(sorted_rows)):\n        row = sorted_rows[i]\n        sorted_matrix.append(row + sorted_cols[i])\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a new matrix to store the sorted matrix\n    N = len(M)\n    sorted_M = [[0 for j in range(N)] for i in range(N)]\n    # Iterate through each row in the original matrix\n    for i in range(N):\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n        # Iterate through each column in the row\n        for j in range(N):\n            # Add the value in the current column to the row_sum\n            row_sum += M[i][j]\n        # Insert the row into the sorted_M matrix in ascending order\n        for k in range(N):\n            sorted_M[k][i] = M[k][i]\n        for k in range(i+1, N):\n            if sorted_M[k][i] < sorted_M[i][i]:\n                sorted_M[k][i], sorted_M[i][i] = sorted_M[i][i], sorted_M[k][i]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum_rows)\n    return sorted_M\n\ndef sum_rows(row):\n    return sum(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for row in range(len(M)):\n        # sort the row in ascending order\n        M[row].sort()\n        # add the first element of the sorted row to the sum of rows\n        M[row] = sum(M[row])\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] + right[j] <= left[i]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\ndef sort_matrix(M):\n    return merge_sort(M)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a temporary list to store the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Create a new matrix to store the sorted matrix\n    sorted_M = []\n\n    # Iterate over each row of the original matrix and add the rows with the corresponding sum to the sorted matrix\n    for row in M:\n        index = row_sums.index(sum(row))\n        sorted_M.append(row)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[j][i] > M[i][i]:\n                M[j], M[i] = M[i], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the sum of the row\n        row_sum = sum(M[i])\n        # Sort the row in ascending order\n        M[i] = sorted(M[i])\n        # Find the new sum of the sorted row\n        new_row_sum = sum(M[i])\n        # Add the difference between the old and new sums to the row_sum variable\n        row_sum += new_row_sum - row_sum\n        # Check if the row_sum has gone down, and if so, swap the rows\n        if row_sum < 0:\n            M[i], M[i+1] = M[i+1], M[i]\n            row_sum = abs(row_sum)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables for row sums and matrix size\n    row_sums = [sum(row) for row in M]\n    n = len(M)\n\n    # bubble sort algorithm to sort matrix rows\n    for i in range(n):\n        for j in range(n-i-1):\n            if row_sums[j] > row_sums[j+1]:\n                row_sums[j], row_sums[j+1] = row_sums[j+1], row_sums[j]\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = l * b * h # volume = length x base x height\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, width, and height of a triangular prism and returns its volume.\n    \"\"\"\n    volume = l * b * h / 6  # formula for volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    V = l*b*h\n    \n    # return the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function will calculate the volume of a triangular prism with the given dimensions.\n    '''\n    # Using Heron's formula to calculate the volume of the prism\n    s = (l+b+h)/2 # semi-perimeter of the prism\n    volume = (1/3) * (s**2) * l # formula to find volume of the prism\n    print(\"The volume of the prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns the volume of the prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![a-zA-Z])([a-z]+)_([a-z]+)(?![a-zA-Z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])_([a-z])'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'([a-z]+(_[a-z]+)*_?[a-z]*)'\n\n    # Use the regular expression search method to search for matches in the input string\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-zA-Z0-9])(?=[a-z])(?=([a-z])(?![A-Z]))'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z][a-z0-9]*_?[a-z0-9])'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    regex = r\"(?<![a-z])[a-z]+(?![a-z])_\"\n    return bool(re.match(regex, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # define the regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # use the re.findall() function to find all the matches in the input string\n    matches = re.findall(pattern, text)\n    # check if there are any matches and return true if there are, otherwise return false\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = set(string)\n    return [char for char in string if char not in chars_to_remove]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    # Split the string into list of characters\n    char_list = list(string)\n    \n    # Iterate through the list of characters\n    for i in range(NO_OF_CHARS):\n        # Check if the current character is present in the second string\n        if char_list[i] in string:\n            # If it is, remove it from the list\n            char_list.remove(char_list[i])\n    \n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    # convert the strings to lists\n    char_list1 = list(string1)\n    char_list2 = list(string2)\n    \n    # create an empty list to store the characters to be removed\n    char_to_remove = []\n    \n    # iterate through the characters of the first string and check if they are present in the second string\n    for char in char_list1:\n        if char in char_list2:\n            # add the character to the list of characters to be removed\n            char_to_remove.append(char)\n            \n    # create a new string with the characters to be removed removed\n    new_string = ''.join(char for char in char_list1 if char not in char_to_remove)\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Define an empty string to store the new string\n    new_string = ''\n\n    # Iterate through each character in the first string\n    for char in string:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # Append the character to the new string\n            new_string += char\n\n    # Return the new string\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the second string\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a set to store the characters to be removed\n    char_set = set()\n    for char in string:\n        if freq[char] > 1:\n            char_set.add(char)\n    \n    # Create a new string by removing the characters from the original string\n    new_string = \"\"\n    for char in string:\n        if char not in char_set:\n            new_string += char\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in string2:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to a list\n    lst = list(string)\n    # Create a set to store characters to remove\n    to_remove = set(string)\n    # Loop through the list and remove characters in the to_remove set\n    for i in range(len(lst)):\n        if lst[i] in to_remove:\n            lst.pop(i)\n    # Convert the list back to a string\n    result = ''.join(lst)\n    # Return the result\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    for char in string:\n        if char not in string:\n            list_of_chars.append(char)\n    return list_of_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    list_of_chars.sort()\n    list_of_chars = list_of_chars[::-1]\n    result = \"\"\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            result += list_of_chars[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    string = input(\"Enter the first string: \")\n    remove_string = input(\"Enter the second string: \")\n    result = str_to_list(string)\n    print(\"Result:\", result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string[:NO_OF_CHARS]\n    second_string = string[NO_OF_CHARS:]\n    result = []\n    for char in first_string:\n        if char not in second_string:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_nums = set()\n\n    # loop through the array and add unique elements to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # if there are any elements in the set, there is a duplicate\n    if len(unique_nums)!= len(arraynums):\n        print(\"The array contains duplicate elements.\")\n    else:\n        print(\"The array does not contain duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if not arraynums:\n        return False\n    \n    arraynums.sort()\n    \n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for i in range(len(arraynums)):\n        if arraynums[i] in duplicates:\n            return True\n        duplicates.append(arraynums[i])\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == 0:\n        return False\n\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen[num] = True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_table = {}\n    for num in arraynums:\n        if num in hash_table:\n            return True\n        else:\n            hash_table[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_elements = set(arraynums)\n    # If the set has the same length as the original array, it means there are no duplicate elements\n    return len(unique_elements) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100:\n        return \"The number is a woodball.\"\n    else:\n        return \"The number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1000000:\n        if x % 1000 == 0:\n            return True\n        else:\n            return False\n    else:\n        if x % 10000 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n\n    # Define the set of possible woodball numbers\n    possible_woodalls = set([7, 10, 13, 16])\n\n    # Check if the given number is in the set of possible woodball numbers\n    if x in possible_woodalls:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 1000:\n        return False\n    elif x >= 1000 and x <= 10000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 3 or x == 7 or x == 10 or x == 11 or x == 13 or x == 17 or x == 19:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 12 or x == 24: \n        return True\n    else: \n        return False "
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return reverse_num == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is one less than twice its reverse,\n    and False otherwise.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (num + 1) * (num + 2) // 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num+1 == (num*2 + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    return (rev_num == (2*rev_num - 1))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    str_num = str(num)\n    # reverse the string\n    rev_str = str_num[::-1]\n    # convert the reversed string to an integer\n    rev_int = int(rev_str)\n    # check if the original number is one less than twice the reversed number\n    if num - 1 < rev_int * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n\n    # convert the number to string\n    num_str = str(num)\n    \n    # calculate the reverse of the number\n    reverse = int(num_str[::-1])\n    \n    # check if the reverse is one less than twice the original number\n    if reverse == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if num < reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and checks if it is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    \n    if (rev_num - num) < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr, reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num = max(max_num, arr[i] + find_Max_Num(arr[:i] + arr[i+1:]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes in a list of digits and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    temp = 0\n    for i in range(len(arr)):\n        temp = max_num * 10 + arr[i]\n        if temp > max_num:\n            max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    # create a list of all possible digits to be used in the number\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    # create a list of all possible power sets of the digits\n    powerset = [set(p) for p in itertools.combinations(digits, r=n)]\n    # initialize a variable to store the maximum number that can be formed with the digits\n    max_num = 0\n    # loop through all possible numbers of digits and check if they can form the maximum number\n    for num in powerset:\n        # convert the list of digits to an integer and check if it is greater than the current maximum number\n        if int(''.join(num)) > max_num:\n            max_num = int(''.join(num))\n    # return the maximum number that can be formed with the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            max_num += arr[i]\n        else:\n            max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    digits = list(map(int, arr))\n    digits.sort(reverse=True)\n    result = 0\n    for digit in digits:\n        result += digit\n        if result > 10:\n            return result - 9\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables\n    max_num = 0\n    start_digit = 0\n    end_digit = len(arr) - 1\n\n    # Loop through the sorted list and find the largest number\n    for i in range(start_digit, end_digit+1):\n        if i == end_digit:\n            max_num += arr[i] * 10**end_digit\n        else:\n            max_num += arr[i] * 10**(end_digit-i)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def getMax(arr, max_val=0):\n        if not arr:\n            return max_val\n        return getMax(arr[1:], max(arr[0], max_val))\n\n    return getMax(arr)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num += int(arr[i])*10**(len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return True\n    elif x < 0 and y < 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # Check if the signs are different\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x*y) >= 0:  # check if x and y have opposite signs\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # Check if both the integers have the same sign (negative or positive)\n    if x >= 0 and y >= 0 or x <= 0 and y <= 0:\n        return \"Both numbers have the same sign\"\n    \n    # Check if the first integer has opposite sign to the second integer\n    elif x < 0 and y > 0 or x > 0 and y < 0:\n        return \"The first number has opposite sign to the second number\"\n    \n    # If none of the above conditions are satisfied, return False\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x*y) >= 0: #if both numbers are positive or zero, then they have opposite signs\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers do not have opposite signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y > 0:\n        return \"The two numbers have opposite signs.\"\n    else:\n        return \"The two numbers have same signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns a boolean value indicating whether they have opposite signs or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0: #If x is zero, both numbers have opposite signs\n        return True\n    elif y == 0: #If y is zero, both numbers have opposite signs\n        return True\n    elif x * y < 0: #If x * y < 0, then x and y have opposite signs\n        return True\n    else: #If none of the above conditions are met, then x and y have the same signs\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer as input and returns True if it is an octagonal number, else False.\n    A number is an octagonal number if its value is the sum of the cubes of its digits.\n    '''\n    # get the digits of the number\n    digits = [int(d) for d in str(n)]\n    # calculate the sum of cubes of digits\n    cube_sum = sum(d**3 for d in digits)\n    # compare the sum of cubes of digits and the original number\n    return cube_sum == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Initialize the variable to store the nth octagonal number\n    octagonal = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # If the number is divisible by 12, add it to the variable\n        if i % 12 == 0:\n            octagonal += i\n\n    # Return the value of the octagonal variable\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * n ** 3) + 5 "
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    \n    a = 1\n    while a**2 < n:\n        a += 1\n    \n    return a**2 == n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def octagonal(n):\n        return ((n ** 2) + 3) / 2\n\n    return octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal = 0\n    for i in range(1, n+1):\n        octagonal += i * (8 * i - 1)\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i!= 0:\n                return False\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the sequence of octagonal numbers\n    oct_seq = [0, 8, 24, 40, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200]\n    # Check if the input n is in the range of octagonal numbers\n    if n < 1 or n > len(oct_seq):\n        return False\n    # Find the nth octagonal number\n    nth_oct = oct_seq[n - 1]\n    return nth_oct"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    # Define a function to check if a number is a octagonal number\n    def is_octagonal_helper(num):\n        return num == (3 ** 0.5) * (5 ** 0.5) * num ** 2\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is a octagonal number\n        if is_octagonal_helper(i):\n\n            # Increment the counter variable if the number is a octagonal number\n            count += 1\n\n    # Return the value of the counter variable\n    return count\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    for i in range(1, n+1):\n        octagonal = octagonal * i\n    return octagonal"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with a given length\n    length_count = defaultdict(int)\n\n    # Loop through each substring in the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits in the substring is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                length_count[j-i+1] += 1\n\n    # Return the count of substrings with a given length\n    return length_count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings with the given sum of digits\n    count_dict = defaultdict(int)\n    \n    # loop through the string\n    for i in range(len(s)):\n        # check for all possible substrings of length 2,3,4, and so on\n        for j in range(2, len(s)+1):\n            substring = s[i:i+j]\n            # check if the sum of digits in the substring is equal to its length\n            if sum([int(digit) for digit in substring]) == len(substring):\n                # update the count of substrings with the given sum of digits\n                count_dict[sum([int(digit) for digit in substring])] += 1\n    \n    # return the count of substrings with the given sum of digits\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    substrings = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            substring_sum = sum(map(int, substring))\n            if substring_sum == len(substring):\n                substrings[substring] += 1\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of each substring\n    count = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Extract the substring from the input string\n            substring = s[i:j]\n\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                # Increment the count of the substring in the dictionary\n                count[substring] += 1\n\n    # Return the total count of substrings with the sum of digits equal to their length\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of each length substrings\n    count_dict = defaultdict(int)\n\n    # loop through the string and for each length, add to the count\n    for i in range(len(s)+1):\n        for j in range(i, len(s)+1):\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[j-i:j]) == j-i:\n                count_dict[j-i] += 1\n\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = sum([int(digit) for digit in substring])\n            if digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a defaultdict to store the count of substrings with sum equal to its length\n    substring_count = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            # Count the number of digits in the substring and check if its sum is equal to its length\n            if sum(int(d) for d in substring) == len(substring):\n                substring_count[substring] += 1\n\n    # Return the count of substrings with sum equal to its length\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int) # dictionary to store the count of digits in each substring\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digit_count[s[j]] += 1 # increment the count of digits in each substring\n    \n    count = 0\n    for count in digit_count.values():\n        count *= 2 # multiply the count by 2 since we are counting odd digits only\n        if count == len(s):\n            count -= 1 # subtract 1 from the count since we are only counting substrings with even digits\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with each length\n    count = defaultdict(int)\n    \n    # Loop through the input string\n    for i in range(len(s)):\n        # Calculate the sum of digits of the current substring\n        substring_sum = sum(int(digit) for digit in s[i:])\n        \n        # Update the count of substrings with the given length\n        count[len(s) - len(s[i:]) + 1] += 1\n    \n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"List is empty.\")\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        print(\"List is empty\")"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # find the smallest number in the list\n    smallest = xs[0]\n    \n    # loop through the list and compare each number to the current smallest\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list by the first element of each pair\n    test_list.sort(key=lambda x: x[0])\n    \n    # initialize variables for the maximum difference and the current difference\n    max_diff = float('-inf')\n    curr_diff = float('-inf')\n    \n    # loop through the sorted list\n    for i in range(len(test_list)-1):\n        # calculate the current difference between the pair of values\n        curr_diff = test_list[i+1][0] - test_list[i][0]\n        \n        # update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    \"\"\"\n    # Initialize variables\n    max_diff = float('-inf')\n    current_diff = 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair\n            diff = test_list[i][1] - test_list[j][1]\n            \n            # Update the max difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n                current_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # loop through the remaining tuples after i\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the current and next tuples\n            diff = test_list[j][0] - test_list[i][1]\n            # update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n            # update the current difference if necessary\n            if diff > curr_diff:\n                curr_diff = diff\n\n    # return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables to keep track of minimum and maximum difference found so far\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # loop through each pair in the list and compare their differences\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff < min_diff:\n                min_diff = diff\n            if diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the minimum and maximum values in the list\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # Loop through each pair of values in the list and update the minimum and maximum values\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Update the minimum value if the current pair has a smaller minimum value\n            if test_list[i][1] < min_val:\n                min_val = test_list[i][1]\n            \n            # Update the maximum value if the current pair has a larger maximum value\n            if test_list[j][1] > max_val:\n                max_val = test_list[j][1]\n    \n    # Calculate the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    \n    The function works by iterating over all pairs of tuples in the list and comparing their elements. It keeps track of\n    the maximum difference found so far and returns it at the end.\n    \n    The time complexity of this function is O(n^2), where n is the length of the input list.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Convert the list of tuples into a list of lists\n    marks_list = list(subjectmarks)\n\n    # Sort the list of lists by the second value of each tuple\n    marks_list.sort(key=lambda x: x[1])\n\n    # Convert the sorted list of lists back into a list of tuples\n    sorted_marks = [(mark[0], mark[1]) for mark in marks_list]\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples by the second value of each tuple in ascending order\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: add the first element of the list and recursively call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Recursively flatten a list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list has only one element, return that element\n    if len(data_list) == 1:\n        return data_list[0]\n\n    # Recursive case: concatenate the first element to the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n\n    # flatten the list by recursively calling the function on each item in the list\n    flat_list = [item for sublist in data_list for item in recursive_list_sum(sublist)]\n\n    # sum the flattened list\n    total = sum(flat_list)\n\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(data_list[0])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum([x for sublist in data_list for x in sublist])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list, int):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    sum_of_flattened_list = sum(flattened_list)\n    return sum_of_flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: sum up the first element and all of its sublists\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # initialize variables\n    B = [0] * (n + 1)\n    B[0] = 1\n    B[1] = 1\n    # loop through numbers\n    for i in range(2, n + 1):\n        # loop through indices\n        for j in range(i):\n            # update B[i] if B[j] is included in B[i - j]\n            B[i] += B[j] * B[i - j]\n    # return B[n]\n    return B[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the Bell numbers\n    bell = [0] * (n + 1)\n    bell[0], bell[1] = 0, 1\n    # Iterate through the Bell numbers\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += binomial(n, i)\n    return count\n\ndef binomial(n, k):\n    '''\n    Write a function to compute the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    else:\n        return math.factorial(n) // math.factorial(k) // math.factorial(n-k)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(x):\n        if x == 0 or x == 1:\n            return 1\n        elif x % 2 == 0:\n            return partition(x//2) + partition(x//2+1)\n        else:\n            return partition(x//2+1) + partition(x//2)\n\n    return partition(2*n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Base case: when we have already partitioned n Bell numbers, and we have seen n partitions of length n\n    if n == 0:\n        return 1\n    \n    # Count the number of partitions that we have seen so far and the number of partitions that we have not seen so far\n    count_seen = 0\n    count_not_seen = 0\n    \n    # Partition the remaining n Bell numbers into n partitions of length n\n    for i in range(n):\n        count_seen += bell_number(i)\n        count_not_seen += bell_number(n-1)\n    \n    # The answer is the product of the two counts\n    return count_seen * count_not_seen"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    for i in range(2, n+1):\n        for j in range(1, n-i+2):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[n][n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition the set to 0\n    ways_to_partition = 0\n\n    # Loop through all the numbers from 0 to n-1\n    for i in range(n+1):\n        # Calculate the number of ways to partition the set with Bell number i\n        ways_to_partition += (n-i) * (i+1) // 2\n\n    # Return the number of ways to partition the set\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nprint(bell_number(0))  # 1\nprint(bell_number(1))  # 1\nprint(bell_number(2))  # 2\nprint(bell_number(3))  # 5"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the Bell numbers\n    bell_numbers = [1] * n\n    # loop through the Bell numbers\n    for i in range(1, n):\n        # loop through the remaining Bell numbers\n        for j in range(i):\n            # if the sum of the two numbers is greater than or equal to the total Bell numbers, increment the count by 1\n            if i + j >= n:\n                bell_numbers[i] += bell_numbers[j]\n    return bell_numbers[n-1]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    elif len(A) == 2: \n        return A[0] <= A[1]\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] and A[i] > A[i+1]:\n                return False\n            elif A[i] > A[i-1] and A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n\n    # check if the array is monotonic with respect to its last element\n    if A[-1] >= A[-2]:\n        # check if the array is monotonic with respect to its second to last element\n        if A[-2] >= A[-3]:\n            # check if the array is monotonic with respect to its third to last element\n            if A[-3] >= A[-4]:\n                return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    is_increasing = A[0] <= A[1]\n    is_decreasing = A[0] >= A[1]\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            is_increasing = False\n        elif A[i] >= A[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for monotonicity in the array using the first element of the array\n    if A[0]<A[1]:\n        if A[1]<A[2]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A of integers as input and returns True if it is monotonic increasing or decreasing, and False otherwise.\n    A monotonic increasing array is an array where for all i < j, A[i] <= A[j]. A monotonic decreasing array is an array where for all i < j, A[i] >= A[j].\n    '''\n\n    if len(A) <= 1:\n        return True\n\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n\n    if A[0] > A[-1]:\n        for i in range(len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n\n    if A[0] < A[-1]:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n    A monotonic array is a sequence in which each element is either increasing or decreasing from the previous element.\n    '''\n    # Check if all elements are the same\n    if len(A) == 1:\n        return True\n\n    # Check if the sequence is increasing\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    # Check if the sequence is decreasing\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    \n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    \n    if A[0] < A[-1]:\n        return all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    return all(A[i] <= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n\n    # check if array is monotonic in increasing order\n    if A[0] < A[1] and all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # check if array is monotonic in decreasing order\n    if A[0] > A[1] and all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # if none of the above conditions is met, the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_increasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return True\n    return False\n\ndef is_Monotonic(A):\n    if is_increasing(A):\n        return True\n    elif is_increasing(A[::-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists as input, l and s, and checks if s is a sublist of l.\n    Returns True if s is a sublist of l, False otherwise.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # convert the sublist to a set to remove duplicates\n    s = set(s)\n    # iterate through the list and check if each element is in the sublist\n    for elem in l:\n        if elem in s:\n            s.remove(elem)\n        else:\n            return False\n    # if the loop completes without returning False, then the sublist is present in the list\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the length of the list is less than the length of the sublist\n    if len(l) < len(s):\n        return False\n\n    # Traverse through the list and check if each element matches with the sublist\n    for i in range(len(l)):\n        if l[i]!= s[i]:\n            return False\n\n    # If all the elements match, then return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Returns True if all tuples in the input list have equal length,\n    False otherwise.\n    \"\"\"\n    unique_lengths = set([len(t) for t in Input])\n    if len(unique_lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    elif len(Input) == len(set(map(len, Input))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a boolean variable to store whether all tuples have equal length or not\n    is_equal = True\n    \n    # Loop through all the tuples in the input list\n    for tup in Input:\n        # Check if the length of the current tuple is equal to the length of the first tuple in the input list\n        if len(tup)!= len(Input[0]):\n            # If the length of the current tuple is not equal to the length of the first tuple, set the boolean variable to False and break out of the loop\n            is_equal = False\n            break\n    \n    # Return the boolean variable\n    return is_equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    inc = 1\n\n    while gap > 1 or inc == 0:\n        gap = (gap * 10) // 13\n        inc = 0\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                inc = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    start = 0\n    end = n - 1\n    while gap > 1 or swapped:\n        if gap == n:\n            gap = 1\n        elif gap == 1:\n            gap = n\n        for i in range(start, end):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        for i in range(end - 1, start - 1, -1):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        end -= 1\n        start += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        swapped = False\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a simple sorting algorithm that has a time complexity of O(n^2) in the average case and O(n^2) in the worst case.\n\n    This algorithm works by repeatedly dividing the unsorted portion of the list in half until it is sorted. In each iteration, it picks two adjacent elements and swaps them if they are in the wrong order. This process is repeated until no more swaps are needed, indicating that the list is sorted.\n\n    Example:\n    comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n    Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\n\n    References:\n    https://en.wikipedia.org/wiki/Comb_sort\n    https://www.geeksforgeeks.org/comb-sort/\n    '''\n\n    n = len(nums)\n    gap = n\n\n    # The following loop keeps iterating until the gap is 1, indicating that the array is sorted.\n    while gap > 1:\n        # The following loop runs n times (gap iterations) until the gap is 1.\n        for i in range(n-gap):\n            # If the current element is greater than the next element, swap them.\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        # Update the gap size based on the number of elements that were swapped in each iteration.\n        gap = int(gap/1.3)\n\n    # Return the sorted array.\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Set the increment value and maximum swaps\n    inc = 1\n    max_swaps = len(nums) // 2\n\n    # Loop until the maximum number of swaps is reached\n    while max_swaps > 0:\n        # Loop through the list\n        for i in range(max_swaps):\n            # Loop through the list again, comparing adjacent elements and swapping them if they are in the wrong order\n            for j in range(len(nums)-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n\n        # Decrement the maximum swaps and increase the increment value\n        max_swaps -= 1\n        inc *= 10"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    # Set a default gap size of 10\n    gap = 10\n\n    # Set a default maximum gap size\n    max_gap = len(nums) // 2\n\n    # Keep swapping until the gap size is reduced to 1\n    while gap > 1 or max_gap > 1:\n\n        # Iterate over the array using two pointers\n        for i in range(len(nums) - 1):\n            # Swap adjacent elements if they are in the wrong order\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n        # Reduce the gap size\n        gap = int((gap + 1) / 1.3)\n\n        # Check if the maximum gap size has been reached\n        if gap == max_gap:\n            break\n\n        # Update the maximum gap size\n        max_gap = int((max_gap + 1) / 1.3)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n                \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums) // 2\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        gap = int(gap * 1.3)\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    This algorithm is a variation of the bubble sort algorithm that works by repeatedly swapping adjacent elements if they are in the wrong order.\n    The algorithm works by repeatedly iterating through the list, comparing adjacent elements, and swapping them if they are in the wrong order.\n    The number of iterations needed to sort the list is proportional to n^2 / 10, where n is the length of the list.\n    This makes it very efficient for large lists.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n < 0:\n        return False\n\n    square = n ** 2\n    root = int(n ** 0.5)\n\n    # Check whether the square root is an integer or not\n    if int(root ** 2)!= root ** 2:\n        return False\n\n    # Check if the difference of square and square root is an integer or not\n    diff = square - root ** 2\n    if int(diff)!= diff:\n        return False\n\n    # Check if the difference of square and square root is a perfect square or not\n    for i in range(1, int(root ** 0.5) + 1):\n        if diff == i ** 2 + root ** 2:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert number to list of digits\n    digits = [int(d) for d in str(n)]\n    # sort digits in decreasing order\n    digits.sort(reverse=True)\n    # calculate the square of each digit\n    squares = [d*d for d in digits]\n    # calculate the sum of squares\n    sum_of_squares = sum(squares)\n    # check whether the sum of squares is equal to the original number\n    if sum_of_squares == n:\n        print(\"The number is representable as the difference of two squares.\")\n    else:\n        print(\"The number is not representable as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Check if the given number can be represented as the difference of two squares\n    a = n * n\n    b = n // 2\n    if a == b * b:\n        return f\"{n} can be represented as the difference of two squares.\"\n    else:\n        return f\"{n} cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        square = i * i\n        if square * square == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            for j in range(1, int(i**0.5)+1):\n                if n%(i*j) == 0:\n                    print(\"The given number can be represented as the difference of two squares.\")\n                    return\n    print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    if n % 4 == 0:\n        return True\n    elif n % 4 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # converting the given number to integer and taking the square root\n    num = int(n**(1/2))\n    # initializing variables for the sum of squares and difference\n    sum_of_squares = 0\n    difference = 0\n    # iterating from 1 to num-1 and calculating the sum of squares of each number\n    for i in range(1,num):\n        sum_of_squares += i**2\n    # checking if the given number can be represented as the difference of two squares\n    if (num+difference)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return \"The given number must be a positive integer.\"\n    else:\n        # Check if the number is divisible by 2\n        if n % 2 == 0:\n            return \"The given number cannot be represented as the difference of two squares.\"\n        else:\n            # Find the difference of the number and its square\n            diff = n - (n**2)\n            # Check if the difference is divisible by 2\n            if diff % 2 == 0:\n                return \"The given number can be represented as the difference of two squares.\"\n            else:\n                return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is less than or equal to 0\n    if n <= 0:\n        print(\"Invalid input\")\n        return\n\n    # Iterate from 1 to the square root of the given number\n    for i in range(1, int(n ** 0.5) + 1):\n        # Check if the given number can be represented as the difference of two squares\n        if n - i*i == i*i:\n            print(\"The given number can be represented as the difference of two squares\")\n            return\n\n    # If the given number cannot be represented as the difference of two squares, print \"Cannot be represented as a difference of two squares\"\n    print(\"Cannot be represented as a difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = 1\n    b = n\n    while a*a <= n:\n        if b % a == 0:\n            return True\n        a += 1\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    current_pattern = []\n    for pattern in patterns:\n        if len(current_pattern) < len(pattern):\n            if colors.count(pattern[len(current_pattern)]) == 0:\n                return False\n        current_pattern.append(pattern[len(current_pattern)])\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if all the colors are present in the patterns array\n    if len(set(colors).intersection(patterns))!= len(colors):\n        return False\n\n    # Sort the colors in ascending order\n    colors = sorted(colors)\n\n    # Loop through the patterns array\n    for i in range(len(patterns)):\n        # Check if the pattern and colors are same\n        if patterns[i]!= colors:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return \"Both arrays must have the same length\"\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return \"Both arrays must have the same elements\"\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            pass\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # create a dictionary to store the frequency of each color\n    freq = {}\n    for color in colors:\n        if color in freq:\n            freq[color] += 1\n        else:\n            freq[color] = 1\n    \n    # check whether the frequency of each pattern is the same as in the color list\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        for color in pattern:\n            if color not in freq or freq[color] == 0:\n                return False\n            freq[color] -= 1\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(patterns)!= len(colors):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    previous_color = None\n    current_pattern = None\n    count = 0\n\n    # Iterate through the colors array\n    for color in colors:\n        # Check if the current color is the same as the previous color\n        if color == previous_color:\n            # Check if the current color matches the current pattern\n            if patterns[patterns.index(current_pattern) + 1] == color:\n                count += 1\n            else:\n                count = 0\n                current_pattern = patterns[patterns.index(current_pattern) + 1]\n        # If the current color is different from the previous color, reset the count and reset the current pattern\n        else:\n            count = 0\n            current_pattern = patterns[patterns.index(current_pattern) + 1]\n\n        # Update the previous color\n        previous_color = color\n\n    # Check if the sequence of colors is complete and followed by the last pattern in the patterns array\n    if patterns[patterns.index(current_pattern) + 1] == 'None':\n        # If the sequence is complete and followed by the last pattern in the patterns array, return True\n        return True\n    else:\n        # If the sequence is not complete and followed by the last pattern in the patterns array, return False\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if all(x % K == 0 for x in i):\n            count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples that meet the condition\n    result = []\n\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # check if all elements of the tuple are divisible by k\n        if all(elem % K == 0 for elem in tup):\n            # if all elements are divisible by k, add the tuple to the result list\n            result.append(tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    res = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            res.append(tup)\n    return res"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = all(x % K == 0 for x in tup)\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty list to store the tuples with all elements divisible by K\n    result = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function checks whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The word length is even.\"\n    else:\n        return \"The word length is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns a boolean value indicating whether the length of the word is odd or not.\n    '''\n    \n    # Split the string into a list of words\n    words = s.split()\n    \n    # Check if the length of the first word is odd or even\n    if len(words[0]) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns a boolean value indicating whether the length of the word is odd or even.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # iterate over the words and check if their length is odd or even\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} has an even length\")\n        else:\n            print(f\"{word} has an odd length\")\n    # return True if the length of the first word is odd, else return False\n    return len(words[0]) % 2 == 1"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # convert the string to a list of characters\n    s = list(s)\n    # iterate over the list of characters and count the number of odd characters\n    count = 0\n    for c in s:\n        if ord(c) % 2!= 0:\n            count += 1\n    # return True if there is an odd number of characters, False otherwise\n    return count % 2 == 1"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 0:\n            print(w, \"is an even word.\")\n        else:\n            print(w, \"is an odd word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an input and returns True if the length of the word is odd, else it returns False.\n    '''\n    if len(s.split()) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-3) - tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n*4 + 3)/2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 4 * n * n - 6 * n + 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (24*n*n*n - 12*n*n + 6*n - 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function calculates the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    for i in range(1, n+1):\n        a += 1\n        b += 1\n        c = (a**2 + b**2)**0.5\n        if int(c) == c:\n            print(a*b*c)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    # Calculate the first n natural numbers\n    natural_numbers = [1] * n\n    # Calculate the fourth powers of the first n natural numbers\n    powers_of_four = [1] * n\n    for i in range(n):\n        powers_of_four[i] = 4**i\n    # Sum the fourth powers of the first n natural numbers\n    return sum(powers_of_four) + natural_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n - 1) * (n - 2) * (n - 3)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedron(a, b, c, d):\n        return (a+b+c+d)\n    a = 1\n    b = 1\n    c = 2\n    d = 4\n    for i in range(n-1):\n        a = b\n        b = c\n        c = 4 * a + d - b\n        d = tetrahedron(a, b, c, d)\n    return d"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculating the volume using the formula V = (4/3) * pi * r^3\n    volume = (4/3) * math.pi * r**3\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    # Find the surface area of the sphere\n    area = 4 * math.pi * r**2\n\n    # Use the formula for the volume of a sphere\n    volume = (4/3) * math.pi * r**3\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius of the sphere, and returns the volume of the sphere.\n    '''\n\n    volume = (4/3)*math.pi*r**3\n\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nvolume = volume_sphere(radius)\nprint(\"The volume of the sphere is\", volume)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3 * pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_values = [ord(c) for c in strr]\n    char_value = sum(ascii_values) % 26\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the variable to store the sum of ASCII values of all characters of the string\n    char_sum = 0\n    # Loop through each character of the string\n    for char in strr:\n        # Get the ASCII value of the character\n        ascii_value = ord(char)\n        # Add the ASCII value of the character to the sum\n        char_sum += ascii_value\n    # Find the character made by adding the ASCII value of all characters of the string modulo 26\n    char_value = char_sum % 26\n    # Convert the character value to the corresponding letter of the alphabet\n    char_letter = chr(char_value + 65)\n    # Return the character made by adding the ASCII value of all characters of the string modulo 26\n    return char_letter"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    return chr((total_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char = char % 26\n    return chr(65+char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in strr:\n        ascii_val += ord(i)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the ASCII value of characters\n    ascii_sum = ''\n    # Iterate through the string and add its ASCII value to the sum\n    for char in strr:\n        ascii_sum += str(ord(char))\n    # Convert the sum to an integer and take its modulus 26\n    char_ascii = int(ascii_sum) % 26\n    # Convert the modulus back to a character and return it\n    return chr(char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr(ascii_value % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to lowercase\n    strr = strr.lower()\n    # Initialize the result to an empty string\n    result = ''\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result modulo 26\n        result += chr((ord(char) + 96) % 26 + 65)\n    # Return the result\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n    if n > len(seq):\n        print(\"Error: Number of iterations is greater than the length of the sequence.\")\n    else:\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    next_sequence = [0]\n    for i in range(n-1):\n        sequence.append(sequence[i] + sequence[i+1])\n        next_sequence.append(1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] * 2)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(2 * sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 1:\n            seq.append(seq[i - 1] * 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2])\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        new_sequence = []\n        for i in range(1, n + 1):\n            new_sequence.append(i)\n        for i in range(1, n):\n            if new_sequence[i] % 2 == 0:\n                new_sequence[i] = new_sequence[i - 1] + new_sequence[i]\n            else:\n                new_sequence[i] = new_sequence[i - 1]\n        return new_sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[i-1]*3)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n+1)\n    sequence[0] = 0\n    sequence[1] = 1\n    for i in range(2, n+1):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n    return sequence[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Define the formula for the surface area of a sphere\n    surface_area = (4/3) * math.pi * (r**3)\n    \n    # Return the surface area of the sphere\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in a radius 'r' as input and returns the surface area of the sphere.\n    '''\n    area = 4 * math.pi * (r ** 2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n - 1) * (n ** 2 + n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 3\n    centered_hex = 1\n\n    for i in range(1, n+1):\n        centered_hex = a + (2 * b - 1)\n        a = b\n        b = centered_hex\n\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize counter and sum variables\n    counter = 1\n    sum_of_digits = 0\n\n    # Calculate the sum of the first n digits of the centered hexagonal number\n    while counter <= n:\n        sum_of_digits += (1 / 2) ** counter\n        counter += 1\n\n    # Return the result\n    return sum_of_digits"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(6*n-1)//2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables for centered hexagonal number and digits\n    centered_hex = 0\n    digits = [0] * 9\n\n    # Calculate centered hexagonal number\n    centered_hex += n * ((2 * n) - 1)\n\n    # Calculate digits of centered hexagonal number\n    for i in range(1, 10):\n        digits[i] = centered_hex // (2 * i * (2 * i - 1))\n        centered_hex %= (2 * i * (2 * i - 1))\n\n    # Calculate the position of the digit in the centered hexagonal number\n    pos = centered_hex % 9\n\n    # Return the centered hexagonal number and its digit position\n    return centered_hex, pos"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a = 0.25\n    a_n = a + (2 * a**2 - 1) / 3\n    b = a_n * 0.5\n    c = a_n - b\n    d = 2 * a**2 - 1\n    h = (1 + (2 * n - 1) * b) / d\n    return int(h * 100)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define a function to calculate the centered hexagonal number\n    def centered_hexagonal(m):\n        if m == 1:\n            return 1\n        else:\n            return (2*m-1)**2 + (3*m-1)**2\n\n    # Calculate the sum of centered hexagonal numbers\n    sum_of_centered_hexagonal = 0\n    for i in range(1, n+1):\n        sum_of_centered_hexagonal += centered_hexagonal(i)\n\n    return sum_of_centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2) + centered_hexagonal_number(n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        c = a + b\n        print(c)\n        a = b\n        b = c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal = n * (2 * n - 1)\n    centered = hexagonal // 2\n    return centered"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    :param dict1: The first dictionary to be merged.\n    :type dict1: dict\n    :param dict2: The second dictionary to be merged.\n    :type dict2: dict\n    :param dict3: The third dictionary to be merged.\n    :type dict3: dict\n    :return: A single dictionary with all the key-value pairs from the three input dictionaries.\n    :rtype: dict\n    \"\"\"\n\n    merged_dict = dict1.copy()\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): First dictionary to merge.\n    dict2 (dict): Second dictionary to merge.\n    dict3 (dict): Third dictionary to merge.\n\n    Returns:\n    dict: Merged dictionary.\n\n    Example:\n    >>> dict1 = {'a': 1, 'b': 2, 'c': 3}\n    >>> dict2 = {'d': 4, 'e': 5}\n    >>> dict3 = {'f': 6}\n    >>> merge_dictionaries_three(dict1, dict2, dict3)\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    \"\"\"\n    merged_dict = {}\n\n    # Merge dictionaries by iterating over the keys\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1 (dict): The first dictionary to be merged.\n    - dict2 (dict): The second dictionary to be merged.\n    - dict3 (dict): The third dictionary to be merged.\n\n    Returns:\n    - dict: The merged dictionary.\n\n    \"\"\"\n\n    # Merge the dictionaries by adding their key-value pairs\n    merged_dict = {**dict1, **dict2, **dict3}\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(dict2[key]) + ct.Counter(merged_dict[key])\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(dict3[key]) + ct.Counter(merged_dict[key])\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary\n    freq = {}\n    # Loop through the list\n    for i in list1:\n        # Check if the element is already in the dictionary\n        if i in freq:\n            # If it is, increment its value by 1\n            freq[i] += 1\n        # If it's not, add it to the dictionary with a value of 1\n        else:\n            freq[i] = 1\n    # Return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary where the keys are the unique elements in the list and the values are their frequency.\n    '''\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest_num = None\n    for num in range(N, 0, -1):\n        diff = abs(N - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_numbers = [i for i in range(1, N+1)]\n    smallest_num = min(smaller_numbers)\n    closest_smaller = N - smallest_num\n    if abs(closest_smaller) < abs(N-smallest_num):\n        return closest_smaller\n    else:\n        return N - smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [i for i in range(1, N)]\n    min_num = float('inf')\n    closest = None\n\n    for num in nums:\n        if num < min_num:\n            min_num = num\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [int(x) for x in input(\"Enter a list of numbers separated by spaces: \").split()]\n    smallest_num = float('inf')\n    smallest_idx = None\n\n    for i in range(len(nums)):\n        if nums[i] < smallest_num:\n            smallest_num = nums[i]\n            smallest_idx = i\n\n    return smallest_idx\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = abs(N)\n    min_num = N\n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for i in range(N, 0, -1):\n        if abs(i - N) < abs(i - min_num):\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables for minimum and maximum values\n    min_value = N\n    max_value = N\n    # loop through the list of numbers and update minimum and maximum values\n    for num in N:\n        if num < min_value:\n            min_value = num\n        if num > max_value:\n            max_value = num\n    # calculate the distance between the minimum and maximum values\n    dist = max_value - min_value\n    # if the distance is 0 or 1, return the minimum or maximum value\n    if dist == 0 or dist == 1:\n        return min_value\n    # otherwise, return the closer number to N\n    else:\n        return min(N, key=lambda x: abs(x - N))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Create a list of all numbers between 1 and N\n    numbers = list(range(1, N+1))\n    # Sort the list in ascending order\n    numbers.sort()\n    # Find the closest smaller number to N\n    closest_num = numbers[1]\n    # If the closest smaller number is greater than N, return N\n    if closest_num > N:\n        return N\n    # If the closest smaller number is less than N, return it\n    else:\n        return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize a variable to store the closest smaller number\n    closest = N\n    \n    # loop through all the numbers from 1 to N\n    for i in range(1, N+1):\n        # calculate the absolute difference between the current number and N\n        diff = abs(N - i)\n        \n        # if the current number is smaller than the closest smaller number\n        if i < closest:\n            # update the closest smaller number to the current number\n            closest = i\n            \n        # if the absolute difference between the current number and N is smaller than the difference between the closest smaller number and the current number\n        elif diff < abs(closest - i):\n            # update the closest smaller number to the current number\n            closest = i\n    \n    # return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = -1\n    for i in range(1, N+1):\n        if abs(N-i) < abs(smallest):\n            smallest = N-i\n            closest = i\n    return closest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables to store the length of the longest word and the word itself\n    longest_length = 0\n    longest_word = \"\"\n    \n    # Iterate over each word in the list\n    for word in list1:\n        # Calculate the length of the word\n        word_length = len(word)\n        \n        # If the length of the word is greater than the current longest length, update the variables accordingly\n        if word_length > longest_length:\n            longest_length = word_length\n            longest_word = word\n            \n    # Return the length of the longest word\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in list1:\n        if len(i) > longest:\n            longest = len(i)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Returns True if `str1` is a substring of any of the elements of `lst`\n    \"\"\"\n    lst = [str1] + [s + sub_str for s in lst]\n    for s in lst:\n        if s in lst:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the given list to set to remove duplicates\n    str1 = set(str1)\n\n    # Iterate through each string in the list\n    for s in str1:\n        # Check if the substring is present in the current string\n        if sub_str in s:\n            # If it is, return True\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert sub_str to lowercase to make the search case-insensitive\n    sub_str = sub_str.lower()\n    # convert each string in str1 to lowercase and check if it contains sub_str\n    for s in str1:\n        if s.lower().find(sub_str)!= -1:\n            return True\n    # if no string in str1 contains sub_str, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two string values: str1 and sub_str. The function then checks if the sub_str is present in the list of string values str1.\n    If the sub_str is present in the list, the function returns True, otherwise it returns False.\n    '''\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if s == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Initialize variables for undulating or not\n    is_undulating = False\n    count = 0\n    \n    # Check if the number is odd\n    if n % 2 == 1:\n        count = 0\n        # Calculate the sum of the odd digits\n        while n > 0:\n            count += n % 10\n            n //= 10\n        # Check if the sum of the odd digits is equal to the given number\n        if count == n:\n            is_undulating = True\n    \n    return is_undulating"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2 or n >= 100:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if i % 3 == 0:\n                return False\n        for i in range(5, n, 6):\n            if i % 5 == 0:\n                return False\n        for i in range(15, n, 15):\n            if i % 15 == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: # If the number is negative, it's not undulating\n        return False\n    if n == 0: # If the number is zero, it's undulating\n        return True\n    if n % 2 == 0: # If the number is even, it's not undulating\n        return False\n    if n % 4 == 0: # If the number is divisible by 4, it's not undulating\n        return False\n    if n % 5 == 0: # If the number is divisible by 5, it's not undulating\n        return False\n    if n % 10 == 0: # If the number is divisible by 10, it's not undulating\n        return False\n    if n % 20 == 0: # If the number is divisible by 20, it's not undulating\n        return False\n    if n % 100 == 0: # If the number is divisible by 100, it's not undulating\n        return False\n    if n % 200 == 0: # If the number is divisible by 200, it's not undulating\n        return False\n    if n % 1000 == 0: # If the number is divisible by 1000, it's not undulating\n        return False\n    if n % 2000 == 0: # If the number is divisible by 2000, it's not undulating\n        return False\n    return True # If the number is not divisible by any of the above values, it's undulating"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if the number is undulating, else False.\n\n    A number is said to be undulating if the sum of its digits raised to the power of the number of digits is a perfect square.\n\n    For example:\n    12345 is an undulating number because 1^5 + 2^4 + 3^3 + 4^2 + 5^1 = 485 and 485 is a perfect square (4^4 = 256).\n    1234 is not an undulating number because 1^4 + 2^3 + 3^2 + 4^1 = 14 and 14 is not a perfect square (1^1 + 2^0 + 3^-1 + 4^-2 = 1).\n    '''\n    if n < 10:\n        return True\n    else:\n        digits = [int(digit) for digit in str(n)]\n        sum_digits = sum(digit**len(digits) for digit in digits)\n        return is_perfect_square(sum_digits)\n\ndef is_perfect_square(n):\n    '''\n    This function takes an integer as input and returns True if the number is a perfect square, else False.\n    '''\n    root = int(n**0.5)\n    return root**2 == n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return \"Undulating\" \n    else: \n        return \"Not Undulating\" "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check if n is even\n    if n % 2 == 0:\n        return True\n    else:\n        # check if n is a prime number\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(0, 1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    min_index = 0\n    min_value = test_list[0][1]\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n        elif test_list[i][1] == min_value:\n            if test_list[i][0] < test_list[min_index][0]:\n                min_index = i\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using the built-in `sorted()` function and the `itemgetter()` function, sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_item = test_list[0]\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_item[1]:\n            min_item = test_list[i]\n            min_index = i\n    return min_item[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Use the built-in sorted function to sort the list based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for sublist in lst:\n        length = len(sublist)\n        if min_length is None or length < min_length:\n            min_length = length\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') #initialize variable to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the length of the smallest list\n    min_length = float('inf')\n\n    # Iterate through the list of lists\n    for sublist in lst:\n        # Check if the length of the current sublist is smaller than the minimum length found so far\n        if len(sublist) < min_length:\n            # Update the minimum length with the length of the current sublist\n            min_length = len(sublist)\n\n    # Return the minimum length of the list of lists\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in lst:\n        for j in i:\n            if len(j) < min_length:\n                min_length = len(j)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(12)) # output: 2"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return 1 + divisor(n-1)"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element of the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq:\n            # Increment the frequency of the element by 1\n            freq[element] += 1\n        else:\n            # If the element is not in the dictionary, add it with a frequency of 1\n            freq[element] = 1\n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Define an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list1 and its sublists\n    for element in list1:\n        # If the element is a list, loop through its subelements and add their frequency to the dictionary\n        if isinstance(element, list):\n            for sub_element in element:\n                if sub_element in freq_dict:\n                    freq_dict[sub_element] += 1\n                else:\n                    freq_dict[sub_element] = 1\n        # If the element is not a list, add its frequency to the dictionary\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    # Return the dictionary containing frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in frequency:\n                frequency[subitem] += 1\n            else:\n                frequency[subitem] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Count frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    \n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n                \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # flatten the input list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # iterate over the flattened list and update the frequency of each element in the dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in freq_dict:\n                freq_dict[subitem] = 0\n            freq_dict[subitem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # iterate over each element in the flattened list\n    for item in list1:\n        # if the element is a list, recursively call the function on the list and add its frequency to the dictionary\n        if type(item) == list:\n            for sub_item in item:\n                # check if the sub_item is already in the dictionary\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                # if the sub_item is not in the dictionary, add it with a frequency of 1\n                else:\n                    freq_dict[sub_item] = 1\n        # if the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # calculate the product of all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # calculate the quotient of the product and the length of the list\n    quotient = product / len(numbers)\n    \n    return quotient"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store binary representation\n    binary_str = \"\"\n    \n    # iterate through each bit of the decimal number from least significant bit to most significant bit\n    while n > 0:\n        # get the last bit of the decimal number and convert it to binary\n        last_bit = n % 2\n        \n        # add the binary representation of the last bit to the string\n        binary_str = str(last_bit) + binary_str\n        \n        # remove the last bit from the decimal number to shift it one position to the right\n        n = n // 2\n    \n    # return the binary representation of the decimal number\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\" \n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        binary_representation = ''\n        while n > 0:\n            remainder = n % 2\n            binary_representation = str(remainder) + binary_representation\n            n = n // 2\n        return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n = n // 2 \n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary_str = ''\n\n    while n > 0: \n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary number\n    binary = \"\"\n    # while n is greater than 0\n    while n > 0:\n        # extract the last digit of n\n        digit = n % 2\n        # add the digit to the binary string\n        binary = str(digit) + binary\n        # remove the last digit of n\n        n = n // 2\n    # return the binary string\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input is a palindrome\n    if str(num) == str(num)[::-1]:\n        # Convert the integer to a string\n        num_str = str(num)\n        # Remove the first character and reverse the remaining characters\n        reversed_num_str = num_str[1:][::-1]\n        # Convert the reversed string back to an integer and add 1 to it\n        next_num = int(reversed_num_str) + 1\n        return next_num\n    else:\n        # Check if the input is a multiple of 10\n        if num % 10 == 0:\n            # Find the next multiple of 10\n            next_num = num + 10\n            return next_num\n        else:\n            # Find the next smallest multiple of 10\n            next_num = num + 10 - (num % 10)\n            return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reverse_str = num_str[::-1]\n    # Check if the reversed string is a palindrome\n    is_palindrome = True\n    for i in range(len(reverse_str)):\n        if reverse_str[i]!= reverse_str[-i - 1]:\n            is_palindrome = False\n            break\n    # If the reversed string is a palindrome, then add one to the integer and find the next smallest palindrome\n    if is_palindrome:\n        next_num = int(num_str) + 1\n        while not is_palindrome(next_num):\n            next_num += 1\n        return next_num\n    else:\n        return None\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    num_str = str(num)\n    # Reverse the string\n    reverse_str = num_str[::-1]\n    # Check if the reversed string is equal to the original string\n    if reverse_str == num_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        reversed_num = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            reversed_num = reversed_num * 10 + digit\n            temp //= 10\n        return reversed_num == num\n    \n    def find_next_palindrome(num):\n        '''\n        Helper function to find the next smallest palindrome of a given number.\n        '''\n        if is_palindrome(num):\n            return num + 1\n        else:\n            return find_next_palindrome(num + 1)\n    \n    next_palindrome = find_next_palindrome(num)\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Base case\n    if num == 1:\n        return 9\n    \n    # Find the next smallest palindrome of num-1\n    next_num = next_palindrome(num-1)\n    \n    # Find the next smallest palindrome of num\n    if is_palindrome(next_num):\n        return next_num\n    else:\n        return next_smallest_palindrome(next_num)\n\n\ndef next_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_str = str(num)[::-1]\n    \n    # Convert the reversed string back to an integer and add 1 to it\n    next_num = int(reversed_str) + 1\n    \n    # Check if the next number is a palindrome\n    if is_palindrome(next_num):\n        return next_num\n    else:\n        return next_palindrome(next_num)\n\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a specified number is a palindrome.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    str_num = str(num)\n    reversed_str = str_num[::-1]\n    \n    # Compare the original number with its reversed version\n    return str_num == reversed_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert input integer to string\n    num_str = str(num)\n    # reverse string and add 1 to get next smallest palindrome\n    next_smallest = int(num_str[::-1] + str(int(num_str[::-1]) + 1)[::-1])\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is even or odd\n    if num % 2 == 0:\n        # If even, add 1 to it and divide by 2 to get the next odd number\n        next_num = (num + 1) // 2\n    else:\n        # If odd, add 1 to it and divide by 2 to get the next even number\n        next_num = (num + 1) // 2 + 1\n\n    # Check if the next smallest palindrome is palindrome or not\n    while True:\n        # Convert the next smallest palindrome to string and check if it is a palindrome or not\n        next_num_str = str(next_num)\n        if next_num_str == next_num_str[::-1]:\n            break\n        # If not a palindrome, add 1 to the next smallest palindrome and try again\n        next_num = next_num + 1\n\n    # Return the next smallest palindrome as an integer\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Initialize variables\n    smallest_palindrome = 0\n    count = 0\n\n    # Iterate through the range of numbers from 1000 to the specified number\n    for i in range(1000, num+1):\n        # Check if the current number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Check if the current number is the smallest palindrome found so far\n            if i < smallest_palindrome:\n                smallest_palindrome = i\n                count = 1\n            # Check if the current number is the second smallest palindrome found so far\n            elif i == smallest_palindrome and count < 2:\n                smallest_palindrome = i\n                count += 1\n\n    # Return the next smallest palindrome found\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the given number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # if it is, find the next smallest number\n        for i in range(num, 10**(len(str(num)))-1, -1):\n            if str(i) == str(i)[::-1]:\n                return i\n    else:\n        # if not, check for the next smallest palindrome\n        for i in range(num, 10**(len(str(num)))-1, -1):\n            if str(i) == str(i)[::-1]:\n                break\n        i += 1\n        return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if int(num_str[i:]) > int(num_str[:i]):\n            if int(num_str[:i]) < 10**9:\n                next_num = int(num_str[:i]) + 1\n                if int(str(next_num)[::-1]) == str(next_num):\n                    return next_num\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Returns True if the given number is a palindrome, False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num+1):\n        return num+1\n    elif is_palindrome(num-1):\n        return num-1\n    else:\n        return next_smallest_palindrome(num-1)\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    try:\n        num = int(sys.argv[1])\n    except ValueError:\n        print(\"Error: Invalid input. Please provide an integer.\")\n        sys.exit(1)\n    result = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input. k must be between 1 and the length of the array.\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    left = 1\n    right = n\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid - 1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k:\n                return arr[mid-1]\n            elif mid > k:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return \"Element not found\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        raise ValueError(\"Invalid index\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    \n    i = 1\n    while i < len(arr):\n        j = i\n        while j < len(arr) and arr[j] <= arr[i]:\n            j += 1\n        arr[i], arr[j-1] = arr[j-1], arr[i]\n        i += 1\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        count = 1\n        for i in range(1, len(arr)+1):\n            if count == k:\n                return arr[i-1]\n            else:\n                count += 1\n        return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    result = words[0]\n    for i in range(1, len(words)):\n        result += words[i].capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.capitalize())\n    return ''.join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if i!= 0 else x.lower() for i, x in enumerate(word.split('_')))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    capitalized = []\n    for w in words:\n        capitalized.append(w.capitalize())\n    return ''.join(capitalized)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word by underscores\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word and join them with a single space\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_word += char.lower()\n        elif char.isupper():\n            camel_word += char.lower()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first word to lowercase\n    first_word = words[0].lower()\n    # Convert the rest of the words to uppercase\n    rest_of_words = [word.capitalize() for word in words[1:]]\n    # Combine the first word with the rest of the words\n    camel_case = first_word + ''.join(rest_of_words)\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    \"\"\"\n    return \"\".join([word[0].lower(), word[1:].capitalize()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case_words = []\n    for word in words:\n        if word.isupper():\n            camel_case_words.append(word.lower())\n        else:\n            camel_case_words.append(word.capitalize())\n    camel_case_string = \"\".join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    if n == 0:\n        a = m\n    elif m == 0:\n        a = n\n    else:\n        if n % 2 == 0:\n            a = (m * (n+1)) // 2\n        else:\n            a = (m * (n-1)) // 2\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1:\n        return m\n    # Recursive case\n    else:\n        return eulerian_num(n - 1, m + n)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the binomial coefficient\n    def binomial(n, k):\n        if k < 0 or k > n:\n            return 0\n        elif k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n - 1, k - 1) + binomial(n - 1, k)\n\n    # Calculate the Eulerian number\n    def euler(n, m):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return (binomial(n, m) + binomial(n - 1, m) - binomial(n - 1, m - 1)) * euler(n - 1, m)\n\n    # Return the Eulerian number\n    return euler(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix\n    matrix = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    # Calculate the matrix values\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1] - matrix[i - 1][j - 1] + 1\n    # Return the last element of the matrix\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    else:\n        return n * eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    a = 0\n    for i in range(1, n+1):\n        a += i * (m - i)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1: \n        return 0\n    elif n == 1: \n        return 1\n    elif m == 1: \n        return (1+n) // 2\n    else:\n        return ((2*m-1)*eulerian_num(n-1, m)) // (m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the Eulerian number to 1\n    a = 1\n    \n    # Check if n and m are odd or even\n    if n % 2 == 0 or m % 2 == 0:\n        # If n and m are even, set a = 0\n        a = 0\n    \n    # Find the sum of cubes of odd numbers between n and m\n    for i in range(n+1, m, 2):\n        a += i**3\n    \n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # If n is even, then a(n, m) = 0 (mod 4)\n        return 0\n    else:\n        # If n is odd, then a(n, m) = 4^(n/2) - 1 (mod 4)\n        return 4**(n//2) - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a += (i*j) // 2\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for i, lst in enumerate(input_list):\n        input_list[i] = sorted(lst)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # append the lists to tuples\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append test_list to the test_tup\n    test_tup += (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the given tuples to lists to allow appending\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Append the given list to the given tuples\n    for item in test_list:\n        test_tup.append(item)\n    \n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuple to a list to modify it\n    test_list = list(test_list)\n\n    # modify the list by appending the given tuples\n    test_list.extend(test_tup)\n\n    # convert the modified list back to a tuple\n    test_tup = tuple(test_list)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Append the list to the tuple\n    test_list.extend(test_list)\n    # Convert the list back to a tuple\n    return tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Parameters:\n    num1 (list): First sorted list.\n    num2 (list): Second sorted list.\n    num3 (list): Third sorted list.\n\n    Returns:\n    list: Merged sorted list.\n    \"\"\"\n\n    # Combine sorted lists\n    merged_list = num1 + num2 + num3\n\n    # Convert merged list to min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Extract and return minimum element from min heap\n    return [heapq.heappop(min_heap) for _ in range(len(num1) + len(num2) + len(num3))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one sorted list\n    all_numbers = heapq.merge(num1, num2, num3)\n    # Return the sorted list\n    return all_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists\n    merged_list1 = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            merged_list1.append(num1[i])\n            i += 1\n        else:\n            merged_list1.append(num2[j])\n            j += 1\n    merged_list1 += num1[i:]\n    merged_list1 += num2[j:]\n\n    # Merge the second two lists\n    merged_list2 = []\n    i = j = 0\n    while i < len(num2) and j < len(num3):\n        if num2[i] <= num3[j]:\n            merged_list2.append(num2[i])\n            i += 1\n        else:\n            merged_list2.append(num3[j])\n            j += 1\n    merged_list2 += num2[i:]\n    merged_list2 += num3[j:]\n\n    # Merge the merged two lists\n    merged_list = []\n    i = j = 0\n    while i < len(merged_list1) and j < len(merged_list2):\n        if merged_list1[i] <= merged_list2[j]:\n            merged_list.append(merged_list1[i])\n            i += 1\n        else:\n            merged_list.append(merged_list2[j])\n            j += 1\n    merged_list += merged_list1[i:]\n    merged_list += merged_list2[j:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single sorted list using heapq\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the elements from the three input lists\n    all_elements = [x for x in num1 + num2 + num3]\n    \n    # Use heapq to sort the list in ascending order\n    heapq.heapify(all_elements)\n    \n    # Create an empty list to store the sorted elements\n    sorted_elements = []\n    \n    # Pop elements from the heap and append to sorted_elements\n    while all_elements:\n        sorted_elements.append(heapq.heappop(all_elements))\n    \n    return sorted_elements"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Parameters:\n        num1 (list): A list of integers.\n        num2 (list): A list of integers.\n        num3 (list): A list of integers.\n\n    Returns:\n        list: A list of integers that is the merged result.\n    \"\"\"\n    # Use a min heap to merge the three lists in ascending order\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Merge the remaining elements\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n        if heapq.heappop(heap) < heapq.heappop(heap):\n            heapq.heappush(heap, heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Concatenate all the lists into one\n    merged_list = num1 + num2 + num3\n    # Convert the list into a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    # Convert the min heap back into a sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num1) > heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n            heapq.heappop(num3)\n\n    if len(num1) > 0:\n        while len(num1) > 0:\n            merged_list.append(heapq.heappop(num1))\n    if len(num2) > 0:\n        while len(num2) > 0:\n            merged_list.append(heapq.heappop(num2))\n    if len(num3) > 0:\n        while len(num3) > 0:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a min heap of lists for each input list\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n\n    # Merge the heaps into a single sorted list\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) <= heapq.heappop(heap2):\n            if heapq.heappop(heap3) <= heapq.heappop(heap2):\n                heapq.heappush(merged_list, heapq.heappop(heap3))\n            else:\n                merged_list.append(heapq.heappop(heap3))\n        else:\n            if heapq.heappop(heap1) <= heapq.heappop(heap3):\n                merged_list.append(heapq.heappop(heap1))\n            else:\n                heapq.heappush(merged_list, heapq.heappop(heap1))\n                merged_list.append(heapq.heappop(heap3))\n\n    # Add any remaining elements to the merged list\n    while heap1:\n        merged_list.append(heapq.heappop(heap1))\n    while heap2:\n        merged_list.append(heapq.heappop(heap2))\n    while heap3:\n        merged_list.append(heapq.heappop(heap3))\n\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables\n    count = 0\n    # split the binary string into a list of digits\n    digits = [int(digit) for digit in s]\n    # rotate the digits by n times\n    for i in range(n):\n        digits.append(digits.pop(0))\n    # iterate through the rotated digits and count the odd values\n    for digit in digits:\n        if digit % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    i = 0\n    while i < len(s):\n        if int(s[i]) % 2 == 1:\n            count += 1\n        i = (i + n) % len(s)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if int(s, 2) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if len(set(s)) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s[i]) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    s = s[::-1]  # reverse the binary string\n    result = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            result += 1\n        if i + 1 < n:\n            s = s[-i-1] + s[:-i-1]\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert binary string to list\n    binary_list = [int(i) for i in list(s)]\n\n    # iterate n times to rotate the binary string\n    for i in range(n):\n        # create a new empty list to store the new binary string\n        new_list = []\n        # loop through the binary list from right to left\n        for j in range(len(binary_list) - 1, -1, -1):\n            # add the last element of the binary list to the new list\n            new_list.append(binary_list[j])\n            # remove the first element of the binary list\n            del binary_list[j]\n        # set the new binary list to the binary_list variable\n        binary_list = new_list\n\n    # count the number of odd numbers in the rotated binary string\n    count = 0\n    for num in binary_list:\n        if num % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of binary digits\n    digits = [int(digit) for digit in s]\n\n    # Rotate the list n times\n    for _ in range(n):\n        # Create a new list containing the digits of the current list, in reverse order\n        new_digits = [digits[-1]]\n        digits = digits[:-1] + new_digits\n\n    # Count the number of odd digits in the rotated list\n    count = 0\n    for digit in digits:\n        if digit % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        count += int(s, 2)\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_elements = set()\n\n    # Iterate through each sublist in the nested list\n    for sublist in nestedlist:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Add the element to the common_elements set if it's not already there\n            if element not in common_elements:\n                common_elements.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements = list(set(nestedlist[i]) & set(nestedlist[j]))\n            if common_elements:\n                return common_elements\n    return None"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    # Iterate through each list in the nested list\n    for item in nestedlist:\n        # If the list is not empty\n        if item:\n            # Iterate through each item in the list\n            for subitem in item:\n                # Add the item to the set if it's in the list\n                if subitem in common:\n                    common.remove(subitem)\n                else:\n                    common.add(subitem)\n    # Return the common elements in a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # iterate over the nested lists and count the number of occurrences of each element\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in count_dict:\n                count_dict[element] += 1\n            else:\n                count_dict[element] = 1\n    # create an empty dictionary to store the common elements and their count\n    common_dict = {}\n    # iterate over the nested lists again and find the common elements\n    for sublist in nestedlist:\n        for element in sublist:\n            if count_dict[element] > 0 and element not in common_dict:\n                common_dict[element] = count_dict[element]\n    # return the common elements with their count\n    return common_dict"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as an argument and returns a list of common elements in the nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if k!= i and k!= j:\n                    for l in range(len(nestedlist[k])):\n                        if nestedlist[i][j] == nestedlist[k][l]:\n                            common_elements.append(nestedlist[i][j])\n                            break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n    # Loop through each list in the nestedlist\n    for item in nestedlist:\n        # Loop through each item in the list\n        for elem in item:\n            # If the element is already in the common set, add it to the result set\n            if elem in common:\n                common.add(elem)\n    # Convert the common set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Find the common elements in a nested list.\n\n    Args:\n    - nestedlist: a nested list of integers or floats.\n\n    Returns:\n    - a list of common elements in the nested list.\n    '''\n    common = []\n    for sublist in nestedlist:\n        common.extend(set(sublist) & set(common))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # flattening the nested list using the map function\n    flatlist = list(map(lambda x: x if isinstance(x, list) else [x], nestedlist))\n    # creating a set to store unique elements\n    unique_elements = set()\n    # iterating through the flattened list\n    for item in flatlist:\n        # checking if the item is already present in the set\n        if item not in unique_elements:\n            unique_elements.add(item)\n    # converting the set to a list\n    common_elements = list(unique_elements)\n    # returning the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove any non-numeric characters from the string\n    numeric_string = ''.join(filter(str.isdigit, text))\n\n    # Check if the string is a valid integer\n    try:\n        int(numeric_string)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Remove spaces and check if the string is an integer or not\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dit in list1:\n        if dit:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(not bool(d) for d in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for each_dict in list1:\n        if each_dict!= {}:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums = list(nums)\n    # Initialize a variable to store the sum of the tuple elements\n    sum = 0\n    # Loop through the list of numbers and add each element to the sum variable\n    for num in nums:\n        sum += num\n    # Return the sum of the tuple elements\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer variable\n    result = 0\n\n    # Loop through each number in the tuple\n    for num in nums:\n        # Add the current number to the result variable\n        result += num\n\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                result.append(float(element))\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        for element in row:\n            try:\n                float_element = float(element)\n                result.append(float_element)\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        new_row = []\n        for element in row:\n            if isinstance(element, str):\n                try:\n                    new_row.append(float(element))\n                except ValueError:\n                    new_row.append(element)\n            else:\n                new_row.append(element)\n        result.append(new_row)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for element in sub_list:\n            try:\n                float(element)\n            except ValueError:\n                try:\n                    int(element)\n                except ValueError:\n                    pass\n                else:\n                    sub_list[sub_list.index(element)] = float(element)\n            else:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                test_list[test_list.index(row)][test_list[test_list.index(row)].index(element)] = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n            if count == 1:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == len(arr)-1 or arr[i]!= arr[i+1]:\n            count += 1\n    return arr[count]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables to keep track of the first and last indices of the element\n    first_index = -1\n    last_index = -1\n\n    # Loop through the array and find the first and last indices of the element\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            first_index = i\n        if i == len(arr)-1 or arr[i]!= arr[i+1]:\n            last_index = i\n\n    # Check if the element appears only once in the array\n    if last_index == -1 or last_index == first_index:\n        return None\n    else:\n        return arr[first_index]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n\n    Args:\n        arr: a sorted array of integers\n\n    Returns:\n        the element that appears only once in the array\n\n    Raises:\n        ValueError: if the array is not sorted\n\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0]!= arr[1]:\n            raise ValueError(\"The array is not sorted\")\n        return arr[0]\n    else:\n        for i in range(n):\n            if arr[i]!= arr[i + 1]:\n                return arr[i]\n        raise ValueError(\"The array is not sorted\")"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[:mid - 1])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[mid + 2:])\n        else:\n            if arr[0]!= arr[mid]:\n                return search(arr[1:])\n            else:\n                return search(arr[1:mid])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i - 1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            else:\n                return unique_element\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # check if the array is empty or contains only one element\n    if len(arr) < 2:\n        return None\n\n    # set a flag variable to keep track of whether we have found the element yet\n    found = False\n\n    # initialize a variable to store the current element being checked\n    current = arr[0]\n\n    # loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # if we have found the element before, then we have found the only occurrence of it\n        if current == arr[i]:\n            found = True\n            break\n\n        # if the current element is less than the next element, then we have found the only occurrence of it\n        if current < arr[i]:\n            found = True\n            break\n\n        # if we have checked all elements and haven't found the element yet, then we have found a new occurrence of the element\n        if i == len(arr) - 1 and not found:\n            return current\n\n    # if we have exited the loop without finding the only occurrence of the element, then it must be part of the triplet\n    return current"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create a dictionary to store the frequency of elements in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # iterate through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the element that appears only once\n    unique_element = None\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is the same as the previous element, it means it appears only once\n        if arr[i] == arr[i-1]:\n            # If the element has not been found yet, update it to the current element\n            if unique_element is None:\n                unique_element = arr[i]\n            # If the element has already been found, return it\n            else:\n                return unique_element\n    \n    # If the loop completes without finding a unique element, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1e9\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    product = 0\n    \n    # Iterate over the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two numbers in the pair\n            product = abs(list1[i] * list1[j])\n            \n            # Update the maximum product found so far\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Create an empty list to store the maximum absolute products\n    max_products = []\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        \n        # Calculate the absolute value of each number in the tuple\n        tup_abs = [abs(num) for num in tup]\n        \n        # Find the maximum absolute product among the numbers in the tuple\n        max_product = max(tup_abs)\n        \n        # Append the maximum absolute product to the max_products list\n        max_products.append(max_product)\n    \n    # Find the maximum absolute product among all the maximum absolute products\n    max_product = max(max_products)\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    max_product_pair = (float('-inf'), float('-inf'))\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_product = lst[i] * lst[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = (lst[i], lst[j])\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1])\n            if diff > max_product:\n                max_product = diff\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for tup in lst:\n        if tup[0] < 0 and tup[1] < 0:\n            current_product = abs(tup[0]) * abs(tup[1])\n        elif tup[0] > 0 and tup[1] > 0:\n            current_product = abs(tup[0]) * abs(tup[1])\n        else:\n            current_product = abs(tup[0]) * abs(tup[1])\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize the maximum product and the maximum absolute product\n    max_product = float('-inf')\n    max_abs_product = float('-inf')\n    \n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Compute the absolute product of the two numbers in each tuple\n            abs_product = abs(list1[i][0] * list1[j][1])\n            \n            # Update the maximum product and the maximum absolute product\n            max_product = max(max_product, abs_product)\n            max_abs_product = max(max_abs_product, max_product)\n    \n    # Return the maximum absolute product\n    return max_abs_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is amicable or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Helper function to check if a given number is amicable.\n    \"\"\"\n    return sum(set(range(1, num)) & {num, num//2}) == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # define a function to check if a number is amicable\n    def is_amicable(num):\n        # check if num is a factor of its sum\n        if sum([i for i in range(1, int(num ** 0.5) + 1) if num % i == 0]) == num:\n            return True\n        else:\n            return False\n\n    # sum all amicable numbers from 1 to limit\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num!= 1 and is_prime(num):\n            for i in range(1, num // 2):\n                if num % i == 0 and is_prime(i):\n                    if i == (num // i):\n                        amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(sum_of_proper_divisors(i)):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to sum all proper divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num // i)\n    divisors.append(num)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum(set(range(1, num))):\n            if num not in amicable_numbers:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit):\n        num = i\n        num_sum = 0\n        while num > 0:\n            digit = num % 10\n            num_sum += digit ** 2\n            num //= 10\n        if i == num_sum and i!= num:\n            result += i\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    total = 0\n    \n    # Loop through all numbers up to the limit\n    while b <= limit:\n        # Check if b is a factor of a and if it is, check if a is a factor of b\n        if a % b == 0 and b % a == 0:\n            # If a and b are amicable, add their sum to the total\n            total += a + b\n        # Update b\n        b += 1\n        \n    # Return the total sum of amicable numbers\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if i not in amicable_numbers:\n            j = i\n            while j <= limit:\n                if i == j:\n                    amicable_numbers.append(i)\n                    break\n                if i % j == 0:\n                    break\n                j += 1\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables to keep track of sum and amicable pair count\n    sum = 0\n    amicable_pair_count = 0\n\n    # Loop through each number from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable to any number in the range\n        amicable = False\n        for i in range(2, num):\n            if num % i == 0:\n                amicable = True\n                break\n        # If the number is amicable, add it to the sum and increment the count\n        if amicable:\n            sum += num\n            amicable_pair_count += 1\n\n    # Print the result\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is\", sum)\n    print(\"The number of amicable pairs found is\", amicable_pair_count)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    # Calculate the phase angle of the complex number\n    phase = cmath.phase(cmath.rect(a, b))\n    # Calculate the angle of the complex number in degrees\n    angle = cmath.degrees(phase)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input,\n    a + bi and b + bi, respectively, and returns their angle in radians.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculating the complex number\n    c = a + b*1j\n\n    # calculating the magnitude and the angle of the complex number\n    magnitude = cmath.sqrt(c.real**2 + c.imag**2)\n    angle = cmath.phase(c)\n\n    # printing the angle of the complex number in degrees\n    angle = angle*180/cmath.pi\n    print(\"The angle of the complex number is\", angle, \"degrees.\")"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Using the cmath module to find the angle of a complex number\n    angle = cmath.phase(a+b*1j)\n    \n    # Converting the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            elif string[j] == '1':\n                count1 += 1\n            if count0 == count1:\n                break\n        else:\n            count0 = count1 = 0\n            for j in range(i, n):\n                if string[j] == '0':\n                    count0 += 1\n                elif string[j] == '1':\n                    count1 += 1\n            max_diff = max(max_diff, abs(count0 - count1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 > count_1:\n                break\n            elif count_0 < count_1:\n                break\n            else:\n                if count_0 == count_1:\n                    if i == j:\n                        max_diff = max(max_diff, count_0)\n                    else:\n                        max_diff = max(max_diff, count_1 - count_0)\n                else:\n                    max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff = 1\n        else:\n            diff = 0\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Convert binary string to list of integers\n    binary_list = [int(digit) for digit in string]\n\n    # Initialize two variables to keep track of the count of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n\n    # Initialize a variable to store the maximum difference\n    max_diff = 0\n\n    # Loop through each sub-string of the binary string\n    for i in range(len(binary_list)):\n        # Initialize a variable to store the count of 0s and 1s in this sub-string\n        sub_count = 0\n\n        # Loop through each digit in this sub-string\n        for j in range(i, len(binary_list)):\n            # If this digit is a 0, increment the count of 0s\n            if binary_list[j] == 0:\n                sub_count += 1\n                # If this digit is a 1 and the count of 0s in the sub-string is less than the count of 1s, update the count of 1s\n                if sub_count < count_1:\n                    count_1 = sub_count\n\n            # If this digit is a 1, increment the count of 1s\n            else:\n                sub_count += 1\n                # If this digit is a 0 and the count of 1s in the sub-string is less than the count of 0s, update the count of 0s\n                if sub_count < count_0:\n                    count_0 = sub_count\n\n        # Calculate the difference between the counts of 0s and 1s\n        diff = abs(count_0 - count_1)\n\n        # Update the maximum difference if the difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize the maximum difference and count of 0s and 1s\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate over all substrings of the binary string\n    for i in range(len(string)):\n        # Check if the current substring has 0s and 1s\n        count_0 += string[i] == '0'\n        count_1 += string[i] == '1'\n\n        # If the difference between the counts is greater than the maximum difference, update the maximum difference\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        zeros = string.count('0')\n        ones = string.count('1')\n        if zeros > ones:\n            diff = zeros - ones\n        else:\n            diff = ones - zeros\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        if count_0 == count_1:\n            max_diff = max(max_diff, count_1)\n        elif count_0 > count_1:\n            count_0 -= 1\n        else:\n            count_1 -= 1\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    count = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        length = max(length, count)\n\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    zero_count = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            zero_count += 1\n            max_diff = max(max_diff, zero_count)\n        else:\n            zero_count = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        diff = count - max_diff\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    common = 2\n    while common <= a:\n        if a % common == 0 and b % common == 0:\n            return a + b\n        common += 1\n    return None"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the largest number\n    largest = max(a, b)\n\n    # Initialize a list to store the common divisors\n    common_divisors = []\n\n    # Loop through all numbers from 1 to the largest number\n    for i in range(1, largest + 1):\n        # If both numbers have a common divisor, append it to the list\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the largest number between the two given numbers\n    if a > b:\n        num = a\n    else:\n        num = b\n    \n    # Find the sum of common divisors of the two given numbers\n    sum_div = 0\n    i = 1\n    while i <= num:\n        if num % i == 0 and a % i == 0 and b % i == 0:\n            sum_div += i\n        i += 1\n    \n    # Return the sum of common divisors\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of divisors of a and b\n    divisors_sum = sum(set(a).union(set(b)))\n\n    return divisors_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    a = max(a, b)\n    b = min(a, b)\n    result = 0\n    for i in range(2, b+1):\n        if gcd(i, a) == 1:\n            result += i\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_set = set()\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisor_set.add(i)\n        i += 1\n    \n    return sum(divisor_set)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n\n    for num in range(1, a + 1):\n        if num % a == 0 and num % b == 0:\n            divisors.add(num)\n\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    while y > 0:\n        bit = y & 1\n        if bit == 1:\n            result += carry\n        carry = result\n        y = y >> 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to a list of words\n    words = str.split()\n\n    # Create an empty list to store the longer words\n    longer_words = []\n\n    # Iterate over the words in the list\n    for word in words:\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n            # Add the word to the longer_words list\n            longer_words.append(word)\n\n    # Return the longer_words list\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words_list = []\n\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and a number n as input and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # check if each element in the matrix is unique\n    seen = set()\n    for row in my_matrix:\n        if len(row)!= n:\n            return False\n        for i in range(n):\n            if row[i] in seen:\n                return False\n            seen.add(row[i])\n\n    # check if each row is a magic square\n    for i in range(n):\n        row = my_matrix[i]\n        row_sum = sum(row)\n        col_sum = 0\n        col_sums = [0] * n\n        for j in range(n):\n            col_sums[j] += row[j]\n        for j in range(n):\n            col_sum += col_sums[j]\n        if row_sum!= col_sum:\n            return False\n\n    # check if each column is a magic square\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        col_sum = sum(col)\n        row_sum = 0\n        row_sums = [0] * n\n        for i in range(n):\n            row_sums[i] += col[i]\n        for i in range(n):\n            row_sum += row_sums[i]\n        if col_sum!= row_sum:\n            return False\n\n    # if we get here, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the diagonal sum is equal to the sum of the matrix's elements\n    if diagonal_sum == sum(sum(x) for row in my_matrix for x in row):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Find the size of the matrix\n    size = len(my_matrix)\n    # Check if the size is a perfect square\n    if size**0.5!= int(size**0.5):\n        return False\n    # Check if all the elements are distinct\n    if len(set(sum(my_matrix, [])))!= size**2:\n        return False\n    # Check if the sum of each row, column, and diagonal is equal to the size of the matrix\n    for i in range(size):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= size or row_sum!= sum(my_matrix[j][i] for j in range(size)):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_rows = [sum(row) for row in my_matrix]\n    sum_cols = [sum(col) for col in zip(*my_matrix)]\n    sum_diagonals = [sum(my_matrix[i][i] for i in range(n))] + [sum(my_matrix[i][n-1-i] for i in range(n))]\n    return sum_rows == sum_cols == sum_diagonals"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n\n    # Initialize the sum of each column\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Initialize the sum of the main diagonal\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Initialize the sum of the secondary diagonal\n    diag_sum_2 = sum(my_matrix[i][-i-1] for i in range(len(my_matrix)))\n\n    # Check if the matrix is a magic square\n    if row_sums == col_sums == diag_sum_1 == diag_sum_2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sum = [sum(row) for row in my_matrix]\n\n    # Calculate the sum of each column\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n\n    # Calculate the sum of the diagonal elements\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Check if the matrix is a magic square\n    return row_sum == col_sum == diag_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is a magic square\n    n = len(my_matrix)\n    for i in range(n):\n        # Check if the diagonal elements are all the same\n        if my_matrix[i][i]!= my_matrix[i][n-1-i] or my_matrix[n-1-i][i]!= my_matrix[i][i]:\n            return False\n    # Check if each row contains the same elements in ascending order\n    for j in range(n):\n        row = [row[j] for row in my_matrix]\n        if row!= sorted(row):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check the input matrix dimensions\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows!= cols:\n        print(\"Matrix must be square.\")\n        return\n    \n    # check for a square matrix with all zeros\n    for row in my_matrix:\n        if any(elem!= 0 for elem in row):\n            print(\"Matrix must be all zeros.\")\n            return\n    \n    # check for the sum of each row, column, and diagonal to be equal\n    total = 0\n    for row in my_matrix:\n        total += sum(row)\n    if total!= 0:\n        print(\"Matrix must have a sum of zero in any row, column, or diagonal.\")\n        return\n    \n    # if all checks pass, the matrix is a magic square\n    print(\"The matrix is a magic square.\")"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    size = rows * cols\n\n    # Check if all elements in the matrix are unique\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                continue\n            if my_matrix[i][j] == my_matrix[i][cols-1-j]:\n                return False\n\n    # Check if there are any duplicates in the diagonal\n    for i in range(rows):\n        if my_matrix[i][i] == my_matrix[rows-1-i][i]:\n            return False\n\n    # Check if there are any duplicates in the anti-diagonal\n    for i in range(rows):\n        if my_matrix[i][rows-1-i] == my_matrix[i][i]:\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                continue\n            if my_matrix[i][j]!= (rows*j + i + 1):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has exactly 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n\n    # Check if the matrix has only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n\n    # Check if each row, column, and sub-matrix is a magic square\n    for i in range(3):\n        for j in range(3):\n            row = my_matrix[i]\n            col = [row[k] for k in range(3) if k!= j]\n            sub_matrix = [my_matrix[k][l] for k in range(3) for l in range(3) if k!= i and l!= j]\n            if (row!= col) and (row!= sub_matrix) and (col!= sub_matrix):\n                return False\n\n    # If all tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_item = None\n    max_freq = 0\n    for item, freq_num in freq.items():\n        if freq_num > max_freq:\n            max_item = item\n            max_freq = freq_num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the defaultdict\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency in the defaultdict\n    max_freq = max(freq.values())\n    max_item = None\n\n    # Iterate through the keys of the freq defaultdict and update the max_item variable if necessary\n    for item, freq_count in freq.items():\n        if freq_count == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    # count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_num = None\n    max_count = 0\n\n    for num in nums:\n        count[num] += 1\n\n        if count[num] > max_count:\n            max_count = count[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels and char not in reversed_str:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_str = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n    vowel_str = vowel_str.replace(\"y\", \"\")\n    reversed_vowels = vowel_str[::-1]\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    str1 = str1.lower()\n    reversed_str = \"\"\n    \n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            if vowel_count == 0:\n                vowel_count += 1\n            else:\n                str1 = str1[:i] + str1[i+1:]\n                reversed_str += str1[i]\n    \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_reverse = char + vowel_reverse\n    return vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str_vowels = []\n    for char in str1:\n        if char.lower() not in vowels:\n            str_vowels.append(char)\n    return str_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(reversed(result))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    reverse_str = ''\n    for char in str1:\n        if char.upper() not in vowels:\n            reverse_str += char\n    return reverse_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 = str2 + str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = ''\n    for char in str1:\n        if char in vowels and char not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            new_str = char + new_str\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n    vowel_index.sort(reverse=True)\n    for i in vowel_index:\n        if str1[i] in vowels:\n            str1 = str1[:i] + str1[i+1:].replace(str1[i], '') + str1[i]\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using f-string\n    return f\"{tup1}\""
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negative += num\n    return sum_of_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n + 1) * (2 * n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 6 * hexagonal_num(n-1) + n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    for i in range(1, n+1):\n        print(a, end=' ')\n        a += b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = (n + 1) * n / 2\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2*n - 1)) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n) - 1) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 28\n    elif n == 4:\n        return 94\n    elif n == 5:\n        return 324\n    elif n == 6:\n        return 1160\n    elif n == 7:\n        return 4032\n    elif n == 8:\n        return 14496\n    elif n == 9:\n        return 49152\n    elif n == 10:\n        return 167960\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0:\n        return (n * (2 * n - 1)) // 2\n    else:\n        return ((n * (2 * n - 1)) // 2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    return (2 * n - 1) ** 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # Initialize arrays to store non-zeroes and zeroes\n    non_zeroes = array('i', [1])\n    zeroes = array('i', [1])\n\n    # Iterate through the array and count zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zeroes.append(0)\n        else:\n            non_zeroes.append(0)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = zeroes[0] / non_zeroes[0]\n\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    total_count = len(nums)\n    ratio = zero_count / total_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0) + 1] += 1\n        else:\n            non_zeros[non_zeros.index(0) + 1] += 1\n\n    zeros_sum = sum(zeros)\n    non_zeros_sum = sum(non_zeros)\n\n    return zeros_sum / non_zeros_sum"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0 for _ in range(len(nums))])\n    ones = array('i', [1 for _ in range(len(nums))])\n\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            ones.append(1)\n\n    zero_count = len(zeroes) / len(ones)\n\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert array to list to use numpy\n    nums_list = list(nums)\n    # Use numpy to count non-zeroes and zeros\n    count_zeros = len(nums_list) - len(nums_list[nums_list!= 0])\n    count_ones = len(nums_list) - count_zeros\n    # Calculate the ratio of zeros to non-zeroes\n    zero_ratio = count_zeros / count_ones\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two arrays to store the non-zero and zero counts\n    non_zeros = array('i', [])\n    zeros = array('i', [])\n\n    # Loop through the array and count the non-zero and zero counts\n    for num in nums:\n        if num!= 0:\n            non_zeros.append(num)\n        else:\n            zeros.append(num)\n\n    # Calculate the ratio of non-zero to zero counts\n    non_zero_count = non_zeros.count(0)\n    zero_count = zeros.count(0)\n    ratio = non_zero_count / zero_count\n\n    # Return the ratio as a float\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to an array of characters\n    arr = array('b', nums)\n    # Initialize two counters to keep track of non-zero and zeroes\n    non_zero_count = 0\n    zero_count = 0\n    \n    # Loop through the characters in the array and count the number of non-zeroes and zeroes\n    for char in arr:\n        if char == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    \n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the counts of zeroes and non-zeroes\n    counts = array('i', [0, 0])\n    \n    # iterate over the array and update the counts\n    for num in nums:\n        if num == 0:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = counts[1] / (counts[0] + counts[1])\n    \n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    non_zeroes = array('i')\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            non_zeroes.append(1)\n    zero_count = len(zeroes) / len(non_zeroes)\n    return zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if n is less than or equal to 0\n    if n <= 0: \n        return \"n is less than or equal to 0\"\n\n    # find the sum of powers of 2\n    sum_of_powers = 0\n    while n > 0:\n        if n % 2 == 0:\n            sum_of_powers += 1\n        n //= 2\n\n    # check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether a given number can be represented as a sum of non-zero powers of 2 or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        (bool): True if the given number can be represented as a sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n\n    # Check if the given number is already divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Initialize the count and sum variables to 0\n    count = 0\n    sum = 0\n\n    # Loop until the given number is divisible by 2\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n\n    # Calculate the sum of non-zero powers of 2\n    while n > 0:\n        sum += 1\n        n = n & (n - 1)\n\n    # Check if the sum is a power of 2\n    if sum == (1 << count):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 4:\n        return True\n    if n == 8:\n        return True\n    if n == 16:\n        return True\n    if n == 32:\n        return True\n    if n == 64:\n        return True\n    if n == 128:\n        return True\n    if n == 256:\n        return True\n    if n == 512:\n        return True\n    if n == 1024:\n        return True\n    if n == 2048:\n        return True\n    if n == 4096:\n        return True\n    if n == 8192:\n        return True\n    if n == 16384:\n        return True\n    if n == 32768:\n        return True\n    if n == 65536:\n        return True\n    if n == 131072:\n        return True\n    if n == 262144:\n        return True\n    if n == 524288:\n        return True\n    if n == 1048576:\n        return True\n    if n == 2097152:\n        return True\n    if n == 4194304:\n        return True\n    if n == 8388608:\n        return True\n    if n == 16777216:\n        return True\n    if n == 33554432:\n        return True\n    if n == 67108864:\n        return True\n    if n == 134217728:\n        return True\n    if n == 268435456:\n        return True\n    if n == 536870912:\n        return True\n    if n == 1073741824:\n        return True\n    if n == 2147483648:\n        return True\n    if n == 4294967296:\n        return True\n    if n == 8589934592:\n        return True\n    if n == 17179869184:\n        return True\n    if n == 34359738368:\n        return True\n    if n == 68719476736:\n        return True\n    if n == 137438953472:\n        return True\n    if n == 274877906944:\n        return True\n    if n == 549755813888:\n        return True\n    if n == 1099511627776:\n        return True\n    if n == 2199023255552:\n        return True\n    if n == 4398046511104:\n        return True\n    if n == 8796093022208:\n        return True\n    if n == 17592186044416:\n        return True\n    if n == 35184372088832:\n        return True\n    if n == 70368744177664:\n        return True\n    if n == 140737488355328:\n        return True\n    if n == 281474976710656:\n        return True\n    if n == 562949953421312:\n        return True\n    if n == 1125899906842624:\n        return True\n    if n == 2251799813685248:\n        return True\n    if n == 4503599627370496:\n        return True\n    if n == 9007199254740992:\n        return True\n    if n =="
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n    if n & (n-1) == 0:\n        return False\n    \n    # initialize variables\n    power = 0\n    sum_of_powers = 0\n    \n    # calculate the power of 2\n    while n > 0:\n        if n % 2 == 1:\n            sum_of_powers += 1\n        n >>= 1\n        power += 1\n    \n    # check if the sum of powers is a power of 2\n    while sum_of_powers > 0:\n        if sum_of_powers % 2 == 1:\n            return False\n        sum_of_powers >>= 1\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Divide the given number by 2 and check if the remainder is zero or not\n    if n % 2 == 0:\n        return \"The number can be represented as sum of non-zero powers of 2.\"\n    else:\n        # Calculate the number of 2's in the given number\n        count = 0\n        while n > 0:\n            count += 1\n            n = n >> 1\n\n        # Check if the count of 2's is odd or not\n        if count % 2 == 0:\n            return \"The number can be represented as sum of non-zero powers of 2.\"\n        else:\n            return \"The number cannot be represented as sum of non-zero powers of 2.\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    else: \n        for i in range(1,int(n**0.5)+1):\n            if n%i == 0 and is_Sum_Of_Powers_Of_Two(n//i) == True:\n                return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        # If even, then it cannot be represented as sum of non-zero powers of 2\n        return False\n    else:\n        # If odd, then it can be represented as sum of non-zero powers of 2\n        for i in range(1, int(n**0.5)+1):\n            if n == 2**i:\n                return True\n            if n == 2**(i+1):\n                return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    for i in range(1, int(n**0.5)+1):\n        if n == 2**i:\n            return True\n        elif n%2 == 0 and n!= 2**i:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the given number is less than 2\n    if n < 2:\n        return False\n\n    # Initialize the sum of powers of 2\n    power_of_two = 1\n\n    # Iterate through the number of bits in the binary representation of the given number\n    for i in range(32):\n        # Check if the bit is 1\n        if (n & 1) == 1:\n            # Add the power of 2 to the sum\n            power_of_two <<= 1\n        else:\n            # Move the power of 2 to the left\n            power_of_two <<= 1\n\n        # Check if the sum exceeds the given number\n        if power_of_two > n:\n            return True\n\n    # If the loop completes, it means the sum of powers of 2 cannot exceed the given number\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the given number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if the given number can be represented as sum of powers of 2\n    count = 0\n    temp = n\n    while temp > 0:\n        count += 1\n        temp //= 2\n    \n    # Check if the given number can be represented as sum of powers of 2\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2*pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    \n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the circumference of the circle using the formula:\n    # circumference = 2 * pi * radius\n    circumference = 2 * 3.14159 * r\n    \n    # Return the circumference as the output of the function:\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    # Convert the list to a tuple for sorting\n    nums_tuple = tuple(nums)\n\n    # Sort the tuple using the built-in sorted function\n    sorted_nums_tuple = sorted(nums_tuple)\n\n    # Convert the sorted tuple back to a list\n    sorted_nums = list(sorted_nums_tuple)\n\n    # Reverse the sorted list\n    sorted_nums.reverse()\n\n    # Return the sorted list\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Bubble sort the array\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Reverse the sorted array\n    for i in range(0, n//2):\n        nums[i], nums[n-i-1] = nums[n-i-1], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # We need to start with a sorted list\n    sorted_nums = sorted(nums)\n    # Initialize a list to keep track of the original indices\n    indices = [i for i in range(n)]\n    # Keep swapping adjacent elements until we reach a sorted list\n    while True:\n        swapped = False\n        # Loop over the unsorted part of the list\n        for i in range(1, n):\n            # If the current element is smaller than the previous element, swap them\n            if sorted_nums[i] < sorted_nums[i - 1]:\n                sorted_nums[i], sorted_nums[i - 1] = sorted_nums[i - 1], sorted_nums[i]\n                indices[i], indices[i - 1] = indices[i - 1], indices[i]\n                swapped = True\n        # If we didn't swap anything, the list is already sorted\n        if not swapped:\n            break\n    # Return the sorted list and the indices of each element in the original list\n    return sorted_nums, indices"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n\n        for j in range(low, high):\n            if nums[j] < pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n\n        nums[i + 1], nums[high] = nums[high], nums[i + 1]\n        return i + 1\n\n    def sort(nums, low, high):\n        if low < high:\n            pi = partition(nums, low, high)\n            sort(nums, low, pi - 1)\n            sort(nums, pi + 1, high)\n\n    sort(nums, 0, len(nums) - 1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Traverse the list from 0 to n-2\n    for i in range(n-2, -1, -1):\n        # Find the maximum element in the remaining unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # The pancake sort is done, the list is sorted in increasing order\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Bubble sort algorithm\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest number in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the largest number with the last unsorted element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # reverse the unsorted part of the list\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # Store the original list and its length\n    original_list = nums\n    n = len(nums)\n    \n    # Iterate until the list is sorted\n    while True:\n        # Find the largest element in the unsorted part of the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        \n        # If the largest element is already in its correct position, exit the loop\n        if max_idx == n-1:\n            break\n        \n        # Swap the largest element with the element at the end of the unsorted part of the list\n        nums[n-1], nums[max_idx] = nums[max_idx], nums[n-1]\n        \n        # Reverse the portion of the list from 0 to max_idx\n        nums[0:max_idx+1] = nums[0:max_idx+1][::-1]\n        \n        # Reverse the portion of the list from max_idx+1 to n-1\n        nums[max_idx+1:n] = nums[max_idx+1:n][::-1]\n        \n        # Decrement n to reflect the new length\n        n -= 1\n    \n    # Return the sorted list\n    return original_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the first element in the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the part of the array that is sorted\n        for j in range(i, n-1, -1):\n            nums[j], nums[i] = nums[i], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def pancake_sort_helper(nums, k):\n        for i in range(len(nums)-k):\n            # Choose the largest element in the range\n            max_idx = i\n            for j in range(i+k, len(nums)):\n                if nums[j] > nums[max_idx]:\n                    max_idx = j\n\n            # Swap the chosen element with the end of the range\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n            # Reverse the range of the unsorted part\n            j = len(nums)-k-1\n            while i < j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n\n    # Sort the list of elements using pancake sort\n    n = len(nums)\n    for k in range(1, n+1):\n        pancake_sort_helper(nums, k)\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    # initialize variables\n    count = 0\n    # loop through each element in the lists\n    for i in range(len(list1)):\n        # check if the element is identical in all three lists\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    # return the count of identical pairs\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n\n    :param list1: first list of items to compare\n    :param list2: second list of items to compare\n    :param list3: third list of items to compare\n    :return: number of items that are identical in the same position of three given lists\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Find the number of lists in a given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # sorting the array to find the maximum absolute difference\n    max_diff = abs(arr[1] - arr[0]) # finding the maximum absolute difference\n    return max_diff # returning the maximum absolute difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = arr[0] - arr[1]\n    \n    for i in range(2, len(arr)):\n        current_diff = arr[i] - arr[i-1]\n        \n        if current_diff > max_diff:\n            max_diff = current_diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Returns the maximum absolute difference between any two elements in the given array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') # initialize max_diff with negative infinity\n    \n    for i in range(len(arr)): # iterate over the array\n        for j in range(i+1, len(arr)): # iterate over the remaining elements of the array\n            diff = abs(arr[i]-arr[j]) # calculate the absolute difference\n            if diff > max_diff: # if the difference is greater than max_diff\n                max_diff = diff # update max_diff\n    \n    return max_diff # return the maximum difference found"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # check if the discriminant is positive\n    if discriminant > 0:\n        # calculate the roots of the discriminant\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # check if the roots are integers\n        if root1.is_integer() and root2.is_integer():\n            return (int(root1), int(root2))\n        else:\n            return (root1, root2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative, which means there is no real solution\n    if discriminant < 0:\n        return None\n    \n    # Check if the discriminant is zero, which means there is only one real solution\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x, x)\n    \n    # Calculate the two solutions\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables to store the solution\n    x = y = None\n\n    # Loop through all possible solutions\n    for i in range(1, n // 2 + 1):\n        # Check if the equation is satisfied\n        if a * i + b * (n - i) == n:\n            # If it is, store the solution\n            x = i\n            y = n - i\n            break\n\n    # If a solution was found, return it as a tuple\n    if x and y:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # If the discriminant is less than 0, there are no solutions\n    if disc < 0:\n        return None\n    \n    # If the discriminant is equal to 0, there is only one solution\n    elif disc == 0:\n        x = -b/(2*a)\n        return (x,)\n    \n    # If the discriminant is greater than 0, there are two solutions\n    else:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n    \n    # calculate d\n    d = n // gcd(a, b)\n    \n    # calculate x and y\n    x = d * b\n    y = d * a\n    \n    # check if x and y satisfy the equation\n    if (x * b + y * a) == n:\n        return (x, y)\n    \n    # if x and y don't satisfy the equation, try a different pair of coefficients\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    if b == 0:  # if b is 0, there is no solution\n        return None\n\n    x1 = (-n + b ** 0.5) // b  # first solution: x1 = -n/b\n    x2 = (-n - b ** 0.5) // b  # second solution: x2 = -n/b\n\n    if x1 % 2 == 1 and x2 % 2 == 1:  # check if both x1 and x2 are odd (no solution)\n        return None\n\n    if x1 % 2 == 0 and x2 % 2 == 0:  # check if both x1 and x2 are even (no solution)\n        return None\n\n    if x1 % 2 == 0 and x2 % 2 == 1:  # check if x1 is even and x2 is odd (x1 is the solution)\n        return (x1, x2)\n    else:  # check if x2 is even and x1 is odd (x2 is the solution)\n        return (x2, x1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is 0, and b is not 0, so that we can divide x by b to get the quotient\n    if a == 0 and b!= 0:\n        return None\n    \n    # initialize x and y as None\n    x = y = None\n    \n    # check if a is not equal to 0\n    if a!= 0:\n        # initialize q as the quotient of n divided by a\n        q = n // a\n        \n        # check if the remainder is equal to b\n        if q * a + n % a == b:\n            # initialize x as the quotient of n divided by b\n            x = q\n            \n            # initialize y as the remainder of n divided by b\n            y = n % b\n    \n    # check if x and y are not None\n    if x is not None and y is not None:\n        # return the tuple (x, y) as the solution\n        return (x, y)\n    \n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    if a == 0 or b == 0:\n        return None\n    \n    # Check if a and b are integers\n    if not a.is_integer() or not b.is_integer():\n        return None\n    \n    x = (n - b // a) // a\n    y = (n - x * a) // b\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) such that ax + by = n, or None if no such solution exists.\n    \"\"\"\n    for x in range(-1000, 1000):\n        for y in range(-1000, 1000):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through list1 and remove elements that are also in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through each element in list1\n    for i in range(len(list1)):\n        # if the element is present in list2, remove it from list1\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    # return list1 without elements present in list2\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_new = []\n    for item in list1:\n        if item not in list2:\n            list1_new.append(item)\n    return list1_new"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return (n // 2 * (n + 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    i = 0\n    \n    while n - 2*i >= 0:\n        series_sum += n - 2*i\n        i += 1\n    \n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i <= n // 2:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # Initialize sum to zero\n    sum = 0\n\n    # Loop from i=0 to n//2\n    for i in range(n//2):\n        # Add (n-2*i) to sum\n        sum += (n - 2*i)\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n//2):\n        series_sum += n - 2*i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        x = n - 2\n        return n + sum_series(x)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    i = 0\n    while n - 2*i >= 0:\n        result += n - 2*i\n        i += 1\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - 1)) / 2\n    area *= pi\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using Heron's formula\n    # Heron's formula: A = sqrt(s * (s-a) * (s-b) * (s-c))\n    # s is the side length of the polygon, l is the number of sides\n    # a, b, and c are the lengths of the other two sides of the polygon\n    # a = l * s\n    # b = l * s\n    # c = 2 * l * s\n    s2 = s * s\n    area = 0.5 * s2 * (s + 2 * l * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculating the perimeter and using it to find the area of the polygon\n    perimeter = s * l\n    for i in range(l):\n        area += (s ** 2) / (4 * tan(pi / l))\n    area *= perimeter / s  # using the formula for the area of a regular polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    sp = (s + l) / 2\n\n    # Calculate the area of the polygon using Heron's formula\n    area = tan(pi/l) * sp**2\n\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += tan((2*i+1)*pi/l)\n    area *= s/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s*tan(pi/l))**2\n    area /= 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the sides of the polygon\n    side = s * tan(pi/l)\n    \n    # Calculate the area of the polygon\n    area = (s**2)/2 * side\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n \n    sum_of_divisors = sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\n    # Find the sum of the divisors of the same number, but reversely \n    sum_of_divisors_reverse = sum(i for i in range(1, int(math.sqrt(n)) + 1) if n // i == 0)\n\n    # Check if the two sums are equal \n    if sum_of_divisors == sum_of_divisors_reverse: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    div_sum = sum(div_list)\n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"is\", div_sum)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n, False otherwise.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find all the divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    divisors.sort()\n\n    # Calculate the sum of the divisors\n    div_sum = 0\n    for i in range(len(divisors)):\n        div_sum += divisors[i]\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n\n    sum_div = sum([i for i in range(1, n+1) if n % i == 0])\n\n    # if the sum of the divisors is equal to n, print \"True\"\n    if sum_div == n: \n        return \"True\"\n    else: \n        return \"False\""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of divisors of n\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n            \n    # Calculate the product of the two integers and their sum of divisors\n    product = n * (n+1) // 2\n    product = (product + sum_of_divisors) // 2\n    \n    # Check if the product is equal to the sum of divisors\n    if product == sum_of_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(range(1, int(math.sqrt(n)) + 1)) & set(divisors(n)))\n\n    # Check if the sum is equal to n\n    return div_sum == n\n\ndef divisors(n):\n    \"\"\"\n    Generate a list of the divisors of a given integer.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            divisors.append(i)\n            n //= i\n    if n > 1:\n        divisors.append(n)\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Finding the divisors of the given number\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Checking if the sum of divisors is same as the given number\n    sum_div = sum(divisors)\n    if sum_div == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(range(1, int(math.sqrt(n))+1)) & set(range(1, int(math.sqrt(n))+1, 2)))\n\n    # Calculate the sum of the divisors of n-1\n    div_sum_1 = sum(set(range(1, int(math.sqrt(n))+1)) & set(range(1, int(math.sqrt(n))+1, 2)))\n\n    # Check if the sum of divisors of n and n-1 are the same\n    if div_sum == div_sum_1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is an alphabet, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n\n    for char in alphabet:\n        if char.lower() == str1[count].lower():\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # loop through the string and count the occurrences of each character in the English alphabet\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # create a list of tuples containing the count of each character and its position in the string\n    char_positions = []\n    for index, char in enumerate(str1):\n        if char.isalpha():\n            char = char.lower()\n            char_positions.append((char_count[char], index))\n\n    # sort the list by the count in descending order and return the highest count\n    sorted_char_positions = sorted(char_positions, reverse=True)\n    return sorted_char_positions[0][0]"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the position of each character\n    position_dict = {}\n\n    # Loop through each character in the string\n    for i in range(26):\n        # Convert the index of the character to the corresponding character in the English alphabet (case insensitive)\n        char = chr(i + ord('a'))\n\n        # If the character is already in the dictionary, increment its value by 1\n        if char in position_dict:\n            position_dict[char] += 1\n        # If the character is not in the dictionary, add it with a value of 1\n        else:\n            position_dict[char] = 1\n\n    # Loop through each character in the string\n    count = 0\n    for char in str1:\n        # Convert the character to its corresponding index in the English alphabet (case insensitive)\n        index = ord(char) - ord('a')\n\n        # If the character is in the dictionary and its position matches the index, increment the count\n        if char in position_dict and position_dict[char] == index:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_map = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    \n    count = 0\n    \n    for char in str1:\n        if char.lower() in alpha_map:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        for char in alpha:\n            if char.lower() == str1[i].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join(e for e in str1.lower() if e.isalpha())\n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {chr(i): 0 for i in range(ord('a'), ord('z')+1)}\n    # Iterate over the characters in the string and increment the count of each character at the same position in the English alphabet\n    for char in str1:\n        char_count[char] += 1\n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a counter variable to keep track of the number of characters at each position in the alphabet\n    count = [0] * 26\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is a lowercase letter, increment its corresponding position's counter\n        if 'a' <= char <= 'z':\n            index = ord(char) - ord('a')\n            count[index] += 1\n\n    # Return the count of each position in the alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(e for e in str1.lower() if e.isalpha())\n    \n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate through the string\n    for i, char in enumerate(str1):\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    \n    # Return the count of each character\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2!= 0 ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count\n\nA = [2, 3, 4, 5, 6]\nprint(find_even_pair(A))"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import itertools\n\ndef find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for pair in itertools.combinations(A, 2):\n        if pair[0] + pair[1] % 2 == 0:\n            even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    even_count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_count += 1\n    \n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: \n        n = n // 2 \n    return 2**int(n*math.log2(n)) "
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the value of power to 1\n    power = 1\n\n    # Loop through all possible powers of 2 up to the square root of n\n    while power * power <= n:\n        power *= 2\n\n    # Return the value of power which is the next power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary format and find the last 1 bit\n    last_bit = bin(n)[2:].rfind('1')\n    if last_bit == -1:\n        return 1\n    else:\n        # find the next power of 2 greater than or equal to n\n        power_of_2 = 2 ** last_bit\n        return n if power_of_2 >= n else power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n * 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result to be the input number\n    result = n\n    \n    # Loop until the result is a power of 2\n    while result & (result - 1)!= 0:\n        result += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Set initial value for the power of 2\n    power_of_2 = 1\n    \n    # Loop while the current power of 2 is less than or equal to n\n    while power_of_2 <= n: \n        # Increment the power of 2\n        power_of_2 <<= 1\n        \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary and count the number of '1' bits\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    # add 1 to the count if n is not a power of 2\n    if n < 2**31 and (n & (n-1))!= 0:\n        count += 1\n    # calculate the next power of 2 using bitwise operators\n    power = 1\n    while power < count:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1\n    n |= (n >> 1)\n    n |= (n >> 2)\n    n |= (n >> 4)\n    n |= (n >> 8)\n    n |= (n >> 16)\n    n += 1\n    return 2**n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2**((n - 1).bit_length() + 1)"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x): \n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= len(list1) or n >= len(list1):\n        print(\"Invalid range\")\n        return None\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    # check if indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    # initialize sum to zero\n    sum = 0\n    # iterate through indices and add values to sum\n    for i in range(m, n+1):\n        sum += list1[i]\n    # return sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1) or m > n:\n        return None\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return None\n\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum to 0\n    result = 0\n    # loop through the list from m to n inclusive\n    for i in range(m, n+1):\n        # add the current element to the sum\n        result += list1[i-1]\n    # return the result\n    return result"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return 'Invalid input'\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi / 5)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return round(perimeter, 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # The base of the pentagon is half the perimeter\n    base = 2*a\n    \n    # The side of the pentagon is the length of its base\n    side = 2*base\n    \n    # The perimeter of the pentagon is the sum of its base and side\n    perimeter = base + side\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (3 * a ** 2) / (5)\n\n    # Calculate the area of the pentagon using Heron's formula\n    area = (5 * a ** 2) / (20)\n\n    # Calculate the perimeter of the pentagon using the formula for a regular polygon\n    perimeter = (5 * a ** 2) / 2 + (10 * a)\n\n    # Calculate the area of the pentagon using the formula for a regular polygon\n    area = (5 * a ** 2) / 2 + (10 * a)\n\n    # Return the perimeter and area of the pentagon\n    return perimeter, area"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    for i in s:\n        if i == std:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    start_index = s.find('std')\n    while start_index!= -1:\n        count += 1\n        start_index = s.find('std', start_index+4)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    start = s.find('std')\n    while start!= -1:\n        count += 1\n        start = s.find('std', start + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    elif len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # find the data type of first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # check if all the elements in the tuple have the same data type or not\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to keep track of the first element's data type\n    data_type = type(test_tuple[0])\n    # iterate through all the elements in the tuple\n    for element in test_tuple:\n        # if the current element's data type is different from the first element's data type, return False\n        if type(element)!= data_type:\n            return False\n    # if all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for elem in test_tuple:\n        data_types.add(type(elem))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n//2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n-1) # clear the rightmost set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n = n >> 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n: \n        n &= (n - 1) # clearing all set bits \n        count += 1 # incrementing the count \n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(str)\n    # Initialize an empty string to store the new string\n    new_str = ''\n    # Loop through each character in the list\n    for char in chars:\n        # Check if the index of the character is odd\n        if len(new_str) % 2!= 0:\n            # If it is, add the character to the new string\n            new_str += char\n        # If the index is even, move on to the next character\n        else:\n            pass\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): The input string.\n\n    Returns:\n    str: The modified string with odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a new string with all characters\n    new_str = \"\"\n    # loop through each character in the string\n    for char in str:\n        # if the index of the character is odd, add it to the new string\n        if (int(char) % 2)!= 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): A string of characters.\n\n    Returns:\n    str: A new string with odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three arguments, a, b, and c.\n    It returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:  \n        return False\n    while l <= r:  \n        if (n & (1<<l))!= 0:  \n            return False\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check whether all the bits are unset in the given range or not, we need to check if all the bits in the range from l to r are set to 0\n    for i in range(l, r+1):\n        if n & (1<<i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to store the sum of the bits set in the range\n    range_sum = 0\n    # loop through the range of bits from l to r\n    for i in range(l, r+1):\n        # extract the current bit value from the number n\n        bit = n & (1 << i)\n        # if the current bit is set, add its value to the range_sum\n        if bit:\n            range_sum += 1\n    # if the range_sum is equal to the number of bits set in the range (i.e., the maximum number of bits that can be set to 1), return True\n    if range_sum == r-l+1:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize the count of unset bits to zero\n    count = 0\n    # Iterate over the bits of the given range\n    for i in range(l, r + 1):\n        # Check if the i-th bit is set or not\n        if n & (1 << i):\n            # If the i-th bit is set, increment the count of unset bits\n            count += 1\n    # If the count of unset bits is equal to n, then all the bits are unset in the given range\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments - the integer n, the lower bound of the range l, and the upper bound of the range r.\n    It returns True if all the bits in the given range are set, and False otherwise.\n    '''\n\n    # Convert the given range to a binary string\n    binary_string = bin(n)[2:]\n\n    # Calculate the length of the binary string\n    length = len(binary_string)\n\n    # Loop through the binary string\n    for i in range(length):\n\n        # If the binary string at position i is equal to 1, then all the bits are set in the given range\n        if binary_string[i] == '1':\n            return True\n\n    # If all the bits are set in the given range, then the function returns True\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return bin(n)[2:].count('1') == r - l + 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range to binary format\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    # Check if both binary strings have same length\n    if len(binary_l)!= len(binary_r):\n        return \"The given range has different length\"\n    # Compare the binary strings\n    for i in range(len(binary_l)):\n        if binary_l[i]!= binary_r[i]:\n            return \"The given range has unset bits in the range\"\n    # All the bits are set in the given range\n    return \"All the bits are set in the given range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if n is a power of 2 or not\n    if n & (n - 1)!= 0:\n        return \"n is not a power of 2\"\n\n    # Initialize a counter to keep track of the number of unset bits\n    count = 0\n\n    # Loop through all the bits in the range and increment the counter if the bit is set\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            count += 1\n\n    # Check if all the bits in the range are set\n    if count == r - l + 1:\n        return \"All the bits are set in the given range\"\n    else:\n        return \"There are still some unset bits in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function will return True if all the bits are set in the given range, else False.\n    \"\"\"\n    # Initialize a variable to store the count of unset bits in the given range\n    unset_bits = 0\n\n    # Iterate over the range and check for unset bits\n    for i in range(l, r + 1):\n        # Check if the current number has a set bit at the given position\n        if (n & (1 << i))!= 0:\n            # If a set bit is found, increment the unset_bits count\n            unset_bits += 1\n\n    # If all the bits are unset in the given range, return True, else False\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments n, l and r, which represents a number n and two integers l and r.\n    The function returns True if all the bits are unset in the given range, else False.\n\n    Examples:\n    all_Bits_Set_In_The_Given_Range(15, 2, 5) # returns False\n    all_Bits_Set_In_The_Given_Range(15, 0, 15) # returns True\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return l <= r\n    return all_Bits_Set_In_The_Given_Range(n//2, l, r) and all_Bits_Set_In_The_Given_Range(n//2, l+2**((n//2)-1), r)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two empty lists for negative and positive elements\n    neg_elems = []\n    pos_elems = []\n\n    # loop through the array and append positive and negative elements to their respective lists\n    for num in arr:\n        if num < 0:\n            neg_elems.append(num)\n        else:\n            pos_elems.append(num)\n\n    # sort the negative elements in ascending order\n    neg_elems.sort()\n\n    # sort the positive elements in descending order\n    pos_elems.sort(reverse=True)\n\n    # concatenate the sorted lists to form the final result\n    result = neg_elems + pos_elems\n\n    # return the final result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to store positive and negative elements\n    positive = []\n    negative = []\n    # Loop through the array and separate the elements into positive and negative groups\n    for num in arr:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n    # Combine the negative and positive groups into a single list\n    combined = negative + positive\n    # Shuffle the combined list using the Fisher-Yates algorithm\n    for i in range(n):\n        j = i + randrange(n - i)\n        combined[i], combined[j] = combined[j], combined[i]\n    # Assign the re-arranged list to the original array\n    arr[:] = combined\n    # Print the original array\n    print(\"Original array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Use two pointers, one for positive elements and one for negative elements\n    pos_start = 0\n    neg_start = 0\n    while pos_start < n and neg_start < n:\n        if arr[pos_start] < 0:\n            # Move the negative element to the beginning of the array\n            arr[neg_start], arr[pos_start] = arr[pos_start], arr[neg_start]\n            neg_start += 1\n        else:\n            pos_start += 1\n\n    # Move the remaining positive elements to the end of the array\n    while pos_start < n:\n        arr[pos_start], arr[n - 1] = arr[n - 1], arr[pos_start]\n        pos_start += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables for negative and positive elements\n    neg = []\n    pos = []\n    \n    # Loop through the array and add negative and positive elements to lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Add remaining elements to the end of the lists\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Sort negative and positive elements in ascending order and combine them into a single list\n    combined = sorted(neg + pos)\n    \n    # Return the combined list\n    return combined"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Helper function to swap elements at two indices\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize two pointers to track the negative and positive elements in the array\n    neg_index = 0\n    pos_index = 0\n\n    # Iterate through the array until we have processed all n elements\n    while pos_index < n:\n        # If the current element is negative, swap it with the next element in the negative array\n        if arr[neg_index] < 0:\n            swap(arr, neg_index, pos_index)\n            neg_index += 1\n            pos_index += 1\n        # If the current element is positive, increment the positive array index\n        else:\n            pos_index += 1\n\n    # Return the final re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a set to keep track of positive elements\n    pos = set()\n\n    # iterate through the first n elements of the array\n    for i in range(n):\n        if arr[i] > 0:\n            pos.add(arr[i])\n\n    # iterate through the remaining elements of the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            # add the negative element to the set\n            pos.add(arr[i])\n            # remove the negative element from the array\n            del arr[i]\n            # add it to the beginning of the array\n            arr.insert(0, arr[i])\n\n    # convert the set back to a list\n    result = list(pos)\n    # add the negative elements of the original array to the end of the list\n    result.extend(arr)\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = []\n    pos_arr = []\n    zero_count = 0\n    \n    # Separate the elements into negative and positive arrays\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        elif arr[i] > 0:\n            pos_arr.append(arr[i])\n        elif arr[i] == 0:\n            zero_count += 1\n    \n    # Rearrange the negative and positive arrays based on the relative order\n    for i in range(n):\n        if len(neg_arr) > 0 and len(pos_arr) > 0:\n            if neg_arr[0] < 0:\n                neg_arr.pop(0)\n                pos_arr.append(neg_arr[0])\n                neg_arr.pop(0)\n            else:\n                neg_arr.pop(0)\n                pos_arr.append(neg_arr[0])\n                neg_arr.pop(0)\n        elif len(neg_arr) > 0 and len(pos_arr) == 0:\n            for j in range(len(neg_arr)):\n                if neg_arr[j] < 0:\n                    pos_arr.append(neg_arr[j])\n                    neg_arr.pop(j)\n                    break\n            if len(neg_arr) == 0:\n                pos_arr.append(neg_arr[0])\n                neg_arr.pop(0)\n        elif len(neg_arr) == 0 and len(pos_arr) > 0:\n            for j in range(len(pos_arr)):\n                if pos_arr[j] > 0:\n                    neg_arr.append(pos_arr[j])\n                    pos_arr.pop(j)\n                    break\n            if len(pos_arr) == 0:\n                neg_arr.append(pos_arr[0])\n                pos_arr.pop(0)\n        elif len(neg_arr) == 0 and len(pos_arr) == 0:\n            neg_arr.append(zero_count)\n            zero_count = 0\n    \n    # Combine the negative and positive arrays and the zeros\n    result_arr = neg_arr + pos_arr + [0] * zero_count\n    \n    return result_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    def partition(arr, low, high):\n        pivot = arr[low]\n        i = low + 1\n        j = high\n\n        while True:\n            while i <= j and arr[i] >= pivot:\n                i += 1\n            while i <= j and arr[j] <= pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = arr[j], arr[i]\n            else:\n                break\n\n        arr[low], arr[j] = arr[j], arr[low]\n        return j\n\n    def quicksort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quicksort(arr, low, pi - 1)\n            quicksort(arr, pi + 1, high)\n\n    quicksort(arr, 0, n - 1)\n    pos_count = 0\n    neg_count = 0\n\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_count += 1\n            arr[pos_count], arr[i] = arr[i], arr[pos_count]\n        else:\n            neg_count += 1\n            arr[neg_count], arr[i] = arr[i], arr[neg_count]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables to keep track of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n\n    # iterate through the array and count the number of negative and positive elements\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # initialize an empty list to hold the re-arranged array\n    rearranged = []\n\n    # iterate through the original array and add elements to the re-arranged array based on their sign\n    for num in arr[:n]:\n        if num < 0:\n            rearranged.extend([num] * neg_count)\n            rearranged.extend([num] * pos_count)\n        else:\n            rearranged.extend([num] * neg_count)\n            rearranged.extend([num] * pos_count)\n\n    # add any remaining elements from the original array to the re-arranged array\n    for num in arr[n:]:\n        rearranged.append(num)\n\n    # return the re-arranged array\n    return rearranged"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, left and right, to the beginning of the array\n    left = 0\n    right = n - 1\n\n    # Iterate through the array\n    while left < right:\n        # If the left element is negative, increment the left pointer\n        if arr[left] < 0:\n            left += 1\n        # If the right element is negative, decrement the right pointer\n        elif arr[right] < 0:\n            right -= 1\n        # If both the left and right elements are positive, swap them and move both pointers towards each other\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character as inputs, replaces all blank spaces in the string with the specified character, and returns the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Check if the character is a string with length 1\n    if isinstance(char, str) and len(char) == 1:\n        # Replace all blank spaces with the character\n        return str1.replace(\" \", char)\n    else:\n        # Raise an error if the character is not a string with length 1\n        raise ValueError(\"The character should be a string with length 1.\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace all spaces with the specified character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of the first n elements of the list\n    heap = [x for x in list1[:n]]\n    # remove the smallest element from the heap, add the next element, and repeat until there are n elements in the heap\n    for i in range(n, len(list1)):\n        if heapq.heappushpop(heap, list1[i]):\n            # if the smallest element is now the largest, remove it from the heap and add it to the result list\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        return []\n    \n    # Create a max heap from the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Extract the n largest items from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of the first n elements of the list\n    max_heap = []\n    for i in range(n):\n        max_heap.append(list1[i])\n        heapq.heapify(max_heap)\n    \n    # Iterate over the remaining elements of the list and add them to the max heap\n    for i in range(n, len(list1)):\n        if list1[i] > max_heap[0]:\n            heapq.heappushpop(max_heap, list1[i])\n    \n    # Return the list of the n largest elements from the original list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the list to a set to remove any duplicate elements\n    list1 = set(list1)\n    # Create a min heap of size n to store the n largest elements from the list\n    min_heap = []\n    # Iterate through the list and add each element to the min heap until the min heap is full\n    for item in list1:\n        heapq.heappush(min_heap, item)\n        # If the min heap has more than n elements, remove the smallest element from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Convert the min heap back to a list and return it\n    return list(min_heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Using a min heap to find the n largest items\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max heap to store the largest n items\n    max_heap = []\n    for i in range(len(list1)-n, -1, -1):\n        heapq.heappush(max_heap, list1[i])\n    # Convert the max heap to a list and return it\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return [heapq.nlargest(n, list1)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159\n    lateral_surface_area = (2*pi*r**2 + 2*pi*r*h + 2*pi*h**2)/3\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # compute the lateral surface area of the cylinder\n    lateral_surface_area = (3/4)*pi*r**2*h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder using the formula\n    # lateral surface area = pi * r^2 * h\n    lateral_area = (3.14 * r**2 * h)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n    \n    Parameters:\n    r: float\n        Radius of the cylinder.\n    h: float\n        Height of the cylinder.\n        \n    Returns:\n    float\n        The lateral surface area of the cylinder.\n    \"\"\"\n    \n    # Formula for lateral surface area of a cylinder\n    LSA = 2 * r * (h * 1.5) * 3.14159\n    \n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * (r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # formula for lateral surface area of a cylinder\n    # LSA = 2*pi*r*h\n    # substituting values from the formula\n    lateral_surface_area = 2 * 3.14159 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r**2 + 2*h**2)*3.141592653589793"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # return the cube of the side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # Cube volume is just the side length squared"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        # Get the last bit of the number\n        last_bit = n & 1\n        # If the last bit is even, set all even bits to 1\n        if last_bit == 0:\n            n = n | (last_bit ^ 1) << i\n            i += 1\n        # Move to the next bit\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # iterate over each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # if the bit is even, set it to 1, otherwise set it to 0\n        even_bits |= (1 << int(bit)) if int(bit) % 2 == 0 else 0\n    \n    # return the result\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # iterate through each bit of the number\n    for i in range(32): \n        # if the i-th bit is even, set it to 1\n        if (n >> i) & 1 == 0:\n            n |= 1 << i\n    # return the updated number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is an even bit, set it to 1\n        if int(bit) % 2 == 0:\n            result += 1\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store the even bits\n    even_bits = []\n    # iterate through the bits of the input number\n    for bit in bin(n)[2:]:\n        # check if the bit is an even bit\n        if int(bit) % 2 == 0:\n            # add the even bit to the list of even bits\n            even_bits.append(int(bit))\n    # convert the list of even bits to an integer and return it\n    return int(''.join(str(bit) for bit in even_bits))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        # Find the rightmost set bit\n        if n & 1 == 0:\n            n = n >> 1\n        else:\n            # Set all bits to 1 except the rightmost set bit\n            n = n | (n - 1)\n            # Set the rightmost set bit to 0\n            n = n - 2\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the new number\n    new_number = 0\n    # loop through each bit of the original number\n    for i in range(32):\n        # check if the i-th bit is even\n        if n & (1 << i):\n            # set the i-th bit of the new number to 1\n            new_number |= (1 << i)\n    # return the new number with even bits set to 1\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n\n    Parameters:\n    n (int): an integer value\n\n    Returns:\n    int: the same integer with all even bits set to 1\n    \"\"\"\n    # initialize the result variable\n    result = 0\n    # iterate over the bits of n from right to left\n    for i in range(32):\n        # get the i-th bit of n (i.e., the least significant bit)\n        bit = n >> i & 1\n        # if the bit is even, set it to 1\n        if bit == 1:\n            result |= 1 << i\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0: \n        if n % 2 == 0: \n            n = n ^ 1 \n        n = n // 2 \n    return n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the modified number\n    modified_num = 0\n\n    # Iterate through each bit in the original number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1, otherwise, set it to 0\n        if int(bit) % 2 == 0:\n            modified_num += int(bit)\n\n    # Return the modified number\n    return modified_num"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Iterate through the list of tuples\n    for item in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if item in count_dict:\n            count_dict[item] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[item] = 1\n    \n    # Return the dictionary with the counts of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts\n    count_dict = {}\n\n    # Loop through the test list\n    for item in test_list:\n        # Check if the item is already in the dictionary\n        if item in count_dict:\n            # Increment the count\n            count_dict[item] += 1\n        else:\n            # Add the item to the dictionary with a count of 1\n            count_dict[item] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Counter function to count the frequency of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    result = {}\n    for item, count in counter.items():\n        result[item] = count\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    \n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n        \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    counts = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # increment the count for the tuple by 1\n            counts[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n            \n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the number of occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring and len(substring) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n\n    Args:\n    str (str): A string.\n\n    Returns:\n    int: The number of non-empty substrings of the given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings of that string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr!= '':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    sequence = [0]*n\n    sequence[0] = 0\n    sequence[1] = 0\n    sequence[2] = 0\n    \n    for i in range(3,n+1):\n        if sequence[i-1] <= 2*m and sequence[i-2] >= sequence[i-1]:\n            sequence[i] = sequence[i-1] + 1\n        else:\n            sequence[i] = 0\n            \n        count += sequence[i]\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # create a list to store the numbers in the sequences\n    sequence_numbers = []\n\n    # iterate over all possible sequences of length n\n    for i in range(m, m * n + 1):\n\n        # check if the number is within the desired range\n        if i >= 2 * sequence_numbers[-1] and i <= m:\n\n            # add the number to the sequence if it's valid\n            sequence_numbers.append(i)\n\n        # check if the sequence is of length n\n        if len(sequence_numbers) == n:\n\n            # break out of the loop once a sequence of length n is found\n            break\n\n    # return the number of valid sequences\n    return len(sequence_numbers)\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Time Complexity: O(m*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    # Initialize the dp array with 1's for the first two elements, and then fill the rest\n    dp = [1, 1]\n\n    for i in range(2, n):\n        dp.append(dp[i - 1] * 2)\n        for j in range(1, m - 1):\n            if j < dp[i - 1]:\n                dp[i] += dp[j]\n\n    return dp[-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # initialize counters\n    count = 0\n    count_list = []\n\n    # iterate through all possible values of n\n    for i in range(2, n+1):\n\n        # initialize current number of sequences to 0\n        current_count = 0\n\n        # iterate through all possible starting numbers\n        for j in range(2, m+1):\n\n            # check if current number is within the range of n\n            if j + i <= m:\n\n                # if it is, increment the count and add it to the list\n                current_count += 1\n                count_list.append(current_count)\n\n        # add the current number of sequences to the total count\n        count += current_count\n\n    # return the final count\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 1\n    for i in range(1,n+1):\n        count = 0\n        for j in range(1,i+1):\n            if j >= 2*i and j <= m:\n                count += 1\n        total_sequences *= count\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        prev_num = sequence[0]\n        for num in sequence[1:]:\n            if num < prev_num * 2 or num > m:\n                return False\n            prev_num = num\n        return True\n\n    total_sequences = 0\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            sequence = [2 * k for k in range(i, j)]\n            if is_valid_sequence(sequence):\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i >= 2 * j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    prev_element = 0\n    current_element = 2\n\n    while current_element <= m:\n        if current_element < n:\n            total_sequences += 1\n        else:\n            if prev_element + n <= m and prev_element + 2 * n > m:\n                total_sequences += 1\n\n        prev_element = current_element\n        current_element += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables for the sequence and the count\n    sequence = [2]\n    count = 1\n\n    # loop until we have reached n elements in the sequence\n    while len(sequence) < n:\n        # check if the current element is within the specified range\n        if sequence[-1] >= 2 * sequence[-2] and sequence[-1] <= m:\n            # if it is, add it to the sequence and increment the count\n            sequence.append(sequence[-1] + 1)\n            count += 1\n        else:\n            # if it is not, remove the last element from the sequence and decrement the count\n            sequence.pop()\n            count -= 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to 0\n    count = 0\n    \n    # Calculate the previous element as 0\n    prev_element = 0\n    \n    # Loop through the range of numbers from 2 to m\n    for i in range(2, m+1):\n        \n        # Calculate the next element\n        next_element = i\n        \n        # Check if the next element is greater than or equal to twice the previous element\n        if next_element >= prev_element*2:\n            \n            # Increment the count by 1\n            count += 1\n            \n            # Update the previous element\n            prev_element = next_element\n    \n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list2) > len(list1):\n        for i in range(len(list1)-len(list2)):\n            list1.pop()\n        list1.append(list2)\n    elif len(list2) < len(list1):\n        for i in range(len(list2)-len(list1)):\n            list1.pop()\n        list1.append(list2)\n    else:\n        for i in range(len(list2)):\n            list1.pop()\n        list1.append(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) >= len(list2):\n        # If the length of the first list is greater than or equal to the length of the second list,\n        # then we can replace the last element of the first list with the elements of the second list.\n        for i in range(len(list1) - len(list2) + 1):\n            list1[i] = list2\n    else:\n        # If the length of the first list is less than the length of the second list, we need to make a new list to store the elements of the second list.\n        new_list = list2[:len(list1)]\n        for i in range(len(list1)):\n            list1[i] = new_list[i]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    list1.pop()\n    list1.extend(list2)\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    # check if the length of list1 is greater than or equal to the length of list2\n    if len(list1) >= len(list2):\n        # check if the length of list1 is a multiple of the length of list2\n        if len(list1) % len(list2) == 0:\n            # if both conditions are satisfied, replace the last element of list1 with the elements of list2\n            list1[-1] = list2\n        else:\n            # if the length of list1 is not a multiple of the length of list2, append the last element of list2 to the end of list1\n            list1.append(list2[-1])\n    else:\n        # if the length of list1 is less than the length of list2, append the last element of list1 to the end of list2\n        list2.append(list1[-1])\n    # return the updated list1\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[i]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the length of the first list is greater than or equal to two\n    if len(list1) < 2:\n        print(\"The first list must have at least two elements.\")\n        return\n    \n    # check if the length of the second list is greater than or equal to two\n    if len(list2) < 2:\n        print(\"The second list must have at least two elements.\")\n        return\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the second list is longer than the first list\n    if len(list2) > len(list1):\n        # if yes, truncate the second list to match the length of the first list\n        list2 = list2[:len(list1)]\n    # iterate through the first list and replace the last element with the elements of the second list\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2.pop(0)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(x):\n        return x == int(x ** 0.5) ** 2\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def get_next_prime(N):\n        if is_prime(N + 1):\n            return N + 1\n        else:\n            return get_next_prime(N + 2)\n\n    def get_next_perfect_square(N):\n        if is_perfect_square(N + 1):\n            return N + 1\n        else:\n            return get_next_perfect_square(get_next_prime(N))\n\n    next_psq = get_next_perfect_square(N)\n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # check if N is a perfect square\n    if N**0.5 == int(N**0.5):\n        # calculate the next perfect square\n        N = math.ceil(N**2)\n        # check if the next perfect square is greater than N\n        while N**0.5!= int(N**0.5) or N > N:\n            N += 1\n        return N\n    else:\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    # Find the square root of N \n    sqrtN = math.sqrt(N)\n    # Find the square of the square root\n    sqrtN2 = sqrtN * sqrtN\n    # Find the difference between N and the square root of N\n    diff = N - sqrtN\n    # Find the square of the difference \n    diff2 = diff * diff\n    # Check if the difference is less than the square root of N\n    if diff2 < sqrtN2: \n        # If it is, return the square of the difference \n        return diff2 \n    else: \n        # Otherwise, return the next perfect square greater than sqrtN\n        return next_Perfect_Square(sqrtN+1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N and returns the next perfect square greater than N.\n    '''\n    # initialize the current square and the next square\n    square = math.sqrt(N)\n    next_square = math.sqrt(N)+1\n\n    # while the next square is greater than the given number, increment the square and next square\n    while next_square > N:\n        square += 1\n        next_square = square + math.sqrt(square*square - N)\n\n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        '''\n        Returns True if the given number is a perfect square, False otherwise.\n        '''\n        root = math.sqrt(num)\n        return root ** 2 == num\n\n    def next_greater_perfect_square(num):\n        '''\n        Returns the next perfect square greater than the given number.\n        '''\n        if num == 1:\n            return 1\n        if num == 2:\n            return 4\n        if num % 2 == 0:\n            num -= 1\n        else:\n            num += 1\n        while not is_perfect_square(num):\n            if num % 2 == 0:\n                num -= 1\n            else:\n                num += 1\n        return num\n\n    if is_perfect_square(N):\n        return N\n    else:\n        return next_greater_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_square(num):\n        return int(math.sqrt(num))**2 == num\n\n    def next_square(num):\n        \"\"\"Returns the next perfect square greater than num\"\"\"\n        if is_square(num):\n            return num + 1\n        else:\n            return (num + 1) * (num + 1)\n\n    while True:\n        num = N + 1\n        square = next_square(num)\n        if square > N:\n            return square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of N\n    sqrtN = math.sqrt(N)\n\n    # If the square root is an integer, then increment it by 1\n    if sqrtN.is_integer():\n        sqrtN += 1\n\n    # If the square root is odd, then increment it by 2\n    else:\n        sqrtN += 2\n\n    # Calculate the next perfect square greater than sqrtN\n    return int(sqrtN**2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # Use binary search to find the next perfect square greater than N\n    L, R = 1, N\n    while L <= R:\n        mid = (L + R) // 2\n        if mid * mid > N:\n            R = mid - 1\n        else:\n            L = mid + 1\n    return L"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        square = int(math.sqrt(N)) + 1\n        if int(math.sqrt(square**2 - N))**2 == square**2 - N:\n            return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    while True:\n        N += 1\n        sqrt = int(math.sqrt(N))\n        if sqrt*sqrt == N:\n            return N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    max_sum_left = max_sum_right = float('-inf')\n    max_sum_prev = float('-inf')\n\n    for i in range(n):\n        if i == 0:\n            max_sum_left = arr[i]\n            max_sum_right = arr[i]\n        elif i == n - 1:\n            max_sum_left = max(max_sum_left, arr[i])\n            max_sum_right = max(max_sum_right, arr[i])\n        else:\n            max_sum_left = max(max_sum_left, arr[i])\n            max_sum_right = max(max_sum_right, arr[i])\n\n            max_sum_prev = max(max_sum_left, max_sum_right)\n\n            if max_sum_prev > max_sum_left:\n                max_sum_left = max_sum_prev\n            elif max_sum_prev < max_sum_right:\n                max_sum_right = max_sum_prev\n\n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return arr[0]\n\n    # Initialize variables for the maximum sum and the maximum increasing subsequence\n    max_sum_so_far = arr[0]\n    max_increasing_subsequence = [arr[0]]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is greater than the last element in the increasing subsequence\n        if arr[i] > max_increasing_subsequence[-1]:\n            max_increasing_subsequence.append(arr[i])\n        else:\n            # If the current element is smaller or equal to the last element in the increasing subsequence, we need to check if we can extend the subsequence by adding the current element\n            while arr[i] <= max_increasing_subsequence[-1]:\n                max_sum_so_far = max(max_sum_so_far, max_increasing_subsequence[-1] + arr[i])\n                max_increasing_subsequence.pop()\n            max_increasing_subsequence.append(arr[i])\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables\n    max_sum_1 = float('-inf')\n    max_sum_2 = float('-inf')\n    max_sum_3 = float('-inf')\n\n    # Iterate through the array and find the maximum sum of three bitonic subsequences\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_sum_2 = max(max_sum_2, max_sum_1 + arr[i])\n        else:\n            max_sum_1 = max(max_sum_1, max_sum_2 + arr[i])\n        max_sum_3 = max(max_sum_3, max_sum_1 + max_sum_2)\n\n    # Return the maximum sum of all three subsequences\n    return max(max_sum_1, max_sum_2, max_sum_3)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to store max sum and whether it's increasing or decreasing\n    max_sum = float('-inf')\n    curr_sum = 0\n    is_increasing = True\n    \n    # Traverse through the array\n    for i in range(1, n):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # If increasing, add it to the current sum\n            curr_sum += arr[i]\n            # If decreasing, update the max sum if necessary\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            # Reset the current sum\n            curr_sum = 0\n        else:\n            # If decreasing, subtract it from the current sum\n            curr_sum -= arr[i-1]\n            # If increasing, update the max sum if necessary\n            if curr_sum < max_sum:\n                max_sum = curr_sum\n            # Reset the current sum\n            curr_sum = 0\n    \n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n\n    max_sum = float('-inf')\n    max_increasing = float('-inf')\n    min_decreasing = float('inf')\n\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i - 1]:\n            max_increasing = max(max_increasing + arr[i], arr[i])\n        else:\n            min_decreasing = min(min_decreasing - arr[i], arr[i])\n\n        max_sum = max(max_sum, max_increasing + min_decreasing)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # If the length of the array is less than 3, return None\n    if len(arr) < 3:\n        return None\n    \n    # Initialize the maximum sum to the first element of the array\n    max_sum = arr[0]\n    \n    # Check if the second element is less than the first element\n    if arr[1] < arr[0]:\n        max_sum = arr[1]\n        \n    # Check if the first element is less than the second element\n    if arr[1] > arr[0]:\n        max_sum += arr[1]\n    \n    # Loop through the array from the third element to the end\n    for i in range(2, len(arr)):\n        \n        # Check if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            max_sum = max(max_sum, arr[i])\n        else:\n            max_sum += arr[i]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # check if the array is increasing\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return arr[0] + arr[1] + arr[2]\n    \n    # check if the array is decreasing\n    if all(arr[i] >= arr[i+1] for i in range(n-1)):\n        return arr[0] + arr[1] + arr[2]\n    \n    # initialize variables\n    sum1 = arr[0] + arr[1]\n    sum2 = arr[1] + arr[2]\n    max_sum = sum1 + sum2\n    \n    # check if the array is increasing and then decreasing\n    for i in range(3, n):\n        if arr[i] >= arr[i-1]:\n            sum1 = sum2\n            sum2 += arr[i]\n        else:\n            sum1 += arr[i]\n            sum2 = sum1 + arr[i+1]\n        \n        max_sum = max(max_sum, sum1 + sum2)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n    else:\n        max_left = max_right = float('-inf')\n        for i in range(1, n-1):\n            if arr[i] < arr[i-1]:\n                max_left = max(max_left, arr[i])\n            else:\n                max_left = 0\n            if arr[i] > arr[i+1]:\n                max_right = max(max_right, arr[i])\n            else:\n                max_right = 0\n            if max_left > max_right:\n                max_sum = max_left\n            else:\n                max_sum = max_right\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    dp = [[float('-inf')] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = max(arr[j] - arr[i], arr[j] - dp[i+1][j-1])\n            max_sum = max(max_sum, dp[i][j])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Function to check if a sequence is bitonic\n    def is_bitonic(seq):\n        return all(seq[i] <= seq[i+1] for i in range(len(seq)-1)) and all(seq[i] >= seq[i+1] for i in range(len(seq)-1))\n\n    # Function to find the maximum subarray sum that is a bitonic subsequence\n    def bitonic_subarray_sum(arr):\n        n = len(arr)\n        max_sum = 0\n\n        # Initialize the two pointers\n        left, right = 0, 1\n\n        # Iterate through the array\n        while right < n:\n            # If the current subarray is a bitonic subsequence, check its sum\n            if is_bitonic(arr[left:right+1]):\n                max_sum = max(max_sum, sum(arr[left:right+1]))\n            # If the current subarray is not a bitonic subsequence, move the right pointer to the next element that is a bitonic subsequence\n            else:\n                while right < n and not is_bitonic(arr[left:right+1]):\n                    right += 1\n                max_sum = max(max_sum, sum(arr[left:right+1]))\n\n            # Move the left pointer to the right until it points to the next bitonic subsequence\n            while right < n and is_bitonic(arr[left:right+1]):\n                left += 1\n\n        return max_sum\n\n    # Call the bitonic_subarray_sum function and return the result\n    return bitonic_subarray_sum(arr)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / x\n    iterations = 0\n    while abs(y) > 1e-15:\n        x_old = x\n        x = y\n        y = number / x\n        iterations += 1\n    return iterations, x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = number / 2\n    precision = 0.0001\n\n    # loop until the precision is reached\n    while abs(guess**2 - number) >= precision:\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables for babylonian method\n    n = 1\n    x = 1\n    y = 0\n    # Iterate until x is within the desired precision\n    while abs(x**n - number) > 0.00000001:\n        # Compute y = x^n / (n - 1)\n        y = x**n / (n - 1)\n        # Update x and n based on new value of y\n        if y > x:\n            n += 1\n        else:\n            n -= 1\n        x = y\n    # Return the final value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # initial guess\n    x = number / 2\n\n    # iterate until the difference between the square of x and the original number is below a certain threshold\n    while abs(x*x - number) > 0.000001:\n        x = (x + number/x) / 2\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables for approximation\n    x0 = 1\n    x1 = number/x0\n    x = x1\n    # initialize variables for iteration\n    k = 0\n    y = x1**2 - number\n    while abs(y) > 0.001:\n        x0 = x1\n        x1 = x\n        x = x1 - y/x1\n        k += 1\n        y = x1**2 - number\n    return x, k"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = 1\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 0.0001:\n            break\n        guess = next_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = 1\n    y = number / x\n\n    while True:\n        x_prev = x\n        y_prev = y\n\n        x = y_prev - (number / y_prev)\n        y = number / x\n\n        if abs(x - x_prev) < 0.000001:\n            break\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = guess\n\n    while abs(guess**2 - number) > 0.001:\n        previous_guess = guess\n        guess = (previous_guess + number / previous_guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    previous_guess = 0\n    tolerance = 0.00001\n\n    while abs(guess*guess - number) > tolerance:\n        previous_guess = guess\n        guess = (number/guess) + (number/guess*guess)\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initial guess for the square root\n    guess = number / 2\n    # number of iterations\n    i = 0\n    # loop until the difference between the guess and the square root is less than a tolerance\n    while abs(guess*guess - number) >= 1e-10:\n        # calculate the new guess\n        guess = (guess + number / guess) / 2\n        # increase the number of iterations\n        i += 1\n    # print the result\n    print(\"The square root of\", number, \"is approximately\", guess)\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n\n    This function uses dynamic programming to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Initialize a 2D table to store the length of the longest palindromic subsequence for every substring of the given string\n    dp = [[0] * len(string) for _ in range(len(string))]\n\n    # Fill the table using the following recurrence relation:\n    # dp[i][j] = 1 + dp[i+1][j-1] if string[i] == string[j]\n    # dp[i][j] = dp[i][j-1] if string[i]!= string[j]\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence in the given string\n    return dp[0][len(string)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    # Find the length of the longest palindromic substring\n    max_len = 0\n    for i in range(len(str)):\n        # Check for odd length palindromes\n        left, right = i, i\n        while left >= 0 and right < len(str) and str[left] == str[right]:\n            left -= 1\n            right += 1\n        max_len = max(max_len, right - left - 1)\n\n        # Check for even length palindromes\n        left, right = i, i + 1\n        while left >= 0 and right < len(str) and str[left] == str[right]:\n            left -= 1\n            right += 1\n        max_len = max(max_len, right - left - 1)\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    # Find the length of the longest palindrome\n    max_len = 1\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                max_len = max(max_len, j-i-1)\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        table = [[0 for j in range(n)] for i in range(n)]\n        longest_palindrome = 1\n        for i in range(n):\n            table[i][i] = 1\n        for length in range(2, n+1):\n            for i in range(n-length+1):\n                j = i + length - 1\n                if str[i] == str[j]:\n                    table[i][j] = table[i+1][j-1] + 2\n                    if table[i][j] > longest_palindrome:\n                        longest_palindrome = table[i][j]\n                else:\n                    table[i][j] = max(table[i+1][j], table[i][j-1])\n        return longest_palindrome"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(string): \n    n = len(string) \n    # Create a 2D table to store lengths of subsequences \n    table = [[0] * n for i in range(n)] \n    # Find length of LPS for odd length of the string \n    for i in range(1, n): \n        if string[i] == string[i-1]: \n            table[i][i] = 1 + table[i-1][i-1] \n    # Find length of LPS for even length of the string \n    for length in range(3, n+1, 2): \n        for start in range(n-length+1): \n            end = start + length - 1\n            if string[start] == string[end]: \n                table[start][end] = 2 + table[start+1][end-1] \n    # Return length of LPS for the given string \n    return table[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Table to store the length of the longest palindromic subsequence ending at the ith index\n    table = [0] * len(str)\n\n    # Initialize the length of the longest palindromic subsequence ending at index 0\n    table[0] = 0\n\n    # Initialize the start and end indices of the longest palindromic subsequence ending at index 0\n    start, end = 0, 0\n\n    # Iterate over the indices of the string\n    for i in range(1, len(str)):\n\n        # If the current character is same as the previous character and the length of the longest palindromic subsequence ending at the (i-1)th index is greater than 0 (i.e., if the previous character is also a palindrome), then expand the palindromic subsequence ending at the (i-1)th index to the current character.\n        if str[i] == str[i-1] and table[i-2] > 0:\n            table[i] = table[i-2] + 2\n\n            # Update the start and end indices if the length of the longest palindromic subsequence ending at the (i-1)th index is greater than the current length of the longest palindromic subsequence ending at the i-th index.\n            if table[i] > table[end]:\n                start = i - table[i] + 1\n                end = i\n\n        # If the length of the longest palindromic subsequence ending at the (i-1)th index is 0 (i.e., if the previous character is not a palindrome), then expand the palindromic subsequence ending at the (i-1)th index to the current character.\n        else:\n            table[i] = 1\n\n            # Update the start and end indices if the length of the longest palindromic subsequence ending at the (i-1)th index is greater than the current length of the longest palindromic subsequence ending at the i-th index.\n            if table[i] > table[end]:\n                start = i\n                end = i\n\n    # Return the length of the longest palindromic subsequence\n    return table[end]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    lps_array = [0] * n\n    max_len = 1\n    start = 0\n\n    for i in range(1, n):\n        if str[i] == str[i - 1]:\n            lps_array[i] = lps_array[i - 1] + 2\n            if max_len < lps_array[i]:\n                max_len = lps_array[i]\n                start = i - lps_array[i] + 1\n        else:\n            lps_array[i] = 1\n            if max_len < lps_array[i]:\n                max_len = lps_array[i]\n                start = i\n\n    return str[start:start + max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # creating a 2D array to store the lengths of palindrome subsequences of all possible lengths\n    lps_matrix = [[0]*n for i in range(n)] \n\n    # finding the lengths of palindrome subsequences of all possible lengths\n    for i in range(n): \n        if i == 0 or str[i] == str[i-1]: \n            lps_matrix[i][i] = 1 \n        else: \n            lps_matrix[i][i] = 0 \n\n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i+length-1 \n            if str[i] == str[j]: \n                lps_matrix[i][j] = lps_matrix[i+1][j-1] + 2 \n            else: \n                lps_matrix[i][j] = max(lps_matrix[i+1][j], lps_matrix[i][j-1]) \n\n    # finding the length of the longest palindromic subsequence\n    max_len = lps_matrix[0][n-1] \n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    \"\"\"\n    This function calculates the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a table to store the length of LPS for all possible prefixes of s\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the table in bottom up manner\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(s, i, j):\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef longest_palindrome_subsequence(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    \n    max_length = 1\n    for i in range(n):\n        if is_palindrome(s, i, i):\n            max_length = 2\n            break\n        if i > 0 and is_palindrome(s, i-1, i) and is_palindrome(s, i, i+1):\n            max_length = 3\n    \n    if max_length == 1:\n        return 1\n    \n    # compute lengths of substrings for odd and even lengths\n    max_length_odd = 1\n    for i in range(n-1, -1, -1):\n        if is_palindrome(s, i, i):\n            max_length_odd = 2\n            break\n        if i > 0 and is_palindrome(s, i-1, i) and is_palindrome(s, i, i+1):\n            max_length_odd = 3\n            \n    if max_length_odd == 1:\n        return 1\n    \n    max_length = max(max_length, max_length_odd)\n    \n    return max_length"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # calculate the harmonic sum of n-1 using the formula\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)**2) + ((1/n)**3) +... + ((1/n)**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += 1/i\n    return sum_"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = (1/n) + harmonic_sum(n-1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n\n    # Loop through both arrays\n    for num in array_nums1:\n        if num in array_nums2:\n            if num not in intersection:\n                intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of unique elements in array_nums1\n    set_nums1 = set(array_nums1)\n    # create an empty list to store the intersection\n    intersection_list = []\n    # iterate through array_nums2\n    for num in array_nums2:\n        # check if num is in set_nums1\n        if num in set_nums1:\n            # if it is, add it to the intersection list\n            intersection_list.append(num)\n            # remove it from set_nums1 so that it can't be selected again\n            set_nums1.remove(num)\n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of these arrays.\n    \"\"\"\n\n    # Sort both arrays in ascending order\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Initialize two pointers to the beginning of both arrays\n    i = 0\n    j = 0\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate through both arrays\n    while i < len(array_nums1) and j < len(array_nums2):\n        # Check if the current elements of the two arrays are equal\n        if array_nums1[i] == array_nums2[j]:\n            # Add the element to the intersection list\n            intersection.append(array_nums1[i])\n            # Increment both pointers\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            # If the current element of array_nums1 is smaller, increment the pointer to the right\n            i += 1\n        else:\n            # If the current element of array_nums2 is smaller, increment the pointer to the left\n            j += 1\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the first array\n    set_nums1 = set(array_nums1)\n    # Create a set from the second array\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the set back to a list\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns a new array containing the elements that are present in both arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the count of each number in array1\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # create a list to store the intersection of the two arrays\n    intersection = []\n    \n    # loop through array2 and add each number that is in the count_dict\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    # Create two dictionaries to store the frequency of each number in the two arrays\n    freq_dict1 = {}\n    freq_dict2 = {}\n\n    # Iterate through the first array and add the frequency of each number to the freq_dict1 dictionary\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n\n    # Iterate through the second array and add the frequency of each number to the freq_dict2 dictionary\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n\n    # Create a new dictionary to store the intersection of the two dictionaries\n    intersection_dict = {}\n\n    # Iterate through the freq_dict1 and freq_dict2 dictionaries and add the intersection of their keys to the intersection_dict\n    for num in freq_dict1:\n        if num in freq_dict2 and freq_dict1[num] > 0 and freq_dict2[num] > 0 and freq_dict1[num] <= freq_dict2[num]:\n            intersection_dict[num] = freq_dict1[num]\n\n    # Return the intersection_dict\n    return intersection_dict"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from the first array\n    set1 = set(array_nums1)\n    # create an empty set to store the intersection of set1 and array_nums2\n    intersection = set()\n    # iterate through the second array and add elements to the intersection set\n    for num in array_nums2:\n        if num in set1:\n            intersection.add(num)\n    # return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, array_nums1 and array_nums2,\n    and returns a new array that contains only the common elements\n    between the two input arrays.\n    \"\"\"\n    common = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common.append(num)\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the common elements\n    common_set = set(array_nums1) & set(array_nums2)\n    # Convert the set to a list\n    common_list = list(common_set)\n    # Return the common list\n    return common_list"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup: \n        if element == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.insert(0,item)\n        result.insert(0,element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    # Initialize an empty list to hold the result\n    result = []\n\n    # Iterate over each element in the input list\n    for item in lst:\n        # Insert the element before the current item in the list\n        result.append(element)\n        result.append(item)\n\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n\n    for i in range(len(list)):\n        list.insert(i, element)\n\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new list to store the modified elements\n    modified_list = []\n    \n    # iterate over each element in the original list\n    for element in list:\n        # append the element to the modified list\n        modified_list.append(element)\n        # insert the element before the last element in the modified list\n        modified_list.insert(0, element)\n        \n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    # Define a function to calculate the magnitude of a complex number\n    def magnitude(z):\n        return cmath.sqrt(z.real ** 2 + z.imag ** 2)\n    \n    # Define a function to calculate the angle of a complex number\n    def angle(z):\n        return cmath.phase(z)\n    \n    # Iterate through each complex number in the input list\n    for number in numbers:\n        # Check if the complex number is valid\n        if isinstance(number, complex):\n            # Calculate the magnitude and angle of the complex number\n            mag = magnitude(number)\n            theta = angle(number)\n            \n            # Print the polar coordinates of the complex number\n            print(f\"({mag.real:.2f}, {mag.imag:.2f})\")\n        else:\n            print(\"Invalid input: complex number expected.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # extract real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        \n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the angle of the complex number (in radians)\n        angle = cmath.phase(number)\n        \n        # create a tuple containing the magnitude and angle\n        polar_tuple = (magnitude, angle)\n        \n        # print the polar coordinates of the complex number\n        print(polar_tuple)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        polar_number = cmath.polar(number)\n        # Add the polar coordinates to the list\n        polar_coordinates.append(polar_number)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''  \n    result = []  \n    for num in numbers:  \n        result.append(cmath.polar(num))  \n    return result  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = cmath.rect(number.real)\n        imag = cmath.rect(number.imag)\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        print('({}, {})'.format(magnitude, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            num = complex(num)\n            angle = cmath.phase(num)\n            radius = abs(num)\n            print(f\"({angle:.3f}, {radius:.3f})\")\n        except ValueError:\n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # split the complex number into real and imaginary parts\n        real, imag = cmath.polar(num)\n        # print the polar coordinates\n        print(f\"Polar coordinates for {num}: ({real}, {imag})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number\n        # Convert complex number to polar coordinates\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(number)\n        polar_coordinates = magnitude*cmath.exp(1j*phase)\n        # Print the polar coordinates\n        print(polar_coordinates)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Iterate through each complex number in the list\n    for number in numbers:\n        # Extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        \n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # Calculate the angle of the complex number in radians\n        angle = cmath.phase(number)\n        \n        # Create a tuple containing the magnitude and angle of the complex number\n        result = (magnitude, angle)\n        \n        # Append the tuple to the results list\n        results.append(result)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of corresponding polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n        polar_coordinates.append((magnitude, phase))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations of length n with replacement\n    combinations = combinations_with_replacement(l, n)\n\n    # Convert the combinations to a list of tuples\n    combinations_list = list(combinations)\n\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # generate all combinations of length n with replacement (combinations_with_replacement)\n    for i in range(len(l)-n+1):\n        yield tuple(l[i:i+n])"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l) + 1):\n            comb.append((l[i], l[j - 1]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all possible combinations of length n with replacement\n    combs = combinations_with_replacement(l, n)\n\n    # convert the generator object to a list of tuples\n    result = list(combs)\n\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    A helper function that checks if a given number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            primes.append(i)\n    if n > 1:\n        primes.append(n)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a list to store the prime numbers\n    primes = []\n    \n    # Iterate through the numbers from 2 to n\n    for num in range(2, n+1):\n        # Check if the number is prime\n        isPrime = True\n        \n        # Iterate through the numbers from 2 to the square root of the current number\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                isPrime = False\n                break\n        \n        # If the number is prime, add it to the list of prime numbers\n        if isPrime:\n            primes.append(num)\n    \n    # Return the number of prime numbers found\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define a function to compare two elements in a tuple\n    def compare_elements(x, y):\n        # If x is greater than y, return x\n        if x > y:\n            return x\n        # If x is less than or equal to y, return y\n        else:\n            return y\n\n    # Compare each element in test_tup1 to each element in test_tup2\n    # and return the maximum value\n    max_val = 0\n    for i in range(len(test_tup1)):\n        max_val = compare_elements(max_val, test_tup1[i])\n        max_val = compare_elements(max_val, test_tup2[i])\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_val:\n            max_val = test_tup2[i]\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Check if the length of both tuples is equal\n    if len1 == len2:\n        # Compare each element of both tuples and find the maximum value\n        max_tup = tuple(max(test_tup1[i], test_tup2[i]) for i in range(len1))\n        \n        # Return the max_tup\n        return max_tup\n    \n    # If the length of the tuples is not equal, return None\n    else:\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a temporary tuple that contains the maximum value from each tuple\n    temp_max = (max(test_tup1[0], test_tup2[0]),\n                max(test_tup1[1], test_tup2[1]),\n                max(test_tup1[2], test_tup2[2]))\n    \n    # Return the maximum value from the temporary tuple\n    return temp_max"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = max(test_tup1, test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Determine the length of the tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    # Compare the length of the tuples\n    if length1 > length2:\n        return test_tup1\n    elif length2 > length1:\n        return test_tup2\n    else:\n        # If the length of the tuples is equal, compare each element\n        for i in range(length1):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2\n        # If the above for loop completes without returning, then the two tuples are equal\n        return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize a counter variable\n    count = 0\n\n    # Check each number from 2 to n\n    for i in range(2, n + 1):\n        # If the number is prime, increment the counter\n        if is_prime(i):\n            count += 1\n            # If the counter reaches the nth prime, return the number\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Start with the first prime number\n    p = 2\n    \n    # Loop through the first n-1 primes\n    for _ in range(n-1):\n        # Loop until we find a prime number that's not too big\n        while True:\n            # Check if the current prime is too big\n            if p*p > 2*p**3:\n                break\n            \n            # Check if the current prime is prime\n            is_prime = True\n            for i in range(5, int(p**0.5)+1, 6):\n                if p % i == 0 or p % (i+2) == 0:\n                    is_prime = False\n                    break\n            \n            # If the current prime is prime, increment it and break out of the loop\n            if is_prime:\n                p += 1\n                break\n    \n    # Return the nth prime number\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \n    :param n: The value of n for which you want to find the newman-shanks-williams prime number.\n    :type n: int\n    :return: The nth newman-shanks-williams prime number.\n    :rtype: int\n    \"\"\"\n    \n    # Initialize count to 1\n    count = 1\n    \n    # Initialize prime to True\n    prime = True\n    \n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        \n        # Check if i is a newman-shanks-williams prime number\n        if i % 2 == 1 or i % 3 == 0:\n            \n            # If i is a newman-shanks-williams prime number, increment count and set prime to False\n            count += 1\n            prime = False\n            \n    # Check if count is equal to n, and prime is still True, which means n is a newman-shanks-williams prime number\n    if count == n and prime:\n        return n\n    \n    # If count is greater than n, n is not a newman-shanks-williams prime number\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_s_williams_prime(n, count=0):\n        \"\"\"\n        A helper function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        if count == n:\n            return True\n        elif is_prime(count) and newman_s_williams_prime(n, count + 1):\n            return True\n        else:\n            return False\n\n    # Find the nth newman-shanks-williams prime number\n    return newman_s_williams_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a list to hold the prime numbers\n    prime_list = []\n    # Define a list to hold the squares of the prime numbers\n    square_list = []\n    # Define the current number being checked for primality\n    num = 2\n    \n    # Check if the number is already in the list of prime numbers\n    while num not in prime_list:\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, int(num/2) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list of prime numbers and its square to the list of squares of prime numbers\n        if is_prime:\n            prime_list.append(num)\n            square_list.append(num**2)\n        # Increment the current number being checked for primality\n        num += 1\n        \n    # If the nth prime number is in the list of prime numbers, return its square\n    if n in prime_list:\n        return square_list[prime_list.index(n)]\n    # If the nth prime number is not in the list of prime numbers, return None\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num):\n        if is_prime(num + 1):\n            return num + 1\n        else:\n            return find_next_prime(num + 1)\n\n    count = 0\n    prime = 2\n    while count < n:\n        if is_prime(prime):\n            count += 1\n        prime = find_next_prime(prime)\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    p = 2\n    count = 0\n    \n    # Check if p is prime\n    while count < n:\n        if p % 2 == 0:\n            p += 1\n        else:\n            count += 1\n    \n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Define the sequence of integers\n    seq = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Initialize variables for counting primes and count\n    count = 0\n    i = 0\n    j = 0\n\n    # Iterate through the sequence of integers\n    while count < n:\n        if seq[i] > 2:\n            # Check if seq[i] is a prime number\n            for k in range(2, int(seq[i]**0.5)+1):\n                if (seq[i] % k) == 0:\n                    break\n            else:\n                # Increment the count and move to the next integer\n                count += 1\n                i += 1\n        else:\n            # If seq[i] is less than or equal to 2, increment the count and move to the next integer\n            count += 1\n            i += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return seq[j]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = False\n    i = 2\n    while prime is False and i <= n:\n        prime = True\n        j = 2\n        while prime and j < i:\n            if i % j == 0:\n                prime = False\n                break\n            j += 1\n        i += 1\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    prime = 0\n    count = 0\n\n    # Iterate through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, check if it is the nth prime\n        if is_prime and count == n-1:\n            prime = i\n            break\n        count += 1\n\n    return prime"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # create a new tuple with element-wise division of the two tuples\n    result_tup = tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples are not of the same length'\n\n    # Divide each element of the two tuples element-wise\n    result_tup = tuple(elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # perform element-wise division across the tuples\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += (num1 / num2,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length')\n    else:\n        return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the length of the tuples\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n\n    # Check if the length of the tuples is equal\n    if len_tup1!= len_tup2:\n        raise ValueError(\"The length of the two tuples must be equal\")\n\n    # Perform element-wise division operation\n    result_tup = []\n    for i in range(len_tup1):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Input tuples must be of equal length.\"\n\n    # Perform element-wise division operation on each element of the tuples\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            return \"Error: Division by zero is not allowed.\"\n\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None\n    else:\n        list1_part1 = list1[:L]\n        list1_part2 = list1[L:]\n        return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is valid\n    if L < 0:\n        raise ValueError('L must be a non-negative integer.')\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create an empty list to store the first part of the list\n    first_part = []\n    \n    # loop through the list and add elements to the first_part list until the length of the first_part list is equal to L\n    while len(first_part) < L:\n        first_part.append(list1.pop(0))\n    \n    # create an empty list to store the second part of the list\n    second_part = []\n    \n    # loop through the list and add elements to the second_part list until the length of the second_part list is equal to L\n    while len(second_part) < L:\n        second_part.append(list1.pop())\n    \n    # return the two parts of the list as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L > length:\n        print(\"Error: The length of the second part should be less than or equal to the length of the first part.\")\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # Calculate the length of the first part\n    length_1 = L\n    \n    # Calculate the length of the second part\n    length_2 = len(lst) - length_1\n    \n    # Split the list into two parts\n    part_1 = lst[:length_1]\n    part_2 = lst[length_1:]\n    \n    # Return the resulting lists in a tuple\n    return part_1, part_2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    half_len = len(list1) // 2\n    return (list1[:half_len], list1[half_len:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    Returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts\n    mid = len(lst) // 2\n    part1 = lst[:mid]\n    part2 = lst[mid:]\n    # Check if the length of the first part is equal to L\n    if len(part1) == L:\n        return part1, part2\n    # If the length of the first part is not equal to L, return None\n    else:\n        return None"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height to feet and inches\n    feet = int(h_age / 30.48)\n    inches = h_age % 30.48\n    # calculate age in dog's years\n    age_years = feet * 12 + inches / 36\n    # check if dog is older than 30 years\n    if age_years >= 30:\n        age_years = 0\n    # round to nearest whole number\n    age_dog_years = round(age_years)\n    return age_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + (h_age * 0.3)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_in_dog_years = 7\n    dog_age = h_age * years_in_dog_years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = 7 * h_age\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \"\"\"\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    print(years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age / 12, 2)\n"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize an empty list to hold the resulting lists\n    result = []\n    \n    # loop through the list, splitting it every nth element\n    for i in range(0, len(S), step):\n        # create a new list with the current element and the next nth elements\n        new_list = [S[i]] + S[i+step:i+2*step]\n        # add the new list to the result list\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize a new empty list to store the resulting lists\n    results = []\n    # Use a for loop to iterate through the input list\n    for i in range(0, len(S), step):\n        # Use a list comprehension to create a new list that contains only the elements from the input list that correspond to the current iteration\n        new_list = [S[j] for j in range(i, i+step)]\n        # Append the new list to the results list\n        results.append(new_list)\n    # Return the results list\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the split lists\n    split_lists = []\n    \n    # loop through each element in the list\n    for i in range(len(S)):\n        # if the current index is a multiple of the step size, add the current element to a new list and append it to the split_lists list\n        if i % step == 0:\n            split_list = [S[i]]\n            split_lists.append(split_list)\n        \n        # if the current index is not a multiple of the step size, add the current element to the last list in the split_lists list\n        else:\n            split_lists[-1].append(S[i])\n    \n    # return the split_lists list of split lists\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area of the cube\n    surface_area = 6 * l * l\n\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2 * 6\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l*l*l\n    lateral_surface_area = 6*area/math.sqrt(3)\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l   # Formula for lateral surface area of a cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    count = 0\n    \n    while count < n:\n        square = count * count\n        sum_squares += square\n        count += 1\n    \n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    # Define a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n    \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    # initializing sum to 0\n    sum = 0\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # calculate square of the odd number\n        square = i*i\n        # add square to sum\n        sum += square\n    # return the sum of squares of odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of squares\n    total = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Add the square of the i-th odd natural number to the total sum of squares\n        total += i**2\n\n    # Return the total sum of squares\n    return total"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    star_num = 1\n    for i in range(1, n + 1):\n        star_num = star_num * i\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the count of stars to 1\n    count = 1\n    # initialize the first number of stars to 5\n    first_star = 5\n    # loop until we have found the desired number of stars\n    while count < n:\n        # increment the count of stars\n        count += 1\n        # find the next number of stars by multiplying the first number by 2 and adding 1\n        next_star = first_star * 2 + 1\n        # update the first number of stars to the next number of stars\n        first_star = next_star\n    # return the final count of stars\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the sequence of numbers\n    seq = list(range(1, n+1))\n\n    # Create a string to hold the output\n    output = ''\n\n    # Loop through the sequence and add the appropriate number of stars to the output string\n    for i in seq:\n        output += '*'*i\n\n    # Print the output string\n    print(output)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n == 0:\n        return 1\n\n    else:\n        return find_star_num(n-1) + 2 * (n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer as input and returns then'th star number.\n    '''\n    if n == 0:\n        return \"\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. n must be a positive integer.\"\n    else:\n        # initialize a list to store the first n rows of stars\n        stars_list = [\"*\" * (i + 1) for i in range(n)]\n        # concatenate the list to form then'th star number\n        return \"\".join(stars_list)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the count variable to 1\n    count = 1\n\n    # Loop until we reach the nth star number\n    while count <= n:\n        # Print the current star number\n        print(\"*\" * count)\n\n        # Increment the count variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII code\n    code = ord(k)\n    # Return the ASCII code\n    return code"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    print(\"The ascii value of\", k, \"is\", ascii_val)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even positions of the input list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if even_index is not None:\n                even_sum += num\n            else:\n                even_index = i\n    if even_index is not None:\n        even_sum += num\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list `arr` as input and returns the sum of even numbers at even positions of `arr`.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index = i\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0: # checking if the index is even\n            if arr[i] % 2 == 0: # checking if the number is even\n                even_sum += arr[i] # adding even numbers to the sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_powers = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            even_powers += i\n    return even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(n):\n        even_sum += i*i*i*i*i\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(1, n+1):\n        sum_even_power += (i**5)\n        if i % 2 == 0:\n            sum_even_power += (i//2)**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_power = 0\n    for i in range(2, n+1):\n        sum_power += i**5\n    return sum_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i*i*i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the current even number raised to the fifth power to the sum variable\n        sum += i**5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        result_list.append(test_list[i][-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > 0:\n            result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the number of elements in the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same number of elements.\"\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding element from the second tuple\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup1)):\n        new_tuple.append(test_tup1[i] - test_tup2[i])\n    return new_tuple"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize variables to store the result and the sum of the two tuples\n    result = []\n    sum_of_tuples = 0\n    \n    # Loop through the tuples and add the elements of the first tuple to the result\n    for i in range(len(test_tup1)):\n        sum_of_tuples += test_tup1[i]\n        \n    # Loop through the tuples and subtract the elements of the second tuple from the sum of the two tuples and add the result to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n        \n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum variable\n    even_sum = 0\n    \n    # Calculate the first half of the binomial coefficients\n    for i in range(n):\n        term = (math.factorial(n)/math.factorial(i)*math.factorial(n-i))/math.factorial(2*i)\n        even_sum += term\n    \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total_sum = 0\n    for i in range(2, n+1):\n        for j in range(2, n//i+1):\n            if i % 2 == 0:\n                total_sum += math.comb(n, i-2) * math.comb(n-j, j)\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    even_sum = 0\n    for i in range(2, n + 1):\n        binomial = math.comb(n, i)\n        if i % 2 == 0:\n            even_sum += binomial\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through even indices from 0 to n-1\n    for i in range(0, n, 2):\n        # Compute the binomial coefficient\n        bin_coeff = math.comb(n, i)\n\n        # Add the even index binomial coefficient to the sum\n        sum += bin_coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function calculates the sum of even index binomial coefficients using a for loop.\n    The even index binomial coefficient is defined as (n choose k), where k is even and 0 <= k <= n/2.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    # Define the even indices of the binomial coefficients\n    even_indices = [i*2 for i in range(1, n+1)]\n    \n    # Initialize the sum of even indices as 0\n    sum_even_indices = 0\n    \n    # Iterate through the even indices and calculate the sum of even binomial coefficients\n    for index in even_indices:\n        sum_even_indices += math.comb(n, index)\n    \n    # Return the sum of even indices\n    return sum_even_indices"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    if n <= 1:\n        return 0\n    else:\n        even_binomial = [0, 2]\n        for i in range(3, 2*n+1, 2):\n            even_binomial.append(even_binomial[i-2] + even_binomial[i-4])\n        return sum(even_binomial[2*n-4:])"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    # loop through all the even numbers between 0 and n\n    for i in range(0, n+1, 2):\n        # find the binomial coefficient for i and n-i\n        coeff = math.comb(n, i)\n        # add the coefficient to the sum if it is even\n        if i % 2 == 0:\n            sum_even_coeffs += coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) + math.factorial(2 * n - 2) - math.factorial(2 * n - 4) + math.factorial(2 * n - 6)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume\n    vol = 3.14159 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159*r**2 # formula for the area of a cylinder\n    volume = area * h # formula for the volume of a cylinder\n    return volume # return the volume of the cylinder"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14159 * r**2 * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the first two numbers of the sequence\n    decagonal = [1]\n    prev_decagonal = 1\n\n    # Check if the sequence has enough terms to meet the requirement\n    if n <= len(decagonal):\n        return decagonal[n-1]\n\n    # Generate the rest of the sequence using the formula:\n    # (2*prev_decagonal) + (2*prev_decagonal + 1)\n    while len(decagonal) < n:\n        prev_decagonal = decagonal[-1]\n        decagonal.append(2 * prev_decagonal + 1)\n\n    return decagonal[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Helper function to find the square of a number\n    def square(num):\n        return num * num\n\n    # Helper function to find the sum of the first n natural numbers\n    def sum_n(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of the first n natural numbers\n    n_sum = sum_n(n)\n\n    # Calculate the sum of the squares of the first n natural numbers\n    n_square_sum = sum(square(i) for i in range(n + 1))\n\n    # Calculate the decagonal number\n    decagonal_num = n_sum - n_square_sum\n\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (1 + 5**0.5) * (10**n - 1) // 9"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Decagonal number is equal to the sum of the squares of the first n natural numbers.\n    # So, we can calculate the sum of squares using a loop.\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n\n    total = n\n    decagonal = 0\n\n    while total > 0:\n        total -= 1\n        if total % 2 == 0:\n            decagonal += total\n\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n\n    # Calculate the sum of the first n positive integers\n    total = (n * (n + 1)) // 2\n\n    # Check if the sum is divisible by 7\n    return total % 7 == 0"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    for i in range(1, n + 1):\n        decagonal += i * (i + 1) // 2\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a decagonal number, else False.\n    A decagonal number is a positive integer whose digits sum up to the square of the number.\n    For example, 15 is a decagonal number because 1^2 + 5^2 = 22.\n    \"\"\"\n\n    num = 0\n    while n > 0:\n        num = num * 10 + n % 10\n        n //= 10\n\n    return num == (num ** 2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n and returns True if n is a decagonal number or False otherwise.\n    A decagonal number is a positive integer that can be written as the sum of two consecutive positive integers.\n    For example: 15 is a decagonal number because it can be written as 1 + 12 (which is 14).\n    25 is not a decagonal number because it cannot be written as a sum of two consecutive positive integers.\n    '''\n    if n < 1:\n        return False\n\n    # Initialize variables to store the decagonal number and its digits\n    decagonal_num = 1\n    decagonal_num_digits = []\n\n    # Loop until we reach the nth digit\n    while len(str(decagonal_num)) <= n:\n        # Calculate the next decagonal number\n        decagonal_num += decagonal_num - 1\n\n        # Add the current digit to the list of digits\n        decagonal_num_digits.append(str(decagonal_num)[-1])\n\n    # Check if the list of digits contains the nth digit\n    return str(decagonal_num_digits[n - 1]) == str(n)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique\n    and False otherwise.\n    \"\"\"\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and checks if all the elements are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # loop through the list and add unique elements to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # check if the set is empty (all elements are unique) or not (at least one element is not unique)\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, and False otherwise.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements of the list are unique or not.\n    Returns True if all the elements are unique and False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns a boolean value indicating whether all the elements in the list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a dictionary to store the unique elements and their frequency\n    freq_dict = {}\n\n    # iterate through each element in the list\n    for item in test_list:\n        # if the element is already in the dictionary, increment its frequency\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n\n    # check if all the frequency values in the dictionary are 1\n    for value in freq_dict.values():\n        if value > 1:\n            return False\n\n    # if all the frequency values are 1, then all the elements are unique\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts the element-wise difference of the two lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should be of the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: the two lists must have the same length.\")\n        return None\n    \n    # Subtract each element of the two lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    # subtract each element of the lists\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): The first list.\n    nums2 (list): The second list.\n\n    Returns:\n    list: The result of subtracting nums1 from nums2.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10 # Initialize an array to store the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1 # Increment the frequency of the digit in the array\n    for i in range(1, 10):\n        if freq[i] > freq[i]:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # iterate through each digit of the input integer\n    for d in str(n):\n        \n        # check if the digit is already present in the dictionary\n        if d in freq:\n            \n            # if it is, increment its frequency by 1\n            freq[d] += 1\n            \n        # if the digit is not present in the dictionary, add it with a frequency of 1\n        else:\n            \n            freq[d] = 1\n            \n    # iterate through the dictionary and check if the frequency of any digit is greater than the digit itself\n    for d in freq:\n        \n        if freq[d] > d:\n            \n            return False\n            \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = n.count(str(i))\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n\n    for digit in count:\n        if count[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Loop through each digit in the integer and update the dictionary with the frequency of each digit\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Loop through the keys in the dictionary and check whether the frequency of the key is less than or equal to the key itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # If all digits have a frequency less than or equal to their value, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in freq:\n        if digit > 1:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    num_list = []\n    for i in str(n):\n        num_list.append(int(i))\n\n    freq_dict = {}\n    for i in num_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    for key in freq_dict:\n        if freq_dict[key] > key:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = []\n    for i in range(10):\n        freq.append(0)\n    \n    # Count the frequency of each digit in the integer\n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n    \n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n % 10:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Create a list of digits and their frequencies\n    digits = [str(n)]\n    freq = [1]\n    for i in range(1, len(str(n)) + 1):\n        freq.append(freq[-1] + (n // 10 ** (len(str(n)) - i)))\n        digits.append(str(freq[-1]))\n\n    # Check that each digit has a frequency less than or equal to itself\n    for digit in digits:\n        if int(digit) > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all the elements in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element as input and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element as arguments and checks whether all items in the list are equal to the given element.\n    Returns True if all items are equal to the given element, False otherwise.\n    '''\n    if len(list) == 0:\n        return False\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(.{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    result = re.search(pattern, text)\n    return result"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(?=(?:b{2,3})*b)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    return pattern.match(text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b.{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    # loop through the array\n    for i in range(n):\n        # check if the current array ends with the k-th array\n        if i == n - k:\n            # if yes, update the current sum and compare it with the maximum sum found so far\n            current_sum = max(current_sum, sum(a[start:end+1]) * k)\n        else:\n            # if not, add the current element to the current sum and update the start and end indices\n            current_sum += a[i]\n            start = i\n            end = i\n\n    # return the maximum sum found\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Repeating the array k times\n    repeated_array = [a] * k\n\n    # Finding the sum of the first k elements\n    repeated_sum = sum(repeated_array)\n\n    # Finding the maximum sum of the first k elements\n    max_sum = repeated_sum\n\n    # Finding the maximum sum of the modified array\n    for i in range(n-k+1):\n        current_sum = repeated_sum\n        for j in range(k):\n            current_sum += a[i+j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the original array\n    sum_a = sum(a)\n    \n    # Create a new array by repeating the original array k times\n    new_a = [a[i] for i in range(n)] * k\n    \n    # Calculate the sum of the new array\n    sum_new_a = sum(new_a)\n    \n    # Calculate the maximum sum of the original array which is less than or equal to the sum of the new array\n    max_sum_1 = max(sum_a, sum_new_a - sum_a)\n    \n    # Calculate the maximum sum of the new array which is less than or equal to the sum of the original array\n    max_sum_2 = max(sum_new_a, sum_a - sum_new_a)\n    \n    # Return the maximum sum of the two subproblems\n    return max(max_sum_1, max_sum_2)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    mod_array = [a] * k\n    \n    # Calculate the sum of the modified array\n    for i in range(k):\n        mod_array[i] = a * k\n    \n    # Calculate the maximum sum of the modified array\n    for i in range(n):\n        temp = mod_array[0]\n        for j in range(k):\n            temp = max(temp, temp + a[i] - mod_array[j])\n        max_sum = max(max_sum, temp)\n    \n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        a = [a] * k\n        for j in range(n):\n            a[j % k] += a[j]\n        if sum(a) > max_sum:\n            max_sum = sum(a)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    max_sum = float('-inf')\n    result = [0] * k\n\n    for i in range(k):\n        for j in range(i, n):\n            curr_sum = a[j]\n            for l in range(j, n):\n                curr_sum += a[l]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n                    result = [a[l]]\n                elif curr_sum == max_sum:\n                    result.append(a[l])\n\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(k):\n        current_sum += a[i]\n    max_sum = max(max_sum, current_sum)\n    for i in range(n - k):\n        current_sum -= a[i]\n        current_sum += a[i + k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array with repeated values\n    modified_array = [0] * (n * k)\n    for i in range(n):\n        modified_array[i] = a[i]\n    for i in range(n, n*k):\n        modified_array[i] = a[i % n]\n\n    # initialize variables for the maximum sum and its index\n    max_sum = modified_array[0]\n    max_sum_index = 0\n\n    # loop through the array and find the maximum sum\n    for i in range(1, len(modified_array)):\n        if modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n            max_sum_index = i\n\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    # loop through the array\n    for i in range(n):\n        # add the current element to the current sum\n        current_sum += a[i]\n        # if the current sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # if the current sum exceeds the limit, reset the sum\n        if current_sum > k * a[i]:\n            current_sum = a[i]\n    # return max_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n\n    # Calculate the sum of the modified array by repeating the original array k times\n    modified_sum = original_sum * k\n\n    # Calculate the maximum sum of the modified array\n    max_sum = modified_sum\n\n    # Calculate the maximum sum of a contiguous subarray of the modified array\n    for i in range(1, n):\n        left_sum = modified_sum - a[i]\n        right_sum = modified_sum + a[i]\n        max_sum = max(max_sum, max(left_sum, right_sum))\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    i = 2  \n    while i <= n:  \n        sum += i ** 2  \n        i += 2  \n    return sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(2, n+1, 2):\n        sum += i*i\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize sum variable to 0\n    total = 0\n    # iterate from 0 to n-1\n    for i in range(n):\n        # calculate square of i\n        square = i*i\n        # check if i is even\n        if i % 2 == 0:\n            # add square of i to total\n            total += square\n    # return total\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of each even number to the sum variable\n        sum += i**2\n\n    # return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0\n    count = 0\n\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n        count += 1\n\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n//2, -1, -2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist[0] < max_lengths[0]):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max(max_length_list, default=0):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxLengthList = []\n    for sublist in list1:\n        if len(sublist) > maxLength:\n            maxLength = len(sublist)\n            maxLengthList = [sublist]\n        elif len(sublist) == maxLength:\n            maxLengthList.append(sublist)\n    return maxLengthList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(max(len(x) for x in sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(sublist)\n        if max_length not in max_lengths:\n            max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        sublist_length = len(sublist)\n        if sublist_length not in max_lengths:\n            max_lengths.append(sublist_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = 0\n        for item in sublist:\n            if len(str(item)) > max_length:\n                max_length = len(str(item))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    \n    ways = count_no_of_ways(n-1, k)\n    ways += count_no_of_ways(n-2, k)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    if n == 0:\n        return 1\n\n    # If k is 0, there will be no color choice at all.\n    if k == 0:\n        return 0\n\n    # If n is less than or equal to k, there are only one way to paint the fence.\n    if n <= k:\n        return 1\n\n    # If there are more than 2 adjacent posts with the same color, there are no ways to paint the fence.\n    if any(n % 2 == 0 and i % 2 == 1 for i in range(1, n)):\n        return 0\n\n    # If there are less than or equal to 2 adjacent posts with the same color, there are different ways to paint the fence.\n    count = 0\n    for i in range(1, n + 1):\n        count += count_no_of_ways(n - i, k)\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the count of ways for different values of k\n    counts = {0: 1, 1: 1}\n\n    # Loop through all values of k from 2 to n\n    for i in range(2, n+1):\n        # Initialize a variable to store the count of ways for the current value of k\n        count = 0\n\n        # Loop through all values of k from 2 to i-1\n        for j in range(2, i):\n            # Check if the sum of j and k is equal to n\n            if j+k <= n:\n                # If it is, increment the count by the count of ways for the remaining value of k\n                count += counts[j]\n\n        # Add the count to the dictionary with the current value of k\n        counts[i] = count\n\n    # Return the final count of ways\n    return counts[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # create a 2D array to store the number of ways for each combination of colors\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # base cases:\n    # if there are no posts or colors, there is only one way to paint the fence\n    if n == 0 or k == 0:\n        return 1\n\n    # if there is only one color, there is only one way to paint the fence\n    if k == 1:\n        return n\n\n    # initialize the first row and column with 0\n    dp[0][0] = 1\n\n    # fill the rest of the array\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # if the adjacent posts have the same color, the number of ways is the sum of the number of ways for the remaining posts\n            # with the same color and without the current color\n            if i > 1 and dp[i - 2][j] == 1:\n                dp[i][j] = dp[i - 2][j] + dp[i - 1][j]\n            # if the adjacent posts do not have the same color, the number of ways is the sum of the number of ways for the remaining posts\n            # with the same color and without the current color\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a list to store the ways to paint the fence\n    ways = []\n    \n    # Base case - if there are only two colors available to paint, there are only two ways to paint the fence\n    if k == 2:\n        ways.append([0])\n        ways.append([1])\n    \n    # Recursive case - for each color available to paint, there are two possible ways to paint the fence (excluding the first and last colors)\n    for color in range(k-2):\n        ways_with_color = []\n        for i in range(1, n-1):\n            ways_with_color.append(ways[-1][i-1] + ways[-1][i+1])\n            ways.append(ways_with_color)\n            \n    # Return the number of ways to paint the fence\n    return len(ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0] * k for _ in range(n)] # 2D array to store the number of ways for each state\n    ways[0][0] = 1 # base case: if only one post, it can be painted with any color\n\n    for i in range(1, n):\n        for j in range(k):\n            for color in range(k):\n                if j == color: # adjacent posts have the same color\n                    ways[i][color] += ways[i-1][color]\n                else:\n                    ways[i][color] += ways[i-1][j] # adjacent posts have different colors\n\n    return ways[n-1][0] # final answer"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, colors, used_colors):\n        if start == n:\n            # Base case: If all posts have been painted, we have a valid way\n            count += 1\n            return\n        if len(colors) == 0 or len(used_colors) == k:\n            # If we have used up all colors or the fence is too short to paint the two adjacent posts of the same color, we have no valid way\n            return\n\n        for color in colors:\n            if color not in used_colors:\n                # If the color is not already used, try to paint the current post\n                used_colors.add(color)\n                backtrack(start + 1, colors, used_colors)\n                used_colors.remove(color)\n\n    count = 0\n    backtrack(0, list(range(k)), set())\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the number of ways for each color\n    color_count = {i: 0 for i in range(k)}\n\n    # Initialize a boolean variable to keep track of the color of the current post\n    current_color = None\n\n    # Loop through the fence\n    for i in range(n):\n        # Check if the current post should be painted with the same color as the previous post\n        if current_color is not None and i - 2 >= 0 and fence[i - 2] == fence[i]:\n            # Increment the count of the same color posts\n            color_count[current_color] += 1\n        else:\n            # Update the current color\n            current_color = fence[i]\n\n    # Initialize a variable to store the number of ways\n    ways = 0\n\n    # Loop through the colors\n    for count in color_count.values():\n        # Calculate the number of ways for each color\n        ways += count * (count - 1) // 2\n\n    # Return the number of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a list to store the number of ways for each color\n    ways = [0] * k\n\n    # Base case: if the number of posts is 0, then there is only one way to paint the fence\n    if n == 0:\n        ways[0] = 1\n        return ways\n\n    # Iterate over the number of posts from 1 to n\n    for i in range(1, n+1):\n\n        # If the color at post i is same as the color at post i-1, then we have 2 options: paint it and leave it unchanged, or leave it unchanged and paint it\n        ways[i%k] += ways[(i-1)%k]\n\n        # If the color at post i is different from the color at post i-1, then we have 2 options: paint it and change it to the color at post i-1, or leave it unchanged and paint it\n        ways[(i-1)%k] += ways[i%k]\n\n    # Return the total number of ways for all colors\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # base case: if k is 1, then there is only one way to paint the fence\n    for i in range(n + 1):\n        dp[i][1] = 1\n\n    # fill the dp table\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            # if the i-th post has the same color as the (i-1)-th post, then there is only one way to paint the fence\n            if dp[i - 1][j] == 1:\n                dp[i][j] = dp[i - 1][j]\n            # if the i-th post has a different color from the (i-1)-th post, then there are two ways to paint the fence:\n            # either (i-1)-th post and the i-th post have the same color, or (i-1)-th post and the i-th post have different colors\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers as inputs and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # compute the quotient as the integer division of n/m\n    quotient = n // m\n    # compute the remainder of n/m (i.e., n modulo m)\n    remainder = n % m\n    # if the remainder is not zero, add 1 to the quotient and subtract the remainder from n\n    if remainder!= 0:\n        quotient += 1\n        n -= remainder\n    # return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Calculate quotient and round it down to the nearest integer\n    quotient = n // m\n\n    # Return the calculated quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 'Error: Division by zero is not allowed.'\n    else:\n        return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # check if the denominator is zero\n    if m == 0:\n        return \"Cannot divide by zero\"\n    \n    # calculate the quotient\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s * (s - w) * (s - h))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the area of the triangle\n    area = 0.5 * w * h\n\n    # calculate the perimeter of the triangle\n    perimeter = w + h\n\n    # calculate the other side of the triangle\n    side_b = math.sqrt(area / perimeter)\n\n    return side_b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = h\n    c = a\n    \n    # Check for non-acute angles\n    if a**2 == b**2:\n        return math.sqrt(b**2 + c**2)\n    else:\n        s = (b**2 + c**2 - a**2) / (2 * b * c)\n        return math.sqrt(a**2 + b**2 - s**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes two sides of a right angled triangle as input and returns the third side.\n\n    Args:\n    w (float): the length of the first side of the triangle\n    h (float): the length of the second side of the triangle\n\n    Returns:\n    float: the third side of the triangle\n    \"\"\"\n\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # calculate the third side of the triangle using the formula\n    third_side = (2 * area) / (w + h)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5  # Calculate the semi-perimeter\n    area = 0.5 * w * h   # Calculate the area of the triangle\n\n    c = (area / s)**0.5   # Calculate the third side\n\n    return c"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value as None\n    max_val = None\n    \n    # loop through each element in the list\n    for val in listval:\n        # if current element is greater than the max value so far, update max value\n        if val > max_val:\n            max_val = val\n    \n    # return the max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        return max(listval)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value variable\n    max_val = None\n    \n    # Loop through the list\n    for item in listval:\n        # Check if the current item is greater than the maximum value\n        if max_val is None or item > max_val:\n            max_val = item\n            \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Error: Input must be a list.\")\n        return\n    elif len(listval) == 0:\n        print(\"Error: Input list is empty.\")\n        return\n    else:\n        max_val = listval[0]\n        for val in listval:\n            if val > max_val:\n                max_val = val\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if max_val < listval[i]:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    \n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array and returns the count of inversions in the array.\n    '''\n\n    # Finding the length of the array\n    n = len(arr)\n\n    # Storing the indices of the first element of each subarray\n    i = [0] * (n + 1)\n    inv_count = 0\n\n    # Sorting the array using merge sort algorithm\n    merge_sort(arr, i, 0, n - 1, inv_count)\n\n    # Returning the count of inversions\n    return inv_count\n\n\ndef merge_sort(arr, i, low, high, inv_count):\n    '''\n    This function takes an array, indices, low and high indices of the subarray,\n    and the count of inversions so far.\n    '''\n\n    # Base case: if the length of the subarray is 1 or less, it is already sorted\n    if high <= low:\n        return\n\n    # Finding the middle index of the subarray\n    mid = (low + high) // 2\n\n    # Sorting the left subarray\n    merge_sort(arr, i, low, mid, inv_count)\n\n    # Sorting the right subarray\n    merge_sort(arr, i, mid + 1, high, inv_count)\n\n    # Merging the two sorted subarrays and counting the inversions\n    i[mid + 1] = i[mid] + len(arr[low:mid + 1])\n    inv_count += i[mid + 1] - i[mid] - len(arr[low:mid + 1])\n    merge(arr, i, low, mid, high)\n\n\ndef merge(arr, i, low, mid, high):\n    '''\n    This function takes an array, indices, low and high indices of the subarray.\n    '''\n\n    # Creating two temporary arrays for the merging\n    left_arr = [0] * (mid - low + 1)\n    right_arr = [0] * (high - mid)\n\n    # Storing the elements of the first subarray in the left array\n    for j in range(0, mid - low + 1):\n        left_arr[j] = arr[low + j]\n\n    # Storing the elements of the second subarray in the right array\n    for j in range(0, high - mid):\n        right_arr[j] = arr[mid + 1 + j]\n\n    # Merging the two sorted subarrays\n    i[mid + 1] = i[mid] + len(left_arr)\n    inv_count += i[mid + 1] - i[mid] - len(left_arr)\n    merge_helper(left_arr, right_arr, arr, i, low, mid, high)\n\n\ndef merge_helper(left_arr, right_arr, arr, i, low, mid, high):\n    '''\n    This function takes temporary arrays, the array, indices, low and high indices of the subarray,\n    and the count of inversions so far.\n    '''\n\n    # Initializing the index of the merged subarray\n    k = low\n\n    # Merging the two sorted subarrays\n    for j in range(0, len(left_arr)):\n        if j >= len(right_arr) or (j < len(right_arr) and left_arr[j] <= right_arr[j]):\n            arr[k] = left_arr[j]\n            k += 1\n        else:\n            arr[k] = right_arr[j]\n            k += 1\n            inv_count += (k - low) - j\n\n    # Updating the index of the first element of the next subarray\n    i[mid + 1] = i[mid] + len(left_arr)\n    inv_count += i[mid + 1] - i[mid] - len(left_arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef merge_sort_inv_count(arr):\n    inv_count = 0\n    merge_sort(arr)\n\n    i = 1\n    j = len(arr) - 1\n\n    while i < j:\n        inv_count += j - i\n        i += 1\n        j -= 1\n\n    return inv_count\n\n\ndef get_Inv_Count(arr):\n    return merge_sort_inv_count(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Count inversions using merge sort\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        i = j = 0\n        inv_count = 0\n        merged = []\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n\n        while i < len(left):\n            merged.append(left[i])\n            i += 1\n\n        while j < len(right):\n            merged.append(right[j])\n            j += 1\n\n        return merged, inv_count\n\n    # Sort the array\n    arr = merge_sort(arr)\n\n    # Calculate inversion count\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in ascending order \n    arr.sort()\n\n    # Initialize count variable to zero \n    count = 0 \n\n    # Traverse through the array and calculate count of inversions \n    for i in range(len(arr)): \n        # Traverse through the remaining part of the array \n        for j in range(i+1, len(arr)): \n            # If first element is greater than second element, \n            # then swap them and increment count \n            if arr[i] > arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n                count += len(arr) - i - 1 \n\n    # Return the final count of inversions \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array.\n    \"\"\"\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    arr = sorted(arr)\n    \n    # Traverse the array and count inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    # Sort the array\n    arr.sort()\n    # Iterate over the array and count inversions\n    for i in range(1, n):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            count += j - i\n            j -= 1\n        j = i\n        while j < n-1 and arr[j] > arr[j+1]:\n            count += n - j\n            j += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n  \n    # Count inversions \n    count = 0 \n    for i in range(1, n): \n        j = 0 \n        # Find the maximum element in remaining unsorted array \n        while j < i and arr[j] < arr[i]: \n            j += 1 \n        while j > 0 and arr[j-1] > arr[i]: \n            j -= 1 \n            count += i-j \n        while j < i and arr[j] >= arr[i]: \n            j += 1 \n  \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array and counts the number of inversions in the array.\n    Inversion count is defined as the number of pairs of elements in the array that are in the wrong order.\n    '''\n    # Define a function to sort the array\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    # Define a function to merge two sorted arrays\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    # Sort the array using merge sort\n    sorted_arr = merge_sort(arr)\n\n    # Count the number of inversions using two pointers\n    i = 1\n    j = len(sorted_arr) - 2\n    inv_count = 0\n    while i < j:\n        if sorted_arr[i] < sorted_arr[j]:\n            inv_count += j - i + 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    # Counting inversions using merge sort\n    merge_sort(arr, 0, n-1)\n    return inv_count\n    \ndef merge_sort(arr, low, high):\n    '''\n    This function takes an array, its low index, and its high index as input and sorts the array using merge sort algorithm.\n    '''\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        inv_count = merge(arr, low, mid, high)\n    return inv_count\n\ndef merge(arr, low, mid, high):\n    '''\n    This function takes an array, its low index, its middle index, and its high index as input and merges the array in ascending order using merge sort algorithm.\n    '''\n    n1 = mid - low + 1\n    n2 = high - mid\n    L = [0] * n1\n    R = [0] * n2\n\n    for i in range(n1):\n        L[i] = arr[low + i]\n\n    for j in range(n2):\n        R[j] = arr[mid + 1 + j]\n\n    i = 0\n    j = 0\n    k = low\n\n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            inv_count += n1 - i\n            j += 1\n        k += 1\n\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure by replacing each sublist with its elements.\n\n    Args:\n        lst (list): A nested list of arbitrary elements.\n\n    Returns:\n        list: The flattened list.\n    \"\"\"\n    flat_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_lst.extend(flatten_list(elem))\n        else:\n            flat_lst.append(elem)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to store flattened list\n    flattened_list = []\n\n    # Loop through each element of the input list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Recursively flatten the nested list and append to the flattened list\n            flattened_list.extend(flatten_list(element))\n        else:\n            # Append the element to the flattened list\n            flattened_list.append(element)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the maximum aggregate for each customer and date\n    max_aggr = defaultdict(lambda: 0)\n\n    # iterate through the list of tuples\n    for cust_id, date, amount in stdata:\n        # if the maximum aggregate for the customer and date is less than the current amount, update it\n        if max_aggr[cust_id, date] < amount:\n            max_aggr[cust_id, date] = amount\n\n    # find the maximum aggregate for each customer and date\n    max_aggr_list = []\n    for cust_id, date in max_aggr.keys():\n        max_aggr_list.append(max_aggr[cust_id, date])\n\n    # return the maximum aggregate for each customer and date\n    return max_aggr_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = 0\n    max_key = None\n    for key, value in stdata.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return max_key, max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item, freq_item in stdata:\n        # Increment the frequency count of the item\n        freq[item] += freq_item\n    \n    # Initialize the maximum aggregate to 0\n    max_agg = 0\n    \n    # Iterate through the defaultdict and find the maximum aggregate\n    for freq_item in freq.values():\n        if freq_item > max_agg:\n            max_agg = freq_item\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each year\n    max_aggr_by_year = defaultdict(int)\n\n    # Iterate through the list of tuples and update the maximum aggregate for each year\n    for year, value in stdata:\n        max_aggr_by_year[year] = max(max_aggr_by_year[year], value)\n\n    # Return the maximum aggregate from each year\n    return max(max_aggr_by_year.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing student ID, course, and grade, and\n    returns the maximum aggregate for each course.\n    '''\n    max_grades = defaultdict(int)\n\n    for student_id, course, grade in stdata:\n        max_grades[course] = max(max_grades[course], int(grade))\n\n    return {course: max_grades[course] for course in max_grades}"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples and update the count_dict\n    for item, price in stdata:\n        count_dict[item] += 1\n    \n    # Iterate through the count_dict and calculate the maximum aggregate\n    max_agg = 0\n    for item, count in count_dict.items():\n        max_agg += price * count\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(len(stdata[i])):\n            max_agg[stdata[i][j]] += 1\n    max_agg = max(max_agg.items(), key=lambda x: x[1])\n    return max_agg[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate of each product\n    max_aggr = defaultdict(int)\n    # iterate through the list of tuples\n    for pro, price, quantity in stdata:\n        # update the maximum aggregate of the product\n        max_aggr[pro] += price * quantity\n    # return the maximum aggregate\n    return max(max_aggr.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n-1):\n        for j in range(2**n-1):\n            if i & j == i:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:]\n        if seq[-n:] == seq[:n]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        seq = format(i, f'0{n}b')\n        if sum(int(j) for j in seq[:n]) == sum(int(j) for j in seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        sum1 = 0\n        for j in range(i, i+n):\n            sum1 += j & 1\n        sum2 = 0\n        for j in range(i+n, i+2*n):\n            sum2 += j & 1\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # extract the first n bits\n        num = i & ((1 << n) - 1)\n        # extract the last n bits\n        mask = ((1 << n) - 1) << (2*n - n)\n        last_num = i & mask\n        # check if the sum of first n bits is same as sum of last n bits\n        if num == last_num:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        num = bin(i)[2:]\n        if int(num[:n]) == int(num[-n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nresult = count_binary_seq(n)\nprint(\"The count of all binary sequences of length 2n with sum of first n bits same as sum of last n bits is:\", result)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        binary = bin(i)[2:]\n        sum1 = 0\n        sum2 = 0\n        for j in range(n): \n            sum1 += int(binary[j])\n            sum2 += int(binary[-(j+1)])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i == j:\n                continue\n            binary_str = format(i, f'0{2*n}b')\n            sum1 = int(binary_str[:n])\n            sum2 = int(binary_str[n:])\n            if sum1 == sum2:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_half = i >> n\n        second_half = i & ((1 << n) - 1)\n        sum_first_half = sum(first_half)\n        sum_second_half = sum(second_half)\n        if sum_first_half == sum_second_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary_str = bin(i)[2:]\n        first_n_bits = binary_str[:n]\n        last_n_bits = binary_str[-n:]\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable\n    depth = 0\n\n    # Recursively traverse the dictionary\n    for value in d.values():\n        if isinstance(value, dict):\n            # Increment the depth of the current dictionary\n            depth += 1\n            # Recursively traverse the nested dictionary\n            dict_depth(value)\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for key, value in d.items():\n            if isinstance(value, dict):\n                depth = 1 + dict_depth(value)\n            else:\n                depth = 1\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return max(dict_depth(x) for x in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable to keep track of the depth\n    depth = 0\n    \n    # Recursively check the depth of each dictionary key\n    for key in d.keys():\n        # Increment the depth counter if the key is a dictionary\n        if isinstance(d[key], dict):\n            depth += 1\n        \n        # Recursively check the depth of the value\n        if isinstance(d[key], (list, tuple, set)):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n        else:\n            pass\n    \n    # Return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.values():\n        if isinstance(i, dict):\n            depth = max(depth, dict_depth(i))\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the current depth\n    depth = 0\n    \n    # Recursively check the value of each key in the dictionary\n    for value in d.values():\n        # If the value is another dictionary, increase the depth by one\n        if isinstance(value, dict):\n            depth += 1\n    \n    # Return the current depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Find the number of rotations to be performed.\n    rotations = rotations % len(arr)\n\n    # Initialize the result variable.\n    result = None\n\n    # Perform the rotations.\n    for i in range(rotations):\n        # Find the starting index of the range.\n        start_index = index - i * (len(ranges) - 1)\n        if start_index < 0:\n            start_index += len(arr)\n\n        # Find the ending index of the range.\n        end_index = index - i * (len(ranges) - 1) + len(ranges) - 1\n        if end_index >= len(arr):\n            end_index -= len(arr)\n\n        # Find the range of elements to be rotated.\n        range_elements = arr[start_index:end_index + 1]\n\n        # Find the maximum element in the range.\n        max_element = max(range_elements)\n\n        # Rotate the elements to the right by the distance between the maximum element and the maximum element itself.\n        for j in range(len(range_elements)):\n            if range_elements[j]!= max_element:\n                range_elements[j], range_elements[j + 1] = range_elements[j + 1], range_elements[j]\n\n        # Replace the elements in the original array.\n        arr[start_index:end_index + 1] = range_elements\n\n        # Update the result variable.\n        if result is None or result > max_element:\n            result = max_element\n\n    # Return the element at the given index after rotations.\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, the number of rotations and an index.\n    The function finds the element at the given index after rotations and returns the element.\n    '''\n\n    # Finding the element at the given index after rotations\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            break\n    if i == len(ranges):\n        return -1\n    if i == 0:\n        return arr[(index - ranges[i][0]) % len(arr)]\n    if i == len(ranges) - 1:\n        return arr[(index - ranges[i - 1][1] + rotations) % len(arr)]\n    else:\n        return arr[(index - ranges[i][0] + rotations) % len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of ranges, list of rotations and the index of the element to be found\n    after rotations. It returns the element at the given index after rotations.\n    \"\"\"\n    # Function to perform rotations\n    def rotate(arr, rotations):\n        \"\"\"\n        This function takes an array and a rotation count and rotates the array by the given number of rotations.\n        \"\"\"\n        n = len(arr)\n        for i in range(rotations):\n            arr = arr[i:] + arr[:i]\n        return arr\n\n    # Perform rotations\n    arr = rotate(arr, rotations)\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Perform the reverse rotations to get the original array\n    arr = rotate(arr, -rotations)\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the sum of the elements in the first row\n    sum_first_row = sum(arr[0])\n\n    # Calculate the sum of the elements in the first row after rotations\n    sum_first_row_after_rotations = sum(arr[0]) * (2 ** rotations)\n\n    # Calculate the number of times the first row has to be rotated to reach the required index\n    rotations_to_reach_index = 0\n    for i in range(1, len(arr)):\n        rotations_to_reach_index += (2 ** (len(arr) - i - 1)) * (arr[0][i] / arr[0][0])\n\n    # Calculate the required index after rotations\n    required_index = (sum_first_row_after_rotations - sum_first_row) * index / rotations_to_reach_index\n\n    # Calculate the remaining rotations after finding the required index\n    remaining_rotations = (rotations_to_reach_index - required_index) // sum_first_row\n\n    # Find the element at the required index after the required number of rotations\n    result = find_element_after_rotations(arr, rotations + remaining_rotations, index - required_index)\n\n    return result\n\ndef find_element_after_rotations(arr, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the sum of the elements in the first row after rotations\n    sum_first_row_after_rotations = sum(arr[0]) * (2 ** rotations)\n\n    # Calculate the number of elements in the first row after rotations\n    first_row_elements_after_rotations = sum(arr[0])\n\n    # Calculate the required index after rotations\n    required_index = (sum_first_row_after_rotations - first_row_elements_after_rotations) * index / first_row_elements_after_rotations\n\n    # Calculate the remaining rotations after finding the required index\n    remaining_rotations = (rotations - required_index) // first_row_elements_after_rotations\n\n    # Find the element at the required index after the required number of rotations\n    if remaining_rotations == 0:\n        result = arr[0][index]\n    else:\n        result = find_element_after_rotations(arr, rotations, index - required_index)\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # If we find the element at the given index, return it\n        if i == index:\n            return arr[i]\n        # If we have found the element and we have rotated the array enough times, return None\n        if i == (index + rotations) % len(arr):\n            return None\n    \n    # If we have reached this point, it means that we have not found the element after the rotations\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the number of rotations that need to be applied to reach the given index\n    rotations_needed = (index // len(ranges)) * (rotations // len(ranges))\n    # Calculate the final index after the rotations\n    final_index = (index + rotations_needed) % len(arr)\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges == 0:\n        return arr[0]\n    elif rotations == 0:\n        return arr[index]\n    else:\n        mid = len(arr) // 2\n        left_range = ranges // 2\n        right_range = ranges - left_range\n        left_rotations = rotations // 2\n        right_rotations = rotations - left_rotations\n        if index < mid:\n            return find_Element(arr[:mid], left_range, left_rotations, index)\n        else:\n            return find_Element(arr[mid:], right_range, right_rotations, index - mid)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at index after rotating the array by rotations and ranges.\n\n    Args:\n    arr (list): The array to be rotated.\n    ranges (list): A list of the number of rotations to be applied in each dimension of the array.\n    rotations (list): A list of the rotations to be applied to each dimension of the array.\n    index (int): The index at which the element needs to be found after rotating the array.\n\n    Returns:\n    The element at index after rotating the array by rotations and ranges.\n    \"\"\"\n    # Check if the given index is valid\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Index should be a non-negative integer less than the length of the array.\")\n\n    # Get the number of elements in each dimension of the array\n    n = len(arr)\n\n    # Find the element at index in the initial array\n    element = arr[index]\n\n    # Loop through the dimensions of the array and apply rotations and ranges\n    for i in range(n):\n        # Apply the given number of rotations to the current dimension\n        for j in range(ranges[i]):\n            element = element[rotations[i]]\n\n        # Update the index to the new element\n        index = arr.index(element)\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, a list of rotations, and an index.\n    It returns the element at the given index after rotating the array by the given number of rotations.\n\n    :param arr: The array to be rotated.\n    :type arr: list\n    :param ranges: A list of ranges that define the rotations.\n    :type ranges: list\n    :param rotations: The number of rotations to be performed.\n    :type rotations: int\n    :param index: The index at which we want to find the element after rotating.\n    :type index: int\n    :return: The element at the given index after rotating the array by the given number of rotations.\n    :rtype: int\n    \"\"\"\n    # Get the original value at the index\n    original_value = arr[index]\n    # Initialize the rotated array\n    rotated_arr = arr.copy()\n    # Perform the rotations\n    for i in range(rotations):\n        # Get the range for the current rotation\n        current_range = ranges[i]\n        # Get the start and end indices for the current rotation\n        start_index = index - current_range // 2\n        end_index = start_index + current_range\n        # Rotate the array\n        rotated_arr[start_index:end_index] = rotated_arr[start_index:end_index][::-1]\n    # Find the element at the final index\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations and index as input and returns the element at the given index after the given number of rotations.\n    \"\"\"\n    if index < 0 or index >= len(arr):\n        return \"Invalid index.\"\n    result = 0\n    for i in range(rotations):\n        result = (result + arr[(index + ranges[i]) % len(arr)]) % len(arr)\n    return arr[result]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def start_withp(words):\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-z]+'\n    result = re.findall(pattern, words)\n    return result[0], result[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word, pattern.sub('', word)\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+' # regex pattern to match words starting with 'p'\n\n    for word in words:\n        if re.match(pattern, word):\n            return word\n\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define the regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # Find all words that match the pattern\n    matches = re.findall(pattern, words)\n\n    # If there are any matches, return the first two words\n    if matches:\n        return matches[0:2]\n\n    # If no matches are found, return an empty list\n    else:\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p\\w+')\n    \n    # Iterate through the list of words and check if each word matches the pattern\n    for word in words:\n        if pattern.match(word):\n            # Return the two words starting with 'p' if a match is found\n            return word, word[1:]\n    # If no match is found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p\\w+'\n    # Use the findall() method of the re module to find all the words in the list that match the pattern\n    matches = re.findall(pattern,''.join(words))\n    # If there are at least two matches, return them as a tuple\n    if len(matches) >= 2:\n        return (matches[0], matches[1])\n    # If there are not at least two matches, return None\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    for word in words:\n        if re.match(r'^p.*', word):\n            return word, word"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    # Initialize the maximum sum increasing subsequence and its prefix sum\n    max_subseq = [0] * (index + 1)\n    prefix_sum = 0\n    # Iterate over the array and find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n    for i in range(n):\n        # Check if the current element is not equal to the given kth element\n        if i!= k:\n            # Update the prefix sum and the current sum\n            prefix_sum += a[i]\n            current_sum += a[i]\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                # Update the maximum sum increasing subsequence and its prefix sum\n                max_subseq = [a[i]]\n                current_sum = a[i]\n                for j in range(i + 1, index + 1):\n                    prefix_sum -= a[j - 1]\n                    current_sum -= a[j - 1]\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n                        max_subseq = [a[j - 1]] + [a[j]]\n                        current_sum = a[j]\n        else:\n            # Update the prefix sum and the current sum\n            prefix_sum += a[i]\n            current_sum += a[i]\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                # Update the maximum sum increasing subsequence and its prefix sum\n                max_subseq = [a[i]]\n                current_sum = a[i]\n                for j in range(i + 1, index + 1):\n                    prefix_sum -= a[j - 1]\n                    current_sum -= a[j - 1]\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n                        max_subseq = [a[j - 1]] + [a[j]]\n                        current_sum = a[j]\n    # Return the maximum sum increasing subsequence and its prefix sum\n    return max_subseq, prefix_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n    # Initialize the maximum sum of increasing subsequence including the ith element\n    max_sum_include_i = 0\n    \n    # Loop through the previous indices from 0 to index-1\n    for i in range(index):\n        # Calculate the maximum sum of increasing subsequence excluding the ith element\n        max_sum_exclude_i = max_sum_increasing_subseq(a, n, i, k)\n        # Calculate the maximum sum of increasing subsequence including the ith element\n        max_sum_include_i = max_sum_exclude_i + a[i]\n        \n        # Update the maximum sum of increasing subsequence\n        max_sum = max(max_sum, max_sum_include_i)\n    \n    # If kth element is before or equal to index, then calculate the maximum sum of increasing subsequence from index to k-1\n    if a[index] <= k:\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index, k-1))\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    if a[index] > k:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, a[index]))\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a list to store the sum of increasing subsequences\n    sums = [0] * (n+1)\n\n    # Traverse through the array and fill in the sums\n    for i in range(1, n+1):\n        sums[i] = max(sums[i-1], a[i-1]+sums[i-2])\n\n    # Initialize a variable to store the maximum sum\n    max_sum = sums[n]\n\n    # Traverse through the array again and find the maximum sum of increasing subsequences with a given kth element which is after i\n    for i in range(n-1, -1, -1):\n        if i+k > n:\n            break\n        max_sum = max(max_sum, sums[i]+sums[i+k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(index + 1, n):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the maximum sum of increasing subsequences from prefix until each index\n    max_sum = [0] * n\n\n    # Initialize variables to keep track of the current maximum sum of increasing subsequence and the current length of the increasing subsequence\n    curr_max = 0\n    curr_len = 0\n\n    # Traverse through the array from index 1 to n-1\n    for i in range(index, n):\n        # Calculate the sum of increasing subsequences from prefix until ith index, including a given kth element which is after i\n        sum_inc_subseq = 0\n        for j in range(i - index + 1):\n            if a[j] <= k:\n                sum_inc_subseq += a[j]\n            else:\n                break\n\n        # Update the maximum sum of increasing subsequences from prefix until ith index, including a given kth element which is after i\n        curr_max = max(sum_inc_subseq, curr_max)\n\n        # Update the maximum sum of increasing subsequences from prefix until ith index, including a given kth element which is after i and store the length of the increasing subsequence\n        if sum_inc_subseq == curr_max:\n            curr_len = i - index + 1\n\n        # If the current sum of increasing subsequences from prefix until ith index, including a given kth element which is after i is greater than the current maximum sum, update the maximum sum and the length of the increasing subsequence\n        if sum_inc_subseq + a[i] > curr_max:\n            curr_max = sum_inc_subseq + a[i]\n            curr_len = i - index + 1\n\n    # Return the maximum sum of increasing subsequences from prefix until ith index, including a given kth element which is after i\n    return curr_max + curr_len"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index\n    and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize a list to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n\n    # Calculate the maximum sum of increasing subsequence ending at each index\n    for i in range(1, n):\n        # If the current element is greater than the kth element, then we cannot include it in the increasing subsequence\n        if a[i] > a[k]:\n            dp[i] = dp[i-1]\n        else:\n            # Calculate the maximum sum of increasing subsequence ending at index i by including the current element\n            dp[i] = max(dp[i-1], a[i] + dp[k-1])\n\n    # Initialize the maximum sum of increasing subsequence starting from index 0\n    max_sum = 0\n\n    # Calculate the maximum sum of increasing subsequence starting from index 0\n    for i in range(n):\n        if i >= k:\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and current sum to 0\n    max_sum = 0\n    current_sum = 0\n    # Initialize the list to store the subsequence\n    subseq = []\n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than or equal to k and the current element is greater than or equal to the previous element, add it to the current sum and update the maximum sum if the current sum is greater\n        if a[i] >= k and a[i] >= a[i-1]:\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n            # If the current element is less than k, reset the current sum and add it to the subsequence list\n            if a[i] < k:\n                current_sum = 0\n                subseq.append(a[i])\n        # If the current element is less than k, reset the current sum\n        else:\n            current_sum = 0\n    # Return the maximum sum and the subsequence list\n    return max_sum, subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    else:\n        return max(max_sum_increasing_subseq(a, n, index, k-1), a[k] + max_sum_increasing_subseq(a, n, index-1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create a list to store the sum of increasing subsequence for each index\n    dp = [0] * (n+1)\n    # base case\n    dp[0] = 0\n    # iterate through the array from 1 to n\n    for i in range(1, n+1):\n        # if the i-th element is greater than k\n        if a[i-1] > k:\n            # set the dp[i] as the maximum of dp[i-1] + a[i-1] and dp[i-2]\n            dp[i] = max(dp[i-1] + a[i-1], dp[i-2])\n        # else set the dp[i] as dp[i-1]\n        else:\n            # set the dp[i] as the maximum of dp[i-1] and dp[i-2]\n            dp[i] = max(dp[i-1], dp[i-2])\n    # return the maximum sum of increasing subsequence\n    return dp[n]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            colon[i] = (i+1,j+1)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    col = deepcopy(tuplex)\n    # Get the indices of the tuple elements that should be in the colon\n    col_indices = [i for i in range(len(tuplex)) if i % n == m]\n    # Iterate over the indices and set the corresponding elements in the colon to None\n    for index in col_indices:\n        col[index] = None\n    # Return the colon\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            copy_tuplex[i], copy_tuplex[i+n] = copy_tuplex[i+n], copy_tuplex[i]\n    return copy_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m], new_tuplex[n]) + new_tuplex[m+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): A tuple.\n        m (int): The number of rows.\n        n (int): The number of columns.\n\n    Returns:\n        tuple: A colon of the input tuple.\n    \"\"\"\n\n    # Create an empty tuple to store the colon\n    colon = ()\n\n    # Iterate over the rows and columns\n    for i in range(m):\n        for j in range(n):\n            # Get the value at (i,j) position of the input tuple\n            val = tuplex[i][j]\n\n            # Add the value to the colon tuple\n            colon += (val,)\n\n    # Return the colon tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    col = col[:m] + (n,) + col[m+1:]\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    for i in range(m):\n        col[i] = None\n    for i in range(m, n):\n        col.append(None)\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        if i % m == 0:\n            result.append((':', tuplex[i]))\n        elif i % n == 0:\n            result.append((' ', tuplex[i]))\n        else:\n            result.append(tuplex[i])\n    return tuple(deepcopy(result))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    length = len(new_tuplex)\n\n    # Set the starting position for the colon\n    start = 0\n\n    # Set the ending position for the colon\n    end = length - 1\n\n    # Create a list to store the colon\n    colon = []\n\n    # Iterate through the tuple elements\n    for i in range(m):\n\n        # Add the colon elements to the list\n        colon.append(new_tuplex[start:end])\n\n        # Set the starting position for the colon\n        start = start + n\n\n        # Set the ending position for the colon\n        end = end - n\n\n    # Return the colon of the tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:m+i] for i in range(n))"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Calculate the maximum product for each list\n    max_product1 = max1 * N\n    max_product2 = max2 * N\n\n    # Initialize the largest products to the maximum value\n    largest_product1 = max_product1\n    largest_product2 = max_product2\n\n    # Find the largest products using the remaining numbers in each list\n    for num in nums1:\n        if num * max_product2 > largest_product1:\n            largest_product1 = num * max_product2\n\n    for num in nums2:\n        if num * max_product1 > largest_product2:\n            largest_product2 = num * max_product1\n\n    # Return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize max_product and count variables\n    max_product = float('-inf')\n    count = 0\n    \n    # Iterate through all possible pairs of numbers\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two numbers\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than max_product, update max_product and count\n            if product > max_product:\n                max_product = product\n                count = 1\n            # If the product is equal to max_product, increment the count\n            elif product == max_product:\n                count += 1\n            \n            # If we have found the specified number of largest products, break out of the loop\n            if count == N:\n                break\n            \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError('N must be less than or equal to the length of the larger list')\n\n    products = []\n    for i in range(len(nums1)):\n        product1 = 1\n        product2 = 1\n        for j in range(i, min(i+N, len(nums1))):\n            product1 *= nums1[j]\n        for j in range(i, min(i+N, len(nums2))):\n            product2 *= nums2[j]\n        products.append(product1 * product2)\n\n    return sorted(products)[-N:]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize the maximum product variables\n    max1 = nums1[0]\n    max2 = nums2[0]\n    max_product = nums1[0] * nums2[0]\n\n    # Iterate over all pairs of numbers from each list\n    for i in range(N):\n        for j in range(N):\n            # Find the current product of the i-th factor from nums1 and the j-th factor from nums2\n            product = nums1[i] * nums2[j]\n\n            # Update the maximum product if the current product is larger than the maximum\n            if product > max_product:\n                max_product = product\n                max1 = nums1[i]\n                max2 = nums2[j]\n\n    # Return the maximum product and the two largest numbers\n    return max_product, max1, max2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the lengths of both input lists are the same\n    if len(nums1)!= len(nums2):\n        return \"Error: input lists must have the same length\"\n\n    # Initialize the result list\n    result = []\n\n    # Loop over all possible combinations of two indices\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            # Calculate the product of the two selected factors\n            product = nums1[i] * nums1[j] * nums2[i] * nums2[j]\n            # Add the product to the result list if it's the largest so far\n            if product > max(result):\n                result = [product]\n            elif product == max(result):\n                result.append(product)\n\n    # Sort the result list in descending order and return the N largest products\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    def max_product(nums):\n        \"\"\"\n        Helper function to find the maximum product of a list.\n        \"\"\"\n        max_val = nums[0]\n        max_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_idx = i\n        return max_val, max_idx\n\n    # Find the maximum product for each list\n    prod1, max_idx1 = max_product(nums1)\n    prod2, max_idx2 = max_product(nums2)\n\n    # Find the indices of the largest factors\n    max_factor1 = max_idx1 // 2\n    max_factor2 = max_idx2 // 2\n\n    # Find the largest N products\n    largest_products = []\n    for i in range(N):\n        max1, max_idx1 = max_product(nums1[max_factor1:] + nums1[:max_factor1])\n        max2, max_idx2 = max_product(nums2[max_factor2:] + nums2[:max_factor2])\n        largest_products.append(max1 * max2)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(len(nums1)):\n        product = 1\n        for j in range(N):\n            product *= max(nums1[i], nums2[j])\n        largest_products.append(product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize the maximum product found so far\n    max_product = float('-inf')\n\n    # Iterate through the indices of the first list\n    for i in range(N):\n        # Initialize the maximum product found so far\n        max_product_i = float('-inf')\n\n        # Iterate through the indices of the second list\n        for j in range(N):\n            # Calculate the product of the current indices of the first list and second list\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is larger than the maximum product found so far\n            if product > max_product_i:\n                max_product_i = product\n\n        # Check if the current maximum product found so far is larger than the maximum product found so far so far\n        if max_product_i > max_product:\n            max_product = max_product_i\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    largest_products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        if product not in largest_products:\n            largest_products.append(product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the first N elements of the two lists\n    product = nums1[0] * nums2[0]\n\n    # Calculate the largest products and their indices\n    largest_products = [product]\n    largest_products_indices = [(0, 0)]\n\n    # Iterate through the remaining N-2 elements\n    for i in range(2, N):\n        # Calculate the product of the i-th element of the two lists\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current largest product, update the largest product and its index\n        if product > largest_products[-1]:\n            largest_products.append(product)\n            largest_products_indices.append((i, i))\n        # Otherwise, check if the current product is part of the current largest product\n        elif product == largest_products[-1]:\n            # If it is, check if the indices of the current element are larger than the last element's indices\n            if (i, i) > largest_products_indices[-1]:\n                largest_products[-1] = product\n                largest_products_indices[-1] = (i, i)\n\n    # Return the list of largest products and their indices\n    return largest_products, largest_products_indices"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers a and b.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \n    :param str1: The string to convert to a tuple of characters.\n    :return: A tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as an input and converts it to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Get the position of the leftmost unset bit\n    bit_position = 0\n    while ((n & (1 << bit_position)) == 0):\n        bit_position += 1\n    # Set the leftmost unset bit to 1\n    n |= (1 << bit_position)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert n to a binary string\n    binary_string = bin(n)[2:]\n\n    # Initialize the index of the first unset bit\n    unset_bit_index = -1\n\n    # Iterate through the binary string from right to left\n    for i in range(len(binary_string)):\n        # If the current bit is 0, then we have found an unset bit\n        if binary_string[i] == '0':\n            unset_bit_index = i\n            break\n\n    # If there is no unset bit, then return n itself\n    if unset_bit_index == -1:\n        return n\n\n    # Set the unset bit to 1\n    binary_string = binary_string[:unset_bit_index] + '1' + binary_string[unset_bit_index+1:]\n\n    # Convert the binary string back to an integer\n    new_n = int(binary_string, 2)\n\n    # Return the new value of n\n    return new_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer n as input and sets the left most unset bit to 1 in it.\n    '''\n    # Initialize variables\n    left_most_unset_bit = 0\n    count = 0\n    \n    # Iterate through each bit of the binary representation of n\n    for i in bin(n)[2:]:\n        if i == '0':\n            count += 1\n            if count == 1:\n                left_most_unset_bit = i\n        else:\n            count = 0\n    \n    # Set the left most unset bit to 1\n    left_most_unset_bit = int(left_most_unset_bit, 2)\n    n |= left_most_unset_bit\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    mask = 0\n    while mask & n == 0:\n        mask <<= 1\n\n    return mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes a positive integer n and returns the number with the left most unset bit set to 1.\n    \"\"\"\n    # Initialize the result variable with the given number\n    result = n\n\n    # Loop through each bit position from left to right\n    for i in range(32):\n        # Check if the current bit is set to 1\n        if (result & (1 << i)) == 1 << i:\n            # If it is, set the corresponding bit to 0 and return the result\n            result ^= (1 << i)\n            return result\n\n    # If all bits are already set to 0, return the original number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and sets the left most unset bit to 1.\n    \"\"\"\n    while n & 1 == 0: # loop while there are even bits left\n        n >>= 1 # shift right by 1 to unset an even bit\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Initialize the counter variable\n    count = 0\n\n    # Iterate through each bit in the binary representation of n\n    while n > 0:\n        # If the current bit is set to 1, increment the counter\n        if n & 1 == 1:\n            count += 1\n        # Shift n one bit to the right\n        n = n >> 1\n\n    # Set the left most unset bit to 1\n    n = n | (1 << count)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a binary number n.\n\n    :param n: a binary number\n    :return: a new binary number with the left most unset bit set to 1\n    \"\"\"\n\n    # Find the position of the leftmost unset bit\n    left_most_unset_bit = n.find('1')\n\n    # Shift the binary number to the left by the position of the leftmost unset bit\n    new_n = ('0' * (left_most_unset_bit + 1)) + n\n\n    return new_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit.\n    \"\"\"\n    # Initialize variables\n    bit_count = 0\n    left_most_unset_bit = 0\n    \n    # Count the number of set bits in the binary representation of n\n    while n:\n        n = n & (n-1)\n        bit_count += 1\n    \n    # Set the left most unset bit to 1\n    left_most_unset_bit = 1 << bit_count - 1\n    \n    # Return the result\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Get the number of set bits in n\n    num_set_bits = sum(1 for bit in bin(n) if bit == '1')\n\n    # Calculate the number of zeros to set to the left of the unset bit\n    zeros_to_set = 32 - num_set_bits\n\n    # Create a binary string with zeros to the left of the unset bit\n    binary_string = bin(zeros_to_set)[2:].zfill(32)\n\n    # Set the leftmost unset bit to 1 in n\n    n = n | int(binary_string, 2)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of a cone\n    # V = (1/3) * pi * r^2 * h\n    vol = (1/3) * math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    vol = (1/3)*math.pi*r*r*h\n    # Return the volume of the cone\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of a cone respectively.\n    The function returns the volume of the cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Define the formula for the volume of a cone\n    v = (1/3) * math.pi * r ** 2 * h\n    \n    # Return the volume of the cone\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate volume using formula for cone\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n        \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0: \n        power += 1 \n        n >>= 1 \n    return power \n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Define a variable to keep track of the highest power of 2 found so far\n    highest = 1\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # If i is a power of 2, update the highest power of 2 found so far\n        if i == 2**int(i):\n            highest = int(i)\n\n        # If i is not a power of 2, move on to the next number\n        else:\n            continue\n\n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer input n and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the highest power of 2 found so far\n    highest = 1\n    \n    # Loop through all the powers of 2 from 2 to n\n    for i in range(2, n+1): \n        # If the current power of 2 is less than the current highest power of 2 found, update the highest power of 2\n        if i < highest: \n            highest = i\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1 or i == 2 or i == 4 or i == 8 or i == 16 or i == 32:\n            return i\n        i *= 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize maximum value\n    max_val = 1\n    \n    # Loop until maximum value is less than or equal to n\n    while max_val <= n:\n        # Check if maximum value is a power of 2\n        if max_val == 1:\n            break\n        elif max_val == 2:\n            break\n        else:\n            # Check if maximum value is a power of 4\n            if max_val % 4 == 0:\n                break\n            # Check if maximum value is a power of 8\n            elif max_val % 8 == 0:\n                break\n            # Check if maximum value is a power of 16\n            elif max_val % 16 == 0:\n                break\n            # Check if maximum value is a power of 32\n            elif max_val % 32 == 0:\n                break\n            # Check if maximum value is a power of 64\n            elif max_val % 64 == 0:\n                break\n            # Check if maximum value is a power of 128\n            elif max_val % 128 == 0:\n                break\n            # Check if maximum value is a power of 256\n            elif max_val % 256 == 0:\n                break\n            # Check if maximum value is a power of 512\n            elif max_val % 512 == 0:\n                break\n            # Check if maximum value is a power of 1024\n            elif max_val % 1024 == 0:\n                break\n            # Check if maximum value is a power of 2048\n            elif max_val % 2048 == 0:\n                break\n            # Check if maximum value is a power of 4096\n            elif max_val % 4096 == 0:\n                break\n            # Check if maximum value is a power of 8192\n            elif max_val % 8192 == 0:\n                break\n            # Check if maximum value is a power of 16384\n            elif max_val % 16384 == 0:\n                break\n            # Check if maximum value is a power of 32768\n            elif max_val % 32768 == 0:\n                break\n            # Check if maximum value is a power of 65536\n            elif max_val % 65536 == 0:\n                break\n            # Check if maximum value is a power of 131072\n            elif max_val % 131072 == 0:\n                break\n            # Check if maximum value is a power of 262144\n            elif max_val % 262144 == 0:\n                break\n            # Check if maximum value is a power of 524288\n            elif max_val % 524288 == 0:\n                break\n            # Check if maximum value is a power of 1048576\n            elif max_val % 1048576 == 0:\n                break\n            # Check if maximum value is a power of 2097152\n            elif max_val % 2097152 == 0:\n                break\n            # Check if maximum value is a power of 4194304\n            elif max_val % 4194304 == 0:\n                break\n            # Check if maximum value is a power of 8388608\n            elif max_val % 8388608 == 0:\n                break\n            # Check if maximum value is a power of 16777216\n            elif max_val % 16777216 == 0:\n                break\n            # Check if maximum value is a power of 33554432\n            elif max_val % 33554432 == 0:\n                break\n            # Check if maximum value is a power of 67108864\n            elif max_val % 67108864 == 0:\n                break\n            # Check if maximum value is a power of 134217728\n            elif max_val % 134217728 == 0:\n                break\n            # Check if maximum value is a power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize variable to store the highest power of 2\n    highest = 0\n\n    # iterate through the numbers from 1 to n\n    for i in range(1, n + 1):\n        # check if the current number is a power of 2\n        if i == 1 << i:\n            # if so, update the highest power of 2\n            highest = i\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 2**(n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes a positive integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 << (31 - (n.bit_length() - 1))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 2\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n + 1):\n            next = prev_prev + prev\n            prev_prev = prev\n            prev = next\n        return next"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    # If n is 0 or 1, return 0 or 1 respectively\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Lucas numbers as 2 and 1\n    lucas_1 = 2\n    lucas_2 = 1\n\n    # Calculate the nth Lucas number using the recurrence relation:\n    # lucas_n = lucas_n - 1/2 * lucas_(n-1)^2 + 1/2 * lucas_(n-2)^2\n    for i in range(2, n+1):\n        lucas_n = lucas_1 - (lucas_1//2) * (lucas_2**2) + (lucas_2//2) * (lucas_1**2)\n        lucas_1 = lucas_2\n        lucas_2 = lucas_n\n\n    # Return the nth Lucas number\n    return lucas_n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string % item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to hold the nested dictionary\n    result = {}\n    \n    # loop through each list in the input lists\n    for i in range(len(l1)):\n        # loop through each element in the first list\n        for j in range(len(l1[i])):\n            # if the current element is not None, add it to the nested dictionary\n            if l1[i][j] is not None:\n                if l1[i][j] in result:\n                    result[l1[i][j]].append(l2[i][j])\n                else:\n                    result[l1[i][j]] = [l2[i][j]]\n    \n    # loop through each list in the input lists\n    for i in range(len(l3)):\n        # loop through each element in the third list\n        for j in range(len(l3[i])):\n            # if the current element is not None, add it to the nested dictionary\n            if l3[i][j] is not None:\n                if l3[i][j] in result:\n                    result[l3[i][j]].append(l3[i][j])\n                else:\n                    result[l3[i][j]] = [l3[i][j]]\n    \n    # return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        sub_dict = {}\n        for j in range(len(l2)):\n            sub_dict[l2[j]] = l3[j]\n        result.append(sub_dict)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function converts more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            key = \" \".join(lst[:j])\n            if key in result:\n                result[key].append(item)\n            else:\n                result[key] = [item]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]]['list'] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # Define a dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list and add each element as a key-value pair to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Parameters:\n    lists (list): List of lists to convert to nested dictionary.\n\n    Returns:\n    dict: Dictionary containing keys as the elements of the first list and values as the elements of the second list.\n    \"\"\"\n    # Create dictionary with keys as elements of the first list\n    d = dict(zip(lists[0], lists[1]))\n    # Loop over lists to create nested dictionary\n    for i in range(2, len(lists)):\n        # Create sub-dictionary\n        sub_dict = {}\n        # Loop over elements of the i-th list\n        for j in range(len(lists[i])):\n            # If element is a key, add it to the sub-dictionary\n            if isinstance(lists[i][j], str):\n                sub_dict[lists[i][j]] = lists[i][j]\n        # Add sub-dictionary to the main dictionary\n        d[i-1] = sub_dict\n    # Return final dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the data\n    data = {}\n\n    # Loop through each list and add the data to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    data = {}\n    # loop through each list and add items to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {\n            'list2': l2[i],\n            'list3': l3[i]\n        }\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes in any number of lists and returns a single nested dictionary.\n\n    Parameters:\n    - args: Any number of lists to be converted to a single nested dictionary.\n\n    Returns:\n    - A nested dictionary with the input lists as keys and their corresponding values as values.\n    '''\n    result = {}\n    for i, lst in enumerate(args):\n        for j, item in enumerate(lst):\n            result[lst[j]] = args[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # creating a dictionary to store the output data\n    output_data = {}\n\n    # iterating over the input lists\n    for i in range(len(l1)):\n        # adding the current input list to the output dictionary as a key\n        output_data[i] = {\n            'list1': l1[i],\n            'list2': l2[i],\n            'list3': l3[i]\n        }\n\n    # returning the output dictionary\n    return output_data"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 6\n        elif n == 4:\n            return 24\n        elif n == 5:\n            return 120\n    \n    return max(helper(n/2) + helper(n/3) + helper(n/4) + helper(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n < 5:\n        return n\n\n    half_sum = get_max_sum(n // 2) + n // 2 + n // 4 + n // 5\n    full_sum = get_max_sum(n)\n\n    return max(half_sum, full_sum)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    \n    # recursive case\n    left_sum = get_max_sum(n//2)\n    middle_sum = get_max_sum(n//3)\n    right_sum = get_max_sum(n//4)\n    end_sum = get_max_sum(n//5)\n    \n    # calculate the maximum sum\n    max_sum = max(left_sum + middle_sum + right_sum + end_sum, n)\n    \n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of integers as input and returns the list with the maximum length.\n    If two or more lists have the same maximum length, the function returns the first list.\n    '''\n    max_length = 0\n    result = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize a variable to store the maximum length\n    max_length = 0\n    # loop through the input list and compare its length to the current maximum length\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    # return the maximum length list\n    return input_list[max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Initialize a variable to keep track of the maximum length\n    max_length = 0\n\n    # Loop through each element in the list\n    for element in input_list:\n        # Add the length of each element to the maximum length variable\n        max_length += len(element)\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Loop through the list and update max_length and max_list accordingly\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    \n    # Return the list with maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Iterate over the tuple elements\n    for element in test_tup:\n        # Check if the element is already in the set\n        if element in unique_set:\n            # If the element is already in the set, return False\n            return False\n        else:\n            # Otherwise, add the element to the set\n            unique_set.add(element)\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a dictionary to store the number of occurrences of each element in the tuple\n    count = {}\n    for element in test_tup:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n    \n    # Check if all the values in the dictionary are 1\n    for value in count.values():\n        if value > 1:\n            return False\n    \n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    # Convert the tuple to a set, which automatically removes duplicates\n    unique_set = set(test_tup)\n    # Check if the set is empty (i.e. all elements were distinct)\n    return bool(unique_set)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary and find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of characters\n    freq = {}\n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    # Find the first character with frequency 1 in the dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Given a string, find the first non-repeating character.\n\n    :param str1: the string to search for the first non-repeating character\n    :return: the first non-repeating character, or None if there are no non-repeating characters\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"No non-repeating character found\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first character in the string that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Iterate through the dictionary and find the first character with a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n            \n    # If no character with a count of 1 is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(f\"{string} starts and ends with the same character.\")\nelse:\n    print(f\"{string} does not start and ends with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers as arguments and returns the median value of the three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median value\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #sorting the three numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    #finding the median of the sorted numbers\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    median = num_list[len(num_list) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        return numbers[length // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the three numbers in ascending order\n    a = sorted([a, b, c])[1]\n    b = sorted([a, b, c])[1]\n    c = sorted([a, b, c])[1]\n\n    # checking if the three numbers form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # calculating the median\n        median = (a + b + c) / 3\n    else:\n        # returning -1 if the three numbers do not form a triangle\n        return -1\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the middle number\n    middle_number = (sorted_numbers[0] + sorted_numbers[1]) / 2\n    \n    # Return the middle number\n    return middle_number"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_list = [a, b, c]\n    a_list.sort()\n    if len(a_list) % 2 == 0:\n        median = (a_list[len(a_list)//2] + a_list[len(a_list)//2 - 1]) / 2\n    else:\n        median = a_list[len(a_list)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    digit_sum = []\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and loop through each character\n        for digit in str(num):\n            # Append the current character to the digit_sum list\n            digit_sum.append(int(digit))\n    # Compute the sum of the digits by converting the list to a string and summing up the integers\n    total_sum = sum(digit_sum)\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_ = 0\n        for digit in str(num):\n            sum_ += int(digit)\n        result.append(sum_)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        sum_digits += digit_sum\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        # Convert the number to a string and split it into a list of characters\n        digits = list(str(num))\n        # Iterate over the characters and add their numerical value to the total\n        for digit in digits:\n            total += int(digit)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Parameters:\n    test_tup1: tuple of integers\n    test_tup2: tuple of integers\n\n    Returns:\n    integer: The bitwise xor of the two tuples.\n    '''\n\n    # Convert the tuples to lists so that we can perform bitwise operations on them\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Perform the bitwise xor operation across the lists\n    xor_list = [a ^ b for a, b in zip(list1, list2)]\n\n    # Convert the xor_list back to a tuple and return it\n    return tuple(xor_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the corresponding elements of the tuples\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n    # Return the result tuple\n    return tuple(result_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a variable to store the result of the bitwise xor operation\n    result = 0\n    \n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the current element in the first tuple and the corresponding element in the second tuple\n        result |= (test_tup1[i] ^ test_tup2[i])\n    \n    # Return the result of the bitwise xor operation\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as test_tup1\n    result_tup = tuple([0] * len(test_tup1))\n    \n    # Iterate through each element in the test_tup1 and test_tup2 tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the i-th element of test_tup1 and the i-th element of test_tup2\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the output tuple\n    output_tup = ()\n\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation\n        xor_val = test_tup1[i] ^ test_tup2[i]\n        # add the result to the output tuple\n        output_tup += (xor_val,)\n\n    return output_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Perform bitwise xor operation across the two tuples using the ^ operator\n    xor_result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for tup in set(test_list):\n        count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_list = set(test_list)\n    # Return the length of the set\n    return len(set_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each tuple in the list\n    freq = {}\n    # Loop through each tuple in the list\n    for t in test_list:\n        # If the tuple is not already in the dictionary, add it with a frequency of 1\n        if t not in freq:\n            freq[t] = 1\n        # If the tuple is already in the dictionary, increment its frequency by 1\n        else:\n            freq[t] += 1\n    # Return the total number of unique tuples in the list\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate through the list and add each tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        for tup in item:\n            if tup in freq_dict:\n                freq_dict[tup] += 1\n            else:\n                freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize an empty list to store the resultant tuples\n    result_list = []\n\n    # Iterate over the two tuples and add the elements at the same index\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # Return the resultant list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples should be equal\")\n        return None\n    \n    # Initialize a new tuple to store the sum of the two tuples\n    sum_tup = ()\n    \n    # Iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element at the current index of the first tuple is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # If it is a tuple, recursively call the function on the sub-tuple and append the result to the sum_tup\n            sum_tup += add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            # If it is not a tuple, simply add the element at the current index of the first tuple to the element at the same index of the second tuple\n            sum_tup += (test_tup1[i] + test_tup2[i],)\n    \n    # Return the sum_tup\n    return sum_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same number of elements.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two given nested tuples must have the same number of elements.\")\n    elif len(test_tup1) == 0:\n        return ([], [])\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                sub_result = add_nested_tuples(test_tup1[i], test_tup2[i])\n                result_tup.append(sub_result[0])\n            elif isinstance(test_tup1[i], (list, tuple)) and isinstance(test_tup2[i], (list, tuple)):\n                sub_result = add_nested_tuples(test_tup1[i], test_tup2[i])\n                result_tup.append(sub_result[0])\n            else:\n                if isinstance(test_tup1[i], tuple) or isinstance(test_tup2[i], tuple):\n                    raise ValueError(\"The two given nested tuples must have all elements to be tuples or lists.\")\n                elif isinstance(test_tup1[i], (list, tuple)) or isinstance(test_tup2[i], (list, tuple)):\n                    raise ValueError(\"The two given nested tuples must have all elements to be tuples or lists.\")\n                else:\n                    result_tup.append(test_tup1[i] + test_tup2[i])\n        return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize an empty list to store the resultant tuple\n    result_tup = []\n\n    # Iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element of the first tuple is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # If it is, call the add_nested_tuples function recursively on it and append the result to the result_tup\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If it's not a tuple, simply add the elements and append the result to the result_tup\n            result_tup.append(test_tup1[i] + test_tup2[i])\n\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = []\n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # Iterate through each element in both tuples\n        for i in range(len(test_tup1)):\n            # Add the corresponding elements of the two tuples\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    else:\n        # Raise an error if the tuples have different lengths\n        raise ValueError('Both input tuples must have the same length.')\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check if both input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples should be of the same length\")\n        return\n    \n    # initialize a new list to store the sum of tuples\n    result = []\n    \n    # iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # get the elements of the two tuples at the same index i\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # perform addition of the elements\n        result.append(elem1 + elem2)\n    \n    # return the result as a nested tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements\")\n        return\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif type(test_tup1[i]) == tuple or type(test_tup2[i]) == tuple:\n            print(\"Both elements must be tuples\")\n            return\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b\n\nprint(minimum(5,10)) #Output: 5\nprint(minimum(10,5)) #Output: 5\n"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    # Check if the tuple1 contains the element in tuplex\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two arguments: tuplex and tuple1.\n    tuplex is the tuple that we want to check if it contains a given element.\n    tuple1 is the tuple that we want to check if it contains all the elements of tuplex.\n    \n    The function checks if tuplex contains all the elements of tuple1. If so, it returns True.\n    If not, it returns False.\n    '''\n    for i in tuple1:\n        if i not in tuplex:\n            return False\n    return True"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which the element is to be checked.\n    tuple1 (tuple): The tuple containing the element to be checked.\n\n    Returns:\n    bool: True if the element exists within the tuple, False otherwise.\n    \"\"\"\n\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} found in tuple\")\n    else:\n        print(f\"{tuplex} not found in tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        remainder = x % 2\n        parity += remainder\n        x = x // 2\n    if parity % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # calculate the parity of the number\n    parity = x % 2\n    # check whether the parity is odd or even\n    if parity == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a positive integer x as input and returns True if it is odd, False otherwise.\n    '''\n    if x % 2 == 0: # if x is even\n        return False\n    else: # if x is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return \"The parity of number\", x, \"is even.\"\n    else:\n        return \"The parity of number\", x, \"is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Define a function to check if a number is odd or even\n    def is_odd(n):\n        return n % 2!= 0\n\n    # Check if the given number is even or odd\n    if is_odd(x):\n        print(x, \"is odd\")\n    else:\n        print(x, \"is even\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if the number is even, the parity is 1\n    if x % 2 == 0: \n        return 1\n    # if the number is odd, the parity is 0\n    else: \n        return 0"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2\n    if parity == 1:\n        print(str(x) + \" is odd parity\")\n    else:\n        print(str(x) + \" is even parity\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the result to be the same as the input number\n    result = n\n\n    # Iterate through the digits of the input number\n    for digit in str(n):\n        # Calculate the position of the current digit\n        position = int(digit) - 1\n\n        # If the current digit is at the first position, move it to the end\n        if position == 0:\n            result = int(digit) + int(result[-1])\n        # If the current digit is not at the first position, move it to its previous position\n        else:\n            result = result[:position] + result[position+1:]\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    \n    if max_digit == 9:\n        return 10\n    else:\n        digits[digits.index(max_digit)] += 1\n        \n        if digits[digits.index(max_digit)] == 10:\n            digits[digits.index(max_digit)] = 0\n            digits[digits.index(max_digit-1)] += 1\n        \n        return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Check if the digit is 9\n        if digit_int == 9:\n            # If it is, increment the result by 1\n            result += 1\n        else:\n            # If it's not, subtract the digit from the result and shift it to the right\n            result -= digit_int\n\n            # Loop until the result is less than 10\n            while result < 10:\n                # Increment the result by 1\n                result += 1\n\n        # Check if the result is greater than or equal to 10^n - 1\n        if result >= 10**(len(num_str)-1) - 1:\n            # If it is, break out of the loop and return the result\n            break\n\n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize a variable to store the next bigger number\n    next_bigger = 0\n    \n    # Loop through each digit of the string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Check if the digit is a 9\n        if digit_int == 9:\n            # If it is, check if the next bigger number already has the 9\n            next_digit = next_bigger % 10\n            if next_digit == 9:\n                # If it does, increment the next bigger number by 1\n                next_bigger += 1\n            else:\n                # If it doesn't, increment the next bigger number by 10\n                next_bigger += 10\n        else:\n            # If it's not a 9, increment the next bigger number by 1\n            next_bigger += 1\n            \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the index of the largest digit\n    max_index = 0\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) > int(num_str[max_index]):\n            max_index = i\n\n    # Swap the digits at the beginning and the largest digit\n    num_str = num_str[:max_index] + num_str[max_index:] + num_str[:max_index]\n\n    # Convert the string back to an integer and return it\n    return int(num_str)\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Define a dictionary to map digits to their positions in the number\n    digit_positions = {'1': 0, '2': 1, '3': 2, '4': 3, '5': 4, '6': 5, '7': 6, '8': 7, '9': 8, '0': 9}\n    # Define a list to store the digits of the number in reverse order\n    digits_list = [int(d) for d in str(n)]\n    # Sort the digits list in reverse order\n    digits_list.sort(reverse=True)\n    # Define a variable to store the resultant number\n    result = 0\n    # Iterate over the digits list and add them to the result\n    for digit in digits_list:\n        result += digit_positions[str(digit)] * (10 ** (len(digits_list) - digits_list.index(digit)))\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    def is_valid(n):\n        digits = [int(digit) for digit in str(n)]\n        digits.sort(reverse=True)\n        return digits == list(range(len(digits) + 1, 10))\n    \n    def next_bigger(n):\n        digits = [int(digit) for digit in str(n)]\n        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < digits[i + 1]:\n                digits[i], digits[i + 1] = digits[i + 1], digits[i]\n                return int(''.join(str(digit) for digit in digits))\n        return None\n    \n    i = 1\n    while is_valid(n):\n        n = next_bigger(n)\n        i += 1\n    \n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    # Split the string into a list of digits\n    digits = [int(d) for d in num]\n    # Reverse the list of digits\n    digits.reverse()\n    # Find the largest digit\n    largest = max(digits)\n    # Reverse the digits that are greater than the largest digit\n    for i in range(len(digits)):\n        if digits[i] > largest:\n            digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1], digits[i]\n    # Convert the list of digits back to a string and return the result\n    return ''.join(map(str, digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        print(\"Please enter a positive integer.\")\n        return\n    \n    # create a string of the digits of n\n    digits = [int(d) for d in str(n)]\n    \n    # reverse the order of the digits\n    digits = digits[::-1]\n    \n    # create a new number by concatenating the digits in reverse order\n    next_bigger = int(''.join(str(d) for d in digits))\n    \n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Find the index of the maximum element in the given number\n    max_index = n.find(max(set(str(n))))\n\n    # Rearrange the digits of the number by shifting them to the right by max_index positions\n    new_n = int(str(n)[max_index:]) + int(str(n)[:max_index])\n\n    # Add leading zeros to the new number if it's less than 10^n\n    zeros = n.find(\"0\")\n    if zeros == -1:\n        new_n = \"0\" + str(new_n)\n    else:\n        zeros_count = len(str(n[:zeros]))\n        if zeros_count < max_index:\n            new_n = \"0\" * (max_index - zeros_count) + str(new_n)\n        else:\n            new_n = str(new_n)\n\n    return int(new_n)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize two heaps to store the smallest k elements found so far\n    min_heap1 = []\n    min_heap2 = []\n\n    # initialize two pointers for each array\n    i = j = 0\n\n    while k > 0:\n        # compare the current element of nums1 with the smallest element in min_heap1, or the smallest element of nums2 if nums1 is empty\n        if not min_heap1 or nums1[i] < min_heap1[0]:\n            if not min_heap2 or nums2[j] < min_heap2[0]:\n                # if the current element of nums1 is smaller than the smallest element in min_heap1 or the smallest element of nums2,\n                # push it onto min_heap1 and pop elements from min_heap2 until it is smaller than the current element of nums1.\n                heapq.heappush(min_heap1, nums1[i])\n                if min_heap1[0] == nums2[j]:\n                    k -= 1\n                    heapq.heappush(min_heap1, -heapq.heappop(min_heap2))\n            else:\n                # otherwise, push the current element of nums1 onto min_heap1 and pop elements from min_heap2 until it is smaller than the smallest element of nums2.\n                heapq.heappush(min_heap1, nums1[i])\n                while min_heap1[0]!= nums2[j]:\n                    heapq.heappush(min_heap1, -heapq.heappop(min_heap2))\n                    k -= 1\n        else:\n            # if the current element of nums1 is greater than or equal to the smallest element in min_heap1,\n            # compare the current element of nums2 with the smallest element in min_heap2, or the smallest element of nums1 if nums2 is empty\n            if not min_heap2 or nums2[j] < min_heap2[0]:\n                if not min_heap1 or nums1[i] < min_heap1[0]:\n                    # if the current element of nums2 is smaller than the smallest element in min_heap2 or the smallest element of nums1,\n                    # push it onto min_heap2 and pop elements from min_heap1 until it is smaller than the current element of nums2.\n                    heapq.heappush(min_heap2, nums2[j])\n                    if min_heap2[0] == nums1[i]:\n                        k -= 1\n                        heapq.heappush(min_heap2, -heapq.heappop(min_heap1))\n                else:\n                    # otherwise, push the current element of nums2 onto min_heap2 and pop elements from min_heap1 until it is smaller than the smallest element of nums1.\n                    heapq.heappush(min_heap2, nums2[j])\n                    while min_heap2[0]!= nums1[i]:\n                        heapq.heappush(min_heap2, -heapq.heappop(min_heap1))\n                        k -= 1\n        i += 1\n        j += 1\n\n    # return the k smallest pairs\n    return min_heap1[0:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, 0))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    for num in nums2:\n        if heap[0][0] <= num:\n            heapq.heappush(heap, (heap[0][0], 1))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append((heapq.heappop(heap)[0], heapq.heappop(heap)[1]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1, heap2 = [], []\n\n    for num1 in nums1:\n        heapq.heappush(heap1, -num1)\n        while len(heap1) > k:\n            heapq.heappop(heap1)\n        for num2 in nums2:\n            if len(heap2) < k:\n                if -num2 > heapq.heappop(heap1):\n                    heapq.heappush(heap2, -num2)\n            else:\n                break\n            pairs.append([num1, -heap2[0]])\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the pairs\n    pairs = []\n    \n    # Iterate over the first array\n    for num1 in nums1:\n        # Create a new heap with the second array as the priority queue\n        heapq.heapify(nums2)\n        \n        # Iterate over the second array\n        for _ in range(k):\n            # If the heap is not empty, add the pair of elements to the pairs list and pop the smallest element from the heap\n            if heapq.heappop(nums2) < num1:\n                pairs.append((num1, heapq.heappop(nums2)))\n            else:\n                break\n            \n    # Sort the pairs list in ascending order based on the first element\n    pairs.sort(key=lambda x: x[0])\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Create a min-heap of tuples (distance, (i, j))\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            dist = abs(nums1[i] - nums2[j])\n            heapq.heappush(heap, (dist, (i, j)))\n\n    # Create a result list to store the k smallest pairs\n    result = []\n\n    # Find the k smallest pairs\n    for _ in range(k):\n        dist, (i, j) = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n\n    result = []\n    left = 0\n    right = 0\n\n    while k > 0:\n        if right < len(nums2) and nums2[right] - nums2[left] == nums1[right] - nums1[left]:\n            result.append([nums1[left], nums2[right]])\n            k -= 1\n            right += 1\n        elif right < len(nums2):\n            left += 1\n        elif left < len(nums1):\n            right += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize min_heap of size k\n    min_heap = []\n    \n    # loop through first array and second array\n    for num1 in nums1:\n        for num2 in nums2:\n            # check if current pair is less than or equal to the smallest element in the min_heap\n            if num1 + num2 <= heapq.heappop(min_heap):\n                heapq.heappush(min_heap, num1 + num2)\n            \n            # if the size of the min_heap is greater than k, remove the largest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n                \n    # return the k smallest elements in the min_heap\n    return min_heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n    # create two pointers to iterate through the input arrays\n    i, j = 0, 0\n    # initialize the count of pairs found\n    count = 0\n    # loop until we have found k pairs\n    while count < k:\n        # if the pointers i and j are within the bounds of the arrays\n        if i < len(nums1) and j < len(nums2):\n            # if the elements at the pointers i and j are smaller than the minimum element in the heap\n            if nums1[i] < nums1[i+1] and nums2[j] < nums2[j+1]:\n                # add the pair (nums1[i], nums2[j]) to the heap\n                heapq.heappush(min_heap, (nums1[i], nums2[j]))\n                # increment the count of pairs found\n                count += 1\n                # increment both pointers\n                i += 1\n                j += 1\n            # if the element at pointer i is smaller than the minimum element in the heap\n            elif nums1[i] < nums1[i+1]:\n                # increment the pointer i\n                i += 1\n            # if the element at pointer j is smaller than the minimum element in the heap\n            elif nums2[j] < nums2[j+1]:\n                # increment the pointer j\n                j += 1\n    # return the k smallest pairs found\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    for i in range(len(nums1)):\n        # Add each element from nums1 to the heap\n        heapq.heappush(min_heap, (-nums1[i], i))\n        # If the heap has more than k elements, remove the smallest element from nums2\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    # Sort the heap in decreasing order of the elements in each pair\n    result = []\n    while min_heap:\n        # Extract the smallest k elements from the heap and store them in a result list\n        pair = (-heapq.heappop(min_heap)[0], -heapq.heappop(min_heap)[1])\n        heapq.heappush(min_heap, pair)\n        result.append(pair)\n    # Reverse the result list to get the largest k pairs first\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap1 = []\n    heap2 = []\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    \n    result = []\n    \n    for num1 in nums1:\n        while len(heap1) > 0 and heap1[0] > num1:\n            heapq.heappop(heap1)\n        while len(heap2) > 0 and heap2[0] > num1 - heap1[0]:\n            heapq.heappop(heap2)\n        if len(heap1) == 0:\n            heapq.heappush(heap2, num1)\n        else:\n            heapq.heappush(heap1, num1)\n        if len(heap1) == len(heap2) and len(result) < k:\n            result.append((heap1[0], num1))\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the minimum product\n    from the pairs of tuples within the list.\n    \"\"\"\n    if len(list1) < 2:\n        return None\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if i!= j:\n                min_product = min(min_product, list1[i][j]*list1[j][i])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product of pairs of tuples from the given list.\n\n    Args:\n    - lst: list of tuples\n\n    Returns:\n    - minimum product of pairs of tuples from the given list\n    \"\"\"\n\n    # Calculate the product of the first element of each tuple\n    lst_product = [tuple(a) for a in lst]\n\n    # Find the minimum product of pairs of tuples\n    min_product = min(lst_product)\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables for minimum product and the number of pairs\n    min_product = float('inf')\n    num_pairs = 0\n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Iterate through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it to the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                # If the product is smaller than the current minimum product, update the minimum product and the number of pairs\n                min_product = product\n                num_pairs = 2\n            elif product == min_product:\n                # If the product is equal to the current minimum product, increment the number of pairs\n                num_pairs += 1\n    # Return the minimum product and the number of pairs\n    return min_product, num_pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of pairs of tuples.\n\n    Parameters:\n    lst (list of tuples): A list of tuples.\n\n    Returns:\n    minimum_product (int): The minimum product of pairs of tuples from the given list.\n    \"\"\"\n\n    # Initialize the minimum product to be infinity\n    minimum_product = float('inf')\n\n    # Iterate over all the pairs of tuples in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # Calculate the product of the two tuples\n            product = lst[i][0] * lst[j][1]\n            # If the current product is less than the minimum product, update the minimum product\n            if product < minimum_product:\n                minimum_product = product\n\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Extract the two values from the tuple and update the minimum and maximum values\n        val1, val2 = tup\n        min_val = min(min_val, val1 * val2)\n        max_val = max(max_val, val1 * val2)\n\n    # Return the minimum product\n    return min_val * max_val"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Check if the input list is empty or not\n    if not list1:\n        return 0\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through the list and calculate the product of the pairs of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = float('inf')\n    min_pair = None\n\n    # iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # compute the product of the tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            # update the minimum product and corresponding pair if necessary\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n\n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    min_product = float('inf')\n    product = 1\n    \n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the i-th tuple and j-th tuple\n            product = list1[i][0] * list1[j][1]\n            \n            # if the product is less than the minimum product, update the minimum product\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value in it.\n    '''\n    min_num = listval[0]  # Initialize the minimum value to the first element of the list\n    for num in listval:\n        if num < min_num:\n            min_num = num  # If a smaller number is found, update the minimum value\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value from the list.\n    '''\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    \n    # Iterate through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current value is less than the current minimum value\n        if listval[i] < min_val:\n            # If it is, update the minimum value\n            min_val = listval[i]\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word and join them back together\n    camel_case = ''.join([word.capitalize() for word in words])\n    \n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given word to snake case\n    snake_word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Convert the snake case word to camel case\n    camel_word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', snake_word).lower()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:]])\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_word = re.sub('([A-Z]+)', lambda x: '_' + x.group(1).lower(), word)\n    # remove leading and trailing underscores\n    camel_word = re.sub('^_|_$', '', camel_word)\n    return camel_word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string using regular expressions.\n    '''\n    # convert snake case to camel case using regular expressions\n    camel_case = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # remove first and last underscore from the string\n    camel_case = camel_case[1:-1]\n    # return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    return camel_case.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(.?)'\n    return re.sub(pattern, lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using snake case as the separator\n    words = re.findall(r'([A-Z]+)', word)\n    # Convert each word to camel case\n    camel_words = [word.capitalize() for word in words]\n    # Join the camel case words into a single string\n    camel_word = ''.join(camel_words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove underscores\n    word = re.sub(r'_', '', word)\n    # Convert the first letter to uppercase\n    word = word.capitalize()\n    # Convert the rest of the letters to lowercase\n    word = word[1:] + word[0]\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the string by underscores\n    snake_list = word.split('_')\n\n    # Capitalize the first letter of each word in the snake list\n    camel_list = [snake.capitalize() for snake in snake_list]\n\n    # Join the capitalized words into a camel case string\n    return ''.join(camel_list)\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0 or n > len(list1):\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0 or n > len(list1):\n        return None\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return None\n\n    # Check if the index is valid\n    if n > len(list1) or n < 1:\n        return None\n\n    # Extract the nth element from the list\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize a variable to store the nth element\n    nth_element = None\n    # loop through the list of tuples and check if the current element is the nth element\n    for i in range(len(list1)):\n        if i == n-1:\n            # if it is, assign it to the variable\n            nth_element = list1[i]\n            # break out of the loop\n            break\n    # return the nth element\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): a sequence of values to search for overlap with list2\n    list2 (list): a sequence of values to search for overlap with list1\n\n    Returns:\n    bool: True if any value in list1 exists in list2, False otherwise\n    \"\"\"\n\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:  \n        if i in list2:  \n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set from list2 to remove duplicates\n    set2 = set(list2)\n    # Iterate through list1 and check if any value exists in set2\n    for value in list1:\n        if value in set2:\n            print(\"The value\", value, \"exists in both the lists.\")\n            return True\n    # If no value is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a dictionary to store the frequency of each value in list2\n    freq = {}\n    for item in list2:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # iterate through list1 and check if any value in list1 exists in freq\n    for item in list1:\n        if item in freq:\n            freq[item] -= 1\n        else:\n            return False\n    \n    # if we made it through the entire loop without returning False, then there was no overlapping values\n    return True"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any common element between them,\n    False otherwise.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes in two sequences and returns a boolean value indicating whether any value in the first sequence exists in the second sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = max1\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair with the highest product. \n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    return (max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max1*max2, min1*min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a pair\n    of integers with the highest product from the array.\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max(max1 * max2, min1 * min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables to keep track of the current maximum and minimum products and their indices\n    max_product = -float('inf')\n    max_index = -1\n    min_product = float('inf')\n    min_index = -1\n    \n    # Iterate over the array and update the maximum and minimum products and their indices\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_index = i\n    \n    # Return the indices of the maximum and minimum products\n    return max_index, min_index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, returns the pair with the highest product.\n    \"\"\"\n    # Use a nested loop to iterate through all possible pairs of elements in the array\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] * arr[j]) > max_pair[0]:\n                max_pair = (arr[i] * arr[j], arr[i] * arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    return max1 * max2, max1 * min1 * min2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create an empty dictionary to store common elements as keys and their frequency as values\n    common_dict = {}\n\n    # loop through each tuple in the list\n    for i in Input:\n        # extract the first element of the tuple\n        element = i[0]\n\n        # check if the element is already in the dictionary\n        if element in common_dict:\n            # increment the frequency of the element in the dictionary\n            common_dict[element] += 1\n        else:\n            # add the element to the dictionary with a frequency of 1\n            common_dict[element] = 1\n\n    # create an empty list to store common elements\n    common_list = []\n\n    # loop through each element in the dictionary\n    for key in common_dict:\n        # check if the element has a frequency of 1\n        if common_dict[key] == 1:\n            # add the element to the list\n            common_list.append(key)\n\n    # return the list of common elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains the common first element of the input tuples.\n    '''\n\n    # create an empty list to store the common elements\n    common = []\n\n    # iterate over the input list of tuples\n    for tuple in Input:\n        # get the first element of the tuple\n        first = tuple[0]\n\n        # check if the first element has already been added to the common list\n        if first in common:\n            # if it has, append the tuple to the output list\n            Output.append(tuple)\n        else:\n            # otherwise, append the first element to the common list and append the tuple to the output list\n            common.append(first)\n            Output.append(tuple)\n\n    # return the output list of tuples\n    return Output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        if len(i) > 0:\n            result.append(i[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_element = None\n    common_count = 0\n    for i in Input:\n        if i[0] == common_element:\n            common_count += 1\n        elif i[0] is None or common_element is None:\n            common_element = i[0]\n            common_count = 1\n        elif common_element is not None and i[0] is not None:\n            common_element = None\n    return common_element, common_count"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        else:\n            if item[0] == common_element:\n                return common_element\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = None\n    for tuple_obj in Input:\n        if tuple_obj[0] is not None:\n            if common_first is None:\n                common_first = tuple_obj[0]\n            elif common_first!= tuple_obj[0]:\n                common_first = None\n                break\n    return common_first\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tuple1 in Input:\n        for tuple2 in Input:\n            if tuple1[0] == tuple2[0]:\n                common_elements.append(tuple1[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple has a common first element.\n    '''\n    Common_list = []\n    for i in range(len(Input)): \n        for j in range(len(Input)): \n            if j!= i and Input[i][0] == Input[j][0]: \n                Common_list.append(Input[i])\n    return Common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_First_Element = []\n    for tuple in Input:\n        Common_First_Element.append(tuple[0])\n    return Common_First_Element\n\nInput_List = [(1,2), (1,3), (2,3), (4,5), (4,6)]\nprint(group_tuples(Input_List))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_element is None:\n                    common_element = Input[i][0]\n                else:\n                    common_element = Input[i][0]\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_element = item\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element whose length is the maximum.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    max_elem = [x for x in lst if len(x) == max_len][0]\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_numbers = 0\n    for number in list1:\n        rounded_number = round(number)\n        sum_of_numbers += rounded_number\n    print(sum_of_numbers * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Initialize the sum and the length of the list\n    total_sum = 0\n    length_of_list = len(list1)\n\n    # Round every number of the list and add to the sum\n    for i in range(length_of_list):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n\n    # Print the result\n    print(\"Total sum: \", total_sum)\n    print(\"Total length: \", length_of_list)\n    print(\"Result: \", total_sum * length_of_list)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(x) for x in list1])\n    length = len(list1)\n    print(total * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]\n    cube_sum = sum([i**3 for i in even_numbers])\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #initialize variables\n    cube_sum = 0\n    num = 2\n    \n    #loop through the first n even natural numbers\n    while num <= n: \n        #calculate the cube sum of the even natural number\n        cube_sum += num ** 3\n        #increment the number to check next\n        num += 2\n    \n    #return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables for sum and counter\n    sum = 0\n    count = 0\n\n    # Loop through first n even numbers\n    for i in range(2, n+1, 2):\n        # Calculate cube of i and add to sum\n        sum += i**3\n        # Increment counter\n        count += 1\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i**3\n    return result"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 3\n    return total"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1] # remove the trailing comma"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as arguments and concatenates each element of the tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    \"\"\"\n    Concatenate each element of a tuple using the given delimiter.\n    \"\"\"\n    # Create a list to hold the concatenated elements\n    concatenated_list = []\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # If this is the first element, use the delimiter as the first element\n        if concatenated_list == []:\n            concatenated_list.append(str(element))\n        # Otherwise, concatenate the element with the delimiter\n        else:\n            concatenated_list.append(delimiter + str(element))\n    # Return the concatenated list as a string\n    return \"\".join(concatenated_list)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # creating an empty string\n    concatenated_str = \"\"\n    # looping through each element of the tuple\n    for element in test_tup:\n        # concatenating the element with the delimiter\n        concatenated_str += str(element)\n    # returning the concatenated string\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum_cubes = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # compute cube of i\n        cube = i**3\n        # add cube to sum of cubes\n        sum_cubes += cube\n    # divide sum of cubes by n\n    avg_cube = sum_cubes/n\n    # return the average of cubes\n    return avg_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1,n+1):\n        sum_cubes += i**3\n        count += 1\n    average_of_cubes = sum_cubes/count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes / n\n    print(\"The average of cubes of the first {} natural numbers is: {}\".format(n, average_cubes))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*i*i\n    avg = total/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize the sum to zero\n    sum_of_cubes = 0\n\n    #loop n times\n    for i in range(n):\n        #cube of i and add to sum\n        sum_of_cubes += i**3\n\n    #find average of sum of cubes\n    avg_of_cubes = sum_of_cubes/n\n\n    #return the average of cubes\n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i**3  \n    return total / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_indices.append(i)\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        if i in rear_indices:\n            rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_elements = []\n    for index, string in enumerate(test_tuple):\n        if index == len(test_tuple) - 1:\n            rear_index_elements.append(string)\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_elements = []\n    for string in test_tuple:\n        extracted_elements.append(string[-1])\n    return extracted_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = 0\n    extracted_rear = []\n    for element in test_tuple:\n        if isinstance(element, str):\n            extracted_rear.append(element[rear_index])\n        else:\n            extracted_rear.append(element)\n        rear_index += 1\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [str(x)[::-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = 0\n    rear_list = []\n\n    for i in test_tuple:\n        if type(i) == str:\n            rear_list.append(i[rear_index])\n        elif type(i) == list:\n            for j in i:\n                if type(j) == str:\n                    rear_list.append(j[rear_index])\n        else:\n            print(\"Error: Invalid input type.\")\n\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for lst1 in lst:\n        if x in lst1:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == list and x in item:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Use a list comprehension to filter the odd numbers from the given list.\n    filtered_nums = [num for num in nums if num % 2!= 0]\n    return filtered_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of integers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n    dt = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Search for the pattern in the input string\n    match = re.search(pattern, dt)\n    \n    # If the pattern is found, extract the parts of the date\n    if match:\n        year, month, day = match.groups()\n        # Format the date in the desired format\n        formatted_date = day + '-' + month + '-' + year\n        return formatted_date\n    else:\n        # If no match is found, return the original date as it is\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define regex pattern to match date string in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Use re.search() to match date string in yyyy-mm-dd format\n    match = re.search(pattern, dt)\n\n    # Check if match is found\n    if match:\n        # Use datetime module to convert date string to dd-mm-yyyy format\n        from datetime import datetime\n        date_obj = datetime.strptime(dt, '%Y-%m-%d')\n        return date_obj.strftime('%d-%m-%Y')\n    else:\n        # Return original date string if no match found\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Remove all the non-numeric characters from the date\n    dt = re.sub(r'[^\\d]', '', dt)\n    # Split the date into day, month, and year components\n    parts = dt.split('-')\n    # Convert the day, month, and year components to the desired format\n    day, month, year = int(parts[0]), int(parts[1]), int(parts[2])\n    new_dt = f\"{day:02d}-{month:02d}-{year}\"\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match pattern and replace sub-matches with re.sub\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    dd_mm_yyyy = dt.replace(f'{yyyy_mm_dd.group(1)}-{yyyy_mm_dd.group(2)}-{yyyy_mm_dd.group(3)}', f'{yyyy_mm_dd.group(3)}-{yyyy_mm_dd.group(2)}-{yyyy_mm_dd.group(1)}')\n    return dd_mm_yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.search(pattern, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return day + \"-\" + month + \"-\" + year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regular expression to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match date in given format\n    date_match = re.match(pattern, dt)\n    \n    # return date in dd-mm-yyyy format\n    return date_match.group(2) + '-' + date_match.group(3) + '-' + date_match.group(1)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression to match a valid date format\n    date_format = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    \n    # Check if the date format is valid\n    if not date_format.match(dt):\n        return dt\n    \n    # Extract the day, month, and year components from the date string\n    year, month, day = int(dt[:4]), int(dt[5:7]), int(dt[8:])\n    \n    # Format the date string according to the desired format\n    desired_format = '%d-%m-%Y'\n    new_dt = desired_format % (day, month, year)\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the date format in the input string using the regular expression pattern\n    match = re.search(pattern, dt)\n\n    # If the match is found, extract the day, month, and year parts\n    if match:\n        day = match.group(2)\n        month = match.group(1)\n        year = match.group(3)\n\n        # Convert the year, month, and day to the desired format\n        return day + '-' + month + '-' + year\n    else:\n        # If no match is found, return the input string as is\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                temp = my_list[j-gap]\n                my_list[j-gap] = my_list[j]\n                my_list[j] = temp\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the maximum gap\n    n = len(my_list)\n    max_gap = n//2\n    \n    # Do insertion sort for small gaps\n    while max_gap > 0:\n        for i in range(max_gap, n):\n            key = my_list[i]\n            j = i\n            while j >= max_gap and my_list[j-max_gap] > key:\n                my_list[j] = my_list[j-max_gap]\n                j -= max_gap\n            my_list[j] = key\n        max_gap //= 2\n    \n    # Do insertion sort for large gaps\n    while max_gap < n//2:\n        for i in range(max_gap, n):\n            key = my_list[i]\n            j = i\n            while j >= max_gap and my_list[j-max_gap] > key:\n                my_list[j] = my_list[j-max_gap]\n                j -= max_gap\n            my_list[j] = key\n        max_gap *= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    # Sort the array by applying the shell sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes a list as input and sorts it using Shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    # Calculate the size of the increment\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    # Perform the shell sort algorithm\n    for gap in range(h, 0, -1):\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        \n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Find the largest gap\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap to half of the previous gap\n        gap = gap // 2\n\n        # Sort elements in the current gap\n        for i in range(gap, n):\n            # Insert the element in its correct position in the gap sorted region\n            for j in range(i, gap, gap):\n                # Swap the elements if they are not in correct order\n                if my_list[j] > my_list[j+gap]:\n                    my_list[j], my_list[j+gap] = my_list[j+gap], my_list[j]\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [(a and b) for a, b in zip(test_tup1, test_tup2)]\n    else:\n        raise ValueError(\"The two tuples must have the same length.\")"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the and tuples\n    and_tup_list = []\n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the two tuples contain the same value in the same position\n        if test_tup1[i] == test_tup2[i]:\n            # If they do, append a 1 to the and_tup_list\n            and_tup_list.append(1)\n        else:\n            # If they don't, append a 0 to the and_tup_list\n            and_tup_list.append(0)\n    # Return the and_tup_list\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    # Create an empty tuple of the same length as the input tuples\n    result = ()\n    # Iterate through the tuples and extract the elementwise and tuple\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    # Return the elementwise and tuple as a tuple\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    \n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Create an empty list to store the elementwise and tuples\n    result = []\n\n    # Iterate through the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the two elements from each tuple\n        a, b = test_tup1[i], test_tup2[i]\n        # Perform the elementwise and operation\n        result.append(a & b)\n\n    # Return the elementwise and tuples\n    return tuple(result)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the directrix\n        directrix = (-b + math.sqrt(discriminant)) / (2*a)\n        \n        # Print the directrix\n        print(\"The directrix of the parabola is\", directrix)\n    elif discriminant == 0:\n        # The directrix is equal to the second root of the discriminant\n        directrix = (-b) / (2*a)\n        \n        # Print the directrix\n        print(\"The directrix of the parabola is\", directrix)\n    else:\n        # The directrix is equal to the negative root of the discriminant\n        directrix = (-b - math.sqrt(discriminant)) / (2*a)\n        \n        # Print the directrix\n        print(\"The directrix of the parabola is\", directrix)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"There is no real root\"\n    elif delta == 0:\n        return \"The directrix is x = \" + str(-b/2/a)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return \"The directrix is x = \" + str(x1) + \" and x = \" + str(x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(\"The directrix is:\", root1)\n        print(\"The directrix is:\", root2)\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        print(\"The directrix is:\", root)\n    else:\n        print(\"The directrix does not exist.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    else:\n        x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n        x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Compute the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return \"The discriminant is negative.\"\n\n    # Compute the two roots of the quadratic equation\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # Find the points of intersection of the parabola and the y-axis\n    y_intercept = -c / b\n\n    # Print the two roots and the directrix\n    print(\"Roots of the quadratic equation:\")\n    print(\"Root 1:\", root1)\n    print(\"Root 2:\", root2)\n    print(\"Directrix:\", y_intercept)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n        return directrix\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n        return directrix\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No real roots\"\n    elif discriminant == 0:\n        return \"One real root\"\n    else:\n        return \"Two real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0: \n        x1 = (-b + delta**(1/2))/(2*a) \n        x2 = (-b - delta**(1/2))/(2*a)\n        print(\"The directrix of the parabola is\", x1)\n        print(\"The directrix of the parabola is\", x2)\n    elif delta == 0:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is\", x)\n    else:\n        print(\"The equation of the parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"The parabola has no real roots.\"\n    elif discriminant == 0:\n        return \"The parabola has a single real root.\"\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        return f\"The directrix of the parabola is {root1:.2f}.\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Loop through both lists\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # If elements match, return True\n            if list1[i] == list2[j]:\n                return True\n    # If no common elements found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Check if the two lists have a common element.\n\n    Args:\n    list1: a list of integers\n    list2: a list of integers\n\n    Returns:\n    True if the two lists have a common element, False otherwise.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and sort them\n    set1 = sorted(set(list1))\n    set2 = sorted(set(list2))\n\n    # Loop over the sorted sets and compare elements\n    for element in set1:\n        if element in set2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    \n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # loop through each element in the first list\n    for elem in list1:\n        # if the element is present in the second list, return True\n        if elem in list2:\n            return True\n\n    # if no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of each half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    half_height = height / 2\n    \n    # calculate the length of the trapezium\n    trapezium_length = half_base1 + half_base2 + half_height\n    \n    # calculate the length of the left half\n    left_half_length = trapezium_length / 2\n    \n    # calculate the length of the right half\n    right_half_length = trapezium_length - left_half_length\n    \n    # sort the lengths of the two halves\n    sorted_halves = sorted([left_half_length, right_half_length])\n    \n    # find the median length\n    median = sorted_halves[1]\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    # Calculate the area of the top half of the trapezium\n    top_area = 0.5 * (base1 + base2) * height\n    # Calculate the area of the bottom half of the trapezium\n    bottom_area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n    \n    # Determine the area between the two halves of the trapezium\n    area_between = area - top_area - bottom_area\n    \n    # Calculate the length between the two halves of the trapezium\n    length_between = trapezium_length - 2 * base1 - 2 * base2 - height\n    \n    # Determine the ratio of the area between the two halves to the length between the two halves\n    ratio = area_between / length_between\n    \n    # Determine the median length of the trapezium using the formula:\n    # median = 0.5 * (base1 + base2 + height)\n    median = 0.5 * (base1 + base2 + height) * ratio\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the area of the smaller base\n    small_area = 0.5 * min(base1, base2) * height\n    \n    # Calculate the difference between the areas\n    area_diff = abs(area - small_area)\n    \n    # Calculate the area of the larger base\n    large_area = 0.5 * max(base1, base2) * height\n    \n    # Calculate the difference between the areas\n    larger_diff = abs(area - large_area)\n    \n    # Check if the area of the larger base is greater than the area of the smaller base\n    if area_diff > larger_diff:\n        # The area of the larger base is greater, so the median length is the difference between the height and the area of the larger base\n        median = height - area_diff\n    else:\n        # The area of the smaller base is greater, so the median length is the difference between the area of the smaller base and the height\n        median = area_diff - height\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the length of the trapezium\n    side1 = base1 + base2\n    side2 = height * 2\n    trapezium_length = side1 + side2\n    \n    # calculate the area of the trapezium\n    area = (base1 * height) / 2 + (base2 * height) / 2\n    \n    # calculate the median length\n    median_length = trapezium_length / 2\n    \n    # print the results\n    print(\"The length of the trapezium is:\", trapezium_length)\n    print(\"The area of the trapezium is:\", area)\n    print(\"The median length of the trapezium is:\", median_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    base_area = base1 * height / 2\n    trapezium_area = base1 * base2 * height / 6\n    median_length = (area + base_area + trapezium_area) / 3\n\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of the trapezium's base\n    base = (area * (base1 + base2)) ** 0.5\n\n    # Calculate the length of the trapezium's height\n    height = area / base\n\n    # Calculate the length of the trapezium's top\n    top = (area - (base1 + base2) * height) ** 0.5\n\n    # Calculate the total length of the trapezium\n    total = base + top\n\n    # Calculate the middle of the trapezium\n    middle = total / 2\n\n    # Calculate the median length of the trapezium\n    median = (middle + height) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2 + height) / 2\n    \n    # Calculate the length of the base of the first half of the trapezium\n    first_half_base = (base1 + base2) / 2\n    \n    # Calculate the length of the base of the second half of the trapezium\n    second_half_base = (base1 + base2 + height) / 2\n    \n    # Calculate the area of the trapezium\n    trapezium_area = (first_half_base * height) + (second_half_base * height)\n    \n    # Calculate the height of the trapezium\n    trapezium_height = height\n    \n    # Calculate the length of the median base\n    median_base_length = (trapezium_length - trapezium_area) / trapezium_area\n    \n    # Calculate the length of the median trapezium\n    median_trapezium_length = 0.5 * (trapezium_length - median_base_length)\n    \n    return median_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    length = math.sqrt(area)\n    median = (base1 + base2) * 0.5\n    return median, length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 + 0.5 * base2 * height + 0.5 * base1 * height\n    if area > 0:\n        base_of_trapezium = 0.5 * (base1 + base2)\n        length_of_trapezium = 0.5 * height\n        return 0.5 * (length_of_trapezium + area / base_of_trapezium)\n    else:\n        return 0"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes an array of numbers and a number as input and returns True if the number is greater than all the numbers in the array, False otherwise.\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    \n    for i in arr:\n        if number > i:\n            return True\n    \n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in an array and a number as input and returns a boolean value indicating whether the number is greater than all the elements in the array.\n    '''\n\n    for num in arr:\n        if num > number:\n            return True\n\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", arr.index(i))\n            return\n    print(\"The number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count == 0:\n        return \"The entered number is not greater than any element in the array.\"\n    else:\n        return \"The entered number is greater than \" + str(count) + \" elements in the array.\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if the string matches the pattern:\n    - a followed by one or more b's\n    '''\n    pattern = re.compile(r'a(?=.*b)')\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b*){1}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=b{1,})')\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*?b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*\\s\\1+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(?=b)+')\n    return pattern.search(text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n    \n    # Convert the number to a string and then get the last digit using slicing\n    last_digit = str(n)[-1]\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # get the last character of the string\n    last_char = num_str[-1]\n    # convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # initialize a variable to store the last digit\n    last_digit = 0\n    # loop through each digit of the number\n    for i in range(len(str(n))):\n        # check if the current digit is greater than the last digit\n        if int(str(n)[i]) > last_digit:\n            # update the last digit to the current digit\n            last_digit = int(str(n)[i])\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a Python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a Python function to find the last digit of a given number.\n    \"\"\"\n    # find the length of the number\n    length = len(str(n))\n    # extract the last digit of the number\n    last_digit = n % 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with the negative numbers in the original list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing only the negative numbers in the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n\n    :param str1: a string\n    :return: a string with odd characters removed\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char % 2 == 1:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            if int(char) % 2 == 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create a list of characters to remove\n    remove_list = []\n    for char in str1:\n        if ord(char) % 2 == 1:\n            remove_list.append(char)\n    # remove characters from the string\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    # remove the characters from the remove_list\n    for char in remove_list:\n        new_str = new_str.replace(char, \"\")\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is odd (i.e. not divisible by 2), append it to the new string\n        if char % 2!= 0:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters in a string.\n\n    :param str1: the input string\n    :return: a new string with all odd characters removed\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    seen_pairs = set()\n\n    for pair in test_list:\n        if pair in seen_pairs:\n            count += 1\n        else:\n            seen_pairs.add(pair)\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[j:i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # extract the first element of the tuple\n        first = tup[0]\n        \n        # check if the first element is already in the dictionary\n        if first in count_dict:\n            # if it is, increment its count by 1\n            count_dict[first] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            count_dict[first] = 1\n            \n        # extract the second element of the tuple\n        second = tup[1]\n        \n        # check if the second element is already in the dictionary\n        if second in count_dict:\n            # if it is, increment its count by 1\n            count_dict[second] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            count_dict[second] = 1\n            \n    # create an empty list to store the result\n    result_list = []\n    \n    # loop through each key in the dictionary\n    for key in count_dict:\n        # check if the key is an even number\n        if count_dict[key] % 2 == 0:\n            # if it is, add the key to the result list\n            result_list.append(key)\n            \n    # return the result list\n    return result_list"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result*10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Args:\n        L (list): List of integers to join into a single integer.\n\n    Returns:\n        int: The single integer representing the sum of all the integers in L.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the accumulator to 0\n    accumulator = 0\n    # iterate over the list and multiply each element by 10\n    for element in L:\n        accumulator = accumulator * 10 + element\n    # return the final accumulator\n    return accumulator"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the elements in the list\n    total = 0\n    # iterate over each element in the list\n    for num in L:\n        # add the element to the total\n        total += num\n    # return the total\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples containing the adverb and its position in the sentence.\n    '''\n    adverbs = []\n    pattern = re.compile(r'\\b(also|especially|finally|finally|just as|just as|just|just|also|finally|finally|really|really|really|really)\\b')\n    for match in pattern.finditer(text):\n        adverbs.append((match.group(1), match.start()))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(\\w*)\\s*(?:a|an|the|for|by|at|on|in|on|to|with|into|over|over)\\b'\n\n    # Use the regular expression pattern to find all adverbs and their positions in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Iterate through the matches and add their positions to the positions list\n    for match in matches:\n        position = match.start()\n        positions.append(position)\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+ing\\b', text)\n    if adverbs:\n        print(\"The adverb(s) in the sentence are:\", \", \".join(adverbs))\n        for i, adverb in enumerate(adverbs):\n            print(f\"The {i+1}st adverb is: {adverb}\")\n    else:\n        print(\"No adverb(s) found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regex pattern to match adverbs\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # find all occurrences of the pattern in the text\n    occurrences = re.findall(pattern, text)\n\n    # loop through the occurrences and return the position of the adverb and its text\n    for i, occurrence in enumerate(occurrences):\n        # remove the adverb from the text\n        text = re.sub(r'\\b' + occurrence + r'\\b', '', text)\n\n        # check if the text is empty, if yes, it means no more adverbs left\n        if not text:\n            break\n\n        # add the adverb to the output\n        output = output + occurrence +''\n\n    # return the output string\n    return output.strip()"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'\\b(ab)le\\b|able|acid|acupuncture|acutely|acute|adventurous|affectionate|afflicted|agitated|aggressive|agonizing|alcoholic|alike|amazing|ambitious|amused|amusing|amusingly|angry|anxious|apprehensive|apt|arrogant|ashamed|aspiring|attractive|awful|awkward|awkwardly|bachelor|bad|barren|basic|barefoot|bashful|bawdy|beautiful|beautifully|beneficial|benign|benignly|bestial|biweekly|bland|black|black and white|blissful|blue|blue-eyed|blushing|boiling|bold|boorish|bouncy|boundless|brave|brawny|breakable|brilliant|brisk|british|brutal|brutally|bully|burdensome|busy|bustling|busybodies|butt-kicking|buzzing|cagey|callous|calm|campy|capable|careful|careless|caring|carnal|carnalistic|cautious|cautiously|cavernous|celebrated|certain|certainly|chaotic|cheerful|cheerless|childlike|chilly|civic|civil|clammy|classy|clean|clear|clever|cleverly|cloistered|close|closed|cloudy|clumsy|coal-black|coarse|cold|colorful|colossal|combative|comical|compassionate|competent|complex|complicated|comprehensive|concerned|condescending|confused|conscious|consciously|constant|content|contented|contagious|contaminated|contemplative|contemptuous|contented|contenting|contestant|conventional|convinced|courageous|courageously|courteous|crabby|crazy|creepy|cruel|cruelly|cuddly|cultured|cumbersome|curious|curiously|curly|curvy|cynical|cynically|dangerous|dapper|dark|darn|deadpan|debonair|deceitful|deceiving|decisive|decisively|deep|deeply|defeated|defiant|deficient|delectable|delicate|deliciously|delightful|delightfully|delusional|delusionally|dependent|dependently|depraved|depravedly|destructive|detached|determined|devoted|diabolical|diarrhea-ridden|dirty|disagreeable|disastrous|discreet|disguised|disillusioned|disillusioning|disloyal|disobedient|disparate|displeasing|disputating|dizzy|dodgy|domineering|downright|dreary|droopy|drumbeat|dull|dumb|dumbfounding|dysfunctional|ecstatic|edgy|elated|elderly|elfin|enchanting|energetic|enthusiastic|entitled|envious|enviously|equal|equally|erect|erratic|ethereal|ethical|euphoric|euphoriously|evergreen|excellent|exemplary|exhausted|excited|exciting|excitedly|exotic|exuberant|fabulous|facetious|faint|fair|faithful|fallacious|false|familiar|famously|fanatical|fast|fat|fatal|fatherly|favorable|favorite|fed up|ferocious|festive|few|fierce|filthy|filthy-minded|fine|finished|finished-good|fireproof|firm|first|fit|flabby|flaky|flashy|flawless|flawlessly|flippant|floppy|fluid|focused|folly|forebod"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:auxiliary|adverbial|adverbials|adverbially|adverbialization|adverbialization|adverbializations|adverbializing|adverbializing|adverbializations|adverbializing|adverbializations|adverbializing|adverbializations|adverbializing|adverbialization|adverbializations|adverbializing|adverbializing|adverbializations|adverbializing|adverbializing|adverbialization|adverbializations|adverbializing|adverbializing|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverbialization|adverb"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r\"(\\b[A-Za-z]+\\b)(\\s|$)\"\n    matches = re.findall(pattern, text)\n    for match in matches:\n        adverb = match[0]\n        position = len(match[0]) - len(match[1])\n        return adverb, position\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a list of tuples, where each tuple represents a adverb and its position in the sentence.\n    \n    Input: A string containing a sentence.\n    Output: A list of tuples, where each tuple represents a adverb and its position in the sentence.\n    '''\n    \n    # Compile a regular expression to match adverbs\n    pattern = re.compile(r'\\b\\w*adverb\\w*\\b')\n    \n    # Find all adverbs in the sentence\n    adverbs = pattern.findall(text)\n    \n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    \n    # Iterate over all adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((adverb, i))\n    \n    # Return the adverb positions list\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(\\w*adverb\\w*)\\b'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    for match in matches:\n        print(match)\n        start_pos = text.lower().find(match[0])\n        end_pos = start_pos + len(match[0])\n        print(\"The adverb '{}' starts at position {} and ends at position {}.\".format(match[0], start_pos, end_pos))\n\nif __name__ == \"__main__\":\n    text = \"This is a sentence with an adverb after the words, but not the adverb itself. This is another sentence with an adverb after the words, but not the adverb itself.\"\n    find_adverb_position(text)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Regular expression pattern to find adverbs\n    pattern = r'\\b(?:[a-z][a-z'-]*[a-z])|(?:[A-Z][A-Z'-]*[A-Z])\\b'\n\n    # Find all occurrences of adverbs in the given sentence\n    adverbs = re.findall(pattern, text)\n\n    # Iterate over all adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        print(f'{adverb} found at position {i+1}')\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using Heron's formula\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l * l\n    \n    # return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l * l + l * l + l * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # defining the surface area of a cube\n    surface_area = 6 * l**2\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l * l\n    \n    # return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = [num for num in nums if num > 0]\n    count = len(positive_nums)\n    total = len(nums)\n    return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    positive_ratio = count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0, 0]) # create an array to store the count of positive and negative numbers\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count[0] / (count[0] + count[1]) # return the ratio of positive numbers to the total number of numbers in the array"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    # initialize the count array with zeros\n    count = array('i', [0] * 2)\n    # iterate over the array\n    for num in nums:\n        # if the number is positive, increment the count for 1 and 2\n        if num > 0:\n            count[0] += 1\n            count[1] += 1\n    # calculate the ration of positive numbers\n    ratio = count[1] / float(count[0] + count[1])\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return float(pos_count) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n            \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    neg_ratio = neg_count / (pos_count + neg_count + zero_count)\n    \n    print('Positive number ratio:', pos_ratio)\n    print('Negative number ratio:', neg_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            positive_count.itemset(0, positive_count[0] + 1)\n    return positive_count[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an empty array to store positive numbers\n    positive_numbers = []\n    # Loop through each number in the input array\n    for num in nums:\n        # If the number is positive, add it to the positive_numbers array\n        if num > 0:\n            positive_numbers.append(num)\n    # Calculate the ration of positive numbers in the input array\n    positive_count = len(positive_numbers) / len(nums)\n    # Return the ration as a float\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')\n    neg_nums = array('i')\n    \n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    \n    pos_sum = sum(pos_nums)\n    neg_sum = sum(neg_nums)\n    \n    if pos_sum == 0:\n        return 0\n    \n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    \n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        The largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0] # assume the first element is the largest negative\n    for num in list1: \n        if num < 0 and num > max_neg: # if the current number is negative and larger than the current max_neg, update max_neg\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = -999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    '''\n    This function finds the largest negative number in a list.\n    '''\n    max_neg = lst[0]\n    for i in lst:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    test_list (list): A list of tuples.\n    K (int): The number of elements to remove from each tuple.\n\n    Returns:\n    list: A list of trimmed tuples.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tuple_elem in test_list:\n        trimmed_tuple = tuple([elem for i, elem in enumerate(tuple_elem) if i!= K])\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            test_list[i] = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) <= K:\n            test_list[i] = ()\n        else:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Checking if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths are not equal. Please enter tuples of equal length.\")\n    else:\n        # Creating a new tuple with the element-wise multiplication of the tuples\n        result_tup = tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n        print(\"Resulting Tuple:\", result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length')\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] *= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Using zip function to iterate over the two tuples and their elements.\n    # We can then use the built-in `*`, `@` and `**` operators to perform index multiplication.\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initializing result tuple with zeros\n    result_tup = (0, 0, 0)\n\n    # iterating over the first tuple using a loop\n    for i in range(len(test_tup1)):\n        # multiplying the corresponding elements of the two tuples\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # returning the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Parameters:\n    test_tup1 (tuple): First tuple.\n    test_tup2 (tuple): Second tuple.\n\n    Returns:\n    list: List of index wise multiplications of elements in the given two tuples.\n    '''\n\n    result_list = []\n\n    # Loop through the elements of both tuples and perform index wise multiplication\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    return result_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_list = []\n    for key in count_dict.keys():\n        if key in lst:\n            count_list.append(count_dict[key])\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Create a Counter object to count the occurrence of each element in the tuple.\n    cnt = Counter(tup) \n    # Use Counter to count the occurrence of each element in the list.\n    for item in lst: \n        cnt[item] += 1 \n    # Convert the Counter object back to a dictionary.\n    result = dict(cnt) \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the list to a set to remove duplicates\n    lst = set(lst)\n\n    # Count the occurrence of each element in the tuple\n    counts = Counter(tup)\n\n    # Create a dictionary to store the result\n    result = {}\n\n    # Loop through the counts dictionary and add the elements to the result dictionary\n    for key, value in counts.items():\n        result[key] = value\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in tup:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    for item in lst:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    return Counter(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert list to set to remove duplicates\n    lst_set = set(lst)\n\n    # Count the occurence of each element in the tuple\n    count_dict = Counter(tup)\n    count_dict.subtract(Counter(lst_set)) # Remove the occurence of elements in the list\n\n    # Convert the counter dictionary to a list\n    result_list = list(count_dict.items())\n\n    return result_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    # Count the occurrence of each element in the tuple and append them to a dictionary\n    count_dict = {}\n    for i in tup: \n        count_dict[i] = tup.count(i)\n    \n    # Iterate through the list and count the occurrence of each element in the dictionary\n    count_list = []\n    for i in lst: \n        if i in count_dict: \n            count_list.append(count_dict[i])\n        else: \n            count_list.append(0)\n    \n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n\n    # create a Counter object to count the occurrence of each element of lst in tup\n    count_dict = Counter(tup)\n\n    # count the occurrence of each element of lst in tup and return a dictionary with the count\n    result = {}\n    for i in range(len(lst)):\n        if lst[i] in count_dict:\n            result[lst[i]] = count_dict[lst[i]]\n        else:\n            result[lst[i]] = 0\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_lst = []\n    for elem in lst:\n        count_lst.append(count[elem])\n    return count_lst"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1000000, 900000, 800000, 700000, 600000, 500000, 400000, 300000, 200000, 100000]\n    total_sum = 0\n    \n    for num in perrin_numbers:\n        total_sum += num\n        if total_sum >= n:\n            break\n    \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    perrin_nums = []\n    for i in range(1, n+1):\n        perrin_nums.append(i * (i+1))\n    return sum(perrin_nums)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n\n    # Initialize a counter variable\n    count = 0\n\n    # Calculate the perrin numbers and add them to the sum\n    while count <= n:\n        sum += count ** 2\n        count += 1\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]\n    total = 0\n    for num in perrin_nums:\n        total += num\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * (i + 1)) / 2\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_of_numbers = 0\n    for num in perrin_numbers:\n        sum_of_numbers += num\n    return sum_of_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize a variable to store the sum of perrin numbers\n    sum_perrin = 0\n    \n    # loop through the range of perrin numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the sum of the first i perrin numbers\n        sum_perrin += sum_perrin + 1\n    \n    # return the sum of perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 4, 6, 8, 12, 16, 24]\n    total_sum = 0\n    for i in perrin_numbers:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 1\n    for i in range(2, n+1):\n        p = p*(2*i-1) // i\n        s += p\n    return s"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_list.append(l[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the strings to be extracted as input. \n    It then returns a new list containing only the extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and an integer l as input, and returns a new list\n    containing only the strings of length l.\n    \"\"\"\n    return [s for s in str_list if len(s) == l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size as input. It extracts strings of the specified size from the list and returns the resulting list of strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for s in str_list:\n        if len(s) > size:\n            output.append(s[:size])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        new_list.append(l[i][:l[i].find(str)])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_str = []\n    for i in range(0, len(str_list), l):\n        extracted_str.append(\" \".join(str_list[i:i+l]))\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == size:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) > size:\n            result.append(s[:size])\n        else:\n            result.append(s)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost - sale_amount > 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_rate = 0.05 # assume a 5% loss rate\n    loss_amount = sale_amount * loss_rate\n    \n    if actual_cost > sale_amount: # if the actual cost is greater than the sale amount, then we have loss\n        return loss_amount\n    else: # if the actual cost is not greater than the sale amount, then we don't have loss\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount/actual_cost\n    if loss_percentage > 0.2:\n        loss_amount = sale_amount*0.1\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount\n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount * 0.05 #assume 5% loss rate\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # function to check if a number is even or not \n    def is_even(num): \n        return num % 2 == 0 \n\n    # variable to store the sum of even factors \n    sum = 0 \n\n    # loop through all the numbers from 2 to the square root of n \n    for i in range(2, int(math.sqrt(n))+1): \n        # check if i is even and if n is divisible by i \n        if is_even(i) and n % i == 0: \n            # add i to sum \n            sum += i \n\n    # return the sum of even factors \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n%2 == 0:\n            sum_even_factors += i\n            n //= i\n    if n > 1 and n%2 == 0:\n        sum_even_factors += n\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    # Initialize sum of factors to 0\n    sum_factors = 0\n    \n    # Loop through all even numbers from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Check if the current number is a factor of n\n            if n % i == 0:\n                # Add the current number to the sum of factors\n                sum_factors += i\n                \n    # Return the sum of factors\n    return sum_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            count += 1\n            sum_of_even_factors += i\n    if n%2 == 0:\n        sum_of_even_factors += n\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            total += i + n//i + n//(i+2)\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]*z[a-zA-Z0-9]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\s+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern that matches a word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Use regular expressions to match the word 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    \n    # If the word 'z' is found in the text, return True\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s+\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.findall(pattern, text)\n\ntext = \"The quick brown fox jumps over the lazy dog. The zoo zoo zoo.\"\nprint(text_match_wordz(text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Use regular expressions to find words containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    # Return the matches if any\n    if matches:\n        return matches\n    else:\n        return 'No word containing \"z\" was found.'"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [4, 6, 9, 11]:\n        return \"31 days\"\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    else:\n        return \"28 or 29 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # check whether the given month number is a valid number\n    if not monthnum2.isdigit():\n        print('Invalid input! Month number should be a number.')\n        return\n    \n    # convert the month number to integer\n    monthnum = int(monthnum2)\n    \n    # check whether the given month number contains 31 days or not\n    if monthnum == 2:\n        print('2nd month has 28 or 29 days.')\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print('30 days.')\n    else:\n        print('31 days.')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes in a month number as an input and returns True if it contains 31 days,\n    and False otherwise.\n    '''\n    # get the last day of the month using the calendar module\n    from calendar import monthrange\n    \n    # get the last day of the given month\n    last_day = monthrange(2022, monthnum2)[1]\n    \n    # check whether the last day is 31\n    if last_day == 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n        days = 29\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        days = 30\n    else:\n        days = 31\n    \n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(str(monthnum2)) == 2:\n        if 0 <= int(monthnum2) <= 12:\n            if (int(monthnum2) == 2) or (int(monthnum2) == 4) or (int(monthnum2) == 6) or (int(monthnum2) == 9) or (int(monthnum2) == 11):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum % 30 == 0:\n        print(monthnum, \"contains 31 days.\")\n    else:\n        print(monthnum, \"contains 30 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        print(\"2 is a leap year.\")\n    elif monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n        print(f\"{monthnum2} is a leap year.\")\n    else:\n        print(f\"{monthnum2} is not a leap year.\")\n    return 0"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    # Initialize variables\n    min_len = float('inf')  # Initialize with an infinite value\n    min_sublist = []  # Initialize empty list for minimum sublist\n\n    # Iterate through the list\n    for sublist in lst: \n        # Check if the length of the sublist is less than the minimum\n        if len(sublist) < min_len: \n            # If it is, update the minimum length and the minimum sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the shortest sublist\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    # Find the sublist with the minimum length\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) == min_len:\n            min_sublist = sublist\n            break\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_lst = None\n    min_len = float('inf')\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_lst = lst[i]\n            min_len = len(lst[i])\n\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min_sublist):\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = float('inf') #initialize the minimum length to infinity\n    min_sublist = [] #initialize the minimum sublist to an empty list\n    \n    for sublist in lst:\n        if len(sublist) < min_len: #check if the length of the sublist is less than the current minimum length\n            min_len = len(sublist) #update the minimum length if it is smaller\n            min_sublist = sublist #update the minimum sublist with the current sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < len(min_sublist):\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf') # initialize minimum length to infinity\n    result = [] # initialize result list\n    \n    for i in range(len(lst)): \n        sublist = lst[i] # get the sublist for the current index\n        if len(sublist) < min_length: # check if the sublist has a shorter length\n            min_length = len(sublist) # update the minimum length if necessary\n            result = [sublist] # update the result list with the sublist\n        elif len(sublist) == min_length: # check if the sublist has the same length\n            result.append(sublist) # append the sublist to the result list if it's the same length\n    \n    return result"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    l (float): Length of the rectangle (in meters)\n    b (float): Width of the rectangle (in meters)\n\n    Returns:\n    float: Area of the rectangle (in square meters)\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?<=\\b)\\w*[A-Z]\\w*')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'(?i)[A-Z]', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression to match uppercase substrings\n    pattern = r'(?<=\\b[a-z])[A-Z]+(?=\\b)'\n    # Find all matches of the regular expression in the input string\n    matches = re.findall(pattern, str1)\n    # Loop through matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Use re.sub() method to replace uppercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'([A-Z]+)'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from the string.\n    \"\"\"\n    # use a regular expression to match uppercase substrings and replace them with spaces\n    pattern = re.compile(r'(?i)\\b[A-Z]+\\b')\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define pattern for uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # replace all uppercase substrings with empty strings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Compile a regular expression to find uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the given string using the compiled regular expression\n    uppercase_substrings = pattern.findall(string)\n    # Iterate over the list of uppercase substrings and remove them from the original string\n    for substring in uppercase_substrings:\n        string = string.replace(substring, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z][a-z]*\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # loop over each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        if type(i) == list:\n            first_element = Extract(i)\n            if first_element:\n                return first_element\n        else:\n            return i"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublists = []\n    for i in lst:\n        sublists.append(i[0])\n    return sublists"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            Extract(lst[i])\n        else:\n            print(lst[i])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst for element in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an input and returns a new list with the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in string:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize a list to store all the combinations\n    combinations = []\n    \n    # Find the number of elements in the list\n    n = len(list1)\n    \n    # Loop through all possible combinations of size n\n    for i in range(1, n+1):\n        # Loop through all possible indices in the list\n        for j in range(n-i+1):\n            # Add the combination to the list\n            combinations.append(list1[j:j+i])\n    \n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of the elements of the input list.\n\n    Parameters:\n    list1: A list of integers.\n\n    Returns:\n    A list of lists. Each inner list contains all the possible combinations of elements in the input list.\n    \"\"\"\n    # Initialize the empty list to store the combinations\n    combinations = []\n\n    # Define a recursive function to generate all the possible combinations of elements in the input list\n    def generate_combinations(current_combination, remaining_elements):\n        # Base case: if there are no remaining elements, add the current combination to the combinations list and return\n        if not remaining_elements:\n            combinations.append(current_combination[:])\n            return\n        # Recursive case: add each remaining element to the current combination and generate all the remaining combinations\n        for remaining_element in remaining_elements:\n            generate_combinations(current_combination + [remaining_element], remaining_elements[:remaining_elements.index(remaining_element)])\n\n    # Call the recursive function to generate all the possible combinations of elements in the input list\n    generate_combinations([], list1)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            sublist = list1[j:j+i]\n            result.append(sublist)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n        list1 (list): A list of elements.\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Iterate over the elements of the input list\n    for i in range(len(list1)):\n        # Generate all possible combinations of the remaining elements\n        for j in range(i+1, len(list1)+1):\n            # Concatenate the current element with the combination and append it to the list of combinations\n            combination = list1[i:j]\n            combinations.append(combination)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n    - lst (list): The list of elements for which to find combinations.\n\n    Returns:\n    - combinations (list): A list of all possible combinations of elements in `lst`.\n    \"\"\"\n    return [lst[i:j] for i in range(len(lst)) for j in range(i+1, len(lst)+1)]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i == 0:\n            for j in range(len(list1[i])):\n                result.append([list1[i][j]])\n        elif i == len(list1)-1:\n            for j in range(len(list1[i])):\n                result.append([list1[i][j]])\n        else:\n            for j in range(len(list1[i])):\n                for k in range(len(list1[i][j])):\n                    result.append([list1[i][j][k]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return []\n    elif len(list1) == 2:\n        return [[list1[0], list1[1]]]\n    else:\n        comb = []\n        for i in range(len(list1)):\n            rest = list1[:i] + list1[i+1:]\n            for sublist in combinations_list(rest):\n                comb.append([list1[i]] + sublist)\n        return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to store the maximum product and the current subarray product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate over the array and calculate the maximum product subarray\n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    # Return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for num in arr:\n        current_product = max(num, current_product*num)\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            min_ending_here = 1\n            max_ending_here = 1\n        else:\n            min_ending_here = min(min_ending_here * num, num)\n            max_ending_here = max(max_ending_here * num, num)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_ending_here = max(max_ending_here, current_product)\n        \n        if max_ending_here < 0:\n            max_ending_here = arr[i]\n            \n    return max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to store the maximum subarray product\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    # Loop through the array\n    for i in range(len(arr)):\n\n        # Update the current product if the current element is positive\n        if arr[i] > 0:\n            current_product *= arr[i]\n            max_ending_here *= arr[i]\n        # Otherwise, update the current product and maximum ending here\n        else:\n            current_product = 1\n            max_ending_here = 1\n\n        # Update the maximum subarray product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n    # Return the maximum subarray product\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Create a list of values in the dictionary\n    values = list(dict.values())\n\n    # Check if all values are the same in the list\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.values():\n        print(\"The value is not in the dictionary.\")\n        return False\n    else:\n        for value in dict.values():\n            if len(set(value)) > 1:\n                print(\"The values are not same.\")\n                return False\n        print(\"All values are same in the dictionary.\")\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    first_value = next(iter(dict.values()))\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if n is a key in the dictionary\n    if n not in dict:\n        return \"n is not a key in the dictionary.\"\n\n    # Initialize a variable to store the value of n\n    value = None\n\n    # Iterate through all values of the dictionary\n    for v in dict.values():\n\n        # Check if the current value is same as n\n        if v == n:\n            value = v\n        else:\n            # If n is not same as any value, return False\n            return False\n\n    # If all values are same as n, return True\n    return value"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key, value in dict.items():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a list to store all the values in the dictionary\n    values = []\n    # Loop through all the keys in the dictionary\n    for key in dict:\n        # Append the value associated with the current key to the list of values\n        values.append(dict[key])\n    # Check if all the values in the list are the same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(values.count(values[0]) == n for i in range(n))"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(value == dict.values()[0] for value in dict.values()):\n        print(\"All values are same in the dictionary\")\n    else:\n        print(\"Not all values are same in the dictionary\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= dict[i+1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(values[0] == x for x in values)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with all the empty items removed.\n    \"\"\"\n    for key, value in dict1.items():\n        if value == \"\":\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # iterate over the dictionary and remove empty items\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary to store the updated values\n    new_dict = {}\n    # iterate over each key-value pair in the given dictionary\n    for key, value in dict1.items():\n        # if the value is not an empty string, append it to the new dictionary\n        if value!= '':\n            new_dict[key] = value\n    # return the updated dictionary\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # initialize variables\n        max_1 = max(arr[0], arr[1])\n        max_2 = max(arr[0], arr[2])\n        max_3 = max(arr[1], arr[2])\n        min_1 = min(arr[0], arr[1])\n        min_2 = min(arr[0], arr[2])\n        min_3 = min(arr[1], arr[2])\n        max_product = max(max_1*max_2*max_3, max_1*min_2*min_3, max_2*min_1*min_3, min_1*min_2*min_3)\n        return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max1, max2, max3 = max_product(arr[1:]), arr[0], max(arr[0], arr[1:])\n        min1, min2, min3 = min_product(arr[1:]), arr[0], min(arr[0], arr[1:])\n        return max(max1 * max3, max2 * min3, max1 * min3)\n\ndef min_product(arr):\n    \"\"\"\n    Write a function to find the minimum product formed by multiplying numbers of a decreasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max1, max2, max3 = max_product(arr[1:]), arr[0], max(arr[0], arr[1:])\n        min1, min2, min3 = min_product(arr[1:]), arr[0], min(arr[0], arr[1:])\n        return min(min1 * max3, min2 * min3, min1 * min3)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # sort the array in decreasing order\n    arr.sort(reverse=True)\n    # initialize variables\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(n):\n        if i == 0:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here * arr[i], max_ending_here)\n            min_ending_here = min(min_ending_here * arr[i], min_ending_here)\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, n):\n        temp_max = max(arr[i], max_product * arr[i])\n        temp_min = min(arr[i], min_product * arr[i])\n        max_product = temp_max\n        min_product = temp_min\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if not arr or len(arr) == 1:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(i, j + 1):\n                if k < n:\n                    dp[i][j] = max(dp[i][j], arr[i] * arr[k] * arr[j], dp[i][k] * dp[k][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list[int]): an increasing subsequence of a non-empty array.\n\n    Returns:\n        int: the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # If the array is empty or has only one element, its product is itself.\n    if n == 0 or n == 1:\n        return arr[0] * arr[0] if n == 1 else 1\n\n    # Compute the cumulative sum of the array.\n    cum_sum = [0] * n\n    cum_sum[0] = arr[0]\n    for i in range(1, n):\n        cum_sum[i] = cum_sum[i-1] + arr[i]\n\n    # Initialize the maximum product and the current maximum subsequence length.\n    max_prod = cum_sum[0]\n    max_subseq_len = 1\n\n    # Iterate over all possible subsequences of the array.\n    for i in range(1, n):\n        # Compute the length of the current subsequence.\n        subseq_len = 1\n        for j in range(i+1, n):\n            if cum_sum[j] > cum_sum[i] + arr[j]:\n                subseq_len += 1\n        # Update the maximum product if this subsequence is longer.\n        if subseq_len > max_subseq_len:\n            max_prod = cum_sum[0] * cum_sum[subseq_len]\n            max_subseq_len = subseq_len\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize maximum product to negative infinity\n    max_product = float('-inf')\n    # Initialize two pointers to the beginning and end of the increasing subsequence\n    i = 0\n    j = n - 1\n    # Loop through the array and find the maximum product formed by multiplying the numbers in the increasing subsequence\n    while i < j:\n        product = arr[i] * arr[j]\n        if product > max_product:\n            max_product = product\n        # If the product is negative, update the two pointers\n        if product < 0:\n            i += 1\n            j -= 1\n        # If the product is positive, move the pointer that maximizes the subsequence\n        elif product > 0:\n            i += 1\n        else:\n            j -= 1\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Iterate through each element of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element with the next element to get the pairwise sum\n        result += test_tup[i+1]\n\n    # Return the final result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # add the two elements and store the result in a new tuple\n        new_tup = tuple(test_tup[i] + test_tup[i+1])\n        # add the new tuple to the list of results\n        test_tup_results.append(new_tup)\n    return test_tup_results"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum([a + b for a, b in zip(test_tup, test_tup[1:])])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize variables for the first and second neighboring elements of the tuple\n    first_neighboring = None\n    second_neighboring = None\n\n    # Loop through the tuple and find the first and second neighboring elements\n    for i in range(1, len(test_tup)-1):\n        if test_tup[i] == first_neighboring:\n            first_neighboring = test_tup[i-1]\n        elif test_tup[i] == second_neighboring:\n            second_neighboring = test_tup[i-1]\n\n    # Calculate the pairwise addition of the neighboring elements and return it\n    return (first_neighboring + second_neighboring)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    if len(test_tup) < 2:\n        return None\n\n    return test_tup[1:] + [test_tup[0]]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the results\n    result = []\n    # iterate over the list of elements in the tuple\n    for i in range(len(test_tup)-1):\n        # add the current element and its neighboring element to the result list\n        result.append(test_tup[i] + test_tup[i+1])\n    # return the result list\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input and returns the product of the array multiplied modulo n.\n    \"\"\"\n    # Calculate the product of the array elements\n    product = 1\n    for element in arr:\n        product *= element\n\n    # Calculate the remainder of the product\n    remainder = product % n\n\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n        \n    # Return the remainder\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result*arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Given an array and a number n, find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array of integers and a number n as inputs and returns the remainder product of \n    the array multiplication modulo n.\n    '''\n    # Initialize the remainder product to 1\n    remainder_product = 1\n\n    # Iterate through the array and multiply each element by the remainder product\n    for num in arr:\n        remainder_product = (remainder_product * num) % n\n\n    return remainder_product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n        if product >= n:\n            product -= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] - 1: \n            print(\"The given list contains consecutive numbers.\") \n        else: \n            print(\"The given list does not contain consecutive numbers.\") "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    count = 1\n    for i in range(len(l)-1): \n        if l[i+1] - l[i] == 1: \n            count += 1\n        else: \n            count = 1\n    \n    if count == len(l)-1: \n        return \"Consecutive numbers present in the list\"\n    else: \n        return \"No consecutive numbers present in the list\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False \n    elif l[0] == l[-1]: \n        return True \n    else: \n        for i in range(len(l)-1): \n            if l[i] + 1 == l[i+1]: \n                return True \n        return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    if len(l) < 2: \n        return False \n    else: \n        for i in range(len(l)-1): \n            if l[i] + 1 == l[i+1]: \n                return True \n        return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    if len(l) < 3:\n        return False\n    elif len(l) == 3:\n        if l[0]+1 == l[1]+1 == l[2]+1:\n            return True\n        else:\n            return False\n    elif len(l) > 3:\n        for i in range(len(l)-2):\n            if l[i]+1 == l[i+1]+1 == l[i+2]+1:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Traverse through the list \n    for i in range(len(l)-1): \n        # Check if the current element and the next element are consecutive \n        if l[i] + 1 == l[i+1]: \n            return True\n    \n    # If no consecutive numbers are found, return False \n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Merge the two lists and remove duplicates\n    merged_list = list(set(test_list1 + test_list2))\n    # Sort the merged list to get the intersection\n    intersection = sorted(set(merged_list))\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for item in test_list1:\n        if item in test_list2 and item not in intersection_list:\n            intersection_list.append(item)\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    intersection_list = []\n\n    for element in test_list1:\n        if element in test_list2:\n            intersection_list.append(element)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the list to a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection back to a list and sort it based on the order of the original list\n    return sorted(list(intersection))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set to store unique elements in the first list\n    set1 = set(test_list1)\n    # Creating a set to store unique elements in the second list\n    set2 = set(test_list2)\n    # Finding the intersection between the two sets\n    intersection = set1.intersection(set2)\n    # Converting the set to a list and returning the result\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Find the intersection of the two lists\n    intersection = set(test_list1) & set(test_list2)\n\n    # Convert the intersection set back to a list of tuples\n    intersection_list = list(intersection)\n\n    # Return the list of tuples\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert the given tuple lists into sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of sets and convert it back to a list\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through the two lists of tuples\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            # Check if the two tuples have the same elements in the same order\n            if tup1 == tup2:\n                # Add the tuple to the intersection set\n                intersection.add(tup1)\n                # Stop iterating through the second list if the first list has been found\n                break\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (string): The original string.\n    ch (char): The character to be replaced.\n    newch (char): The character to replace `ch`.\n\n    Returns:\n    string: The modified string with `ch` replaced with `newch`.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the character matches the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a specified character in a string with a new character.\n\n    Parameters:\n    - str1 (string): the string to search and replace in\n    - ch (char): the character to search for\n    - newch (char): the character to replace the found occurrences with\n\n    Returns:\n    - the modified string\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object by value in descending order\n    sorted_counter = counter.most_common()\n    # convert the Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the counter by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary from the sorted counter\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Use Counter to count the frequency of each value in the dictionary\n    freq_dict = Counter(dict1.values())\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(freq_dict.items(), key=lambda x: x[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize two variables to store the maximum and minimum values\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # Iterate through the array and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the smallest and largest values\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Iterate over the array and update the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_max(nums):\n    '''\n    Returns the minimum and maximum values in the given array.\n    '''\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return min_num, max_num\n\ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    min_num, max_num = find_min_max(nums)\n    return min_num + max_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"Array must have at least two elements\"\n    \n    # find the largest and smallest values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # find the sum of the largest and smallest values\n    sum_val = max_val + min_val\n    \n    return sum_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables to hold largest and smallest values\n    max_value = nums[0]\n    min_value = nums[0]\n    \n    # iterate through the array and find the largest and smallest values\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        elif num < min_value:\n            min_value = num\n    \n    # return the sum of the largest and smallest values\n    return max_value + min_value"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    \n    first_half = nums[:len(nums)//2]\n    second_half = nums[len(nums)//2:]\n    \n    first_sum = big_sum(first_half)\n    second_sum = big_sum(second_half)\n    \n    return first_sum + second_sum"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase, and False otherwise.\n    '''\n    return all(char.islower() for char in string)"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # define a pattern for matching lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # use re.sub to replace all occurrences of lowercase substrings with an empty string\n    result = re.sub(pattern, '', string)\n    # return the modified string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regex to find all lowercase substrings and replace them with an empty string\n    pattern = re.compile(r'[a-z]+')\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings in the string\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    matches = pattern.findall(str1)\n\n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the search() method of the regular expression pattern to find all matches\n    matches = pattern.findall(str1)\n    # Use the replace() method of the string to replace all matches with an empty string\n    return str1.replace(''.join(matches), '')"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as an input and returns a new string with all lowercase substrings removed.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove lowercase substrings from the given string\n    str1 = re.sub(r'\\b[a-z]\\w+\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use the regular expression pattern to find all lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # Find all lowercase substrings in the string\n    substrings = pattern.findall(str1)\n    # Loop through each substring and remove it from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to match and remove all lowercase substrings from the given string\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Replace all lowercase substrings with empty string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    # Replace all single-letter lowercase substrings with empty string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from a given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all lowercase substrings removed.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the given number to a string\n    str_n = str(n)\n    # returning the first digit of the string\n    return int(str_n[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        first_digit = n % 10\n        return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Find the number of digits in the number\n    num_digits = len(str(n))\n\n    # Find the first digit\n    first_digit = n // 10**num_digits\n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the first digit in the string\n    first_digit = num_str[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd numbers in the list.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns a new list of odd integers from the input list.\n    '''\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers as an input and returns only the odd numbers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n    # Loop through each number in the list\n    for num in list:\n        # If the number is odd, add it to the odd_list\n        if num % 2 == 1:\n            odd_list.append(num)\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2!= 0: \n            odd.append(i) \n    return odd"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0] "
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Define a function to find the sum of cubes of first n natural numbers\n    def sum_cubes(n):\n        # Initialize the sum of cubes to 0\n        sum = 0\n        # Loop through the first n natural numbers\n        for i in range(1, n+1):\n            # Add the cube of the current natural number to the sum\n            sum += i**3\n        # Return the sum of cubes\n        return sum\n    \n    # Call the function to find the sum of cubes of first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n    \n    # Define another function to find the sum of first n natural numbers\n    def sum_natural_numbers(n):\n        # Initialize the sum of natural numbers to 0\n        sum = 0\n        # Loop through the first n natural numbers\n        for i in range(1, n+1):\n            # Add the current natural number to the sum\n            sum += i\n        # Return the sum of natural numbers\n        return sum\n    \n    # Call the function to find the sum of first n natural numbers\n    sum_natural_numbers_n = sum_natural_numbers(n)\n    \n    # Calculate the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers\n    difference = sum_cubes_n - sum_natural_numbers_n\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i*i*i for i in range(n+1)]\n    sum_cubes = sum(cubes)\n    first_n = [i for i in range(n+1)]\n    sum_first_n = sum(first_n)\n    return sum_cubes - sum_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Find the difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of the first n natural numbers\n    sum_of_numbers = (n * (n + 1)) / 2\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n + 1)])\n    # difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_numbers)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # compute the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    # compute the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # compute the difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum([num for num in range(1, n+1)])\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    return abs(cubes_sum - sum_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Using a loop to generate the cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i*i*i\n    \n    # Using a loop to generate the first n natural numbers\n    sum_natural = 0\n    for i in range(n):\n        sum_natural += i\n    \n    # Calculating the difference between the sums\n    difference = sum_cubes - sum_natural\n    \n    # Returning the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing the sum of cubes and sum of natural numbers\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # iterating over the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    \n    # finding the difference between the sums of cubes and sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    # returning the difference between the sums of cubes and sum of natural numbers\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def xor(a,b):\n    return a^b"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize a variable to store the count of odd pairs\n    count = 0\n\n    # Iterate over all possible pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if the xor of the two elements is odd\n            if ((A[i] ^ A[j]) % 2) == 1:\n                # Increment the count of odd pairs\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # convert string to lowercase\n    lowercase_string = string.lower()\n    \n    # loop through each character in the string\n    for i in range(len(lowercase_string)):\n        # if the character is uppercase, convert it to lowercase\n        if lowercase_string[i].isupper():\n            lowercase_string = lowercase_string[:i] + lowercase_string[i].lower() + lowercase_string[i+1:]\n        # if the character is lowercase, convert it to uppercase\n        elif lowercase_string[i].islower():\n            lowercase_string = lowercase_string[:i] + lowercase_string[i].upper() + lowercase_string[i+1:]\n    \n    # convert the modified string to uppercase\n    uppercase_string = lowercase_string.upper()\n    \n    # return the modified string\n    return uppercase_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings so we can compare them character by character\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through each character in the strings\n    for i in range(len(s1)):\n        # Convert each character to an integer and subtract it from the next character\n        total_sum += abs(int(s1[i]) - int(s2[i]))\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings so that we can work with them as strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # Find the length of the longest string\n    max_length = max(len(str_n1), len(str_n2))\n\n    # Initialize the sum to 0\n    sum_diff = 0\n\n    # Loop through each digit in both strings\n    for i in range(max_length):\n        # Extract the i-th digit from both strings\n        digit_n1 = int(str_n1[i]) if i < len(str_n1) else 0\n        digit_n2 = int(str_n2[i]) if i < len(str_n2) else 0\n\n        # Calculate the difference between the digits\n        diff = abs(digit_n1 - digit_n2)\n\n        # Add the difference to the sum\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes in two integers n1 and n2, and returns the sum of the per-digit difference between n1 and n2. \n    The per-digit difference is the absolute value of the difference between the decimal representation of the two integers. \n    For example, if n1 is 123 and n2 is 456, the per-digit difference is |1-4|=3.\n    The function first converts the integers to strings and then calculates the absolute value of the difference between each decimal representation. \n    Finally, it sums up all the absolute values of the differences and returns the result.\n    '''\n    \n    # convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # calculate the absolute value of the difference between the decimal representations\n    abs_diff = abs(int(str1) - int(str2))\n    \n    # sum up the absolute values of the differences\n    sum_abs_diff = sum(abs_diff)\n    \n    return sum_abs_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    sum_diff = 0\n\n    # Convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Loop through each digit of the numbers\n    for i in range(len(n1_str)):\n        # Calculate the difference between the digits\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        # Add the difference to the running sum of differences\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        n1_digit = n1 % 10\n        n2_digit = n2 % 10\n        if n1_digit!= n2_digit:\n            sum_diff += abs(n1_digit - n2_digit)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between the two integers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through each digit in each number\n    for i in range(10):\n        # calculate the per-digit difference between the two numbers\n        digit_diff = abs(n1 % 10 - n2 % 10)\n\n        # add the per-digit difference to the sum\n        sum += digit_diff\n\n        # divide the first number by 10 to remove the last digit\n        n1 //= 10\n\n        # divide the second number by 10 to remove the last digit\n        n2 //= 10\n\n    # return the sum of the per-digit differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = 0\n    for i in range(10):\n        digit_diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n    for i in range(10):\n        # calculate the difference between the digits\n        diff = abs(n1 % 10 - n2 % 10)\n        # add the difference to the total sum\n        total_sum += diff\n        # remove the last digit from both numbers\n        n1 //= 10\n        n2 //= 10\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Helper function to calculate the per-digit difference between two numbers\n    def per_digit_diff(num1, num2):\n        diff = 0\n        for i in range(10):\n            diff += abs(num1 // 10**(i) - num2 // 10**(i))\n        return diff\n\n    # Calculate the sum of the per-digit differences between the two numbers\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 // 10**(i) - n2 // 10**(i))\n\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables to store sum and difference between digits\n    sum_diff = 0\n    diff = 0\n    \n    # Loop through each digit in n1 and n2\n    for i in range(10):\n        # Extract the i-th digit from n1 and n2\n        d1 = n1 // 10**(i-1) % 10\n        d2 = n2 // 10**(i-1) % 10\n        \n        # Calculate the per-digit difference and add to sum_diff\n        diff = abs(d1 - d2)\n        sum_diff += diff\n        \n    # Return the sum_diff\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    a (list): List of integers\n    size (int): Size of the sublist\n\n    Returns:\n    int: The sum of the largest contiguous sublist\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size:\n            current_sum -= a[i - size]\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    max_length = 1\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here < a[i]:\n            max_ending_here = a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            max_length = i + 1\n            \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    max_subarray = []\n\n    for i in range(size):\n        max_subarray.append(a[i])\n        current_sum = max_subarray[-1]\n\n        for j in range(i+1, size):\n            current_sum += a[j]\n            max_subarray.append(current_sum)\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = a[0]\n    current_sum = a[0]\n    start = 0\n\n    # Iterate through the list\n    for i in range(1, size):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is negative, reset it to zero and move the start index\n        if current_sum < 0:\n            current_sum = 0\n            start = i\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    :param a: a list of integers\n    :param size: the size of the sublist to consider\n    :return: the sum of the largest contiguous sublist in the given list\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n    current_sublist = []\n\n    for i in range(len(a) - size + 1):\n        current_sum += a[i]\n        current_sublist.append(a[i])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return None\n    \n    max_sum = float('-inf')\n    max_start = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = i\n            \n    current_sum = 0\n    for i in range(size-1, -1, -1):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = i\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n            \n    for i in range(start, size):\n        curr_sum -= a[i]\n        \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to hold the union of the two tuples\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    # Convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples by using set operations\n    union = test_tup1.union(test_tup2)\n    # Sort the union in ascending order and print it\n    print(sorted(union))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the union set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Sort the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n    # Return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Union of two tuples\n    union = test_tup1 + test_tup2\n\n    # Sort the union\n    union.sort()\n\n    # Output the union in sorted order\n    print(\"Union of two tuples:\", union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of the elements from both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    # Sort the list in ascending order\n    sorted_list = sorted(unique_list)\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union))\n\n    # Output the union of the two tuples in sorted order\n    print(\"Union of the elements of the two tuples:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union_set = set(test_tup1 + test_tup2)\n    # sort the union set in ascending order\n    union_list = sorted(union_set)\n    # output the union set in sorted order\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = sorted(union_set)\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            max_length = max(max_length, len(lst[i:j+1]))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # create a dictionary to store the length of sublists\n    sublist_lengths = {}\n    # loop through the list\n    for i in range(len(lst)):\n        # if the current element is a sublist\n        if i > 0 and isinstance(lst[i], list):\n            # check if the current sublist is already in the dictionary\n            if lst[i] in sublist_lengths:\n                # if it is, add its length to the dictionary\n                sublist_lengths[lst[i]] += 1\n            else:\n                # if not, add it with length 1\n                sublist_lengths[lst[i]] = 1\n        else:\n            # if the current element is not a sublist, set its length to 1\n            sublist_lengths[lst[i]] = 1\n    # find the length of the longest sublist\n    max_sublist_length = 0\n    for length in sublist_lengths.values():\n        max_sublist_length = max(max_sublist_length, length)\n    return max_sublist_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    longest_length = 0\n    sublist_length = 0\n    \n    for i in range(len(lst)):\n        if i == 0:\n            sublist_length = 1\n            continue\n        \n        if lst[i-1] == lst[i]:\n            sublist_length += 1\n        else:\n            if sublist_length > longest_length:\n                longest_length = sublist_length\n            sublist_length = 1\n    \n    if sublist_length > longest_length:\n        longest_length = sublist_length\n    \n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the maximum length variable to 0\n    max_length = 0\n\n    # Iterate through each sublist of the list\n    for sublist in lst:\n\n        # Get the length of the sublist\n        length = len(sublist)\n\n        # Update the maximum length if the current sublist is longer\n        if length > max_length:\n            max_length = length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for sublist in lst:  \n        if len(sublist) > max_len:  \n            max_len = len(sublist)  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = 0\n    for i in range(len(lst)):\n        sublist_length = 0\n        for j in range(i, len(lst)):\n            sublist_length += 1\n            if i!= j:\n                if sublist_length > longest_sublist:\n                    longest_sublist = sublist_length\n    return longest_sublist"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(?:(?!\\1).)++(?=\\1)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n\n    Args:\n    text (str): A string from which values are to be extracted.\n\n    Returns:\n    list: A list of extracted values.\n    '''\n\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use re.findall() to find all matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n\n    # Loop through each match to extract the value between the quotation marks\n    for match in matches:\n        # Remove the quotation marks from the value\n        extracted_value = match.strip('\"')\n        # Add the extracted value to the list of extracted values\n        extracted_values.append(extracted_value)\n\n    return extracted_values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"([^\"]*)\\\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*?(?:\"|$)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\")(.*?)\\1'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\\b(\"(?:\\\\.|[^\"])*\")\\b'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Find all occurrences of double quotes in the string\n    matches = re.findall(r'(?<=\")(.*?)(?=\")', text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through all possible pairs of elements from the list\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if both elements are unequal\n            if arr[i]!= arr[j]:\n                # Increment the count by 1\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n            \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the input string to a list of characters\n    characters = list(word)\n    # Return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a string into characters.\n\n    Parameters:\n    word (str): A string to split into characters.\n\n    Returns:\n    A list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the string to a list of characters\n    chars = list(word)\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) "
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum\n    sum_val = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and add it to the sum\n        sum_val += int(char)\n    # Return the sum of the digits\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    total = 0\n    \n    # Loop through each digit of n\n    while n > 0:\n        # Get the last digit of n\n        digit = n % 10\n        \n        # Add the digit to the total\n        total += digit\n        \n        # Remove the last digit from n\n        n //= 10\n        \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # convert the integer to a string and loop through each character\n    for char in str(n):\n        # convert each character to an integer and add it to the sum\n        sum += int(char)\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[1] <= list1[0]:\n        return False\n    else:\n        return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[1] > list1[0]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return True\n    \n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        \n        # Convert the sublist to a list of strings\n        sublist = [str(x) for x in sublist]\n        \n        # Sort the sublist\n        sublist.sort()\n        \n        # Convert the sorted sublist back to a list of integers\n        sublist = [int(x) for x in sublist]\n        \n        # Assign the sorted sublist to the original list\n        list1[list1.index(sublist)] = sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set from the first list\n    first_set = set(nums[0])\n    # Loop through the remaining lists\n    for i in range(1, len(nums)):\n        # Create a set from the current list\n        current_set = set(nums[i])\n        # Use the symmetric difference operation to get the common elements in both sets\n        common_elements = first_set.symmetric_difference(current_set)\n        # Add the common elements to the first set\n        first_set.update(common_elements)\n    # Convert the set back to a list\n    unique_nums = list(first_set)\n    # Return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #create an empty list to store unique elements\n    unique_nums = []\n    \n    #iterate through each list in the input list\n    for num_list in nums:\n        #iterate through each element in the list\n        for num in num_list:\n            #check if the element is not already in the unique_nums list\n            if num not in unique_nums:\n                #add the element to the list of unique elements\n                unique_nums.append(num)\n    \n    #return the list of unique elements\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    unique_nums = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    \n    # loop through each list of numbers\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # add the number to the set only if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Loop through each list in the list\n    for lst in nums:\n        # Remove any duplicate numbers from the list\n        lst = list(set(lst))\n\n    # Return the modified list\n    return nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n\n    Parameters:\n    list_data (list): A list of numbers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n    \"\"\"\n\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # convert the list to a set to get only the unique numbers\n    product = 1 # initialize the product to 1\n    \n    # iterate through the unique numbers and multiply the product by each number\n    for num in unique_numbers:\n        product *= num\n        \n    return product # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # create a set to remove duplicates and store unique numbers\n    unique_nums = set(list_data)\n\n    # calculate the product of unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and calculates the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of its unique numbers.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_numbers = set(lst)\n    # calculate the product of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    area = pi*(r**2)+(2*pi*r*h)+(2*pi*r*r)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * pi * r * h\n    print(\"The surface area of the cylinder is:\", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    area = pi * r**2 + 2 * pi * r * h + pi * h**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n\n    # Calculate the radius of the cylinder\n    radius = r\n\n    # Calculate the surface area of the cylinder\n    surface_area = 2*math.pi*radius*radius + 2*math.pi*radius*h + 2*math.pi*(radius*radius + h*h)\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #calculate the surface area of the cylinder\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # Formula for surface area of a cylinder:\n    # (2*pi*r*h)\n    surface_area = 2 * 3.14159 * r * h\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n\n    Args:\n        A: A list\n        B: Another list\n\n    Returns:\n        A boolean value indicating whether A is sublist of B or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function checks whether the first list is a sublist of the second list or not. \n    '''\n    if len(A) >= len(B):\n        return A in B\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n        j = 0\n        while j < len(A) and A[j]!= B[i]:\n            j += 1\n        if j == len(A):\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A or False otherwise.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if the length of A is greater than or equal to the length of B\n    if len(A) < len(B):\n        return False\n    \n    # iterate through A and check if each element is present in B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, otherwise it returns False.\n    '''\n    if len(A) >= len(B):\n        return A in B\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    if len(A) <= len(B):\n        for i in range(len(A)):\n            if A[i:i+len(B)] == B:\n                return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0:\n        factorial *= temp\n        temp //= 10\n\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Take the last digit of the number\n    last_digit = num[-1]\n    # Calculate the factorial of the number without the last digit\n    factorial = 1\n    for i in range(1, int(n)):\n        factorial *= i\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Finding the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Finding the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Calculate the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Find the last digit of the factorial\n    last_digit = int(str(fact)[-1])\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the number to string and remove any trailing zeros\n    n_str = str(n).rstrip('0')\n\n    # Convert the number to integer\n    n = int(n_str)\n\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string and split it into digits\n    digits = [int(digit) for digit in str(n)]\n    # find the last digit of the product of all the digits\n    product = 1\n    for digit in digits:\n        product *= digit\n    return product % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Function to find the last digit of a given number\n    def last_digit(num):\n        return num % 10\n\n    # Function to find the factorial of a given number\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    # Finding the last digit of the factorial of the given number\n    factorial_num = factorial(n)\n    last_digit_num = last_digit(factorial_num)\n\n    # Printing the last digit of the factorial of the given number\n    print(\"The last digit of factorial of\", n, \"is\", last_digit_num)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(factorial/10**n) % 10\n\nn = int(input(\"Enter a number: \"))\nprint(\"The last digit in the factorial of\", n, \"is\", last_Digit_Factorial(n))"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Iterate through each element in the input lists\n    for i in range(len(list1)):\n        # Append the first element of list1\n        interleaved_list.append(list1[i])\n        # Append the second element of list2\n        interleaved_list.append(list2[i])\n        # Append the third element of list3\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists as input and returns a single flat list, which is the\n    concatenation of all the lists. The input lists should have the same length.\n    \"\"\"\n    # Check if the input lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n    # Create an empty list to store the result\n    result = []\n    # Loop through each element in the input lists\n    for i in range(len(list1)):\n        # Add the i-th element of list1 to the result list\n        result.append(list1[i])\n        # Add the i-th element of list2 to the result list\n        result.append(list2[i])\n        # Add the i-th element of list3 to the result list\n        result.append(list3[i])\n    # Return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # loop through each list and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1: list of integers\n        list2: list of integers\n        list3: list of integers\n\n    Returns:\n        list: a list containing the elements of `list1`, `list2`, and `list3` in the order specified.\n    \"\"\"\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n\n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        if index1 == index2 == index3:\n            result.append(list1[index1])\n            index1 += 1\n            index2 += 1\n            index3 += 1\n        elif index1 < index2 < index3 or index2 < index1 < index3 or index1 == index3 or index2 == index3:\n            result.append(list1[index1])\n            index1 += 1\n        elif index2 < index1 < index3 or index1 < index2 < index3 or index1 == index2 or index3 == index2:\n            result.append(list2[index2])\n            index2 += 1\n        else:\n            result.append(list3[index3])\n            index3 += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the final result\n    result = []\n    # Iterate through each list\n    for i in range(len(list1)):\n        # Add the i-th element of each list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Initialize a variable to keep track of the current index of the interleaved list\n    current_index = 0\n    # Loop through each element in the 3 lists\n    for i in range(len(list1)):\n        # Append the element from list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # If the current index is equal to the length of list2, move on to the next element in list2\n        if current_index == len(list2):\n            interleaved_list.append(list2[current_index])\n            current_index += 1\n        # If the current index is less than the length of list2, append the element from list2 to the interleaved list\n        else:\n            interleaved_list.append(list2[current_index])\n            current_index += 1\n    # Loop through the remaining elements in list2 and append them to the interleaved list\n    for i in range(len(list2)-current_index):\n        interleaved_list.append(list2[current_index+i])\n    # Loop through the remaining elements in list3 and append them to the interleaved list\n    for i in range(len(list3)):\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the interleaved elements\n    result = []\n    \n    # loop through each list and add its elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the lengths of the lists\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n\n    # Check if the lists are of equal length\n    if len1!= len2 or len1!= len3:\n        return \"Error: Lists must be of equal length\"\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through the lists and add the elements to the interleaved list\n    for i in range(len1):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate through each element in the first tuple\n    for i in test_tup1:\n        # Check if the element exists in the second tuple\n        if i not in test_tup2:\n            # If not, append it to the dissimilar_list\n            dissimilar_list.append(i)\n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # loop through the first tuple and check if each element is present in the second tuple\n    for item in test_tup1:\n        if item not in test_tup2:\n            # if the element is not present in the second tuple, add it to the dissimilar_list\n            dissimilar_list.append(item)\n\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements.append(elem)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Iterate through each element of the first tuple and check if it exists in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            # If the element is not present in the second tuple, add it to the list of dissimilar elements\n            dissimilar_elements.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # creating an empty list to store the dissimilar elements\n    dissimilar = []\n    # iterating over both tuples\n    for i in range(len(test_tup1)):\n        # comparing each element of the two tuples\n        if test_tup1[i]!= test_tup2[i]:\n            # if they are different, appending it to the list\n            dissimilar.append(test_tup1[i])\n    # returning the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of the elements in both tuples\n    common = set(test_tup1) & set(test_tup2)\n    \n    # create a set of the elements in only one of the tuples\n    only_one = set(test_tup1) - set(test_tup2) - common\n    \n    # find the elements that are in both sets, but not in the intersection\n    dissimilar = [x for x in only_one if x in common]\n    \n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Create an empty list to store the even elements\n    even_list = []\n\n    # Iterate through the tuple elements and check if they are even using the even_fnc\n    for element in test_tuple:\n        if even_fnc(element):\n            even_list.append(element)\n\n    # Return the even elements in a new tuple\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # create a nested list from the input tuple\n    nested_list = list(test_tuple)\n\n    # loop through the nested list and remove uneven elements using the provided function\n    for i in range(len(nested_list)):\n        if not even_fnc(nested_list[i]):\n            nested_list.pop(i)\n            i -= 1\n\n    # return the modified nested list as a tuple\n    return tuple(nested_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_tuple = []\n    for i in test_tuple: \n        if not isinstance(i, (tuple, list)): \n            if even_fnc(i): \n                uneven_tuple.append(i)\n        elif isinstance(i, tuple): \n            uneven_tuple.append(even_ele(i, even_fnc))\n    return uneven_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_elements.extend(even_fnc(element))\n        elif even_fnc(element):\n            even_elements.append(element)\n    return even_elements\n\ndef even_numbers(nested_tuple):\n    return [num for num in nested_tuple if num % 2 == 0]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Args:\n        test_tuple: a nested mixed tuple.\n        even_fnc: a function that takes one argument and returns True if the argument is even.\n\n    Returns:\n        A new tuple with the even elements from the original tuple.\n    \"\"\"\n    even_elements = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_elements.extend(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            even_elements.append(element)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_tuple = []\n    for element in test_tuple:\n        if even_fnc(element):\n            uneven_tuple.append(element)\n    return uneven_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store the even elements\n    even_list = []\n    # Iterate over each element in the tuple\n    for item in test_tuple:\n        # If the element is even, add it to the even list\n        if even_fnc(item):\n            even_list.append(item)\n    # Return the even list as the result\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.extend(even_ele(elem, even_fnc))\n        elif isinstance(elem, list):\n            result.extend(even_ele(tuple(elem), even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_fnc(item))\n        else:\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * (b * b + s * s) + 2 * b * s + 2 * b * b + 2 * s * b\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b**2)*(3*s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of a square with the given base and side length\n    area_sq = b * b\n\n    # Calculate the area of the base of the pyramid\n    area_base = s * (s - 1) / 2\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = 3 * area_base + area_sq\n\n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate surface area of square pyramid\n    area = (b*s)/2\n\n    # return the surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Compute the surface area using the formula for a right triangle\n    area = 0.5*b*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base\n    area_base = b * b\n    # Calculate the surface area of the top\n    area_top = area_base + (b * s) + (s * s)\n    # Return the surface area of the entire pyramid\n    return (area_base + area_top) * 2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid\n    surface = (b*s*2)+(s*b*2)+(b*b*4)\n    # Return the surface area of the pyramid\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with the given base and height.\n    \"\"\"\n    base_edge = 2 * base\n    surface_area = 4 * base_edge + 6 * base_edge * height\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    print(\"The surface area of the square pyramid is:\", area)\n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and returns True if it is empty, False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys():\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and checks if it is empty or not.\n    If the dictionary is empty, it will return True, otherwise it will return False.\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the catalan number\n    if n == 0:\n        catalan_num = 1\n    elif n == 1:\n        catalan_num = 1\n    else:\n        # Calculate the previous two catalan numbers\n        catalan_num1 = catalan_number(n-1)\n        catalan_num2 = catalan_number(n-2)\n        # Calculate the catalan number\n        catalan_num = (2*n-1) * catalan_num1 * catalan_num2\n    \n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * catalan_number(n-1)) // (n + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 0\n    for i in range(1, num+1):\n        catalan += (1/factorial(i))\n    return catalan\n\ndef factorial(num):\n    '''\n    Write a function which returns the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Calculate factorial of n\n    fact_n = 1\n    for i in range(1, n+1):\n        fact_n *= i\n\n    # Calculate factorial of (2*n-1)\n    fact_2n1 = 1\n    for i in range(1, 2*n+1):\n        fact_2n1 *= i\n\n    # Calculate catalan number\n    catalan = fact_n / (fact_2n1 * 2**n)\n\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    # Initialize the first two terms of the sequence\n    c1 = 1\n    c2 = 1\n\n    # Calculate the next terms of the sequence\n    for i in range(2, n + 1):\n        c = c1 * c2\n        c1 = c2\n        c2 = c\n\n    return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using dynamic programming.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = (4 * dp[i - 1] + dp[i - 2]) % 1000000007\n        return dp[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number, which is defined as the sum of the binomial coefficients C(n, k) = (n+1)!/(k!*(n-k)!) for k=0, 1,..., n.\n    \"\"\"\n    if n < 0:\n        return \"Error: n must be a non-negative integer.\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        numerator = sum(binomial_coefficient(n, k) for k in range(n+1))\n        denominator = factorial(n+1)\n        return numerator / denominator\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Returns the binomial coefficient C(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        return math.comb(n, k)\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Returns the nth Catalan number. The Catalan number is defined as:\n\n        C(n, k) = binomial(2n, n - k)\n\n    Args:\n        n (int): The index of the binomial coefficient.\n        k (int): The index of the term being computed.\n\n    Returns:\n        int: The value of the nth Catalan number.\n    \"\"\"\n    from scipy.special import binom\n    return binom(2*n, n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Returns nth Catalan number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and print their positions\n    for i, match in enumerate(matches):\n        print(f'Adverb found at position {i}: {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # Loop through the adverbs and print their positions and contents\n    for i, adv in enumerate(adverbs):\n        print(f'Adverb at position {i+1}: {adv}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]*ly\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the words that end with \"ly\" using a regular expression\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n\n    # Iterate through each match and extract the positions of the adverb\n    adverbs = []\n    for match in matches:\n        # Extract the start and end positions of the adverb\n        start = match.start()\n        end = match.end()\n        # Add the adverb to the list of adverbs\n        adverbs.append((start, end))\n\n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b([a-z]+ly)\\b'\n    # Use regular expression search method to find all occurrences of adverbs in the given text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Loop through all matches and print their positions and values\n    for i, match in enumerate(matches):\n        print(f\"Adverb {i+1}: {match[0]} at position {matches.index(match)} in the text\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regex pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n\n    # Use the re.findall() function to find all non-overlapping occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # If there are any adverbs found, return a list of tuples containing the adverb and its positions in the text\n    if adverbs:\n        return [(match, text.index(match)) for match in adverbs]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+(ed|ing|edly|ingly)\\b'\n\n    # Use re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # Print all the matches and their positions\n    for match in matches:\n        print(f\"Match: {match} - Position: {text.find(match)}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through matches and print the positions of each adverb\n    for match in matches:\n        print(match)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds all the adverbs ending with ly in the given text.\n    The output will be a list of tuples, where each tuple contains the adverb found and its position in the text.\n    '''\n    \n    # Regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    \n    # Finding all the occurrences of adverbs ending with ly in the text\n    matches = re.findall(pattern, text)\n    \n    # List of tuples containing adverb and its position in the text\n    result = []\n    \n    # Looping through the matches and appending them to the result list\n    for i, match in enumerate(matches):\n        result.append((match, i))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is full or the item is cheaper than the smallest item in the heap, add the item to the heap\n        if len(heap) < n or item < heap[0]:\n            heapq.heappush(heap, item)\n        # If the heap is not full and the item is the same cost or cheaper than the smallest item in the heap, \n        # remove the smallest item from the heap and add the item to the heap\n        else:\n            smallest_item = heapq.heappop(heap)\n            if item < smallest_item:\n                heapq.heappush(heap, item)\n    # Return the n most expensive items from the heap\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a heap with the lowest prices at the top\n    heappush(heap, (price, item) for item, price in items)\n\n    # remove the lowest n items from the heap\n    for _ in range(n):\n        heappop(heap)\n\n    # extract the items from the heap\n    result = []\n    while heap:\n        result.append(heap[0][1])\n        heappop(heap)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a min heap with the first n items\n    heap = [(-price, item) for item, price in items[:n]]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining items in the dataset\n    for price, item in items[n:]:\n        # Remove the smallest price from the heap\n        if heap[0][0] > price:\n            heapq.heappop(heap)\n\n        # Add the new item with its price to the heap\n        heapq.heappush(heap, (-price, item))\n\n    # Return the n most expensive items in the dataset\n    return [item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items.pop())\n    \n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i][1])\n\n    # Iterate through the dataset and update the heap\n    for i in range(n,len(items)):\n        if items[i][1] < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, items[i][1])\n\n    # Return the n most expensive items\n    return [item[0] for item in heapq.nsmallest(n,min_heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order based on their prices\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Create a min heap of size n to store the top n items\n    min_heap = []\n    \n    # Iterate through the sorted items and add them to the min heap\n    for item in sorted_items:\n        heapq.heappush(min_heap, item)\n        \n        # If the heap size exceeds n, remove the least expensive item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Extract the top n items from the heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input,\n    and returns a list containing the n most expensive items in the dataset.\n    \"\"\"\n\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items.pop())\n\n    # Add the remaining items to the min heap\n    while items:\n        heapq.heappush(min_heap, items.pop())\n\n    # Return the n smallest items from the min heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid index\"\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is greater than n\n    if len(l) > n:\n        # split the list at the nth element\n        mid = len(l) // 2\n        part1 = l[:mid]\n        part2 = l[mid:]\n        # add the first part to the end of the list\n        l = part1 + [part2]\n        # print the modified list\n        print(l)\n    else:\n        print(\"The length of the list should be greater than or equal to n.\")"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2\n    else:\n        print(\"List is not long enough to split at the given position\")"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a list to hold the first part of the list\n    first_part = []\n    # create a list to hold the second part of the list\n    second_part = []\n    # iterate over the elements of the list and add them to their respective lists\n    for i in l:\n        if i < n:\n            first_part.append(i)\n        else:\n            second_part.append(i)\n    # concatenate the first and second parts and return the result\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l.pop(0))\n    new_list.extend(l)\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l, []\n    else:\n        mid = len(l) // 2\n        if mid == n:\n            return [], l\n        elif mid < n:\n            left, right = split_Arr(l[:mid], n)\n            return left, l[mid:] + right\n        else:\n            left, right = split_Arr(l[mid:], n-mid-1)\n            return l[:mid] + left, right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return 'Invalid input'\n    else:\n        arr1 = l[:n]\n        arr2 = l[n:]\n        arr1.append(arr2[0])\n        return arr1 + arr2[1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Split the list at the nth element\n    first, second = l[:n], l[n:]\n\n    # Concatenate the first part with the second part\n    l = first + second\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Divide the list into two parts at the nth position\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Combine the two parts and return the result\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: List length is less than n.\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Get the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the difference between the maximum and minimum values\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the smallest value in the list\n    smallest = min(nums)\n    \n    # find the largest value in the list\n    largest = max(nums)\n    \n    # calculate the difference between the two values\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # finding the largest and smallest value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # subtracting the smallest value from the largest value and returning the difference\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Return the difference between the largest and smallest values\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n\n    # Find the maximum and minimum values in the list\n    max_value = max(nums)\n    min_value = min(nums)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_value - min_value\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return abs(largest - smallest)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    \n    # loop through all numbers from a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == i:\n            # if it is, append it to the list\n            perfect_squares_list.append(i**2)\n    \n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store perfect squares\n    perfect_squares_list = []\n    \n    # Loop through a range of integers from a to b\n    for i in range(a, b+1):\n        # If the integer i is a perfect square, add it to the list of perfect squares\n        if i**2 == i:\n            perfect_squares_list.append(i**2)\n            \n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        square = num ** 2\n        if square == num:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        num_squares = 0\n        temp_num = i\n\n        while temp_num > 0:\n            if temp_num % 2 == 0:\n                num_squares += 1\n                temp_num //= 2\n            else:\n                temp_num -= 1\n\n        if num_squares == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through each number from a to b, inclusive\n    for num in range(a, b+1):\n        # Calculate the square of the current number\n        square = num**2\n        \n        # Add the square to the sum of squares\n        sum_of_squares += square\n        \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        square = i ** 2\n        if square == i and square > 0:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize the variable to store the result\n    result = []\n    \n    # Loop through the range of b-a+1\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i**2 == a**2 + i**2:\n            result.append(i)\n    \n    # Return the list of perfect squares\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    squares = []\n    # loop through all integers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i*i == i:\n            # if so, add it to the list of perfect squares\n            squares.append(i)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store perfect squares\n    squares = []\n    # iterate through all integers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num == int(num**0.5)**2:\n            # add the square to the list of perfect squares\n            squares.append(num)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)\n\nx = float(input(\"Enter the value of x: \"))\ny = float(input(\"Enter the value of y: \"))\n\nr, theta = polar_rect(x,y)\n\nprint(\"Polar coordinates:\", r, \"(\", x, \",\", y, \")\")\nprint(\"Rectangular coordinates:\", r*cmath.cos(theta), \",\", r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle to radians\n    phi = cmath.radians(phi)\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    This function takes two parameters, r and phi, representing the\n    radius and angle of a point in polar coordinates respectively.\n    It returns the corresponding x and y coordinates of the point\n    in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert r to complex number\n    z = cmath.rect(r)\n    # Calculate x and y coordinates using polar formulas\n    x = z.real*cmath.cos(theta) - z.imag*cmath.sin(theta)\n    y = z.real*cmath.sin(theta) + z.imag*cmath.cos(theta)\n    # Return x and y coordinates as a tuple\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radial coordinate.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: The rectangular coordinate (x, y).\n\n    Examples:\n    >>> polar_rect(3, 0.5)\n    (4.0, 3.0)\n\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert r to complex number\n    r = complex(r)\n    \n    # Calculate complex number for x and y\n    x = r * cmath.exp(1j*theta)\n    \n    # Return tuple of x and y\n    return x.real, x.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y) using the formula:\n    x = r * cos(theta)\n    y = r * sin(theta)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(phi)\n    y_rect = r * cmath.sin(phi)\n    return x_rect, y_rect"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # If the length of the list is less than or equal to 1, return the list as is\n    if length <= 1:\n        return newList\n\n    # If the length of the list is greater than 1, swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is 0 or 1, if yes, there is nothing to swap\n    if length <= 1:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"The list must have at least two elements.\""
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List must contain at least two elements\")\n        return\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        print(\"The list must have at least two elements to perform the swap.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the binomial coefficients up to n choose k\n    for i in range(k, n+1): \n        # Multiply the binomial coefficient with the previous binomial coefficient to get the sum\n        sum += i * (n-i+1)\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_product = 0\n    for i in range(1,k+1):\n        numerator = (n+1)*i\n        denominator = (i*(n-i+1))\n        product = numerator/denominator\n        sum_of_product += product\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    \n    coeff = 1\n    for i in range(k,n+1):\n        coeff *= i\n        coeff //= (n-k+i)\n\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return ((n * (n-1))//2) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # To find the sum of the product of consecutive binomial co-efficients, we need to calculate the number of combinations\n    # of n items and k items.\n    # Then, we can multiply each combination together to get the sum.\n    # Finally, we can return the sum.\n    combinations = n - k + 1\n    product_sum = 1\n    for i in range(k):\n        product_sum *= combinations\n        combinations -= 1\n    return product_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    count = 1\n    total = 0\n    while count <= k:\n        total += coeff\n        coeff = (coeff*(n-count+1))//count\n        count += 1\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1 or k == n:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to 0\n    sum_coeff = 0\n    # Calculate the binomial coefficient using the formula: C(n,k) = C(n,n-k)\n    coeff = 1\n    for i in range(n,k,-1):\n        coeff = coeff * i\n    # Add the calculated binomial coefficient to the sum\n    sum_coeff = sum_coeff + coeff\n    # Return the sum of the binomial coefficients\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the binomial coefficient using the formula (n choose k)\n    coeff = math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n    # Find the sum of the product of consecutive binomial co-efficients using the formula\n    # S = 1/2 * (binomial_Coeff(n,k) + binomial_Coeff(n,k-1))\n    sum = 0.5*coeff\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n\n    if ip_pattern.match(ip):\n        ip_parts = ip.split('.')\n        for i in range(4):\n            if ip_parts[i].startswith('0'):\n                ip_parts[i] = ip_parts[i][1:]\n            else:\n                break\n        return '.'.join(ip_parts)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0|\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.0|\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*(0\\.0\\.0\\.0)\\s*$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub('^0+', '', ip) # Remove leading zeroes\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'^\\d+\\.', '', ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    match = re.search(ip_pattern, ip)\n    if match:\n        return re.sub(r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b', match.group(0), ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'\\A\\d+\\.\\d+\\.\\d+\\.\\d+\\Z'\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n    if re.match(pattern, ip):\n        ip = ip.lstrip('0')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Define a regular expression pattern to match an IP address\n    pattern = r\"^(\\d{1,3}\\.){3}\\d{1,3}$\"\n    # Use the re.match() function to match the pattern against the input IP address\n    match = re.match(pattern, ip)\n    # If the pattern matches, return the matched IP address with leading zeroes removed\n    if match:\n        return re.sub(r\"^0+(?=\\d)\", \"\", ip)\n    # If the pattern does not match, return the original IP address\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number in the list.\n    '''\n    # initialize variables for even and odd numbers\n    even = None\n    odd = None\n    \n    # loop through each number in the list\n    for num in lst:\n        # if the number is even and hasn't been initialized yet\n        if num % 2 == 0 and even is None:\n            even = num\n        # if the number is odd and hasn't been initialized yet\n        elif num % 2!= 0 and odd is None:\n            odd = num\n        # if both the even and odd numbers have been initialized\n        elif even is not None and odd is not None:\n            # calculate the difference and return it\n            return abs(even - odd)\n    \n    # if the function has reached this point, the list is empty or contains only one element\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function finds the difference of the first even and first odd number of a given list.\n\n    Parameters:\n    lst (list): a list of numbers\n\n    Returns:\n    int: the difference of the first even and first odd number of the given list\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    if even_num is None or odd_num is None:\n        return \"List does not have at least two even and two odd numbers.\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0 and odd % 2 == 0:\n        return abs(even - odd)\n    elif even % 2 == 0 and odd % 2 == 1:\n        return abs(even - odd) + abs(odd - even)\n    elif even % 2 == 1 and odd % 2 == 0:\n        return abs(even - odd) + abs(even - odd)\n    else:\n        return abs(even - odd) + abs(odd - even)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0 and odd_num % 2 == 0:\n        return abs(even_num - odd_num)\n    else:\n        return \"The list should contain both even and odd numbers.\"\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = list1[0]\n    odd_num = list1[-1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # checking if list has at least 2 elements\n    if len(list1) < 2:\n        return \"List has less than 2 elements.\"\n    # initializing even and odd indexes\n    even_index = 0\n    odd_index = 0\n    # initializing even and odd values\n    even_value = list1[0]\n    odd_value = list1[1]\n    # looping through the list\n    while odd_index < len(list1):\n        # checking if the current value is even or odd\n        if list1[odd_index] % 2 == 0:\n            even_value -= list1[odd_index]\n            even_index += 1\n        else:\n            odd_value -= list1[odd_index]\n            odd_index += 1\n        # checking if the even and odd values have been updated\n        if even_index == 0:\n            even_value = list1[0]\n        if odd_index == 0:\n            odd_value = list1[1]\n    # returning the difference\n    return abs(even_value - odd_value)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # iterate over the list\n    for i in range(len(list1)):\n\n        # if the number is even, add it to the sum\n        if list1[i] % 2 == 0:\n            sum_even += list1[i]\n\n        # if the number is odd, add it to the sum\n        if list1[i] % 2!= 0:\n            sum_odd += list1[i]\n\n    # return the difference between the sums\n    return abs(sum_even - sum_odd)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2): \n    # create two lists to store the binary numbers in their respective positions \n    # and convert both strings to binary \n    num1 = [int(i) for i in bin(int(str1, 2))[2:]] \n    num2 = [int(i) for i in bin(int(str2, 2))[2:]] \n\n    # initialize a variable to store the minimum number of swaps required \n    # and initialize another variable to store the minimum number of swaps required \n    # in reverse order (i.e., the minimum number of swaps required to convert num1 to num2) \n    min_swaps = float('inf') \n    min_swaps_rev = float('inf') \n\n    # iterate through the length of both binary numbers \n    for i in range(len(num1)): \n        # find the minimum number of swaps required to convert num1[i] to num2[i] \n        swaps = abs(num1[i] - num2[i]) \n        # check if the minimum number of swaps required is smaller than the current minimum \n        # and update the min_swaps variable if it is \n        if swaps < min_swaps: \n            min_swaps = swaps \n        # check if the minimum number of swaps required in reverse order is smaller than the current \n        # minimum and update the min_swaps_rev variable if it is \n        if swaps < min_swaps_rev: \n            min_swaps_rev = swaps \n\n    # return the minimum number of swaps required \n    return min_swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1 #if the length of binary numbers is not same, then return -1 as there is no way to swap them.\n    \n    #convert strings to binary\n    binary1 = int(str1, 2)\n    binary2 = int(str2, 2)\n    \n    #create a 2D array to store the number of swaps required for each digit combination\n    swap_matrix = [[0 for i in range(10)] for j in range(10)]\n    \n    #fill the swap matrix with the required number of swaps\n    for i in range(10):\n        for j in range(10):\n            for k in range(2):\n                if k == 0:\n                    if (binary1 & (1 << (i*2+j))) > 0 and (binary2 & (1 << (i*2+j))) == 0:\n                        swap_matrix[i][j] += k\n                else:\n                    if (binary1 & (1 << (i*2+j))) == 0 and (binary2 & (1 << (i*2+j))) > 0:\n                        swap_matrix[i][j] += k\n    \n    #create a list of swaps required to convert the two binary numbers\n    swaps_list = []\n    for i in range(10):\n        for j in range(10):\n            if swap_matrix[i][j] > 0:\n                swaps_list.append((i,j,swap_matrix[i][j]))\n    \n    #sort the swaps_list based on the minimum number of swaps required\n    swaps_list.sort(key=lambda x: x[2])\n    \n    #return the minimum number of swaps required\n    return swaps_list[0][2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the given binary numbers into a list of digits\n    num1 = [int(digit) for digit in str1]\n    num2 = [int(digit) for digit in str2]\n\n    # Compare the digits of both numbers and count the number of swaps required to convert one number to another\n    swaps = 0\n    for i in range(len(num1)):\n        if num1[i] > num2[i]:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the input binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables for swaps\n    swap_count = 0\n    remainders = []\n\n    # loop through all bits in the binary number\n    while num1!= 0 or num2!= 0:\n        # calculate the remainder of the division of num1 by num2\n        remainder = num1 % num2\n\n        # add the remainder to the remainders list\n        remainders.append(remainder)\n\n        # calculate the quotient of num1 by num2\n        quotient = num1 // num2\n\n        # swap num1 and num2 if the remainder is greater than the quotient\n        if remainder > quotient:\n            swap_count += 1\n            num1, num2 = num2, num1\n\n        # move num1 and num2 one bit to the right\n        num1, num2 = num1 // 2, num2 // 2\n\n    # sort the remainders in non-decreasing order\n    remainders.sort()\n\n    # initialize the count of swaps required to convert the binary strings to integers\n    total_swaps = 0\n\n    # loop through the remainders list and calculate the swaps required to convert them to integers\n    for remainder in remainders:\n        total_swaps += len(str(remainder))\n\n    # return the minimum number of swaps required to convert the binary strings to integers\n    return total_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Calculate the number of swaps required\n    diff = abs(num1 - num2)\n    swaps = 0\n    \n    while diff!= 0:\n        # Check if the remainder of the difference is even or odd\n        if diff % 2 == 0:\n            diff = diff // 2\n        else:\n            diff = diff - 1\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both binary numbers into lists of 0s and 1s\n    binary1 = [int(i) for i in str1[::-1]]\n    binary2 = [int(i) for i in str2[::-1]]\n\n    # Find the length of the binary numbers\n    n1 = len(binary1)\n    n2 = len(binary2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate through all pairs of bits in the binary numbers\n    for i in range(n1):\n        for j in range(n2):\n            # If the bits are different, swap the bits and increment the minimum number of swaps\n            if binary1[i]!= binary2[j]:\n                binary1[i], binary2[j] = binary2[j], binary1[i]\n                min_swaps += 1\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function counts the minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Parameters:\n    str1 (str): A binary number represented as a string.\n    str2 (str): Another binary number represented as a string.\n\n    Returns:\n    int: The minimum number of swaps required to convert str1 to str2.\n    \"\"\"\n\n    # Convert str1 and str2 to binary\n    binary_str1 = bin(int(str1, 2))[2:]  # skip the \"0b\" prefix\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # Count the number of common bits between the two binary strings\n    common_bits = 0\n    for i in range(len(binary_str1)):\n        if binary_str1[i] == binary_str2[i]:\n            common_bits += 1\n        else:\n            break\n\n    # Calculate the minimum number of swaps required\n    swaps = len(binary_str1) - common_bits\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize the count of swaps\n    swaps = 0\n\n    # loop through each bit in the numbers\n    for i in range(32):\n        # if the bits are not the same, swap them\n        if (num1 & 1)!= (num2 & 1):\n            num1, num2 = num2, num1\n            swaps += 1\n\n        # shift the bits to the right\n        num1 >>= 1\n        num2 >>= 1\n\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the input strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    \n    # Find the number of swaps required to convert binary1 to binary2\n    swaps = 0\n    i = 0\n    while i < len(binary1) and i < len(binary2):\n        if binary1[i]!= binary2[i]:\n            swaps += 1\n        i += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        return \"Both binary strings must have the same length.\"\n    if not str1.isdigit():\n        return \"Both binary strings must be valid binary numbers.\"\n    binary_num1 = int(str1, 2)\n    binary_num2 = int(str2, 2)\n\n    # Convert binary number to decimal and calculate the difference\n    decimal_num1 = 0\n    decimal_num2 = 0\n    for i in range(len(str1)):\n        decimal_num1 += (1 << (len(str1) - i - 1)) * (binary_num1 & 1)\n        decimal_num2 += (1 << (len(str1) - i - 1)) * (binary_num2 & 1)\n        binary_num1 >>= 1\n        binary_num2 >>= 1\n\n    # Calculate the absolute difference\n    abs_diff = abs(decimal_num1 - decimal_num2)\n\n    # Calculate the number of swaps required\n    num_swaps = 0\n    for i in range(len(str1)):\n        if (decimal_num1 & (1 << (len(str1) - i - 1)))!= (decimal_num2 & (1 << (len(str1) - i - 1))):\n            num_swaps += 1\n\n    return num_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for elem in tuple_list:\n        total_size += sys.getsizeof(elem)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 0:\n        return 0\n\n    total_size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        total_size += sys.getsizeof(item)\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes\n    bytes_data = bytes(tuple_list)\n    \n    # Get the length of the bytes object\n    bytes_length = len(bytes_data)\n    \n    # Get the size of one element in bytes\n    element_size = sys.getsizeof(1)\n    \n    # Return the size of the tuple in bytes\n    return bytes_length * element_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    max_size = 0\n    for tuple in tuple_list:\n        current_size = sys.getsizeof(tuple)\n        if current_size > max_size:\n            max_size = current_size\n    return max_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two arrays into a single sorted array\n    arr = arr1 + arr2\n    arr.sort()\n    # Return the kth element from the merged array\n    return arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    return min(arr1[i-1], arr2[j-1])"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    kth_element = None\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if kth_element is None or arr1[i] < kth_element:\n                kth_element = arr1[i]\n                k -= 1\n            i += 1\n        else:\n            if kth_element is None or arr2[j] < kth_element:\n                kth_element = arr2[j]\n                k -= 1\n            j += 1\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged = sorted(arr1 + arr2)\n\n    # Return the kth element from the merged array\n    return merged[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    if k == 1:\n        if i < n1:\n            return arr1[i]\n        else:\n            return arr2[j]\n    else:\n        if i < n1:\n            return None\n        else:\n            return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n    # if any of the arrays is completely traversed, return the remaining element(s)\n    if i == len(arr1):\n        return arr2[j:k]\n    else:\n        return arr1[i:k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 0:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    i = j = 0  # Initialize two pointers\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    if k == 0:\n        return arr1[i]\n    elif k < 0:\n        return find_kth(arr1[:i], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:j], k)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n    if k == 1:\n        return arr1[-1] if len(arr1) > 0 else arr2[-1]\n    else:\n        return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Check if the input number is a positive integer\n    if not isinstance(number, int) or number < 0:\n        return \"Invalid input\"\n\n    # Calculate the sum of the cubes of each digit in the number\n    total = 0\n    num_str = str(number)\n    for digit in num_str:\n        total += int(digit) ** 3\n\n    # Check if the total is equal to the input number\n    if total == number:\n        return \"The number is an Armstrong number.\"\n    else:\n        return \"The number is not an Armstrong number.\""
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    # Convert the number to a string\n    num_str = str(number)\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = 0\n    for digit in num_str:\n        cube = int(digit) ** 3\n        sum_of_cubes += cube\n    # Compare the original number with the sum of its cubes\n    return number == sum_of_cubes"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number = str(number)\n    # Get the length of the number\n    length = len(number)\n    # Calculate the sum of the cubes of the digits of the number\n    sum = 0\n    for digit in number:\n        sum += int(digit) ** length\n    \n    # Check if the sum is equal to the original number\n    if sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reverse_str = str(n)[::-1]\n\n    # Calculate the sum of the cubes of each digit in the reversed string\n    sum_of_cubes = 0\n    for digit in reverse_str:\n        sum_of_cubes += int(digit)**3\n\n    # Compare the original number with the sum of the cubes\n    return n == sum_of_cubes"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize a variable to count the number of digits\n    count = 0\n\n    # Iterate through the digits of the given number\n    while number > 0:\n        # Append the last digit to the count variable\n        count += number % 10\n        # Remove the last digit from the number\n        number //= 10\n\n    # Check if the count variable is equal to the original number\n    if count == number:\n        # Return True if the number is armstrong\n        return True\n    else:\n        # Return False if the number is not armstrong\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Create a dictionary to store the powers of each digit in the number\n    digit_powers = {}\n    for digit in str(number):\n        digit_powers[digit] = digit_powers.get(digit, 0) + 1\n\n    # Compute the sum of the powers of each digit in the number\n    sum_of_powers = sum(digit_powers.values())\n\n    # Check if the sum of the powers is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and get its digits\n    digits = [int(d) for d in str(number)]\n    # Compute the sum of the cubes of the digits\n    cube_sum = sum([d**3 for d in digits])\n    # Check if the sum is equal to the original number\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string and remove any leading zeros\n    num_str = str(number).lstrip('0')\n    # calculate the sum of the squares of the digits\n    sum_squares = sum([int(digit)**len(num_str) for digit in num_str])\n    # compare the sum of the squares with the original number\n    return number == sum_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_string = str(number)\n    sum_of_powers = 0\n    \n    for digit in number_string:\n        power = len(number_string) - number_string.index(digit) + 1\n        sum_of_powers += int(digit) ** power\n    \n    return sum_of_powers == number\n\nprint(armstrong_number(153)) # Output: True\nprint(armstrong_number(100)) # Output: False\nprint(armstrong_number(9474)) # Output: True"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    print(\"Sum of first\", number, \"natural numbers is:\", total)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n\n    # loop through first n numbers\n    for i in range(number):\n        # add the number to the total\n        total += i\n\n        # increment the count\n        count += 1\n\n    # calculate the sum\n    sum_value = total\n\n    # calculate the average\n    average = sum_value / count\n\n    # return the sum and average\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(n):\n        sum_n += i + 1\n    average = sum_n / n\n    print(\"Sum of first {} natural numbers is: {}\".format(n, sum_n))\n    print(\"Average of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize sum and count to zero\n    sum_ = 0\n    count = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, number+1):\n        # Add current number to sum\n        sum_ += i\n        # Increment count\n        count += 1\n\n    # Calculate average\n    average = sum_ / count\n\n    # Return sum and average\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the value of n: \"))\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    print(\"The sum of the first\", number, \"natural numbers is\", sum)\n    print(\"The average of the first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count += 1\n    average = sum_of_numbers / count\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    sum_num = sum(sum_list)\n    average = sum_num / number\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Add the current number to the sum and increment count\n        sum += i\n        count += 1\n\n    # Calculate and return the average\n    return sum / count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Iterate from 1 to n\n    for i in range(1, number + 1):\n        # Add the current number to sum\n        sum += i\n        # Increment count\n        count += 1\n\n    # Calculate the average\n    average = sum / count\n\n    # Return the sum and average\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n as input and returns True if n is even and False otherwise.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    seen = {}\n    for char in str1:\n        if char in seen:\n            return char\n        seen[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    for char in freq:\n        if freq[char] > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # loop through each character in the dictionary\n    for char in char_count:\n        # if the count is greater than 1, return the character and its count\n        if char_count[char] > 1:\n            return char, char_count[char]\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character in the dictionary that appears more than once\n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n):\n        if i > 1 and i % 2 == 0:\n            ludic_numbers.append(i)\n        elif i > 1 and i % 2!= 0:\n            j = 3\n            while j <= n:\n                if i*j <= n:\n                    ludic_numbers.append(i*j)\n                j += 2\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            ludic_nums.append(i)\n        else:\n            is_lucid = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                ludic_nums.append(i)\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            ludic_numbers.append(num)\n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # initialize an empty list to store the lucid numbers\n    lucids = []\n\n    # loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            # if i is not a lucid number, break out of the loop\n            if i % j == 0:\n                is_lucid = False\n                break\n        # if i is a lucid number, add it to the list\n        if is_lucid:\n            lucids.append(i)\n\n    # return the list of lucid numbers\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = []\n    i = 2\n    while True:\n        if i > n:\n            break\n        lucid_nums.append(i)\n        i += 1\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucids = []\n    i = 1\n\n    while i <= n:\n        if is_lucid(i):\n            lucids.append(i)\n        i += 1\n\n    return lucids\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n\n    num_str = str(num)\n    digits = [int(digit) for digit in num_str]\n    digits.sort()\n\n    for i in range(len(digits)):\n        if digits[i]!= i + 1:\n            return False\n\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if sum([int(digit) for digit in str(i)]) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(1, n+1):\n        if i < 10 or (i >= 10 and i % 10!= 0):\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n + 1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Helper function to check if a given integer is a lucid number.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Initialize a boolean variable to check if n is prime\n    is_prime = True\n\n    # Loop through all numbers between 2 and n\n    for i in range(2, n+1):\n\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # If the number is prime, add it to the list of lucid numbers\n        if is_prime:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove leading and trailing spaces from string\n    s = s.strip()\n\n    # split string into words\n    words = s.split()\n\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n\n    # join reversed words with spaces\n    reversed_s =''.join(reversed_words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using split() method\n    words = s.split()\n    # loop through each word and reverse it using reverse() method\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words with spaces and return the result\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces and then reverse each word using reverse() function\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the reversed words by spaces and return the result\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the reversed words back together into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # remove leading and trailing spaces and split the string into words\n    words = s.strip().split()\n\n    # reverse each word and join them back into a string\n    reversed_words = [word[::-1] for word in words]\n\n    # join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))  # Output: True\nprint(is_prime(11))  # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.pi/180*degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree in degrees and returns it in radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    return matches[0], matches[0].start(), matches[0].end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regex pattern in a string and returns the matching substrings, a start index and an end index.\n    '''\n\n    matches = re.finditer(pattern, text)\n\n    # Initialize empty list to store matches\n    matches_list = []\n\n    # Loop through each match and append to list\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        matches_list.append((match.group(), start_index, end_index))\n\n    return matches_list"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # use the re.search() method to search the text for the pattern\n    match = re.search(pattern, text)\n    \n    # if there is a match, return the subtring, start index, and end index\n    if match:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index\n    \n    # otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    # Find all the matches in the text\n    matches = regex.findall(text)\n    # Iterate through the matches and return the start and end index of the matches\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        return match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append(match.group())\n        result.append(match.start())\n        result.append(match.end())\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    if literals:\n        return literals[0], 0, len(literals[0])\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return (2*bell_Number(n-1) - bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        if i % 2 == 0:\n            print(a, end=' ')\n            a, b = b, a + b\n        else:\n            print(a, end=' ')\n            a, b = a + b, b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize a variable to store the nth Bell number\n    bell_num = 0\n    \n    # Iterate from 0 to n-1\n    for i in range(n): \n        # Add the product of the previous bell number and i to bell_num\n        bell_num += (i * (i+1)) // 2\n    \n    # Return the nth bell number\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Bell number of 0th term is 1\n    if n == 0:\n        return 1\n\n    # Bell number of 1st term is 2\n    elif n == 1:\n        return 2\n\n    # Bell number of 2nd term is 5\n    elif n == 2:\n        return 5\n\n    # Bell number of 3rd term is 11\n    elif n == 3:\n        return 11\n\n    # Bell number of 4th term is 20\n    elif n == 4:\n        return 20\n\n    # Bell number of n-th term is (2*n-1)^n + (2*n-1)\n    else:\n        return (2*n-1)**n + (2*n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth bell number.\n    '''\n    # Initialize a list of bell numbers\n    bell_numbers = []\n    bell_numbers.append(0)\n    bell_numbers.append(1)\n    bell_numbers.append(1)\n\n    # Calculate bell numbers up to nth\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(1, n+1):\n            bell_num = (bell_num * i) // (i - 1)\n        return bell_num"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialize a variable to store the index of the last element\n    last = len(list1) - 1\n    # loop through the list from the second to the last element\n    for i in range(1, last):\n        # if the current index is equal to k-1, move the last element to its place\n        if i == L - 1:\n            list1[i] = list1[last]\n            last -= 1\n        # if the current index is less than k-1, move the current element to its place\n        else:\n            list1[i] = list1[i-1]\n    # return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # create a list to store the elements of list1 before the kth element is removed\n    before = []\n    # create a list to store the elements of list1 after the kth element is removed\n    after = []\n    # loop through list1\n    for i in range(len(list1)):\n        # if i is equal to L-1, then we have found the kth element\n        if i == L-1:\n            # if the length of after is greater than 0, then we have more than one element after the kth element\n            if len(after) > 0:\n                # remove the kth element from after and add it to before\n                before.append(after.pop(0))\n        else:\n            # if the length of before is greater than 0, then we have more than one element before the kth element\n            if len(before) > 0:\n                # add the element at index i to before\n                before.append(list1[i])\n            # if the length of after is greater than 0, then we have more than one element after the kth element\n            if len(after) > 0:\n                # add the element at index i to after\n                after.append(list1[i])\n    # return the result of before and after lists\n    return before + after"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return []\n    else:\n        L = L // 2\n        if L == 0:\n            return [list1[1]]\n        else:\n            return [list1[0]] + remove_kth_element(list1[1:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)-k):\n        list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:L]\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return \"Invalid value of L\"\n    \n    result = list1[:L-1] + list1[L:]\n    \n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L-1 # k is the position of the element to be removed (k=L-1 means removing the last element)\n    list1.pop(k) # pop() method is used to remove the element at position k\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_val to the first element of the list\n    max_val = test_list[0][N-1]\n    # loop through the rows of the matrix\n    for row in test_list:\n        # if the nth column is greater than max_val, update max_val\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    # return max_val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Get then'th column of the row as a list\n        nth_col = [row[i] for i in range(len(row)) if i % N == 0]\n        # Find the maximum value in then'th column\n        max_value = max(nth_col)\n        # Replace the maximum value in then'th column with the maximum value from the original row\n        for i in range(len(nth_col)):\n            if nth_col[i] == max_value:\n                nth_col[i] = row[i]\n        # Replace the original row with the modified row\n        test_list[test_list.index(row)] = nth_col\n    # Return the modified matrix\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists and the index of the column to consider, returns the maximum value of that column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(matrix)):\n        if matrix[i][N] > max_value:\n            max_value = matrix[i][N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            if max_val < test_list[i][N-1]:\n                max_val = test_list[i][N-1]\n        else:\n            if max_val < test_list[i][N]:\n                max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n\n    if N > m:\n        return None\n\n    max_val = float('-inf')\n\n    for i in range(n):\n        max_val = max(max_val, test_list[i][N-1])\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        temp_list = test_list[i][N-1]\n        for j in range(N-1):\n            test_list[i][j] = test_list[i][j+1]\n        test_list[i][N-1] = temp_list\n    max_val = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    if N > num_cols:\n        return None\n    max_val = float('-inf')\n    for i in range(num_rows):\n        if i == 0:\n            max_val = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # create a new list of lists to store the nth column\n    nth_col = []\n    # iterate through each row of the matrix\n    for row in test_list:\n        # append the nth column value to the new list\n        nth_col.append(row[N-1])\n    # use the max() function to find the maximum value in the nth column\n    max_value = max(nth_col)\n    # return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    n = len(test_list[0])\n    for i in range(len(test_list)):\n        if i == N:\n            break\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) < N:\n            continue\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    # Create an empty list to store the merged lists\n    merged_lst = []\n\n    # Iterate through each sublist in the original list\n    for sublist in lst:\n\n        # Check if the length of the sublist is 2\n        if len(sublist) == 2:\n\n            # Extract the first and second elements from the sublist and add them to the first and second lists of the merged list\n            merged_lst.append([sublist[0], sublist[1]])\n\n    # Return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize variables\n    cumulative_sum = 0\n    current_sum = 0\n\n    # Loop over the list of tuples\n    for tup in test_list:\n        # Extract the values from the tuple\n        value = tup[0]\n\n        # Add the value to the current sum\n        current_sum += value\n\n        # Add the current sum to the cumulative sum\n        cumulative_sum += current_sum\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize cumulative sum to 0\n    cum_sum = 0\n\n    # iterate through the list of tuples\n    for i in test_list:\n        # if the value is not None, add it to the cumulative sum\n        if i[1] is not None:\n            cum_sum += i[1]\n\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    sum = 0\n    for value in test_list:\n        sum += value\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # iterate over each tuple in the list\n    for tup in test_list:\n        # add the value of the tuple to the cumulative sum\n        cum_sum += tup\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for tup in test_list:\n        for val in tup:\n            cumsum += val\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # initialize an empty list to store the cumulative sum of the values in the list\n    cumulative_sum = []\n\n    # loop through each tuple in the list\n    for tup in test_list:\n        # extract the values from the tuple and append them to the cumulative sum list\n        cumulative_sum.append(tup[0])\n\n    # loop through each value in the cumulative sum list and add it to the previous value to get the cumulative sum of all values\n    for i in range(1, len(cumulative_sum)):\n        cumulative_sum[i] += cumulative_sum[i-1]\n\n    # return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to hold the averages for each tuple\n    averages = []\n    # loop over each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize a variable to store the sum of the tuple elements\n        total = 0\n        # loop over each element in the tuple\n        for elem in tup:\n            # add the element to the sum\n            total += elem\n        # divide the sum by the number of elements in the tuple\n        average = total / len(tup)\n        # add the average to the averages list\n        averages.append(average)\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            total = sum(num)\n            count = len(num)\n            average = total / count\n            result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        temp = []\n        for j in range(len(nums[i])):\n            temp.append(nums[i][j])\n        result.append(sum(temp)/len(temp))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values for each tuple\n    averages = []\n    # loop through each tuple in the input tuple\n    for tup in nums:\n        # loop through each element in the tuple\n        for element in tup:\n            # add the element to the sum\n            sum += element\n        # divide the sum by the length of the tuple to get the average\n        average = sum / len(tup)\n        # append the average to the averages list\n        averages.append(average)\n        # reset the sum to 0\n        sum = 0\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        result.append(total/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        averages.append(total/len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # create an empty list to store the averages\n    averages = []\n\n    # loop through each tuple in the input tuple\n    for tup in nums:\n        # calculate the sum of all the numbers in the tuple\n        total = sum(tup)\n        # calculate the average by dividing the sum by the length of the tuple\n        avg = total / len(tup)\n        # append the average to the list\n        averages.append(avg)\n\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        count = len(num_tuple)\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    # Perform element-wise modulo using a list comprehension\n    result_tup = [a % b for a, b in zip(test_tup1, test_tup2)]\n\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n    \n    # Perform element wise modulo\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have same length\")\n    # Perform element wise modulo\n    result = tuple((x % y for x, y in zip(test_tup1, test_tup2)))\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Start with the first point (0, 0)\n    x, y = 0, 0\n\n    # Initialize the jumps counter\n    jumps = 0\n\n    # Loop until we reach the point (d, 0)\n    while x!= d:\n\n        # Check if we can go up or down\n        if y > 0:\n            y -= 1\n            jumps += 1\n\n        elif y < 0:\n            y += 1\n            jumps += 1\n\n        else:\n            # We can only go left\n            y = 0\n            x -= 1\n            jumps += 1\n\n        # Check if we have reached the end of the 2d plane\n        if x < 0 or y < 0:\n            return -1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # check if the starting point is already at the desired point\n    if steps[0][0] == d and steps[0][1] == 0:\n        return 0\n    \n    # create a list to store the number of jumps required\n    jumps = []\n    \n    # loop through all the steps and find the minimum number of jumps\n    for step in steps:\n        if step[0] > d:\n            jumps.append(1)\n        elif step[0] == d and step[1] == 0:\n            jumps.append(0)\n        else:\n            # calculate the number of jumps required to reach the desired point\n            jump_required = min_Jumps(steps[step[1]:], d)\n            \n            # add the number of jumps required to the current jumps list\n            jumps.append(jump_required+1)\n    \n    # return the minimum number of jumps required\n    return min(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initializing variables\n    curr_pos = (0, 0)\n    jumps = 0\n\n    # Loop until the current position is at the desired point\n    while curr_pos!= (d, 0):\n        # Updating the current position\n        if curr_pos[0] < d:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1])\n        else:\n            curr_pos = (curr_pos[0], curr_pos[1] + 1)\n        jumps += 1\n\n        # Checking if we have reached the destination point\n        if curr_pos == (d, 0):\n            return jumps\n\n    # If we have not reached the destination point, the function will return -1 since we cannot reach the destination point in any way\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initializing variables\n    curr_point = (0, 0)\n    count = 0\n\n    # Looping through all possible points\n    while curr_point!= (d, 0):\n\n        # Updating the current point\n        next_point = (curr_point[0]+1, curr_point[1])\n\n        # Counting the number of jumps\n        count += 1\n\n        # Checking if the next point is within the bounds of the grid\n        if next_point[0] >= steps:\n            break\n\n        # Updating the current point\n        curr_point = next_point\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the given length of steps is greater than d\n    if steps > d:\n        return -1\n    # Initialize variables for counting jumps\n    jumps = 0\n    remaining_steps = steps\n    \n    # Perform jumps till remaining_steps becomes less than or equal to 0\n    while remaining_steps > 0:\n        # Find the minimum of remaining_steps and d\n        min_val = min(remaining_steps, d)\n        # Update remaining_steps and jumps\n        remaining_steps -= min_val\n        jumps += 1\n        # Update the d\n        d -= min_val\n    # Check if the d is less than or equal to 0\n    if d <= 0:\n        return jumps\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    curr_pos = 0\n    prev_pos = -1\n    # Initialize loop variables\n    i = 0\n    j = 0\n    # Loop until we reach the target point\n    while True:\n        # Update current position\n        curr_pos += steps[i]\n        # Check if we reached the target point\n        if curr_pos == d:\n            return count\n        # Check if we reached the end of the array\n        if i == len(steps) - 1:\n            return -1\n        # Check if we need to make a jump\n        if curr_pos > d and curr_pos <= d + steps[i]:\n            # Update count and position\n            count += 1\n            curr_pos = d + steps[i]\n            # Update loop variables\n            prev_pos = curr_pos - steps[i]\n            i += 1\n            j = i\n            # Check if we reached the end of the array\n            if i == len(steps) - 1:\n                return -1\n        elif curr_pos > d:\n            # Update loop variables\n            prev_pos = curr_pos - steps[i]\n            i += 1\n        else:\n            # Update loop variables\n            prev_pos = curr_pos\n            i += 1\n            j = i\n            # Check if we reached the end of the array\n            if i == len(steps) - 1:\n                return -1\n    # If we reach here, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    curr_x = curr_y = 0\n    jumps = 0\n    \n    # Check if the start point is within the d-plane\n    if (curr_x**2 + curr_y**2)!= (d**2):\n        return -1\n    \n    # Check if we can reach the end point\n    for i in range(steps):\n        curr_x += 1\n        curr_y = max(0, curr_y - 1)\n        jumps += 1\n        \n        # Check if we can reach the end point\n        if (curr_x**2 + curr_y**2) == d**2:\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == steps:\n        return 1\n    else:\n        return min_Jumps(steps, d-1) + min_Jumps(steps, d-2) + min_Jumps(steps, d-3)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # First, we check if the given length is greater than the number of steps in the array.\n    if steps > len(steps):\n        return -1\n    \n    # We initialize a variable j to store the number of jumps required.\n    j = 0\n    \n    # We loop through the array of steps and calculate the number of jumps required.\n    for i in range(len(steps)):\n        if steps[i] < d:\n            j += 1\n        else:\n            j = 0\n        \n        # If we reach the point (d, 0), then we return the value of j.\n        if steps[i] == d:\n            return j\n    \n    # If we reach this point, it means that we have not reached the desired point (d, 0).\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    if steps < d:\n        return \"Invalid input\"\n    elif steps == d:\n        return 0\n    else:\n        steps = d - 1\n        jumps = 1\n        count = 0\n\n        while steps > 0:\n            if steps % 2 == 0:\n                steps = int(steps/2)\n                count += 1\n                jumps += 1\n            else:\n                steps = int((steps + 1)/2)\n\n        return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length!\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length!\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list where each element in the input lists is divided by the corresponding element in the second list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divides two lists element-wise.\n    \n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers with the same length as `nums1`.\n    \n    Returns:\n    list: A list of the same length as `nums1` containing the element-wise division of `nums1` and `nums2`.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    str_list = []\n    index = 0\n\n    # split the input string into characters and integers\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(int(char))\n        else:\n            str_list.append(char)\n\n    # move all the integers to the end of the list\n    while num_list:\n        str_list.append(num_list.pop(0))\n\n    # return the final string\n    return ''.join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_regex = r'\\d+'\n    new_str = re.sub(num_regex, lambda m: m.group() + test_str, test_str)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n    if numbers:\n        return test_str[-len(numbers):] + numbers + test_str[:-len(numbers)]\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [num for num in test_str if num.isdigit()]\n    return ''.join(nums) + test_str.replace(str(sum(map(int, nums))), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a counter for numbers\n    num_count = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # increment the counter\n            num_count += 1\n    \n    # if there are no numbers in the string, return the original string\n    if num_count == 0:\n        return test_str\n    \n    # create a new string with the numbers moved to the end\n    new_str = ''\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # move the number to the end of the new string\n            new_str = char + new_str\n        else:\n            # add the other characters to the new string\n            new_str += char\n    \n    # return the new string with the numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a new string to hold the numbers\n    num_str = ''\n    # iterate through the input string\n    for char in test_str:\n        # if the current character is a number, add it to the new string\n        if char.isdigit():\n            num_str += char\n        # otherwise, add the current character to the new string\n        else:\n            num_str += char\n    # return the new string with all numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = re.findall(r'\\d+', test_str)\n    # convert the numbers to a list and sort them\n    numbers_list = sorted(numbers)\n    # remove the numbers from the string\n    test_str = re.sub(r'\\d+', '', test_str)\n    # concatenate the numbers and the remaining string\n    test_str = test_str + ''.join(numbers_list)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    result = ''.join(num_list)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_count = 0\n    num_start = -1\n    \n    # iterate through the string\n    for i in range(len(test_str)):\n        # if the character is a number\n        if test_str[i].isdigit():\n            # if the number has not yet been moved to the end\n            if num_start == -1:\n                # set the start index of the number\n                num_start = i\n            \n            # increment the number count\n            num_count += 1\n    \n    # if no number has been found\n    if num_start == -1:\n        return test_str\n    \n    # move all the numbers to the end of the string\n    while num_start!= -1:\n        # move the number to the end of the string\n        test_str = test_str[:num_start] + test_str[num_start+num_count:]\n        \n        # update the number start index\n        num_start = test_str.find(str(num_count))\n        \n        # decrement the number count\n        num_count -= 1\n    \n    # return the modified string\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 1\n    max_size = 1\n    count = 1\n    for i in range(1, len(a)):\n        if a[i] - a[i-1] == 1:\n            count += 1\n            if count > max_size:\n                max_size = count\n        else:\n            count = 1\n    if count > max_size:\n        max_size = count\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the input list\n    a.sort()\n\n    # initialize variables\n    count = 0\n    max_count = 0\n    current_count = 0\n    largest_count = 0\n\n    # loop through the list\n    for i in range(len(a)-1):\n        if a[i] % a[i+1] == 0:\n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count\n                largest_count = i\n            elif current_count == max_count:\n                largest_count = i\n        else:\n            current_count = 0\n\n    # add the last element to the count\n    current_count += 1\n    if current_count > max_count:\n        max_count = current_count\n        largest_count = len(a) - 1\n    elif current_count == max_count:\n        largest_count = len(a) - 1\n\n    # return the largest subset size\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # First, we create a list of pairs where each pair has a unique pair of numbers\n    pairs = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.append((a[i], a[j]))\n\n    # Sort the list of pairs by the smaller number first\n    pairs.sort(key=lambda x: x[0])\n\n    # Initialize variables for the current size of the largest subset and the size of the largest subset\n    largest_size = 0\n    current_size = 0\n\n    # Loop through each pair of numbers\n    for i in range(len(pairs)):\n        # Check if the current pair is divisible by the smallest number in the pair\n        if pairs[i][0] % pairs[i][1] == 0:\n            current_size += 1\n            if current_size > largest_size:\n                largest_size = current_size\n        else:\n            current_size = 0\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sorting the list in ascending order\n    a.sort()\n    \n    # initializing variables\n    max_size = 0\n    current_size = 1\n    count = 1\n    \n    # iterating through the list\n    for i in range(1, len(a)):\n        # checking if the current number is divisible by the next number\n        if a[i] % a[i-1] == 0:\n            # updating the current size of the subset\n            current_size += 1\n            \n            # updating the maximum size of the subset if required\n            if current_size > max_size:\n                max_size = current_size\n        else:\n            # resetting the current size of the subset to 1\n            current_size = 1\n            \n            # resetting the count of the number of pairs in the subset\n            count = 1\n            \n    # checking if the last element is divisible by the first element\n    if a[0] % a[-1] == 0:\n        # updating the current size of the subset\n        current_size += 1\n        \n        # updating the maximum size of the subset if required\n        if current_size > max_size:\n            max_size = current_size\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    largest_subset = []\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Loop through the list\n    for i in range(len(a)):\n        # If the current number is divisible by the next number, add it to the current subset\n        if a[i] % a[i+1] == 0:\n            current_size += 1\n        else:\n            # If the current subset is larger than the maximum size, update the maximum size and largest subset\n            if current_size > max_size:\n                max_size = current_size\n                largest_subset = a[i-max_size:i+1]\n            # Reset the current subset and size\n            current_size = 0\n\n    # If the current subset is larger than the maximum size, update the maximum size and largest subset\n    if current_size > max_size:\n        max_size = current_size\n        largest_subset = a[-max_size:]\n\n    # Return the maximum size and largest subset\n    return max_size, largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # First, create a boolean list indicating which numbers are divisible by 2\n    divisible_by_2 = [num % 2 == 0 for num in a]\n\n    # Initialize the largest subset size to 0\n    max_size = 0\n\n    # Iterate over all possible subsets of the list of numbers\n    for i in range(len(divisible_by_2)):\n        for j in range(i, len(divisible_by_2)):\n            # Check if the subset has 2 elements and if every pair is divisible\n            if divisible_by_2[i] and divisible_by_2[j] and divisible_by_2[i] == divisible_by_2[j]:\n                # Increment the maximum subset size by 1\n                max_size += 1\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n\n    # Initialize variables to store the maximum and minimum values\n    max_sum = float('-inf')\n    min_sum = float('inf')\n\n    # Loop through all possible subsets\n    for i in range(2**n):\n        subset = []\n        for j in range(n):\n            if (i >> j) & 1:\n                subset.append(a[j])\n\n        # If the subset is divisible by every number in the array, update the maximum and minimum sums\n        if subset == sorted(a):\n            current_sum = sum(subset)\n            max_sum = max(max_sum, current_sum)\n            min_sum = min(min_sum, current_sum)\n\n    return max_sum - min_sum"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    index = 0\n\n    # Loop through the list\n    while index < len(a):\n        # Check if the number at the current index is divisible by the next number\n        if a[index] % a[index+1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 0\n        index += 1\n\n    # If there are any unaccounted for numbers at the end, add them to the current subset size\n    if current_size > max_size:\n        max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    # Initialize two pointers, i and j, at the beginning of the list\n    i = 0\n    j = 0\n    # Initialize a variable to store the current subset size\n    subset_size = 1\n    # Initialize a variable to store the maximum subset size found so far\n    max_size = 1\n    # Iterate through the list\n    while j < len(a):\n        # If the difference between the elements at i and j is divisible by 2, increment the subset size and move the j pointer to the next element\n        if a[j] - a[i] % 2 == 0:\n            subset_size += 1\n            j += 1\n        # Otherwise, move the i pointer to the next element\n        else:\n            i += 1\n        # Update the maximum subset size if the current subset size is greater\n        max_size = max(max_size, subset_size)\n    # Return the maximum subset size found so far\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Check if the two arrays are of equal size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Arrays must be of equal size.\")\n\n    # Merge the two arrays into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array in ascending order\n    merged_arr.sort()\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # Check if the median is at the left or right of the array\n    if n % 2 == 0:\n        # If the median is in the middle, return the average of the two numbers\n        return (merged_arr[median_index - 1] + merged_arr[median_index]) / 2\n    else:\n        # If the median is at the left or right of the array, return the number itself\n        return merged_arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two sorted lists into one\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the middle index\n    mid = n // 2\n\n    # If the length of the sorted list is odd, the median is the middle element\n    if n % 2 == 1:\n        return sorted_list[mid]\n\n    # If the length of the sorted list is even, the median is the average of the middle two elements\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns the median of the lists.\n    The median is the middle element of the sorted list.\n    '''\n    \n    # Concatenate the two sorted lists\n    combined_list = arr1 + arr2\n    \n    # Sort the combined list in ascending order\n    combined_list.sort()\n    \n    # Calculate the length of the combined list\n    length = len(combined_list)\n    \n    # If the length of the combined list is odd, the median is the middle element\n    if length % 2 == 1:\n        return combined_list[length//2]\n    \n    # If the length of the combined list is even, the median is the average of the middle two elements\n    else:\n        return (combined_list[length//2-1] + combined_list[length//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns their median.\n    '''\n    if n % 2 == 0:\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        \n        if arr1[mid1] > arr2[mid2]:\n            arr1[mid1], arr2[mid2] = arr2[mid2], arr1[mid1]\n            \n        arr1[mid1], arr2[0] = arr2[0], arr1[mid1]\n        \n        return (get_median(arr1[:mid1], arr1[mid1+1:], n//2) +\n                get_median(arr2[:mid2], arr2[mid2+1:], n//2)) / 2\n    else:\n        mid = n // 2\n        return (arr1[mid] + get_median(arr1[:mid], arr1[mid+1:], n//2)) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    length = len(arr)\n    if length % 2 == 0:\n        return (arr[length//2-1] + arr[length//2])/2\n    else:\n        return arr[length//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = merge_sorted_arrays(arr1, arr2)\n\n    # Find the median of the merged array\n    median = find_median(merged_arr, n)\n\n    return median\n\n\ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    '''\n    merged_arr = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n\n    return merged_arr\n\n\ndef find_median(arr, n):\n    '''\n    Find the median of a sorted array.\n    '''\n    if n % 2 == 0:\n        mid = n // 2\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[n // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[j] = arr1[j], arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            arr2[j], arr2[i] = arr2[i], arr2[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    if i == n:\n        return arr1[j-1]\n    elif j == n:\n        return arr2[i-1]\n    else:\n        return (arr1[j-1] + arr2[i-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted lists into a single sorted list\n    merged = arr1 + arr2\n    # Sort the merged list\n    merged.sort()\n    # Find the length of the merged list\n    length = len(merged)\n    # Calculate the median index\n    median_index = n\n    # Calculate the lower and upper bounds of the median range\n    lower_bound = (median_index - 1) // 2\n    upper_bound = (median_index + 1) // 2\n    # Check if the median lies in the lower half\n    if median_index % 2 == 0:\n        # Return the average of the elements at the lower and upper bounds\n        return (merged[lower_bound] + merged[upper_bound]) / 2\n    else:\n        # Return the element at the median index\n        return merged[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n    \n    # Find the midpoint index and the length of the list\n    mid = n // 2\n    length = len(arr)\n    \n    # If the length is odd, return the middle element\n    if length % 2 == 1:\n        return arr[mid]\n    \n    # If the length is even, return the average of the two middle elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase and False otherwise.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Initialize an empty string to store the uppercase version of the input string\n    uppercase_string = \"\"\n    # Loop through each character in the input string\n    for char in string:\n        # If the character is lowercase, convert it to uppercase and append it to the uppercase_string\n        if char.islower():\n            uppercase_string += char.upper()\n        # If the character is not lowercase, append it to the uppercase_string as is\n        else:\n            uppercase_string += char\n    # Return the uppercase_string\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find the first and last elements in the list\n    first = newList[0]\n    last = newList[-1]\n\n    # Swap the first and last elements\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # defining variables\n    firstElement = newList[0]\n    lastElement = newList[-1]\n\n    # swapping the first and last element\n    newList[0] = lastElement\n    newList[-1] = firstElement\n\n    # printing the list after swapping\n    print(\"List after swapping the first and last element: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0, newList.pop())\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is not empty\n    if len(newList) > 0: \n\n        # Check if the list has only one element\n        if len(newList) == 1: \n\n            # If the list has only one element, return the list\n            return newList\n\n        # Check if the list has more than one element\n        else: \n\n            # Get the first and last elements of the list\n            first = newList[0]\n            last = newList[-1]\n\n            # Interchange the first and last elements\n            newList[0] = last\n            newList[-1] = first\n\n            # Return the new list\n            return newList\n\n    else: \n\n        # If the list is empty, return an error message\n        print(\"Error: The list is empty!\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # recursively call the function for the rest of the list\n        newList = swap_List(newList[1:])\n        return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.141592653589793\n    half_pi = pi / 2\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    a = r ** 2 * (math.sin(half_pi) ** 2 + math.sin(3 * half_pi) ** 2)\n    b = r ** 2 * (math.cos(half_pi) ** 2 + math.cos(3 * half_pi) ** 2)\n    c = r ** 2 * (math.sin(pi) ** 2 + math.sin(5 * half_pi) ** 2)\n    s = (a + b + c) / 2\n    area = 2 * s * math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r * math.asin(1)\n\n    # Calculate the area of the triangle using Heron's formula\n    area = (semi_perimeter ** 2) / (4 * math.tan(math.pi / 3))\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Use Heron's formula to find the area of the largest triangle inscribed in a semicircle\n    area = (3 * r**2) / 4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # finding the area of a triangle using Heron's formula\n    s = (3 * r**2) / (4 * math.tan(math.pi / 3))\n    area = math.sqrt(s * (s - r) * (s - 2*r))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-circle area using the formula:\n    #   A = pi * r^2\n    # and the radius r.\n    A = pi * r**2\n    \n    # Calculate the perimeter of the largest triangle that can be inscribed in the semicircle.\n    # Since the semi-circle is centered at the origin, the perimeter is proportional to the radius.\n    p = 2 * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle.\n    # Since the semi-circle is a circle, the area is proportional to the semi-circle area.\n    # The area of a triangle is given by:\n    #   A = (1/2) * base * height\n    # where base is the length of the base of the triangle and height is the length of the hypotenuse.\n    # Since the semi-circle is a circle, we know that base = height = r.\n    # Therefore, the formula for the area of the largest triangle that can be inscribed in the semicircle is:\n    #   A = pi * r^2\n    # which simplifies to:\n    #   A = pi * r^2\n    # or:\n    #   A = pi * r^2 = pi * r^2 / 2\n    A_largest = A / 2\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle.\n    return A_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # calculate the semi-circle's area\n    semi_circle_area = math.pi * r ** 2\n    \n    # calculate the area of the largest triangle\n    largest_triangle_area = 0.5 * semi_circle_area * math.sqrt(3)\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # First, we need to find the semi-diameter of the semicircle.\n    s = 2 * r\n    \n    # Next, we need to find the length of the longest side of a triangle that can be inscribed in the semicircle.\n    # We can use the golden ratio (1.61803398875) as a reference point, which gives a length of approximately 1.22474487139.\n    # We multiply this value by the radius to get the length of the longest side.\n    l = 1.22474487139 * r\n    \n    # Finally, we can use Heron's formula to find the area of the largest triangle that can be inscribed in the semicircle.\n    area = (s * s - l * l + l * l) / (2 * s)\n    \n    # Return the calculated area.\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Helper function to calculate the area of a triangle using Heron's formula\n    def herons_formula(base, height):\n        s = (base + height) / 2\n        return math.sqrt(s * (s - base) * (s - height))\n\n    # Helper function to calculate the maximum possible area for a given radius\n    def max_area(r):\n        return herons_formula(2 * r, r)\n\n    # Calculate the maximum possible area for the given radius\n    max_triangle_area = max_area(r)\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    return max_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function takes a radius r and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    \"\"\"\n    # Base case: if r is less than or equal to 0, the area is 0.\n    if r <= 0:\n        return 0\n    \n    # Otherwise, compute the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    # We can assume that the base of the triangle is a vertex of the circle, and that the side opposite that vertex is r.\n    # We can compute the area of the triangle by computing the semiperimeter of the triangle, which is given by:\n    # s = (a + b + c)/2, where a, b, and c are the lengths of the sides opposite the vertex and r.\n    # We can then compute the area by multiplying the semiperimeter by the height of the triangle, which is half of the semiperimeter.\n    # Note that the height of the triangle is given by the formula:\n    # h = sqrt(s^2 - r^2), where s is the semiperimeter of the triangle.\n    \n    # Compute the semiperimeter of the triangle.\n    a = 0\n    b = r\n    c = r\n    \n    s = (a + b + c)/2\n    \n    # Compute the height of the triangle.\n    h = (s**2 - r**2)**0.5\n    \n    # Return the area of the triangle.\n    return 0.5 * s * h"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * (r**2 + 1)**0.5\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i]!= i+1:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        elif i - array[i] == 1:\n            return i - 1\n        elif i - array[i] > 1:\n            for j in range(array[i] + 1, i):\n                if j == array[j]:\n                    return j\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): List of natural numbers.\n    start (int): Start index for the search (default is 0).\n    end (int): End index for the search (default is the last element of the array).\n\n    Returns:\n    int: Smallest missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i - start]:\n            return i - start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Returns the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        # Check if mid is in the array\n        if mid in array:\n            # If it is, check if mid is in the left subarray\n            if mid > 0 and array[mid] - array[mid - 1] == 1:\n                return array[mid] - 1\n            # If mid is not in the left subarray, reduce the search space\n            else:\n                end = mid - 1\n        # If mid is not in the array, increase the search space\n        else:\n            start = mid + 1\n\n    # If the array is exhausted and no missing number is found\n    if start == end + 1:\n        return start\n\n    # If the start and end indices are equal, there is no missing number\n    else:\n        return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    if start == end:\n        if array[start] == start + 1:\n            return None\n        return start + 1\n    mid = (start + end) // 2\n    if mid > 0 and array[mid] == mid + 1:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the array.\n    end (int): The ending index of the array. If not provided, the function uses the last index of the array.\n    \n    Returns:\n    int: The smallest missing number from the array.\n    \n    Raises:\n    TypeError: If the array is not a list.\n    ValueError: If the array is empty or not sorted.\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input should be a list.\")\n    if len(array) == 0:\n        raise ValueError(\"The array should not be empty.\")\n    if not all(isinstance(x, int) for x in array):\n        raise TypeError(\"The elements of the array should be integers.\")\n    if not all(x <= y for x, y in zip(array, array[1:])):\n        raise ValueError(\"The array should be sorted in ascending order.\")\n    \n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] - i == i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n    \n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only even numbers from the original list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the original list.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    This function takes a tuple of coordinate (x,y) and returns all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1,y))\n    if x < 999:\n        adj.append((x+1,y))\n    if y > 0:\n        adj.append((x,y-1))\n    if y < 999:\n        adj.append((x,y+1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == y:\n        return [(x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if (dx!= 0 or dy!= 0)]\n    else:\n        return [(x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if abs(x-y) == abs(dx) or abs(x-y) == abs(dy)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(max(0, x-1), min(x+2, 9)):\n        for j in range(max(0, y-1), min(y+2, 9)):\n            if i!= x or j!= y:\n                adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n    if x-1 >= 0 and (x, y-1) not in sub:\n        adjacent.append((x-1, y-1))\n    if x+1 < m and (x, y+1) not in sub:\n        adjacent.append((x+1, y+1))\n    if y-1 >= 0 and (x-1, y-1) not in sub:\n        adjacent.append((x-1, y-1))\n    if y+1 < n and (x+1, y+1) not in sub:\n        adjacent.append((x+1, y+1))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adjacent_coords = []\n    for i in range(row - 1, row + 2):\n        if 0 <= i < 10:\n            for j in range(col - 1, col + 2):\n                if 0 <= j < 10 and (i, j)!= ele:\n                    adjacent_coords.append((i, j))\n    return adjacent_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(max(x-1, 0), min(x+2, 9)): \n        for j in range(max(y-1, 0), min(y+2, 9)): \n            if (i, j)!= ele and (i, j) not in sub: \n                adj.append((i, j)) \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x, y = ele\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(sub) - 1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(sub[0]) - 1:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    row, col = ele\n    \n    if row > 0:\n        sub.append((row-1, col))\n    if row < len(board)-1:\n        sub.append((row+1, col))\n    if col > 0:\n        sub.append((row, col-1))\n    if col < len(board[0])-1:\n        sub.append((row, col+1))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Initialize a list to store all the adjacent coordinates\n    adj = []\n\n    # Iterate through each adjacent coordinate and append it to the list\n    for i in range(len(ele)):\n        for j in range(i+1, len(ele)):\n            if i == 0 and j == len(ele)-1:\n                adj.append((ele[i], ele[j+1]))\n            elif i == len(ele)-1 and j == 0:\n                adj.append((ele[i+1], ele[j]))\n            elif i == 0:\n                adj.append((ele[i], ele[j+1]))\n            elif i == len(ele)-1:\n                adj.append((ele[i+1], ele[j]))\n            elif j == 0:\n                adj.append((ele[i+1], ele[j]))\n            elif j == len(ele)-1:\n                adj.append((ele[i], ele[j-1]))\n            else:\n                adj.append((ele[i+1], ele[j]))\n\n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    return adj_list + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize an empty string to store the new string\n    new_text = \"\"\n    # loop through each character in the input string\n    for char in text:\n        # if the character is a space, replace it with an underscore\n        if char == \" \":\n            new_text += \"_\"\n        # if the character is an underscore, replace it with a space\n        elif char == \"_\":\n            new_text += \" \"\n        # if the character is not a space or an underscore, just add it to the new string\n        else:\n            new_text += char\n    # return the new string\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscore\n    text = text.replace(' ', '_')\n    # replace underscore with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the input string into a list of words\n    words = text.split()\n    \n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Replace all spaces with underscores\n        words[i] = words[i].replace(' ', '_')\n        # Replace all underscores with spaces\n        words[i] = words[i].replace('_','')\n        \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            i -= 1\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            zero_count += 1\n    return num_list, zero_count"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create an empty list to hold non-zero elements\n    non_zero_list = []\n    # Loop through the input list and add non-zero elements to non_zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    # Loop through the non-zero elements of the input list and add them to the end of the output list\n    for num in non_zero_list:\n        num_list.append(num)\n    # Remove the non-zero elements from the input list\n    num_list = [num for num in num_list if num!= 0]\n    # Return the input list without non-zero elements\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize a variable to keep track of the current position of the zeroes\n    zero_index = 0\n    \n    # Iterate over the list\n    for i in range(len(num_list)):\n        # Check if the current element is zero\n        if num_list[i] == 0:\n            # Move the current element to the end of the list and increment the zero index\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    \n    # Return the list with all zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n        return move_zero(num_list)\n    else:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize two pointers - left and right\n    left = 0\n    right = 0\n\n    # Traverse the list from left to right\n    while right < len(num_list):\n        # If the element at right is not zero, move it to the left pointer\n        if num_list[right]!= 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n        right += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize variables to keep track of non-zero and zero indices\n    non_zero_indices = []\n    zero_indices = []\n\n    # Iterate over the list and find non-zero and zero indices\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            non_zero_indices.append(i)\n        else:\n            zero_indices.append(i)\n\n    # Iterate over the non-zero indices and move all zeros to the end\n    for i in range(len(non_zero_indices)):\n        num_list[i], num_list[non_zero_indices[i]] = num_list[non_zero_indices[i]], num_list[i]\n\n    # Iterate over the zero indices and move all non-zeros to the end\n    for i in range(len(zero_indices)):\n        num_list[len(non_zero_indices) + i], num_list[zero_indices[i]] = num_list[zero_indices[i]], num_list[len(non_zero_indices) + i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the size of the list as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # initialize a dictionary to store the XOR values of all pairs of numbers in the list\n    xor_dict = {}\n\n    # loop through the list of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the current pair of numbers and add it to the dictionary\n            xor_dict[(arr[i], arr[j])] = xor_dict.get((arr[i], arr[j]), 0) + (arr[i] ^ arr[j])\n\n    # calculate the sum of all XOR values in the dictionary\n    xor_sum = sum(xor_dict.values())\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n): \n    # initialize a variable to store the sum of xor\n    total_sum = 0\n\n    # loop through the list of numbers and find the xor of each pair of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            total_sum += xor\n\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and the number of integers to consider in the sum.\n    It returns the sum of xor of all pairs of integers in the list.\n\n    Args:\n    arr (list): list of integers\n    n (int): number of integers to consider in the sum\n\n    Returns:\n    int: sum of xor of all pairs of integers in the list\n    \"\"\"\n\n    # XOR all the integers in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)  # create a max heap from the list\n\n    while len(iterable) > 1:\n        # extract the maximum element and add it to the end of the list\n        max_val = hq.heappop(iterable)\n        iterable.append(max_val)\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a max heap\n    max_heap = [max(iterable)]\n    for item in iterable[1:]:\n        if item > max_heap[0]:\n            heapq.heappushpop(max_heap, item)\n    # Convert the max heap back to a list\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(heapq.heappop(max_heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapsort algorithm.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # sort the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a min-heap\n    hq.heapify(iterable)\n\n    # extract the elements from the heap in sorted order\n    sorted_list = [hq.heappop(iterable) for _ in range(len(iterable))]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n\n    # Build a max heap from the list\n    hq.heapify(arr)\n\n    # Sort the list using heap sort\n    for i in range(len(arr)-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        hq.heapify(arr)\n\n    # Return the sorted list\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Extract elements from the heap and append to the sorted list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    list_data = list(iterable)\n\n    # Build a max heap from the list\n    heap = list_data\n    heapq.heapify(heap)\n\n    # Extract the maximum element from the heap\n    max_value = heapq.heappop(heap)\n\n    # Build the sorted list\n    sorted_list = [max_value]\n    while heap:\n        # Extract the next maximum element from the heap\n        next_max_value = heapq.heappop(heap)\n        # Add it to the sorted list\n        sorted_list.append(next_max_value)\n        # Add the next maximum element to the heap\n        heapq.heappush(heap, next_max_value)\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        print(\"No profit or loss\")\n        return True\n    else:\n        print(\"Profit or loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: # If the actual cost is equal to the sale amount\n        print(\"No profit or loss\")\n    elif actual_cost > sale_amount: # If the actual cost is greater than the sale amount\n        print(\"No loss\")\n    else: # If the actual cost is less than the sale amount\n        print(\"No profit\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount:\n        # If yes, then the amount has no profit and no loss\n        return True\n    else:\n        # If not, then the amount has no profit and loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print(\"No profit and no loss can be achieved with the given amount.\")\n    else:\n        print(\"Profit and loss can be achieved with the given amount.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0 or sale_amount <= 0: \n        return True \n    elif actual_cost >= sale_amount: \n        return False \n    else: \n        return noprofit_noloss(actual_cost-1, sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Checks whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (int): the actual cost of the sale \n    sale_amount (int): the amount that was sold\n\n    Returns:\n    bool: True if the sale amount has no profit and no loss, False otherwise\n    \"\"\"\n\n    # calculate the profit and loss from the sale\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # if profit is negative and loss is positive, it means there is no profit and loss\n    if profit < 0 and loss > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (float): Actual cost of the sale\n        sale_amount (float): Amount to be sold\n\n    Returns:\n        bool: True if the given amount has no profit and no loss, otherwise False\n    \"\"\"\n    if actual_cost - sale_amount > 0:\n        return False\n    elif actual_cost - sale_amount < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    If the amount has a profit or loss, it returns False.\n    '''\n\n    if sale_amount >= actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t >= 0:\n        t = t - 273.15 # convert celsius to kelvin\n        wind_speed = v * 1.60934 # convert km/h to m/s\n        wind_speed_squared = wind_speed * wind_speed\n        c = 0.62197183 * math.exp((-17.2694 * t) / (237.3 + t))\n        f = 13.12 + (0.633 * t) + (1.433 * wind_speed_squared) - (0.128 * t * wind_speed_squared)\n        wci = c + (f * (t - 273.15))\n        return int(round(wci))\n    else:\n        return \"Invalid input! Temperature must be a non-negative number.\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v: wind velocity in km/h\n        t: temperature in celsius\n\n    Returns:\n        wind chill index rounded to the next integer\n    \"\"\"\n    wind_speed = v * 3.6  # convert km/h to m/s\n    e = 6.112 * math.exp(17.67 * t / (t + 243.5))  # calculate equivalent temperature in kelvin\n    rc = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(t, 3)  # calculate relative humidity coefficient\n    wchill = math.ceil(math.log(e / rc) / 1.8)  # calculate wind chill index\n\n    return wchill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_index = math.floor((v / 10) * (t - 273.15)) + 32\n    return wind_speed_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v >= 10 and t >= 10:\n        return math.ceil(35.74 + 0.6215 * (t - 10) + 35.75 * math.pow(v, 0.16) - 0.3965 * math.pow(t - 10, 0.16))\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v > 20 and t < 10:\n        return math.ceil((13.12 + (0.6215 * t) + (11.37 * v * 1000) - (0.3965 * v * v * 1000) - (5.37 * math.log(v * 1000))) / 2)\n    elif v > 20 and t >= 10:\n        return math.ceil((21.2 + (0.6215 * t) + (13.37 * v * 1000) - (0.3965 * v * v * 1000) - (5.37 * math.log(v * 1000))) / 2)\n    elif v <= 20 and t < 10:\n        return math.ceil((14.39 + (0.6215 * t) + (11.64 * v * 1000) - (0.3965 * v * v * 1000) - (5.37 * math.log(v * 1000))) / 2)\n    elif v <= 20 and t >= 10:\n        return math.ceil((22.4 + (0.6215 * t) + (13.64 * v * 1000) - (0.3965 * v * v * 1000) - (5.37 * math.log(v * 1000))) / 2)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from celsius to fahrenheit\n    t = (t * 1.8) + 32\n\n    # calculate the wind chill temperature\n    wc = 35.74 + (0.6215 * v) + (0.4275 * t) - (0.0006 * v**2) - (0.007 * t**2) + (0.0001 * v**3) + (0.000001 * t**3)\n\n    # round wind chill temperature to the nearest integer\n    wc_rounded = round(wc)\n\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = (math.log(t / 21.6) / 1.8) * (13.12 + (0.6215 * t) + (0.0094 * t**2) - (0.000039 * t**3))\n    if c > 99:\n        return 99\n    elif c < -40:\n        return -40\n    else:\n        wci = math.ceil(c)\n        return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in celsius\n\n    Returns:\n    int: Wind chill index rounded to the next integer\n    \"\"\"\n    # Convert celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the heat index\n    hi = 35.74 + 0.6215*v - 35.75*t_f + 0.4275*v*t_f\n    hi = round(hi)\n\n    # Calculate the wind chill index\n    wci = round(hi - 11.37*math.log(hi) + 0.622*t_f - 11.76*v)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Find the normal temperature\n    p = 101325 # Reference air pressure in hPa\n    ref_temp = 23 + 0.0065 * p\n    normal_temp = (ref_temp + t) / 2\n    \n    # Calculate the wind chill index\n    wci = -45.75 + 13.72 * v + 0.6215 * t\n    \n    # Round the wind chill index to the nearest integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Formula for wind chill index\n    wchill = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n    # Round the wind chill index to the nearest integer\n    wchill = round(wchill)\n    # Check if the wind chill index is within the range of 0-35\n    if wchill < 0:\n        wchill = 0\n    elif wchill > 35:\n        wchill = 35\n    return wchill"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # initialize the sum variable to 0\n    total_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, ignore it and move on to the next name\n            continue\n        # if the name does not start with a lowercase letter, add its length to the total\n        total_length += len(name)\n\n    # return the total length of the names that did not start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a list to store the filtered names\n    filtered_names = []\n    # Iterate through each name in the sample_names list\n    for name in sample_names:\n        # Check if the first letter of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, skip it and move on to the next name\n            continue\n        # Otherwise, add the name to the filtered_names list\n        filtered_names.append(name)\n    # Calculate the sum of the lengths of the filtered names\n    filtered_name_lengths = [len(name) for name in filtered_names]\n    return sum(filtered_name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a counter variable\n    counter = 0\n    \n    # iterate through the list of names\n    for name in sample_names:\n        # check if the first character of the name is lowercase\n        if name[0].islower():\n            # if it is, increment the counter\n            counter += 1\n            \n    # return the total sum of the lengths of the names after removing the lowercase names\n    return counter"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    # Define the function signature\n    def sum_names(names):\n        # Define an empty list to store the summed names\n        summed_names = []\n        # Iterate over the names in the input list\n        for name in names:\n            # Check if the first character of the name is uppercase\n            if name[0].isupper():\n                # If it is, append the name to the summed_names list\n                summed_names.append(name)\n        # Return the sum of the length of the summed_names list\n        return sum(len(name) for name in summed_names)\n    \n    # Call the sum_names function with the sample_names list as an argument\n    return sum_names(sample_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that start with a lowercase letter\n    names_start_with_lower = []\n    # Iterate through the given list of names\n    for name in sample_names:\n        # Check if the first letter of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, add the name to the list of names that start with a lowercase letter\n            names_start_with_lower.append(name)\n    # Iterate through the list of names that start with a lowercase letter and sum the length of each name\n    length_sum = 0\n    for name in names_start_with_lower:\n        length_sum += len(name)\n    # Return the sum of the lengths of the names that start with a lowercase letter\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of names after removing names that start with lowercase letters\n    sum_of_lengths = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # If the name does not start with a lowercase letter, add its length to the sum\n        sum_of_lengths += len(name)\n\n    # Return the sum of the lengths of the names after removing names that start with lowercase letters\n    return sum_of_lengths"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\(.*?\\)'\n    result = re.sub(regex, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    # Define the pattern to find the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    # Use re.sub() to replace the parenthesis and what is inbetween them with an empty string\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Create a regular expression pattern to match the pattern of parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Replace all the parenthesis with an empty string\n    cleaned_items = re.sub(pattern, '', items)\n    \n    return cleaned_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is the nth nonagonal number and False otherwise.\n    \"\"\"\n    # Calculate the sum of squares of first n odd numbers\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**2\n    \n    # Calculate the sum of squares of first n even numbers\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n    \n    # Return True if the sum of squares of the odd numbers is equal to the sum of squares of the even numbers,\n    # indicating that n is the nth nonagonal number\n    return odd_sum == even_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    # Initialize the sum of first n natural numbers\n    sum = 0\n\n    # Loop through the natural numbers from 1 to n-1\n    for i in range(1, n):\n        # Add i^2 to the sum\n        sum += i*i\n\n    # Divide the sum by 2 to get the nth nonagonal number\n    return sum // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(1, n):\n        if i % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        num += (i*i)\n    return num\n\nprint(is_nonagonal(5)) # Output: 734"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1)) / 2 \n\nn = int(input(\"Enter a positive integer: \"))\n\nif n > 0:\n    print(is_nonagonal(n))\nelse:\n    print(\"Please enter a positive integer.\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 2 * (n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n and returns the nth nonagonal number.\n    \"\"\"\n\n    # First, we need to find the number of nonagonal numbers that can be formed.\n    # We can use the formula for nonagonal numbers: n(n+1) / 2\n    nonagonal_numbers = n * (n + 1) // 2\n\n    # Next, we need to find the largest nonagonal number that is less than or equal to n.\n    # We can use the fact that the first 4 nonagonal numbers are: 1, 5, 12, 22\n    largest_nonagonal = 12\n    for i in range(5):\n        largest_nonagonal += 12\n\n    # Finally, we can calculate the nth nonagonal number by finding the difference between the largest nonagonal number and n.\n    nth_nonagonal = largest_nonagonal - n\n\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the variables\n    num = 1\n    side_length = 1\n\n    # loop through the number of sides\n    for i in range(1, n+1):\n        # calculate the side length\n        side_length = num*i\n\n        # print the side length\n        print(side_length)\n\n        # increment the num variable\n        num += 2\n\n    # return the side length of the last nonagon\n    return side_length\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (4 * (n * (n - 1)) + 1) // 2\n\n\nn = int(input(\"Enter a positive integer: \"))\nprint(is_nonagonal(n))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if 'z' is at the start or end of any word except the first and last ones\n    for i in range(1, len(words)-1):\n        if words[i][0] == 'z' and words[i][-1] == 'z':\n            return True\n        \n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    word_pattern = r'\\b[a-zA-Z]+\\w*\\b'\n    result = re.findall(word_pattern, text)\n    for word in result:\n        if word.startswith('z'):\n            if not word.endswith('z'):\n                return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Regular expression pattern to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if the pattern is found, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match words\n    pattern = r'\\b[a-z]+\\w{0,2}\\b'\n    # Search for matches in the text using the pattern\n    matches = re.findall(pattern, text)\n    # Check if any matches are found\n    if matches:\n        # Loop through each match and check if it contains 'z'\n        for match in matches:\n            if 'z' in match and (match[0]!= 'z' or match[-1]!= 'z'):\n                # Return True if a match is found\n                return True\n    # If no matches are found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(?<!\\w)z(?!\\w)')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b(z)\\b'\n    if re.search(regex, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # pattern to match wordz at the start and end of the word\n    pattern = r\"\\b[a-zA-Z]+\\b\\s*z\\s*\\b[a-zA-Z]+\\b\"\n    # search for the pattern in the text\n    matches = re.findall(pattern, text)\n    # return True if there are any matches, False otherwise\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters except for underscores\n    text = re.sub('[^A-Za-z0-9_]+','', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Iterate through the words and check if 'z' is at the start or end of each word\n    for i in range(len(words)):\n        if words[i][0] == 'z':\n            if i == 0 or i == len(words) - 1:\n                continue\n        elif words[i][-1] == 'z':\n            if i == 0 or i == len(words) - 1:\n                continue\n            \n    # Return True if 'z' is found in the middle of the words, False otherwise\n    return True if 'z' in words else False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a copy of the original array\n    reverse_array = input[:]\n    \n    # reverse the array up to the k-th element\n    for i in range(k-1):\n        reverse_array[i], reverse_array[len(reverse_array)-1-i] = reverse_array[len(reverse_array)-1-i], reverse_array[i]\n    \n    # return the reversed array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array\n    input = input[::-1]\n    \n    # Reverse the array upto the given position\n    for i in range(k):\n        input[i], input[-i-1] = input[-i-1], input[i]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    input[0:k] = input[0:k][::-1]\n    # reverse the array from k to len(input)-1\n    input[k:] = input[k:][::-1]\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)):\n        input[i], input[i-1] = input[i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Get the length of the array\n    n = len(input)\n\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    # Reverse the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k >= len(input):\n        return input\n    else:\n        # Reverse the array upto position k-1\n        input = reverse_Array_Upto_K(input, k-1)\n        \n        # Swap the first k elements with the last k elements\n        for i in range(k):\n            input[i], input[-1-i] = input[-1-i], input[i]\n        \n        # Reverse the array from k to end\n        return reverse_Array_Upto_K(input, len(input)-1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # reverse the array from k to end\n    input[k:] = input[k:][::-1]\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    k = k - 1  # Convert k to 0-based indexing\n    input = input[k:n]  # Extract the array from position k to n-1\n    input.reverse()  # Reverse the array in place\n    input = input + input[:k]  # Add the reversed part of the original array to the beginning\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)  # length of array\n    if k > n:  # k should not be greater than n\n        k = n\n\n    for i in range(k):  # reverse the first k elements\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty list to store the tuple items and the dictionary items\n    all_items = []\n    \n    # Iterate through the tuple items\n    for item in test_tup:\n        all_items.append(item)\n        \n    # Add the dictionary items to the tuple\n    all_items.append(test_dict)\n    \n    # Convert the list to a tuple and return it\n    return tuple(all_items)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Using the update() method to add the dictionary to the tuple\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    data = [(k, v) for k, v in test_dict.items()]\n    # add the dictionary to the tuple\n    return test_tup + data"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Adding the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = []\n    dp = [[float('-inf')]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                path = [(i, j)]\n                curr_avg = dp[i][j]\n                while path[-1]!= (0, 0):\n                    path.append((path[-1][0]-1, path[-1][1]))\n                    curr_avg += dp[path[-1][0]][path[-1][1]]\n                max_avg = max(max_avg, curr_avg)\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                    max_path = path\n            else:\n                if i > 0:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j])\n                if j > 0:\n                    dp[i][j] = max(dp[i][j-1], dp[i][j])\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = [[0]*(N+1) for _ in range(N+1)]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_avg[i][j] = cost[i][j]\n            elif i == 0:\n                max_avg[i][j] = max_avg[i][j-1]\n            elif j == 0:\n                max_avg[i][j] = max_avg[i-1][j]\n            else:\n                max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i-1][j-1]\n                \n    max_avg[N][N] = max(max_avg[N-1][N], max_avg[N][N-1])\n    \n    return max_avg[N][N]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = 0\n    max_path = None\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n        if i == 0 and j == 0:\n            max_avg = cost[i][j]\n            max_path = [(i,j)]\n        elif i == 0:\n            dp[i][j] = dp[i][j-1] + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                max_path = [(i,j),(i,j-1)]\n        elif j == 0:\n            dp[i][j] = dp[i-1][j] + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                max_path = [(i,j),(i-1,j)]\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    max_avg = 0\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n        max_avg = max(max_avg, dp[i][0])\n        max_avg = max(max_avg, dp[0][i])\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            dp[i][j] = dp[i][j] + min(dp[i][j-1], dp[i+1][j])\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / n**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            if cost[i][j] == max_avg:\n                max_avg = max_avg + dp[i+1][j+1] - dp[i+1][j] - dp[i][j+1] + dp[i][j]\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = float('-inf')\n\n    def findMaxAvg(i, j, visited):\n        nonlocal max_avg\n        if i == N-1 and j == N-1:\n            avg = sum(cost[i][j]) / visited\n            if avg > max_avg:\n                max_avg = avg\n            return avg\n        \n        # Check if the current cell is already visited or if it is out of bounds\n        if i < 0 or i == N or j < 0 or j == N or cost[i][j] in visited:\n            return float('-inf')\n\n        # Mark the current cell as visited\n        visited.add(cost[i][j])\n\n        # Recursively check the maximum average of the top and left cells\n        max_avg = max(max_avg, findMaxAvg(i-1, j, visited), findMaxAvg(i, j-1, visited))\n\n        # Unmark the current cell as visited\n        visited.remove(cost[i][j])\n\n        # Recursively check the maximum average of the top cell and the right cell\n        max_avg = max(max_avg, findMaxAvg(i-1, j, visited), findMaxAvg(i, j+1, visited))\n\n        # Recursively check the maximum average of the left cell and the bottom cell\n        max_avg = max(max_avg, findMaxAvg(i, j-1, visited), findMaxAvg(i+1, j, visited))\n\n        return max_avg\n\n    return findMaxAvg(N-1, N-1, set())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    max_path = []\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                continue\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n            if i == N-1 and j == N-1:\n                avg = dp[i][j]\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [[0] * N for _ in range(N)]\n                    max_path[i][j] = 1\n                elif avg == max_avg:\n                    max_path[i][j] = 1\n                else:\n                    continue\n    for i in range(N):\n        for j in range(N):\n            if max_path[i][j] == 1:\n                max_path[i][j] = [[i, j]]\n            else:\n                max_path[i][j] = [[x[0], x[1]] for x in max_path[i][j]]\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_path(i, j):\n    if i == 0 and j == 0:\n        return 0\n    elif i == 0:\n        return max_path(i, j-1) + cost[i][j]\n    elif j == 0:\n        return max_path(i-1, j) + cost[i][j]\n    else:\n        return max_path(i-1, j) + min_path(i, j)\n\ndef min_path(i, j):\n    if i == N-1 and j == N-1:\n        return 0\n    elif i == N-1:\n        return min_path(i, j+1) + cost[i][j]\n    elif j == N-1:\n        return min_path(i+1, j) + cost[i][j]\n    else:\n        return min_path(i+1, j) + max_path(i, j)\n\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(max_path(i, j) + min_path(i, j), dp[i-1][j] + dp[i][j-1])\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = 0\n    current_avg = 0\n    visited = set()\n    paths = []\n\n    # Breadth-first search\n    queue = [(0, 0, 0)]\n    while queue:\n        # Pop the first element from the queue\n        (row, col, depth) = queue.pop(0)\n\n        # If the current cell is already visited, skip it\n        if (row, col) in visited:\n            continue\n\n        # Update the visited set\n        visited.add((row, col))\n\n        # Check if we have reached the bottom right cell\n        if (row == len(cost) - 1) and (col == len(cost[0]) - 1):\n            # Compute the current average and update the max_avg if necessary\n            current_avg = depth / (row + col + 1)\n            if current_avg > max_avg:\n                max_avg = current_avg\n            continue\n\n        # Move to the neighbors and add them to the queue if they are valid\n        for i in range(row + 1, len(cost)):\n            if i < len(cost) and (row, col)!= (i, 0):\n                queue.append((i, col, depth + cost[i][col]))\n        for j in range(col + 1, len(cost[0])):\n            if j < len(cost[0]) and (row, col)!= (len(cost) - 1, j):\n                queue.append((row, j, depth + cost[row][j]))\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def get_neighbors(i, j, N):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i-1, j))\n        if j > 0:\n            neighbors.append((i, j-1))\n        if i < N-1:\n            neighbors.append((i+1, j))\n        if j < N-1:\n            neighbors.append((i, j+1))\n        return neighbors\n    \n    def dfs(i, j, N, visited, path_cost, total_cost):\n        visited.add((i, j))\n        neighbors = get_neighbors(i, j, N)\n        if (i, j) == (N-1, N-1):\n            path_cost.append(path_cost[-1] + total_cost)\n            if max(path_cost) > max_cost:\n                max_cost = max(path_cost)\n            return\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                dfs(neighbor[0], neighbor[1], N, visited, path_cost, total_cost)\n                visited.remove((i, j))\n    \n    N = len(cost)\n    max_cost = float('-inf')\n    visited = set()\n    path_cost = []\n    total_cost = 0\n    dfs(0, 0, N, visited, path_cost, total_cost)\n    return max_cost / len(path_cost)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # filter out students who don't have height and weight above the given minimums\n    filtered_students = {name: value for name, value in students.items() if value[0] > h and value[1] > w}\n\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key: value for key, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height,weight = data\n        if height>h and weight>w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum\n    sum_digits = 0\n    # loop through each character in the base string\n    for char in base_str:\n        # convert the character to an integer\n        digit = int(char)\n        # add the integer value of the digit to the sum\n        sum_digits += digit ** power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize the sum to 0\n    total_sum = 0\n    \n    # convert the base to a string and loop through the digits\n    for digit in str(base):\n        # multiply the digit by the power\n        product = int(digit) * power\n        \n        # add the product to the total sum\n        total_sum += product\n        \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum\n    sum_digits = 0\n    # loop through each digit of the base string and add its value to the sum\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n    # return the sum of all digits raised to the specified power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable\n    result = 0\n    \n    # loop through each digit in the base\n    while base > 0:\n        # add the last digit of the base to the sum\n        result += base % 10\n        \n        # remove the last digit of the base\n        base //= 10\n        \n        # keep looping until the base is less than or equal to 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each digit of the base and add it to the sum\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n    \n    # loop through the power and add the sum of digits to the result\n    result = 0\n    for _ in range(power):\n        result += sum\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        remainder = base % 10\n        result += remainder ** power\n        base = base // 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    \n    # initialize the sum to zero\n    sum_of_digits = 0\n    \n    # iterate over each digit in the list of digits\n    for digit in digits:\n        # convert the digit to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    \n    # return the sum of all digits raised to the specified power\n    return sum_of_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        remainder = base % 10\n        sum_digits += remainder\n        power -= 1\n        base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'(?<=\")(.*?)(?=\")'\n    result = re.findall(pattern, text)\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n\n    Args:\n    text1 (str): The given string.\n\n    Returns:\n    str: The extracted values between quotation marks.\n    \"\"\"\n    pattern = r\"(?<=\\\")(.*)(?=\\\"|\\s)\"\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"No quotation found.\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"[^\"]*\"|(?<!\\\\)\\'[^\\']*\\''\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    # define regular expression pattern for extracting quotation marks\n    pattern = re.compile(r'(?<!\\\\)\"(?:\\\\\"|[^\"])*')\n    # find all occurrences of pattern in the given string\n    matches = pattern.findall(text1)\n    # create a list to store the extracted quotations\n    quotations = []\n    # loop through all matches and extract the quotations\n    for match in matches:\n        # remove escape characters and double quotes from the quotation\n        quotation = match.replace('\\\\', '').replace('\"', '')\n        # append the extracted quotation to the list of quotations\n        quotations.append(quotation)\n    # return the list of extracted quotations\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks \" \" of the string.\n    '''\n    # using regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # converting the matches list to a set to remove duplicate values\n    return list(set(matches))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('(?<=\")[^\"]*?(?=\")')\n    return pattern.findall(text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"[^\"]*\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2  # divide the length of the tuple by 2 to get the number of elements we want to multiply together\n    \n    # create an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through each pair of elements in the tuple\n    for i in range(N):\n        # calculate the product of the current elements in the tuple\n        product = test_tup[2*i] * test_tup[2*i+1]\n        # append the product to the result tuple\n        result_tup += (product,)\n        \n    # if there are any remaining elements in the tuple, calculate their products and append them to the result tuple\n    for i in range(N+1, len(test_tup), 2):\n        product = test_tup[i] * test_tup[i+1]\n        result_tup += (product,)\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop over the elements of the input tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the i-th element with the (i+1)-th element\n        result.append(test_tup[i] * test_tup[i+1])\n    # Add the last element to the result list\n    result.append(test_tup[-1])\n    # Return the result list\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    return (test_tup[0] * test_tup[1], test_tup[N] * test_tup[N+1])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result_tup = tuple(i * (test_tup[i+1] if i < N-1 else 1) for i in range(N-1))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(sorted(nums))\n    result = []\n    for key, group in grouped_nums:\n        if key[1:]!= list(group)[0]:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [next(group) for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [k for k,g in groupby(sorted(nums)) if not g]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    last_num = None\n    for num in nums:\n        if num!= last_num:\n            unique_nums.append(num)\n            last_num = num\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), key=lambda x: x[0] - x[1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(groupby(sorted(nums), key=lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if not g]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # Use groupby to group the numbers by the index of the first occurrence\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0])\n    # Create a list to store the non-consecutive duplicates\n    non_consecutive_duplicates = []\n    # Iterate over the groups\n    for group in grouped_nums:\n        # If the group contains at least two numbers, add them to the list of non-consecutive duplicates\n        if len(list(group)) > 1:\n            non_consecutive_duplicates += list(group)\n    # Return the list of non-consecutive duplicates\n    return list(non_consecutive_duplicates)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using formula for a cone\n    lateral_surface = math.pi * r * h * (h - 2 * r)\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the area of the base of the cone\n    area_base = math.pi * r ** 2\n    \n    # Calculate the area of the top of the cone\n    area_top = math.pi * r ** 2 * h\n    \n    # Calculate the lateral surface area of the cone\n    lateral_area = area_base + area_top\n    \n    # Return the lateral surface area of the cone\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi/4)*r*r\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5 * r * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Formula for lateral surface area of a cone\n    surface_area = math.pi * r * r * h\n    \n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (1/3) * math.pi * (r**2)  # spherical surface area\n    return math.pi * (h/3) * (r**2) + s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given its radius and height.\n    \"\"\"\n\n    # Calculate the lateral surface area\n    area = math.pi * r ** 2 * h\n\n    # Return the area\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern to match the special characters\n    pattern = r\"[^\\w\\s]\"\n    # use the re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces and commas with a colon\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    # Replace all dots with a comma\n    text = re.sub(r'[\\.]', ',', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression to match the special characters\n    pattern = r'[\\s,\\.]'\n    # replace the special characters with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    replacement = ':'\n    text = re.sub(pattern, replacement, text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match spaces, commas, or dots\n    pattern = r'\\s|,|\\.'\n\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = r'[\\s,.]+'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define a regular expression pattern to match all special characters\n    pattern = r'[\\s.,;:!?]'\n    # replace all matches of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Binary search to find the first occurrence of x\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            high = mid - 1  # stop searching to the left\n        elif A[mid] < x:\n            low = mid + 1  # search the right half\n        else:  # A[mid] > x\n            high = mid - 1  # search the left half\n    return low if A[low] == x else -1  # return the index of the first occurrence or -1 if not found"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # check if the array is empty or not\n    if len(A) == 0:\n        return None\n    \n    # iterate through the array to find the first occurrence\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    \n    # if the number is not found, return None\n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Check if the array is sorted\n    if len(A) > 1 and A[0] > A[-1]:\n        raise ValueError(\"Array is not sorted!\")\n    else:\n        # Binary search for the first occurrence\n        left = 0\n        right = len(A) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index to -1\n    index = -1\n    \n    # Initialize a variable to keep track of the current element\n    current_element = A[0]\n    \n    # Iterate over the array\n    for i in range(1, len(A)):\n        # If the current element is equal to the target element, update the index\n        if A[i] == x:\n            index = i\n            # Exit the loop since we found the first occurrence\n            break\n        \n        # If the current element is less than the target element, update the current element and continue\n        elif A[i] < x:\n            current_element = A[i]\n            continue\n    \n    # Return the index of the first occurrence of the target element\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) - 1:\n        if A[i] == x:\n            return i\n        elif A[i] > x:\n            return -1\n        else:\n            i += 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array A.\n\n    Args:\n        A (list): A sorted array.\n        x (int): A number to search for.\n\n    Returns:\n        int: The index of the first occurrence of x, or -1 if x is not found in A.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_prod = 0\n    prefix_sum = [0] * (2 * n)\n    \n    # Calculate prefix sum of array\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i + n] + arr[i]\n    \n    # Calculate sum of products of all possible sublists\n    for length in range(1, 2 * n + 1):\n        for i in range(n - length + 1):\n            right_index = i + length - 1\n            left_index = i\n            if right_index == n - 1:\n                sum_prod += arr[left_index] * prefix_sum[right_index]\n            else:\n                sum_prod += arr[left_index] * prefix_sum[right_index + 1]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_product = [1] * n\n    product = 1\n    \n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n        \n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            result += prefix_product[j] * product\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize two pointers i and j to start from the first element\n    i = 0\n    j = 1\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_prod_sum = 0\n    # Initialize two variables to store the product of current element and the next element\n    cur_prod = 1\n    next_prod = arr[1]\n    # Calculate the sum of products of subarrays using the two pointers\n    while j < n:\n        subarray_prod_sum += cur_prod * arr[j]\n        cur_prod *= arr[j]\n        j += 1\n    # Calculate the sum of products of subarrays using the remaining elements\n    for i in range(1, n):\n        cur_prod *= arr[i]\n        subarray_prod_sum += cur_prod\n    # Return the sum of products of all possible subarrays\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * arr[i - 1]\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            dp[j] = max(dp[j], dp[j - 1] * arr[i])\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Finding the length of the smallest subarray\n    for i in range(1, n+1):\n        l = i\n        r = n\n        while (r - l) >= i:\n            l += 1\n            r -= 1\n        if (r - l + 1) == i:\n            break\n    # Finding all possible subarrays of length l\n    subarrays = []\n    for i in range(n - l + 1):\n        subarrays.append(arr[i:i+l])\n    # Finding the sum of products of all subarrays\n    subarray_products = []\n    for i in range(len(subarrays)):\n        subarray_products.append(1)\n        for j in range(i+1, len(subarrays)):\n            subarray_products.append(subarray_products[j-1]*subarrays[j][i])\n    subarray_sum = sum(subarray_products)\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n\n    n = len(arr)\n    prod = 1\n    subarray_prod = 1\n    total_sum = 0\n\n    for i in range(n):\n        prod *= arr[i]\n        subarray_prod *= arr[i]\n        total_sum += prod\n        if i > 0 and arr[i] < arr[i - 1]:\n            prod /= arr[i - 1]\n            subarray_prod /= arr[i - 1]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # calculate the product of the first element and store it in a variable\n    first_prod = 1\n    for i in arr:\n        first_prod *= i\n    # calculate the sum of products of all subarrays\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray_sum += first_prod * arr[j]\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # calculate the sum of all elements in the list\n    total = sum(arr)\n\n    # Initialize an empty list to store the product of each sublist\n    product_list = []\n\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = 0\n\n    # Initialize the product of the sublist to be 1\n    sublist_product = 1\n\n    # Loop through the list until both pointers meet\n    while left < len(arr) and right < len(arr):\n\n        # Calculate the length of the current sublist\n        sublist_length = right - left + 1\n\n        # Calculate the sum of products of the current sublist\n        sublist_product = sublist_product * arr[right]\n\n        # Calculate the sum of products of all possible sublists of length sublist_length\n        for i in range(1, sublist_length):\n\n            # Calculate the sum of products of all possible sublists of length i\n            left_sum = arr[left:left+i]\n            right_sum = arr[right-i+1:right+1]\n            sublist_sum = left_sum + right_sum\n\n            # Calculate the sum of products of all possible sublists of length sublist_length\n            sublist_product_sum = sublist_product_sum * sublist_sum\n\n        # Update the sum of products of the current sublist\n        product_list.append(sublist_product)\n\n        # Move the right pointer to the next element\n        right += 1\n\n    # Calculate the sum of all products of all sublists\n    sum_of_products = sum(product_list)\n\n    # Return the sum of all products of all sublists\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    res += arr[i]*arr[j]*arr[k]*arr[l]\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def subarray_product(arr, start, end, k):\n        if end - start + 1 < k:\n            return 0\n        else:\n            left = 0\n            right = start + k - 1\n            ans = 1\n            for i in range(right - start + 1):\n                ans *= arr[right - i]\n            if right < len(arr) - 1:\n                ans *= arr[right]\n            return ans\n\n    def sum_Of_Subarray_Product(arr, n, k):\n        ans = 0\n        for i in range(n):\n            for j in range(i + k, n + 1):\n                prod = subarray_product(arr, i, j, k)\n                if prod!= 0:\n                    ans += prod\n        return ans\n\n    n = len(arr)\n    if n < k:\n        return 0\n    else:\n        return sum_Of_Subarray_Product(arr, n, k)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Finding the position of the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    # Clearing the first and last bits\n    n &= ~(1 << first_bit)\n    n &= ~(1 << last_bit)\n    # Toggling the middle bits\n    for i in range(31):\n        if (n >> i) & 1 == 0:\n            n |= 1 << (i + 1)\n        else:\n            n &= ~(1 << (i + 1))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize variables to store the new value of the number\n    first_bit = False\n    last_bit = False\n    middle_bit = False\n    \n    # Calculate the first and last bits\n    first_bit = n & 1\n    last_bit = n & 1 << 31\n    \n    # Calculate the middle bits\n    middle_bit = (n ^ (last_bit ^ first_bit)) & 1\n    \n    # Combine the first, middle and last bits\n    n = first_bit + middle_bit + last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    n = bin(n)[2:]  # convert the binary number to string and remove the \"0b\" prefix\n\n    # first, remove the last two bits\n    n = n[:-2]\n\n    # then, toggle every other bit\n    for i in range(len(n)):\n        if n[i] == '1':\n            n = n[:i] + '0' + n[i+1:]\n        else:\n            n = n[:i] + '1' + n[i+1:]\n\n    # finally, convert the binary string back to an integer\n    n = int(n, 2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Count the number of set bits in the number\n    num_set_bits = sum(int(bit) for bit in bin(n)[2:])\n\n    # Set all bits except the first and the last bit to 0\n    toggled_bits = bin(n ^ (2 ** num_set_bits - 1))[2:]\n\n    # Convert the binary string of toggled bits to decimal\n    return int(toggled_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    first_bit = n & 1 # get the first bit\n    last_bit = n & (2**31-1) # get the last bit\n    # toggle bits except for the first and the last bit\n    n = n ^ (first_bit ^ last_bit)\n    # set the first bit to the opposite of the last bit\n    n = n ^ first_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # mask for the first and last bits\n    mask = n & ((1 << 1) - 1)\n\n    # toggle all bits except the first and the last\n    n ^= (1 << 1) - 1\n\n    # mask for the first and last bits again\n    mask2 = n & ((1 << 1) - 1)\n\n    # add the two masks and get the result\n    n = n | mask | mask2\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n_mask = n & ((1 << (n.bit_length() - 2)) - 1) # bitwise AND with mask to get only the bits except the first and the last\n    n = n ^ n_mask # bitwise XOR with mask to toggle the bits except the first and the last\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    first_bit = n & 1  # checking the first bit\n    last_bit = n & (2 ** 31)  # checking the last bit\n    return (first_bit << 31) | (last_bit >> 31)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    carry = 0\n    first_bit = 1\n    last_bit = n & 1\n    middle_bits = n & ~(1 | ~last_bit | ~first_bit)\n    # Set middle bits\n    for i in range(31):\n        bit = (middle_bits >> i) & 1\n        if bit == 1:\n            middle_bits = middle_bits ^ (1 << i)\n            carry = carry ^ (1 << i)\n    # Add carry to the result\n    return middle_bits + carry"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize variables for the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2 ** (32 - 1))\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit << 31) ^ (last_bit >> 31)\n    \n    # Combine the first and last bits with the middle bits\n    result = (middle_bits << 1) | first_bit | last_bit\n    \n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes in a sorted list of integers and a target value.\n    The function uses the bisect module to find the left insertion point of the target value.\n    If the target value is already present in the list, the function returns the index of the first occurrence.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if x in a:\n        return a.index(x)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a[:i], x) + i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    # Use binary search to find the insertion point\n    left = bisect.bisect_left(a, x)\n    # If x is already in the list, return its index\n    if left!= len(a) and a[left] == x:\n        return left\n    # If x is greater than all elements, return the insertion point\n    elif left == len(a):\n        return left\n    # If x is less than all elements, return the insertion point - 1\n    else:\n        return left - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return idx\n    elif x > a[idx]:\n        return idx\n    else:\n        return left_insertion(a[:idx], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a) or a[idx]!= x:\n        idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(string, \"starts with a vowel\")\n    else:\n        print(string, \"does not start with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    This function checks whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(f\"{string} is a valid starting vowel string.\")\n    else:\n        print(f\"{string} is not a valid starting vowel string.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return n\n    else:\n        # recursively calculate the geometric sum of n-1\n        geometric_sum_of_n_minus_one = geometric_sum(n-1)\n        # calculate the geometric sum of n\n        geometric_sum_of_n = geometric_sum_of_n_minus_one * n\n        # return the geometric sum of n\n        return geometric_sum_of_n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Initialize variables \n    triangular = [1]\n    index = 1\n    \n    # Iterate until we have n digits \n    while len(str(triangular[-1])) < n: \n        index += 1\n        triangular.append(index*triangular[-1])\n    \n    # Find the index of the smallest triangular number \n    min_triangular = min(triangular)\n    return triangular.index(min_triangular)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    j = 0\n    while True:\n        k = (i + j) // 2\n        if (k // 10 ** (n - 1) + 1) * 10 ** (n - 1) <= 2 * k:\n            i = k + 1\n        else:\n            j = k\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function calculates the index of smallest triangular number with n digits.\n    \"\"\"\n    \n    # Helper function to get the index of smallest triangular number with n digits\n    def smallest_triangular_number(n):\n        \"\"\"\n        This function calculates the smallest triangular number with n digits.\n        \"\"\"\n        triangular_numbers = [1]\n        while len(triangular_numbers) < n:\n            triangular_numbers.append(triangular_numbers[-1] + triangular_numbers[-2])\n        return triangular_numbers[-1]\n\n    # Calculate the smallest triangular number with n digits\n    smallest_triangular = smallest_triangular_number(n)\n\n    # Calculate the index of smallest triangular number\n    index = 1\n    while smallest_triangular ** index <= n:\n        index += 1\n\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    \n    for i in range(1, n+1):\n        triangular_num = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n        if triangular_num.is_integer():\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1:\n        return None\n    min_triangular_number = math.ceil(n*(n+1)/2)\n    smallest_triangular_number = n*(n+1)/2\n    count = 1\n    while smallest_triangular_number >= min_triangular_number:\n        smallest_triangular_number = (n*count*(count+1))/2\n        count += 1\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    def is_valid(num):\n        \"\"\"Return True if the given number is a valid triangular number.\"\"\"\n        triangular = 0\n        for i in range(len(str(num))):\n            triangular += int(str(num)[i]) ** i\n        return triangular == num\n\n    def find_smallest_triangular(n):\n        \"\"\"Return the index of the smallest triangular number with n digits.\"\"\"\n        triangular = 1\n        index = 1\n        while index < n:\n            index += 1\n            while not is_valid(triangular):\n                triangular += 1\n            index += 1\n        return index - 1\n\n    return find_smallest_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Find the number of digits in the triangular number with n digits\n    digits = int(math.log10(n*math.factorial(n)))\n\n    # Calculate the largest triangular number with n digits\n    largest_triangular = n * math.factorial(n)\n\n    # Loop through all numbers from 1 to the largest triangular number with n digits\n    for i in range(1, largest_triangular+1):\n\n        # Calculate the triangular number with n digits\n        triangular = i * math.factorial(n)\n\n        # Check if the triangular number is smaller than the largest triangular number with n digits\n        if triangular < largest_triangular:\n\n            # Calculate the number of digits in the triangular number\n            digits_triangular = int(math.log10(triangular))\n\n            # If the number of digits is equal to n, return the index\n            if digits_triangular == digits:\n                return i\n\n    # If the loop completes without finding the smallest triangular number with n digits, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = n * (n+1) // 2 # Calculate n-th triangular number using formula T(n) = n * (n+1) / 2\n    factorial_n = math.factorial(n) # Calculate factorial of n\n    index_of_smallest_triangular_number = triangular_number // factorial_n # Find index of smallest triangular number with n digits\n    return index_of_smallest_triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    # Initialize variables\n    a = 0 # index of smallest triangular number with 1 digit\n    b = 1 # index of smallest triangular number with 2 digits\n    c = 2 # index of smallest triangular number with 3 digits\n\n    # Check if n is greater than 3 digits\n    if n > 3:\n        # Initialize variables\n        d = 3 # index of smallest triangular number with 4 digits\n        e = 4 # index of smallest triangular number with 5 digits\n        \n        # Check if n is greater than 4 digits\n        if n > 4:\n            # Initialize variables\n            f = 5 # index of smallest triangular number with 6 digits\n            g = 6 # index of smallest triangular number with 7 digits\n            \n            # Check if n is greater than 5 digits\n            if n > 5:\n                # Initialize variables\n                h = 7 # index of smallest triangular number with 8 digits\n                i = 8 # index of smallest triangular number with 9 digits\n                \n                # Check if n is greater than 6 digits\n                if n > 6:\n                    # Initialize variables\n                    j = 9 # index of smallest triangular number with 10 digits\n                    k = 10 # index of smallest triangular number with 11 digits\n                    \n                    # Check if n is greater than 7 digits\n                    if n > 7:\n                        # Initialize variables\n                        l = 11 # index of smallest triangular number with 12 digits\n                        m = 12 # index of smallest triangular number with 13 digits\n                        \n                        # Check if n is greater than 8 digits\n                        if n > 8:\n                            # Initialize variables\n                            n = 13 # index of smallest triangular number with 14 digits\n                            l = 12 # index of smallest triangular number with 13 digits\n                            \n                            # Check if n is greater than 9 digits\n                            if n > 9:\n                                # Initialize variables\n                                o = 14 # index of smallest triangular number with 15 digits\n                                p = 15 # index of smallest triangular number with 16 digits\n                        \n                        # Find index of smallest triangular number with 14 digits\n                        while True:\n                            if math.factorial(14) >= n:\n                                break\n                            else:\n                                n = n + 1\n                                \n                    # Find index of smallest triangular number with 12 digits\n                    while True:\n                        if math.factorial(12) >= n:\n                            break\n                        else:\n                            n = n + 1\n                \n                # Find index of smallest triangular number with 10 digits\n                while True:\n                    if math.factorial(10) >= n:\n                        break\n                    else:\n                        n = n + 1\n                \n            # Find index of smallest triangular number with 8 digits\n            while True:\n                if math.factorial(8) >= n:\n                    break\n                else:\n                    n = n + 1\n                \n        # Find index of smallest triangular number with 6 digits\n        while True:\n            if math.factorial(6) >= n:\n                break\n            else:\n                n = n + 1\n        \n    # Find index of smallest triangular number with 4 digits\n    while True:\n        if math.factorial(4) >= n:\n            break\n        else:\n            n = n + 1\n        \n    # Find index of smallest triangular number with 2 digits\n    while True:\n        if math.factorial(2) >= n:\n            break\n        else:\n            n = n + 1\n        \n    # Return the index of the smallest triangular number with n digits\n    return a, b, c, d, e, f, g, h, i, j, k, l, m, n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of the smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    max_num = 9 * (9 * 9 + 1) ** (n - 3)\n    min_triangular = 10 ** (n - 2)\n    for i in range(max_num):\n        triangular_num = min_triangular + i\n        triangular_num_str = str(triangular_num)\n        triangular_num_len = len(triangular_num_str)\n        if triangular_num_len == n:\n            return i\n    return -1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The given tuple should have an even number of elements.\")\n    else:\n        key_val_dict = {}\n        for i in range(0, len(test_tup), 2):\n            key_val_dict[test_tup[i]] = test_tup[i+1]\n        return key_val_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Loop through the tuple and add each pair as a key-value pair in the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary to store the key-value pairs\n    my_dict = {}\n    # loop through the tuple and add key-value pairs to the dictionary\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    # Creating an empty dictionary to store the key-value pairs.\n    my_dict = {}\n    # Looping through the given tuple and adding each adjacent element to the dictionary as a key-value pair.\n    for i in range(len(test_tup)):\n        my_dict[i] = test_tup[i]\n    # Returning the final dictionary.\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a dictionary where each adjacent pair of elements is converted into a key-value pair.\n    \"\"\"\n    # Create a dictionary to store the key-value pairs\n    my_dict = {}\n    # Traverse through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        if i+1 < len(test_tup):\n            value = test_tup[i+1]\n        else:\n            value = None\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # initialize an empty dictionary\n    new_dict = {}\n    # iterate over the given tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the new dictionary\n        new_dict[test_tup[i]] = test_tup[i+1]\n    # return the new dictionary\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    This function checks whether all the characters in the string are the same or not.\n    '''\n    # If length of the string is 0 then return True\n    if len(s) == 0 :\n        return True\n    # If length of the string is greater than 1 then return False\n    if len(s) > 1 :\n        return False\n    # If the length of the string is 1, check if all the characters are same or not\n    else :\n        if s[0] == s[1] :\n            return True\n        else :\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Checking if the length of the string is 0 or 1\n    if len(s) == 0 or len(s) == 1:\n        return True\n\n    # Checking if all the characters in the string are same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Get the first character of the string\n    first_char = s[0]\n    # Compare all the characters of the string to the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the string is empty\n    if len(s) == 0:\n        return True\n    \n    # Find the first character and its count in the string\n    first_char = s[0]\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == first_char:\n            count += 1\n        else:\n            break\n    \n    # Check if all the characters are the same\n    if count == len(s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (4.0/3.0) * math.pow(side,3)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 2\n    area = math.sqrt(s * (1 - s))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.16666666666666666 * side ** 2 * (1 + math.sin(30) / 6)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side ** 2) * (3 * side + 1) / 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side ** 2) ** 0.5\n    return 6 * s ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    d = side\n    s = (a + b + c + d)/2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    else:\n        # append m elements of list to the end of a new list\n        temp = list[-m:]\n        # reverse the new list\n        temp.reverse()\n        # append the last m elements of the original list to the end of the new list\n        temp += list[:-m]\n        # return the new list\n        return temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and the number of items to be rotated to the right direction.\n    It returns the rotated list.\n    '''\n    n = len(list)\n    m = m % n  # To handle cases where m is greater than n\n\n    # To rotate the list to the right direction\n    for i in range(n-m):\n        temp = list[i]\n        list[i] = list[i+m]\n        list[i+m] = temp\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:]\n    list.extend(list[:m])\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input. It rotates the list by n items to the right direction.\n    \"\"\"\n    # convert the list to a tuple to be able to modify it\n    lst = tuple(lst)\n    # calculate the new length of the list after rotation\n    new_length = len(lst) + n\n    # create a new list to store the rotated items\n    new_list = []\n    # loop through the original list\n    for item in lst:\n        # add the item to the new list\n        new_list.append(item)\n    # loop through the new list and add the items to the end of the original list\n    for i in range(n):\n        if i < new_length:\n            # append the rotated item to the original list\n            lst[i] = new_list.pop(0)\n    # convert the rotated list back to a list\n    lst = list(lst)\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Given a list, rotate it to the right by n items.\n    \"\"\"\n    n = n % len(lst)\n    lst.extend(lst[:n])\n    lst = lst[n:]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes in a list and an integer m and rotates the list to the right by m items.\n    '''\n    n = len(list)\n    m = m % n\n    \n    if m == 0:\n        return list\n    \n    temp = list[-m:]\n    list = list[:-m]\n    \n    for i in range(n-m, n):\n        list[i] = temp[i-n+m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Calculate the number of items to be rotated\n    n = len(list)\n    k = m % n\n    \n    # Reverse the first k items of the list\n    list = list[::-1]\n    \n    # Reverse the rest of the items\n    list[k:] = list[:k][::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.append(list.pop(0))\n    for i in range(m):\n        list.append(list.pop(-1))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle negative values of m\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:m] = list[m:n] + list[0:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for val in test_tup:\n        if val is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digit_set = set()\n    for num in range(startnum, endnum+1):\n        # Convert the number to a string\n        number_str = str(num)\n        # Iterate over each digit in the number\n        for digit in number_str:\n            # Add the digit to the set of digits to check later\n            digit_set.add(digit)\n    # Create a lambda function that checks if a digit is in the set of digits to check later\n    divisible_lambda = lambda x: x in digit_set\n    # Iterate over each number in the given range\n    for num in range(startnum, endnum+1):\n        # Convert the number to a string\n        number_str = str(num)\n        # Check if the number is divisible by every digit in the set of digits to check later\n        if all(divisible_lambda(digit) for digit in number_str):\n            # If the number is divisible by every digit, print it\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    divisible_by_digit = lambda num: all(num % i == 0 for i in range(10))\n    \n    # Filter the numbers within the given range that are divisible by every digit\n    divisible_numbers = filter(divisible_by_digit, range(startnum, endnum+1))\n    \n    # Return the filtered numbers as a list\n    return list(divisible_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function that checks if a number is divisible by a given digit\n    is_divisible = lambda num, digit: (num//digit) * digit == num\n    \n    # Define a lambda function that checks if a number is divisible by any digit in a list of digits\n    is_divisible_any = lambda num, digits: any(is_divisible(num, digit) for digit in digits)\n    \n    # Define a list of digits to check for divisibility with\n    digits = [int(digit) for digit in str(startnum)]\n    \n    # Define a list to store the valid numbers within the given range\n    valid_numbers = []\n    \n    # Iterate through each number within the given range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by any digit in the list of digits\n        if is_divisible_any(num, digits):\n            # If the number is divisible by any digit in the list of digits, append it to the list of valid numbers\n            valid_numbers.append(num)\n    \n    # Return the list of valid numbers\n    return valid_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Returns a list of numbers within the given range that are divisible by every digit.\n    \"\"\"\n    digits = [int(d) for d in str(endnum)]\n    numbers = [num for num in range(startnum, endnum+1)]\n    result = [num for num in numbers if all(digit in str(num) for digit in digits)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit in digits for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in set(str(x))), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a % 360!= 0:\n        return None\n    else:\n        area = math.pi * r**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * math.sin(math.radians(a/2))\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    \n    area = math.pi * r * r * math.sin(math.radians(a/2))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n\n    # Find the radius of the sector\n    alpha = math.radians(a)\n    dr = r * math.sin(alpha/2)\n\n    # Calculate the area of the sector using Heron's formula\n    area = math.sqrt(3) / 4 * dr * dr\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * (360-a)/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area\n    area = math.pi * r * (r + math.sin(math.radians(a)))\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = ''\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a dictionary to store the lengths of LCS for each subsequence \n    dp = {}\n    # Initialize LCS of subsequence X and Y\n    dp[(0, 0)] = 0\n    \n    # Iterate over all possible substrings of X and Y\n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1):\n            # If the characters match, add 1 to the LCS of subsequences X[0:i] and Y[0:j]\n            if i > 0 and j > 0 and X[i-1] == Y[j-1]:\n                dp[(i, j)] = dp[(i-1, j-1)] + 1\n            # If X[i] is not in Y, we add 1 to the LCS of subsequences X[0:i] and Y[0:j]\n            elif i > 0:\n                dp[(i, j)] = dp[(i-1, j)] + 1\n            # If Y[j] is not in X, we add 1 to the LCS of subsequences X[0:i] and Y[0:j]\n            else:\n                dp[(i, j)] = dp[(i, j-1)] + 1\n\n    # Initialize an empty list to store the LCS of the three sequences\n    lcs = []\n    # Use the dictionary to find the LCS of subsequences X and Y\n    i = len(X)\n    j = len(Y)\n    while i > 0 and j > 0:\n        # If the characters match, add the character to the LCS\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        # If X[i] is not in Y, we add the character X[i-1] to the LCS\n        elif i > 0:\n            i -= 1\n        # If Y[j] is not in X, we add the character Y[j-1] to the LCS\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Find the length of the three sequences\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 2D array to store the lengths of the LCS of each subsequence\n    LCS = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # Fill the LCS array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    # Find the LCS of the three sequences using backtracking\n    i = m\n    j = p\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Return the LCS\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a 2D array to store the lengths of all subsequences\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    LCS = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill in the table to find LCS of X[0...m-1], Y[0...n-1] and Z[0...p-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i][j-1][k-1]\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i-1][j-1][k-1])\n\n    # Convert the LCS table to the list of common subsequences\n    lcs_list = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            k -= 1\n        else:\n            j -= 1\n\n    # Return the list of common subsequences\n    return lcs_list[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    m, n, p = len(X), len(Y), len(Z) \n    # Step 1: Create a table to store length of LCS for all prefixes \n    L = [[0] * (p+1) for i in range(m+1)] \n  \n    # Step 2: Fill in the table using dynamic programming \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                elif L[i-1][j][k] > L[i][j-1][k]: \n                    L[i][j][k] = L[i-1][j][k] \n                elif L[i][j-1][k] > L[i][j][k-1]: \n                    L[i][j][k] = L[i][j-1][k] \n                else: \n                    L[i][j][k] = L[i][j][k-1] \n  \n    # Step 3: Find the length of LCS and store it in lcs_length variable \n    lcs_length = L[m][n][p] \n  \n    # Step 4: Create a list to store the characters of LCS \n    lcs_list = [] \n    i = m \n    j = n \n    k = p \n  \n    # Step 5: Traverse the table to get the LCS characters \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs_list.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] > L[i][j-1][k]: \n            i -= 1 \n        elif L[i][j-1][k] > L[i][j][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n  \n    # Step 6: Reverse the list of LCS characters and return it \n    lcs_list.reverse() \n    return lcs_list[:lcs_length] \n  \n  \n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a 3D array to store the lengths of LCS for all possible substrings\n    T = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # initialising the values of the array to 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else:\n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k], T[i][j][k-1])\n\n    # traversing the 3D array to find the LCS\n    i, j, k = m, n, o\n    LCS = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif T[i-1][j][k] == T[i][j-1][k]:\n            i -= 1\n        elif T[i][j-1][k] == T[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reversing the LCS and returning it\n    return LCS[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of LCS for every possible configuration\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # fill in the table\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # trace back the path to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # creating a 2D matrix to store lengths of longest common subsequences for all prefixes of X, Y, and Z\n    lcs = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # filling the 2D matrix using dynamic programming approach\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            if i==0 or j==0:\n                lcs[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n\n    # creating a table to store the longest common subsequences\n    lcs_table = [[\"\" for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # backtracking to construct the longest common subsequence\n    i, j = len(X), len(Y)\n    while i>0 and j>0:\n        if X[i-1] == Y[j-1]:\n            lcs_table[i][j] = lcs_table[i-1][j-1] + X[i-1]\n            i -= 1\n            j -= 1\n        elif lcs[i-1][j] > lcs[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reconstructing the longest common subsequence\n    lcs_seq = lcs_table[i][j]\n\n    # reversing the sequence to get the original strings\n    lcs_seq = lcs_seq[::-1]\n\n    return lcs_seq\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS for all prefixes of X, Y, and Z\n    T = [[0] * (n + 1) for i in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    T[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    T[i][j][k] = T[i - 1][j - 1][k - 1] + 1\n                else:\n                    T[i][j][k] = max(T[i - 1][j][k], T[i][j - 1][k], T[i][j][k - 1])\n\n    # Print the lengths of LCS for all prefixes of X, Y, and Z\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    print(\"LCS for X[\", i - 1, \"]: \", T[i - 1][j - 1][k - 1])\n    return T[m][n][p]\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    str1 = re.sub(r'\\b\\w', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z]'\n    words = re.findall(pattern, str1)\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, lambda x: x.group(0).replace(x.group(0)[0],'') + x.group(0)[1:], str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9]', '', str1)\n    # Split the string into individual words\n    words = str1.split()\n    # Loop through each word and capitalize it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression to match words that start with capital letters\n    pattern = r'\\b[A-Z]'\n    # Split the string into words\n    words = re.findall(pattern, str1)\n    # Join the words with spaces between them\n    result =''.join(words)\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Removing all the special characters and converting the string to lowercase\n    str1 = re.sub('[^a-zA-Z0-9\\s]', '', str1).lower()\n    # Splitting the string into words\n    words = str1.split()\n    # Creating an empty string to store the capitalized words\n    result = ''\n    # Looping through each word in the list\n    for word in words:\n        # Checking if the first letter of the word is a capital letter\n        if word[0].isupper():\n            # If it is, adding a space and the word to the result string\n            result +='' + word\n        else:\n            # If it's not, adding the word to the result string\n            result += word\n    # Returning the result string with spaces between capitalized words\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)\n    str1 = re.sub(r'([A-Z])([A-Z])([a-z])', r'\\1 \\2 \\3', str1)\n    str1 = re.sub(r'([A-Z])([a-z])', r'\\1 \\2', str1)\n    str1 = re.sub(r'([a-z])([A-Z])([A-Z])', r'\\1 \\2 \\3', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b[a-z][a-z\\']*\\b', str1)\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Use a loop to iterate over each word and add a space if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    \n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b[a-z]', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x), reverse=True)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            num_list.append(num)\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Split the strings into lists of numbers\n    nums_list = [int(num) for num in nums_str.split()]\n    \n    # Sort the list of numbers numerically\n    sorted_nums_list = sorted(nums_list)\n    \n    # Join the sorted numbers back into a string\n    sorted_nums_str = ''.join(map(str, sorted_nums_list))\n    \n    # Return the sorted string\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Use the built-in sort function\n    nums.sort()\n    \n    # Convert sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert all strings to int and sort them numerically\n    nums_int = sorted([int(num) for num in nums_str])\n    # convert the sorted list back to strings and return it\n    return [''.join(str(num)) for num in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    # sort the float values in ascending order\n    nums.sort()\n    # convert back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): list of strings of numbers\n\n    Returns:\n    list: sorted list of strings of numbers\n    \"\"\"\n    # Convert all strings to float\n    nums = [float(num) for num in nums_str]\n\n    # Sort the list numerically\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Splitting the list into strings and integers\n    nums_str = [str(num) for num in nums_str]\n    nums_int = [int(num) for num in nums_str]\n\n    # Sorting the list in ascending order\n    nums_int.sort()\n\n    # Joining the sorted list of integers into strings and returning the result\n    return [str(num) for num in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(s) for s in nums_str]\n    nums.sort()\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    # Print the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    if i == 0:\n        return True\n    \n    # If the left child of i is greater than the current index, return False\n    if i*2 <= len(arr) and arr[i*2] > arr[i]:\n        return False\n    \n    # Recursively check for left and right children of i\n    if i*2+1 <= len(arr) and arr[i*2+1] > arr[i]:\n        return False\n    \n    # If all the children of i are less than or equal to their parent, return True\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n\n    if i == 0:\n        if arr[i] < arr[i+1]:\n            return False\n        else:\n            return True\n\n    if arr[i] < arr[i//2] and arr[i] < arr[i*2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    # Base case: root is 0 or array has only one element\n    if i == 0 or i == len(arr) - 1:\n        if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n            return True\n        else:\n            return False\n\n    # Recursively check left and right children\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Function to check if the given array represents min heap or not.\n    \"\"\"\n    # First index of the first parent node\n    first_parent = (len(arr) - 2) // 2\n\n    # Check if the array represents min heap\n    while first_parent >= 0:\n        if check_min_heap_helper(arr, first_parent):\n            return True\n        else:\n            first_parent -= 1\n\n    return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < 0 or i >= len(arr):\n        return False\n\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == len(arr) - 1:\n        return True\n    else:\n        left_child = 2 * i\n        right_child = 2 * i + 1\n\n        if left_child < len(arr) and arr[left_child] > arr[i]:\n            return False\n        if right_child < len(arr) and arr[right_child] > arr[i]:\n            return False\n\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 0:\n        return check_min_heap_helper(arr, len(arr) // 2 - 1)\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    if i == 0:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    if check_min_heap(arr):\n        print(\"The array is a min heap\")\n    else:\n        print(\"The array is not a min heap\")"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_n_minus_1 = jacobsthal_num(n-1)\n        return jacobsthal_num_n_minus_1 + jacobsthal_num_n_minus_1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_numbers.append(2*jacobsthal_numbers[i-1] - jacobsthal_numbers[i-2])\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # First 10 jacobsthal numbers\n    jacobsthal_numbers = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171]\n    # Initialize a variable to store the nth jacobsthal number\n    jacobsthal_num = 0\n    # Iterate through the list of jacobsthal numbers to find the nth jacobsthal number\n    for i in range(10, n+1):\n        jacobsthal_num = (jacobsthal_numbers[i-1] + jacobsthal_numbers[i-3]) % 10\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 4 * jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        k = 2\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                j = (j*k + j*j) % (2*j-1)\n                k = (2*k + 1) % (2*j-1)\n            else:\n                j = (j*k + j*j) % (2*j-1)\n                k = (2*k + 1) % (2*j-1)\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    j = 0\n    l = 1\n    while l < n:\n        j += l\n        l = (l * l + j) // 2\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jacobsthal = 1\n    jacobsthal_lucas = 0\n    i = 1\n    while i < n:\n        jacobsthal_lucas = jacobsthal_lucas + jacobsthal\n        jacobsthal = 4 * jacobsthal - jacobsthal_lucas\n        i = i + 1\n    return jacobsthal_lucas"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    j = 0\n    k = 1\n    while k <= n:\n        j += k\n        k += 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for i in test_list:\n        if i[0] in count_dict:\n            count_dict[i[0]] += 1\n        else:\n            count_dict[i[0]] = 1\n\n    # Initialize the minimum count as the largest possible integer\n    min_count = float('inf')\n\n    # Iterate through the count dictionary to find the minimum count\n    for key, value in count_dict.items():\n        if value < min_count:\n            min_count = value\n\n    # Initialize a list to store the minimum k elements\n    min_list = []\n\n    # Iterate through the test list to find the minimum k elements\n    for i in test_list:\n        if count_dict[i[0]] == min_count:\n            min_list.append(i)\n\n    # Return the minimum k elements\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        count = 0\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j]:\n                count += 1\n        if count < K:\n            min_list.append(test_list[i])\n        if len(min_list) == K:\n            break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list based on the first element of the tuples\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum k\n    min_k_index = 0\n\n    # Initialize minimum value of k\n    min_k_value = test_list[0][0]\n\n    # Iterate through the sorted list and update the minimum k value and index\n    for index, value in enumerate(test_list):\n        if index >= K:\n            # Stop iterating if we have reached the kth element\n            break\n\n        if value[0] < min_k_value:\n            # Update the minimum k value and index\n            min_k_index = index\n            min_k_value = value[0]\n\n    # Return the minimum k value and index\n    return min_k_value, min_k_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # Function to find minimum k records from tuple list\n    test_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort() # Sort the list of tuples by the first element\n    min_records = [] # Initialize an empty list to store the minimum k records\n    \n    for i in range(len(test_list)-K): # Iterate over the first K elements of the list\n        min_records.append(test_list[i]) # Append the i-th minimum record to the list\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Create a dictionary to store frequency of each element in the list\n    freq_dict = {}\n    for tup in test_list:\n        if tup[0] in freq_dict:\n            freq_dict[tup[0]] += 1\n        else:\n            freq_dict[tup[0]] = 1\n    \n    # Create a list of tuples with frequency as value and element as key\n    freq_list = [(freq, elem) for elem, freq in freq_dict.items()]\n    \n    # Sort the list of tuples based on frequency\n    freq_list.sort(reverse=True)\n    \n    # Find the minimum k records\n    min_k_list = []\n    for i in range(K):\n        min_k_list.append(freq_list[i][1])\n    \n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # initialize the minimum list with the first K elements\n    min_list = test_list[:K]\n    # loop over the remaining elements in the list\n    for i in range(K, len(test_list)):\n        # if the current element is greater than the minimum element, update the minimum list\n        if test_list[i][1] > min_list[-1][1]:\n            min_list.append(test_list[i])\n    # return the minimum list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize variables for minimum and maximum keys\n    min_key = None\n    max_key = None\n\n    # Initialize variables for minimum and maximum values\n    min_val = None\n    max_val = None\n\n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        if not min_key or sorted_list[i][0] < min_key:\n            # Update minimum key and value\n            min_key = sorted_list[i][0]\n            min_val = sorted_list[i][1]\n        if not max_key or sorted_list[i][0] > max_key:\n            # Update maximum key and value\n            max_key = sorted_list[i][0]\n            max_val = sorted_list[i][1]\n\n    # Return the minimum value and the minimum key\n    return min_val, min_key\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = set()\n    \n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_indices.add(i)\n            \n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    # Loop through each index in the first list\n    for i in range(len(l1)):\n        # Check if the element at this index is also in the second list and third list\n        if l1[i] in l2 and l1[i] in l3:\n            # If the element is common, append it to the common list\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store the counts of each element in the three lists\n    counts = {}\n    \n    # Iterate through each element in the first list\n    for i in range(len(l1)):\n        # If the element is not in the dictionary, add it with a count of 1\n        if l1[i] not in counts:\n            counts[l1[i]] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            counts[l1[i]] += 1\n    \n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through each element in the second list\n    for i in range(len(l2)):\n        # If the element is not in the dictionary, skip to the next iteration\n        if l2[i] not in counts:\n            continue\n        # If the element is in the dictionary, decrement its count by 1\n        else:\n            counts[l2[i]] -= 1\n        # If the count becomes negative after decrementing, add it to the common_elements list\n        if counts[l2[i]] < 0:\n            common_elements.append(l2[i])\n    \n    # Iterate through each element in the third list\n    for i in range(len(l3)):\n        # If the element is not in the dictionary, skip to the next iteration\n        if l3[i] not in counts:\n            continue\n        # If the element is in the dictionary, decrement its count by 1\n        else:\n            counts[l3[i]] -= 1\n        # If the count becomes negative after decrementing, add it to the common_elements list\n        if counts[l3[i]] < 0:\n            common_elements.append(l3[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = None\n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List must have at least 2 numbers\"\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"(?=.*a)(?=.*b.*)\"\n    match = re.search(pattern, text)\n    if match:\n        print(\"The pattern '{}' is found in the text '{}'\".format(pattern, text))\n    else:\n        print(\"The pattern '{}' is not found in the text '{}'\".format(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(?P<b>b*)\"\n    match = re.search(pattern, text)\n    if match:\n        groups = match.groupdict()\n        return groups[\"b\"]\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"ab+\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a\\w+b\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a\\w*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found the pattern in the text\")\n        print(\"Match found at index: \", match.start())\n        print(\"Match length: \", match.end() - match.start())\n    else:\n        print(\"Pattern not found in the text\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    if matches:\n        return 'Found match(es): {}'.format(', '.join(matches))\n    else:\n        return 'No match found.'"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    The function should return the count of pairs. \n    '''\n\n    # Initialize an empty dictionary to store the frequency of characters in the string\n    freq = {}\n    \n    # Iterate through each string in the list and update the frequency dictionary\n    for s in test_list:\n        for c in s:\n            freq[c] = freq.get(c, 0) + 1\n            \n    # Initialize a count variable to keep track of the number of pairs\n    count = 0\n    \n    # Iterate through each character in the frequency dictionary\n    for key, value in freq.items():\n        # Calculate the frequency of characters that can be reversed\n        freq_rev = {v: freq[v] for v in freq.keys() if v!= key}\n        freq_rev[value - 1] -= 1\n        \n        # Check if any combination of characters can form a pair that can be reversed\n        for rev_key, rev_value in freq_rev.items():\n            if rev_value > 0:\n                # Update the count variable with the new count of pairs\n                count += rev_value * (value - 1)\n    \n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n        test_list (list): A list of strings.\n\n    Returns:\n        int: The number of pairs of reverse strings in the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert list to tuple and sort it\n    list1_sorted = tuple(sorted(tuple(sorted(l))))\n\n    # Initialize a dictionary to store count of unique tuples\n    count_dict = {}\n\n    # Iterate over all possible tuples of elements in list1_sorted\n    for i in range(1, len(list1_sorted)+1):\n        # Find all tuples that have length equal to i\n        tuples = [(list1_sorted[j], count_dict.get((list1_sorted[j],), 0)+1) for j in range(len(list1_sorted)-i+1)]\n\n        # Update count dictionary\n        for t in tuples:\n            count_dict[t] = count_dict.get(t, 0)\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    sublist_count = {}\n    \n    # Loop through each element in the list\n    for i in list1:\n        # If the element is a list, convert it to a tuple and check if it is already in the dictionary\n        if isinstance(i, list):\n            tuple_i = tuple(i)\n            if tuple_i in sublist_count:\n                # If it is, increment its value in the dictionary\n                sublist_count[tuple_i] += 1\n            else:\n                # If it's not, add it to the dictionary with a value of 1\n                sublist_count[tuple_i] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Loop through each element in the input list\n    for item in list1:\n        # Convert each element to a tuple and check if it is already a tuple in the count_dict\n        if isinstance(item, tuple):\n            # If it is, increment the count of the tuple by 1\n            if item in count_dict:\n                count_dict[item] += 1\n            # If it's not, add it to the count_dict with a count of 1\n            else:\n                count_dict[item] = 1\n        # If the element is not a tuple, convert it to a tuple and check if it is already a tuple in the count_dict\n        elif isinstance(item, list):\n            # Convert the list to a tuple and check if it is already a tuple in the count_dict\n            if tuple(item) in count_dict:\n                # If it is, increment the count of the tuple by 1\n                count_dict[tuple(item)] += 1\n            # If it's not, add it to the count_dict with a count of 1\n            else:\n                count_dict[tuple(item)] = 1\n                \n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # Loop through each item in the list1\n    for item in list1:\n        # Convert the item to a tuple and check if it is already in the dictionary\n        if tuple(item) in sublist_count:\n            # Increment the count of the tuple in the dictionary\n            sublist_count[tuple(item)] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[tuple(item)] = 1\n\n    # Return the dictionary containing the count of each unique sublist\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_tuple = tuple(list1[i:j])\n            if sublist_tuple not in sublist_count:\n                sublist_count[sublist_tuple] = 1\n            else:\n                sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert list1 to a set to remove duplicates\n    list1 = list(set(list1))\n\n    # Initialize an empty dictionary to store the sublist counts\n    sublist_counts = {}\n\n    # Iterate through each sublist in list1\n    for sublist in list1:\n        # Convert sublist to a tuple and check if it already exists in sublist_counts\n        if tuple(sublist) in sublist_counts:\n            # Increment the count of sublist in sublist_counts\n            sublist_counts[tuple(sublist)] += 1\n        else:\n            # Add sublist to sublist_counts with a count of 1\n            sublist_counts[tuple(sublist)] = 1\n\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    # Loop through the list1 and convert each list to a tuple\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple already exists in the dictionary, increment its count\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # Otherwise, add the tuple with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts of unique sublists\n    counts = {}\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple to compare it with other tuples\n        sublist = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its count\n        if sublist in counts:\n            counts[sublist] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[sublist] = 1\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    list1_tuples = []\n    for elem in list1:\n        list1_tuples.append(tuple(elem))\n    \n    count_dict = {}\n    for elem in list1_tuples:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        sublist = tuple(sublist)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if num.startswith('-') or num.startswith('+'):\n        num = num[1:]\n    num = num.lstrip('0')\n    if not num:\n        return False\n    parts = [int(part) for part in num.split('.')][:2]\n    if len(parts) == 2 and len(parts[0]) <= 2 and len(parts[1]) <= 2:\n        return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the string to float and check if it's a decimal number with a precision of 2\n        float_num = float(num)\n        num_str = str(float_num)\n        if '.' in num_str and len(num_str.split('.')[1]) <= 2:\n            # If the number is a decimal number, return True\n            return True\n        else:\n            # If the number is not a decimal number or its precision is greater than 2, return False\n            return False\n    except ValueError:\n        # If the input is not a valid decimal number, raise a ValueError\n        raise ValueError(\"Invalid input\")"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if float(num).is_integer():\n            if int(num) % 1 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    parts = num.split('.')\n    if len(parts) > 1 and len(parts[1]) > 2:\n        return False\n    elif len(parts) == 1 and len(parts[0]) > 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # convert the input string to a float\n    num = float(num)\n    # check if the float is an integer\n    if int(num) == num:\n        # check if the integer part is less than 100\n        if int(num) < 100:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if num.count('.') == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' not in num:\n            return False\n        num_list = num.split('.')\n        if len(num_list)!= 2:\n            return False\n        int_part = num_list[0]\n        if len(int_part) > 10:\n            return False\n        for i in int_part:\n            if not i.isdigit():\n                return False\n        dec_part = num_list[1]\n        if len(dec_part) > 2:\n            return False\n        for i in dec_part:\n            if not i.isdigit():\n                return False\n        return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) == 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?[0-9]*\\.[0-9]{1,2}$'\n    if not re.match(decimal_pattern, num):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    #create a set from the given list and check if its length is 1 or not\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, otherwise it returns False.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1, indicating that there is only one unique element in the list\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n            break\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0):\n            return 29\n        else:\n            return 28\n    else:\n        return 30"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Checking whether the given month number is valid or not\n    if monthnum3 in range(1,13):\n        # If the month number is valid, then checking whether the number of days in the given month is 30 or not\n        if monthnum3 == 2:\n            if (datetime.date(2022,monthnum3,29).strftime(\"%j\") in range(1,32)):\n                return True\n            else:\n                return False\n        elif (datetime.date(2022,monthnum3,31).strftime(\"%j\") in range(1,32)):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_dict = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 31:\n            return True\n        elif month_dict[monthnum3] == 30:\n            return True if monthnum3%2 == 0 else False\n        elif month_dict[monthnum3] == 28:\n            return True if monthnum3%2 == 0 else False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13) and monthnum not in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2] and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return days_in_month[monthnum - 1] in days_in_month"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 % 3 == 0:\n            if monthnum3 % 4 == 0:\n                if monthnum3 % 5 == 0:\n                    if monthnum3 % 6 == 0:\n                        if monthnum3 % 7 == 0:\n                            if monthnum3 % 8 == 0:\n                                if monthnum3 % 9 == 0:\n                                    if monthnum3 % 10 == 0:\n                                        if monthnum3 % 11 == 0:\n                                            if monthnum3 % 12 == 0:\n                                                if monthnum3 % 13 == 0:\n                                                    if monthnum3 % 14 == 0:\n                                                        if monthnum3 % 15 == 0:\n                                                            if monthnum3 % 16 == 0:\n                                                                if monthnum3 % 17 == 0:\n                                                                    if monthnum3 % 18 == 0:\n                                                                        if monthnum3 % 19 == 0:\n                                                                            if monthnum3 % 20 == 0:\n                                                                                if monthnum3 % 21 == 0:\n                                                                                    if monthnum3 % 22 == 0:\n                                                                                        if monthnum3 % 23 == 0:\n                                                                                            if monthnum3 % 24 == 0:\n                                                                                                if monthnum3 % 25 == 0:\n                                                                                                    if monthnum3 % 26 == 0:\n                                                                                                        if monthnum3 % 27 == 0:\n                                                                                                            if monthnum3 % 28 == 0:\n                                                                                                                if monthnum3 % 29 == 0:\n                                                                                                                    if monthnum3 % 30 == 0:\n                                                                                                                        print(\"Month number contains 30 days.\")\n                                                                                                                    else:\n                                                                                                                        print(\"Month number does not contain 30 days.\")\n                                                                                                                else:\n                                                                                                                    print(\"Month number does not contain 30 days.\")\n                                                                                                            else:\n                                                                                                                print(\"Month number does not contain 30 days.\")\n                                                                                                        else:\n                                                                                                            print(\"Month number does not contain 30 days.\")\n                                                                                                    else:\n                                                                                                        print(\"Month number does not contain 30 days.\")\n                                                                                                else:\n                                                                                                    print(\"Month number does not contain 30 days.\")\n                                                                                            else:\n                                                                                                print(\"Month number does not contain 30 days.\")\n                                                                    else:\n                                                                        print(\"Month number does not contain 30 days.\")\n                                                                else:\n                                                                    print(\"Month number does not contain 30 days.\")\n                                                            else:\n                                                                print(\"Month number does not contain 30 days.\")\n                                                        else:\n                                                            print(\"Month number does not contain 30 days.\")\n                                                    else:\n                                                        print(\"Month number does not contain 30 days.\")\n                                                else:\n                                                    print(\"Month number does not contain 30 days.\")\n                                            else:\n                                                print(\"Month number does not contain 30 days.\")\n                                        else:\n                                            print(\"Month number does not contain 30 days.\")\n                                    else:\n                                        print(\"Month number does not contain 30 days.\")\n                                else:\n                                    print(\"Month number does not contain 30 days.\")\n                            else:\n                                print(\"Month number does not contain 30 days.\")\n                        else:\n                            print(\"Month number does not contain 30 days.\")\n                    else:\n                        print(\"Month number does not contain 30 days.\")\n                else:\n                    print(\"Month number does not contain 30 days.\")\n            else:\n                print(\"Month number does not contain 30 days.\")\n        else:\n            print(\"Month number does not contain 30 days.\")\n    else:\n        print(\"Month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2 and ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as positive infinity\n    min_diff = float('inf')\n\n    # Iterate over the array\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i + 1])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n\n    :param arr: array of integers\n    :param n: size of the array\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    diff = float('inf')  # initialize the minimum difference as positive infinity\n    for i in range(n-1):  # iterate through the array\n        diff = min(diff, arr[i+1] - arr[i])  # calculate the minimum difference between the current element and the next element\n    return diff  # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in a list of integers and the length of the list as inputs and\n    returns the minimum difference between any two elements in the list.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array\n    arr.sort()\n    \n    # Initialize the minimum difference and its index\n    min_diff = abs(arr[1] - arr[0])\n    min_diff_index = 0\n    \n    # Check for the minimum difference between adjacent elements in the array\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    \n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Initialize minimum difference and current minimum difference\n    min_diff = float('inf')\n    curr_min_diff = float('inf')\n\n    # Iterate over all pairs of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate absolute difference between current elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update minimum difference if this is smaller\n            if diff < min_diff:\n                curr_min_diff = min_diff\n                min_diff = diff\n\n            # Update current minimum difference if this is smaller\n            elif diff < curr_min_diff:\n                curr_min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Calculate the minimum difference between any two elements in the array\n    min_diff = abs(arr[1] - arr[0])\n    # Loop through all pairs of elements in the array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the next one in the array\n        diff = abs(arr[i] - arr[i+1])\n        # If the current difference is smaller than the minimum difference found so far, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    The function uses a nested loop to iterate over all possible pairs of elements in the array. It then calculates the difference between each pair of elements and returns the minimum difference.\n    \"\"\"\n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n\n    # Iterate over all possible pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the difference between the current pair of elements\n            diff = abs(arr[i] - arr[j])\n\n            # If the difference is smaller than the current minimum difference, update the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize variables to store the minimum difference and the index of the first element\n    min_diff = arr[1] - arr[0]\n    first_idx = 0\n\n    # iterate through the remaining elements in the array\n    for i in range(1, n):\n        # calculate the difference between the current element and the next element\n        diff = arr[i] - arr[i + 1]\n\n        # update the minimum difference if the current difference is less than the minimum\n        if diff < min_diff:\n            min_diff = diff\n            first_idx = i\n\n    # return the minimum difference and the index of the first element\n    return min_diff, first_idx\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference and the current difference\n    min_diff = float('inf')\n    current_diff = arr[1] - arr[0]\n\n    # Traverse through the array from index 1 to n-1\n    for i in range(1, n - 1):\n        # Calculate the current difference\n        current_diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if current_diff < min_diff:\n            min_diff = current_diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    #initialize a variable to count the number of digits\n    count = 0\n\n    #loop through each character in the string\n    for char in str:\n        #if the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n\n    #return the count of digits in the string\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of the number of digits in the string.\n    '''\n\n    # initialize a variable to store the count of digits in the string\n    count = 0\n\n    # loop through each character in the string\n    for char in str:\n        # if the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n\n    # return the count of digits in the string\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 1\n        polite = 3\n        while i <= n - 2:\n            polite += 2\n            if is_prime(polite):\n                return polite\n            i += 1\n        return None\n\n\ndef is_prime(n): \n    '''\n    Check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0 \n    x = 1 \n    while count < n: \n        count += 1 \n        x += 1 \n    return x "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize variables\n    count = 0\n    polite = 1\n    base = 2\n    \n    # loop until nth polite number is found\n    while count < n:\n        # check if nth polite number is present\n        if is_prime(polite):\n            count += 1\n        \n        # increment polite number by 2\n        polite += 2\n        \n        # increment base by 1\n        base += 1\n        \n    return polite\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Define the polite numbers\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    # Calculate the sum of the polite numbers\n    polite_sum = sum(polite_numbers)\n\n    # Calculate the nth polite number\n    nth_polite = math.ceil(polite_sum / n)\n\n    # Return the nth polite number\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Initialize variables\n    i = 0\n    count = 0\n    \n    # Calculate the sum of natural numbers less than or equal to n \n    sum_n = (n * (n + 1)) // 2\n    \n    # Find the square root of sum_n \n    sqrt_sum_n = math.sqrt(sum_n)\n    \n    # Initialize variable for nth polite number\n    nth_polite = 0\n    \n    # Iterate till nth polite number is found \n    while count < n:\n        \n        # Check if the sum of natural numbers less than or equal to sqrt_sum_n is greater than or equal to sqrt_sum_n^2 \n        if sum_n >= sqrt_sum_n**2:\n            \n            # Increment the count variable \n            count += 1\n            \n            # Calculate the nth polite number \n            nth_polite = sqrt_sum_n + 1\n            \n        # Update the sum_n variable \n        sum_n = (nth_polite * (nth_polite + 1)) // 2\n        \n        # Update the square root of sum_n \n        sqrt_sum_n = math.sqrt(sum_n)\n        \n        # Increment the variable for nth polite number \n        nth_polite += 1\n        \n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 2 * is_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = 1\n    i = 0\n    while i < n:\n        polite_number += math.ceil((i * (i + 1)) / 2)\n        i += 1\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # start with 1 as first polite number\n    count = 1\n    num = 1\n\n    # iterate till nth polite number is found\n    while count < n:\n        # if current number is prime, increment count\n        if is_prime(num):\n            count += 1\n        # increment number by 1\n        num += 1\n\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n <= 0:\n        return None\n\n    def nth_polite(count):\n        polite_count = 0\n        current_count = 0\n        polite_num = 1\n\n        while True:\n            if current_count == count:\n                return polite_num\n            elif current_count > count:\n                return None\n            elif current_count < count:\n                current_count += 1\n                if current_count % 2 == 0:\n                    polite_count += 1\n                    polite_num += 1\n                else:\n                    polite_count += 2\n\n        return None\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find the nth polite number.\n\n    The nth polite number is defined as the smallest odd prime number that is greater than the nth odd prime number.\n\n    Example:\n    >>> is_polite(10)\n    9\n\n    :param n: The nth polite number to find.\n    :return: The nth polite number.\n    \"\"\"\n    # Find the nth odd prime number\n    odd_prime = 1\n    while odd_prime % 2 == 0:\n        odd_prime += 2\n\n    for i in range(3, int(math.sqrt(odd_prime)) + 1, 2):\n        while odd_prime % i == 0:\n            odd_prime += i\n\n    # Find the nth polite number\n    polite = odd_prime + 2 * (n - 1)\n    return polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n): \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n\n    Args:\n        n (int): the number of odd natural numbers to sum\n\n    Returns:\n        int: the sum of fourth power of first n odd natural numbers\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # calculate the sum of fourth power of first n odd natural numbers\n    return sum([x**4 for x in range(1, 2*n+1, 2)])"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [x for x in range(1, n+1, 2)]\n    fourth_power_sum = 0\n    for number in odd_numbers:\n        fourth_power_sum += number**4\n    return fourth_power_sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {')', '}', ']'}\n    close_brackets = {'(', '{', '['}\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if len(stack) == 0 or stack.pop() not in close_brackets[char]:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i, char in enumerate(exp):\n        if char == '(':\n            stack.append((char, i))\n        elif char == ')':\n            if not stack:\n                return False\n            prev_char, prev_index = stack.pop()\n            if prev_char == '(':\n                if prev_index < i - 1:\n                    return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack for keeping track of opening parenthesis\n    stack = deque()\n\n    # Iterate over each character of the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == \"(\":\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the last opening parenthesis from the stack\n        elif char == \")\":\n            if not stack:\n                return False # Mismatched parenthesis\n            else:\n                stack.pop()\n\n    # If the stack is not empty, there are more opening parenthesis than closing parenthesis\n    if stack:\n        return False\n\n    return True # Balanced expression"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            opening_parenthesis = stack.pop()\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    \n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                balanced = False\n                break\n            top = stack.pop()\n            if top!= '(':\n                balanced = False\n                break\n    \n    if stack:\n        balanced = False\n    \n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = ['(', '{', '[']\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in ['+', '-', '*', '/']:\n            if not stack:\n                return False\n            prev_char = stack[-1]\n            if prev_char in ['(', '{', '[']:\n                stack.pop()\n            else:\n                return False\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Initialize an empty stack\n    stack = deque()\n\n    # Loop through the characters of the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the top element from the stack\n        elif char == ')':\n            if not stack:\n                return False # Unbalanced expression\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False # Unbalanced expression\n\n    # If the stack is not empty, it means there are still opening parenthesis left.\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (char == ')' and top!= '(') or (char == '}' and top!= '{') or (char == ']' and top!= '['):\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through the words and remove the ones with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words_to_remove = []\n    for i, word in enumerate(words):\n        if len(word) == K:\n            words_to_remove.append(i)\n    words = [word for i, word in enumerate(words) if i not in words_to_remove]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Loop through the matches and return the information about each match\n    for match in matches:\n        # Return the start and end positions of the match\n        start_pos = match.start()\n        end_pos = match.end()\n        # Return the substring that was matched\n        matched_substring = match.group()\n        # Return the position of the substring in the original text\n        substring_pos = text.find(matched_substring)\n        \n        # Return a dictionary containing the start position, end position, matched substring, and substring position\n        return {\n           'start_pos': start_pos,\n            'end_pos': end_pos,\n           'matched_substring': matched_substring,\n           'substring_pos': substring_pos\n        }"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def occurance_substring(text, pattern):\n    \"\"\"\n    This function takes a string and a pattern as input and returns the \n    number of occurrences and position of the pattern in the string. \n    If there is no match, it returns None.\n    \n    \"\"\"\n    #compile the pattern to a regex pattern\n    pattern_regex = re.compile(pattern)\n    \n    #match the pattern in the string and return the match object\n    match = pattern_regex.search(text)\n    \n    #if there is no match, return None\n    if match is None:\n        return None\n    \n    #get the position and number of occurrences of the pattern in the string\n    position = match.start()\n    count = match.span()[0] - position\n    \n    #return the position, count of the pattern in the string\n    return (position, count)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = \"the\"\n\nresult = occurance_substring(text,pattern)\nif result:\n    print(\"The substring '{}' occurred at index {} and has length {}\".format(pattern, result[0], result[1]-result[0]))\nelse:\n    print(\"The substring '{}' was not found in the string.\".format(pattern))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return (match.group(), match.start(), match.end())\n        return None\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        result = re.search(pattern, text)\n        if result:\n            return result.group(), result.start(), result.end()\n        else:\n            return None\n    except re.error:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through all odd indices\n    for i in range(1, len(nums), 2):\n        # check if the current index contains odd numbers\n        if nums[i] % 2 == 0:\n            return False\n    # if no odd numbers were found, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            odd_count += 1\n    return odd_count == len(nums) * 2"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # checking if the index is even\n            if nums[i] % 2 == 0:  # checking if the number at odd index is even\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i+1], nums[i]])) == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if i % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            for j in range(i+2, len(nums), 2):\n                if nums[j] % 2 == 1:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n    return odd_count == len(nums) // 2"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i], nums[i+1]])) == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i].lower() in vowels and test_str[i+1].lower() in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n            if i > 0 and test_str[i-1] in vowels:\n                count -= 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count -= 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # create a set of vowels\n    \n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize the sum variable to 0\n    total_sum = 0\n    # Loop through the unique set and add each element to the total sum\n    for num in unique_set:\n        total_sum += num\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # Calculate the sum of the unique elements\n    sum_of_unique = sum(unique_set)\n    \n    # Return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    If all the elements in the list are unique, the function will return the sum of all elements.\n    '''\n    \n    # Create a set to store unique elements from the list\n    unique_set = set(arr)\n    \n    # If all elements are unique, return the sum of all elements\n    if len(unique_set) == len(arr):\n        return sum(arr)\n    \n    # If there are repeated elements, return the sum of non-repeated elements\n    else:\n        return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an input and returns the sum of all the non-repeated elements in the list.\n    '''\n    unique_arr = list(set(arr))\n    total_sum = 0\n    for num in unique_arr:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # initialize the sum to zero\n    sum = 0\n    # loop through the unique set and add the elements to the sum\n    for element in unique_set:\n        sum += element\n    # return the sum of non-repeated elements in the list\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of all the elements in the list excluding those that are the same as the previous element.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return arr[0] + find_sum(arr[1:])"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    total = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            total += num\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the elements and their count\n    count = {}\n    # Iterate through the list and update the count dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Iterate through the count dictionary and find the sum of non-repeated elements\n    sum_ = 0\n    for num, count in count.items():\n        if count == 1:\n            sum_ += num\n    return sum_"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Find the sum of non-repeated elements of the list\n    sum_of_non_repeated_elements = sum(unique_set)\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    \n    # calculate the sum of unique elements\n    sum_unique = sum(unique_set)\n    \n    return sum_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as an input and returns a new list where consecutive duplicates of elements are packed into sublists.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    \n    # Group the elements by their count and pack them into sublists\n    packed_lst = []\n    for key, group in groupby(sorted(lst), lambda x: counts[x]):\n        if key == 1:\n            packed_lst.append(list(group))\n        elif key > 1:\n            packed_lst.extend(list(group))\n    \n    return packed_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(lst)\n    res = []\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            res.extend(list(group))\n    return res"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use the groupby() function from itertools to group the list elements based on their values\n    grouped_list = groupby(list1)\n    # Initialize an empty list to store the sublists\n    result = []\n    # Iterate over the grouped list and check for consecutive duplicates\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            # If there are consecutive duplicates, append a sublist containing all the consecutive duplicates\n            sublist = list(group)\n            sublist.insert(0, sublist.pop())\n            result.append(sublist)\n    # Return the final list of sublists containing consecutive duplicates\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    prev = None\n    for k, group in groupby(lst):\n        if prev is None:\n            res.append(list(group))\n            prev = k\n        else:\n            if prev + 1 == k:\n                res[-1].extend(list(group))\n            else:\n                res.append(list(group))\n                prev = k\n    return res"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    packed_list = []\n    for i, g in groupby(list1):\n        if len(list(g)) > 1:\n            for j in range(1, len(list(g))):\n                g = list(g)\n                g.append(list(g)[0])\n                g.pop(0)\n            packed_list.append(g)\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    result = []\n    for key, group in grouped_list:\n        sublist = list(group)\n        if len(sublist) > 1:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts the number of lists within a list. The function returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    lst = sorted(lst) # sort the list\n    d = {}\n    for i in range(len(lst)):\n        if lst[i] not in d:\n            d[lst[i]] = 1\n        else:\n            d[lst[i]] += 1\n    return d"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    counts = {}\n    for i in range(len(lst)):\n        sublist = lst[i]\n        if sublist not in counts:\n            counts[sublist] = 1\n        else:\n            counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the count of each list\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list and not already in the dictionary\n        if isinstance(element, list) and (element not in count_dict):\n            # Turn the list to a tuple and add it to the dictionary\n            count_dict[tuple(element)] = count_dict.get(tuple(element), 0) + 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique lists\n    counts = {}\n\n    # Loop through the list\n    for item in list1:\n        # If the item is not a list, turn it into a tuple\n        if not isinstance(item, list):\n            item = (item,)\n\n        # If the item is already in the dictionary, increment its count\n        if item in counts:\n            counts[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            counts[item] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert list to set to remove duplicates\n    list1 = list(set(list1))\n\n    # Create an empty dictionary to store counts\n    count_dict = {}\n\n    # Loop through each list in list1 and add its tuple to count_dict\n    for sublist in list1:\n        count_dict[tuple(sublist)] = list1.count(sublist)\n\n    # Return count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # create an empty dictionary\n    sublist_counts = {}\n    \n    # iterate through each list in the input list\n    for sublist in list1:\n        \n        # turn the list into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # if the tuple already exists in the dictionary, increment its count\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        # otherwise, add the tuple as a new key with a count of 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n            \n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through each element of the list\n    for element in list1:\n        # check if the element is already a tuple\n        if isinstance(element, tuple):\n            # if it is, turn it into a list and add it to the counts dictionary\n            list_element = list(element)\n            if list_element not in counts:\n                counts[list_element] = 1\n            else:\n                counts[list_element] += 1\n        else:\n            # if not, create a tuple with the element and add it to the counts dictionary\n            new_tuple = (element,)\n            if new_tuple not in counts:\n                counts[new_tuple] = 1\n            else:\n                counts[new_tuple] += 1\n    \n    # return the counts dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the counts of unique sublists\n    count_dict = {}\n\n    # Iterate over all sublists in the input list\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        # Check if the sublist is already in the dictionary\n        if sublist in count_dict:\n            # If it is, increment its count by 1\n            count_dict[sublist] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[sublist] = 1\n\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to get unique elements\n    unique_elements = set(list1)\n    # Create a dictionary to store the count of each unique element\n    counts = {}\n    # Iterate through the unique elements and update their count in the dictionary\n    for element in unique_elements:\n        counts[element] = list1.count(element)\n    # Return the dictionary with the count of each unique element\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuples_list = []\n    for tuple_ in test_list:\n        for i in range(len(tuple_)):\n            for j in range(i+1, len(tuple_)):\n                tuples_list.append((tuple_[i], tuple_[j]))\n    return list(combinations(tuples_list, r=2))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns a list of combinations of sums with tuples in the list.\n    '''\n    sums = set()\n    for tup in test_list:\n        for i in range(len(tup)):\n            for j in range(i+1, len(tup)+1):\n                sums.add(tuple(tup[:i]+tup[j:]))\n    return list(sums)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Create a list of tuples containing the sums of each tuple\n    sum_tuples = [(sum(t), t) for t in test_list]\n\n    # Sort the list of sum_tuples by sum in ascending order\n    sum_tuples.sort()\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate over the sorted list of sum_tuples\n    for i in range(len(sum_tuples)):\n        # Get the current sum and tuple\n        current_sum, current_tuple = sum_tuples[i]\n\n        # Initialize a set to store the indices of the tuples that have the current sum\n        indices = set()\n\n        # Iterate over the remaining tuples in the list\n        for j in range(i, len(sum_tuples)):\n            # Get the next tuple and its sum\n            next_sum, next_tuple = sum_tuples[j]\n\n            # Check if the next tuple has the same sum as the current one and is not already in the set of indices\n            if next_sum == current_sum and next_tuple not in indices:\n                # If both conditions are met, add the tuple to the set of indices and to the combinations list\n                indices.add(j)\n                combinations_list.append(next_tuple)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples in ascending order of their sum\n    test_list.sort(key=lambda x: sum(x))\n\n    # Use itertools.combinations function to generate combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is equal to the sum of the remaining tuples in the list\n            if sum(test_list[i]) == sum(test_list[j:]) and len(test_list[i]) <= len(test_list[j:]):\n                # Generate a tuple containing the two tuples in the combination\n                combination = (test_list[i], test_list[j])\n                # Check if the combination is already present in the list of combinations\n                if combination not in combinations_list:\n                    combinations_list.append(combination)\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a helper function to generate all possible combinations of sums\n    def generate_combinations(lst, target_sum):\n        for i in range(len(lst)):\n            if i > 0 and lst[i] == lst[i-1]:\n                continue\n            for j in range(i+1, len(lst)):\n                if j > i+1 and lst[j] == lst[j-1]:\n                    continue\n                if lst[i] + lst[j] == target_sum:\n                    yield (lst[i], lst[j])\n\n    # Iterate over the given list of tuples and generate all possible combinations of sums\n    for tup in test_list:\n        for combination in generate_combinations(tup, sum(tup)):\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list and returns all possible combinations of sums with tuples in the list.\n\n    Args:\n        test_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples containing all possible combinations of sums with tuples in the list.\n    '''\n\n    # create a set of tuples to store unique combinations\n    unique_combinations = set()\n\n    # loop through the tuple list and generate all possible combinations of sums\n    for tup in test_list:\n        for comb in combinations(tup, len(tup)):\n            unique_combinations.add(tuple(comb))\n\n    # return a list of tuples containing all unique combinations of sums\n    return list(unique_combinations)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sums = set()\n    for combo in combinations(test_list, len(test_list)):\n        if sum(combo) not in sums:\n            sums.add(sum(combo))\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    result = []\n    \n    for i in range(1, total_sum+1):\n        for combination in combinations(test_list, r=i):\n            if sum(combination) == i:\n                result.append(combination)\n                \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for combo in combinations(test_list[i], j):\n                if sum(combo) == 0:\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a function to calculate the sum of a tuple\n    def tuple_sum(t):\n        return sum(t)\n    \n    # Define a function to find the combinations of sums with tuples in the given list\n    def find_combinations_helper(test_list, current_sum, comb_set):\n        if len(test_list) == 0:\n            return comb_set\n        else:\n            # Calculate the sum of the first tuple in the list\n            first_tuple = test_list[0]\n            current_sum += tuple_sum(first_tuple)\n            \n            # Check if the current sum is less than or equal to the target sum\n            if current_sum <= target_sum:\n                # Add the first tuple to the combination set\n                comb_set.add((first_tuple,))\n                \n                # Recursively find the combinations of sums with tuples in the rest of the list\n                find_combinations_helper(test_list[1:], current_sum, comb_set)\n                \n                # Remove the first tuple from the combination set\n                comb_set.remove((first_tuple,))\n            else:\n                # Recursively find the combinations of sums with tuples in the rest of the list\n                find_combinations_helper(test_list[1:], current_sum, comb_set)\n    \n    # Initialize the variables for the function\n    target_sum = sum(test_list)\n    comb_set = set()\n    \n    # Call the helper function to find the combinations of sums with tuples in the given list\n    find_combinations_helper(test_list, 0, comb_set)\n    \n    # Convert the set of combinations to a list of tuples\n    result = list(comb_set)\n    \n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to count the count of divisors of a given number.\n    '''\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return \"The number is not prime.\"\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return \"The number is divisible by 2.\"\n\n    # Check if the number is divisible by any odd number greater than 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return \"The number is divisible by an odd number greater than 2.\"\n\n    # If all the above checks pass, the number is a prime number\n    divisors = math.factorial(n)\n    divisors = divisors // (math.factorial(2) * math.factorial(n//2))\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count > n:\n                return True\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    def sum_of_divisors(n):\n        \"\"\"\n        Calculate the sum of divisors of a number\n        \"\"\"\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n//i:\n                    divisors.append(n//i)\n        return divisors\n\n    divisors = sum_of_divisors(n)\n    count = len(divisors)\n    even_count = sum([i for i in divisors if i % 2 == 0])\n    if even_count == count:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    \n    # calculate the number of divisors using the formula\n    count = math.sqrt(n) + 1  # +1 because we need to include the square root in the count\n    \n    if count == int(count) :  # check if the count is an integer\n        return True\n    else :\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # calculating the number of divisors of the given number\n    divisors = [1] * (n+1)\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors[i] = divisors[i] + divisors[n//i]\n    for i in range(int(math.sqrt(n))+1, n+1): \n        if n % i == 0: \n            divisors[i] = divisors[i] + divisors[n//i]\n\n    # checking whether the count of divisors is even or odd\n    count_odd = 0\n    for i in range(1, n+1): \n        if divisors[i] % 2 == 1: \n            count_odd += 1\n    if count_odd % 2 == 0: \n        return \"The count of divisors is even.\"\n    else: \n        return \"The count of divisors is odd.\""
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        if i == 0 or i == n-2:\n            sum += arr[i]\n        elif i % 2 == 0:\n            sum += arr[i]\n            sum += arr[i+1]\n        else:\n            sum += arr[i] + arr[i+1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Args:\n    arr: a list of integers\n\n    Returns:\n    sum_of_odd_length_subarrays: the sum of all odd length subarrays of the input list\n    \"\"\"\n    sum_of_odd_length_subarrays = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum_of_odd_length_subarrays += sum(arr[i:i+2])\n\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_length_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2!= 0:\n                odd_length_sum += arr[j] - arr[i]\n    return odd_length_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of all odd length subarrays in the list.\n    \"\"\"\n    n = len(arr)\n    sum_odd_length = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            sub_array = arr[i:j+1]\n            if len(sub_array) % 2!= 0:\n                sum_odd_length += sum(sub_array)\n                \n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Given an array of integers, find the sum of all odd length subarrays.\n\n    Example:\n    odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    Output: 48\n\n    :param arr: an array of integers\n    :return: the sum of all odd length subarrays\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 2, len(arr) + 1):\n            sub_arr = arr[i:j]\n            if sum(sub_arr) % 2 == 1:\n                total_sum += sum(sub_arr)\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = [0]*n\n    for i in range(n):\n        if i == 0 or i == n-1:\n            sum_arr[i] = arr[i]\n        elif i%2 == 0:\n            sum_arr[i] = sum_arr[i-2] + arr[i]\n        else:\n            sum_arr[i] = sum_arr[i-1] + arr[i]\n    return sum(sum_arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j%2 == 1 and sum_of_subarray(arr, i, j-1) % 2 == 0:\n                sum += arr[i:j].sum()\n\n    return sum\n\ndef sum_of_subarray(arr, start, end):\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # initialize sum to 0\n    sum_of_odd_length_subarrays = 0\n\n    # iterate over all subarrays of odd length\n    for i in range(1, len(arr) + 1):\n        # iterate over all possible starting indices of subarray\n        for j in range(len(arr) - i + 1):\n            # add the subarray to sum if it contains odd number of elements\n            if sum(arr[j:j+i]) % 2!= 0:\n                sum_of_odd_length_subarrays += sum(arr[j:j+i])\n\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # initialize sum of all odd length subarrays\n    s = 0\n    # iterate over all subarrays\n    for i in range(n):\n        # check if the subarray is odd length\n        if i == n-1 or arr[i+1] % 2 == 0:\n            # calculate the sum of the subarray\n            s += sum(arr[i:i+2])\n    return s"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    sum_odd_length = 0\n    n = len(arr)\n    for i in range(1, n):\n        if (n - i) % 2!= 0 and i % 2 == 0:\n            sum_odd_length += arr[i]\n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r = r/255\n    g = g/255\n    b = b/255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_val\n\n    delta = max_val - min_val\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    if max_val == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    if h < 0:\n        h += 360\n\n    h = round(h)\n    s = round(s, 2)\n    v = round(v, 2)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to floats and calculate the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the delta between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the hue based on the value of the maximum and minimum values\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Normalize the hue to be between 0 and 6\n    hue = hue if hue >= 0 else hue + 6\n\n    # Calculate the saturation and value based on the maximum value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the value based on the hue and saturation\n    if hue == 0 or hue == 6:\n        value = max_val\n    elif hue == 1:\n        value = max_val - min_val\n    else:\n        value = max_val - min_val * (1 - abs((hue % 2) - 1))\n\n    # Return the hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV\n    h, s, v = 0, 0, max(r, g, b)\n    delta = max(r, g, b) - min(r, g, b)\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max(r, g, b)\n\n    if max(r, g, b) == r:\n        h = (g - b) / delta\n    elif max(r, g, b) == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    if h < 0:\n        h += 6\n\n    # Convert HSV to float and return\n    h /= 6\n    s = s * 100\n    v = v / 255\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, and b to fractions\n    r_frac = r / 255.0\n    g_frac = g / 255.0\n    b_frac = b / 255.0\n\n    # Find min and max fractions\n    min_frac = min(r_frac, g_frac, b_frac)\n    max_frac = max(r_frac, g_frac, b_frac)\n\n    # Find difference between max and min fractions\n    delta_frac = max_frac - min_frac\n\n    # Compute hue and saturation as fractions\n    if max_frac == r_frac:\n        hue_frac = (g_frac - b_frac) / delta_frac\n    elif max_frac == g_frac:\n        hue_frac = 2 + (b_frac - r_frac) / delta_frac\n    else:\n        hue_frac = 4 + (r_frac - g_frac) / delta_frac\n    hue_frac = hue_frac % 6\n\n    # Compute saturation and value as fractions\n    if delta_frac == 0:\n        saturation_frac = 0\n    elif max_frac == r_frac or max_frac == g_frac:\n        saturation_frac = delta_frac / (max_frac + delta_frac)\n    else:\n        saturation_frac = delta_frac / (2 - max_frac - delta_frac)\n\n    value_frac = max_frac\n\n    # Compute hue and saturation as integers\n    if hue_frac == 0:\n        h_int = 0\n    elif hue_frac == 1:\n        h_int = 360\n    else:\n        h_int = int(hue_frac * 60)\n\n    # Convert h_int to degrees and convert to float\n    h_frac = h_int / 360.0\n\n    return (h_frac, saturation_frac, value_frac)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the rgb color to hsv color.\n    \"\"\"\n    r_max = max(r, g, b)\n    r_min = min(r, g, b)\n    v = r_max\n    delta = r_max - r_min\n\n    if delta == 0:\n        h = 0\n    elif r_max == r:\n        h = (g - b) / delta\n    elif r_max == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    if h < 0:\n        h += 6\n\n    hsv = (h / 6, v / 255, v / 255)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h, s, v = 0, 0, max_val\n    \n    # calculate hue\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / (max_val - min_val)\n    elif max_val == g:\n        h = 2 + (b - r) / (max_val - min_val)\n    else:\n        h = 4 + (r - g) / (max_val - min_val)\n    \n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    # calculate saturation\n    s = (max_val - min_val) / max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red component of the color.\n        g (int): Green component of the color.\n        b (int): Blue component of the color.\n\n    Returns:\n        tuple: (hue, saturation, value) representing the hsv color.\n    \"\"\"\n    # Convert rgb to rgb (x, y, z)\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    x, y, z = max(r, g, b), min(r, g, b), (r + g + b) / 3.0\n\n    # Convert to hsv\n    if max(r, g, b) == min(r, g, b):\n        hue = 0  # achromatic\n    elif r == max(r, g, b):\n        hue = (g - b) / (max(g, b) - min(g, b)) % 6\n    elif g == max(r, g, b):\n        hue = (b - r) / (max(r, b) - min(r, b)) + 2\n    else:\n        hue = (r - g) / (max(g, r) - min(g, r)) + 4\n\n    hue = hue / 6.0  # scale to [0, 1]\n    if hue < 0:\n        hue += 1.0\n\n    if max(r, g, b) == 0:\n        saturation = 0  # grayscale\n    else:\n        saturation = (max(r, g, b) - min(r, g, b)) / max(r, g, b)\n\n    value = max(r, g, b)  # value is proportional to max component\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    \n    if max_val == min_val:\n        s = 0\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n    \n    if max_val == r:\n        h = (g - b) / delta + (g < b and 6 or 0)\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h / 6\n    \n    # Normalize the hue value\n    if h < 0:\n        h += 1\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert r,g,b to float values\n    r, g, b = map(float, (r, g, b))\n\n    # Convert r,g,b to float values between 0-1\n    r, g, b = map(lambda x: x / 255, (r, g, b))\n\n    # Calculate max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate hsv values\n    if max_val == min_val:\n        h, s, v = 0, 0, max_val\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n        v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # loop through the list\n    for num in lst:\n        # check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # calculate the product\n        product *= num\n\n    # return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_sum = 1\n    odd_sum = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_sum *= num\n        else:\n            odd_sum *= num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            result *= min(even_count, odd_count)\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= even_count * odd_count\n            break\n    \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    '''\n\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # Check if the even count is greater than or equal to odd count\n        if even_count >= odd_count:\n            # If yes, multiply the product by the current number\n            product *= num\n        else:\n            # If no, divide the current number by the product\n            product /= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n    product = even_sum * odd_sum\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of the first even and odd numbers.\n    If there are no even or odd numbers in the list, the function returns None.\n    '''\n\n    # initialize variables for even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # iterate through the list and count even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    \n    # check if there are any even or odd numbers in the list\n    if even_num == 0 or odd_num == 0:\n        return None\n    \n    # calculate the product of even and odd numbers\n    product = even_num * odd_num\n    \n    # return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            break\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list of strings\n    str_list = test_str.split(',')\n    # convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for item in test_str:\n        try:\n            int_tuple = int_tuple + (int(item),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # check if the string is valid or not\n    if not isinstance(test_str, str):\n        return \"Invalid string\"\n\n    # split the string into individual elements\n    split_str = test_str.split(',')\n\n    # check if the split string contains only valid integers\n    for elem in split_str:\n        if not elem.isdigit():\n            return \"Invalid string\"\n\n    # convert each string element to an integer and append it to the final list\n    int_list = []\n    for elem in split_str:\n        int_list.append(int(elem))\n\n    # create the final tuple\n    final_tuple = tuple(int_list)\n\n    return final_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    string_list = test_str.split(\",\")\n    \n    # Initialize an empty list for the integer tuples\n    int_list = []\n    \n    # Loop through each string in the list\n    for string in string_list:\n        # Convert the string to an integer and append to the integer list\n        int_list.append(int(string))\n    \n    # Convert the integer list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings\n    str_list = test_str.split(',')\n    # create an empty list to store the integer tuples\n    int_list = []\n    # loop through the list of strings and convert each string to an integer\n    for item in str_list:\n        int_list.append(int(item))\n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # convert tuple string to tuple\n    try:\n        test_tuple = tuple(test_str.split(','))\n    except ValueError:\n        print(\"Invalid tuple string\")\n        return None\n\n    # convert each element to integer\n    int_tuple = tuple(int(x.strip()) for x in test_tuple)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    string_list = test_str.split(',')\n    \n    # Initialize a new empty list to store the integer tuples\n    integer_list = []\n    \n    # Loop through the list of strings and append integers to the new list\n    for string in string_list:\n        integer = int(string.strip())\n        integer_list.append(integer)\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(integer_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ','\n    tuples_str = test_str.split(',')\n\n    # Convert each tuple string to a tuple of integers\n    int_tuples = tuple(map(int, tuples_str))\n\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip('()') # remove the parentheses and spaces\n    test_list = test_str.split(',') # split the string into a list of strings\n    int_list = []\n    for string in test_list:\n        int_list.append(int(string.strip())) # convert each string to an integer\n    return tuple(int_list) # return the integer tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into list of strings based on comma separator\n    lst_str = test_str.split(\",\")\n\n    # Create an empty list to store the converted integers\n    lst_int = []\n\n    # Convert each string in the list to integer and append to the list\n    for string in lst_str:\n        lst_int.append(int(string))\n\n    # Convert the list of integers into a tuple and return it\n    return tuple(lst_int)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect_right returns the index where to insert the element x in sorted list a\n    # The index returned by bisect_right function will be the smallest index i such that a[i] >= x\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return -1\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index - 1] < x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x-1)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif x > a[index]:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect_right function to find the insertion point\n    i = bisect.bisect_right(a, x)\n    \n    # If the value is already present, return the index of its rightmost occurrence\n    if i!= len(a) and a[i] == x:\n        return i\n    \n    # If the value is not present, return the index of the insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect_right(a, x) returns the index where x should be inserted to maintain the sorted order.\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function takes a string as input and returns True if it contains a string that starts with an 'a' followed by three 'b's.\n    '''\n    pattern = r'^a{1}b{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    result = pattern.search(text)\n    if result:\n        print(\"Match found at index\", result.start())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists into one\n    new_list = test_list + [test_str]\n    # convert the list into a tuple\n    new_tuple = tuple(new_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple and concatenate it with the string\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + test_str\n    \n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string using a single string\n    combined_string =''.join(test_list) +'' + test_str\n\n    # Split the combined string into a list of words\n    word_list = combined_string.split()\n\n    # Convert the list of words into a tuple\n    new_tuple = tuple(word_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # concatenate the two lists and convert it to a tuple\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                count += 1\n        if count % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n        elif i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            continue\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_count = 0\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n\n    return even_count == 0"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not any(nums[i:i+2][j] % 2 == 0 for j in range(2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count == nums[i]:\n                return True\n    return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for i in item:\n                flat_list.append(i)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a new list to store the items from the original tuple\n    new_list = []\n    # Loop through each item in the original tuple\n    for item in test_tup:\n        # Check if the item is a tuple\n        if isinstance(item, tuple):\n            # Recursively call the function to remove the nested tuple\n            remove_nested(item)\n        else:\n            # Append the item to the new list if it's not a tuple\n            new_list.append(item)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flattened_list = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            flattened_list.append(item)\n        else:\n            flattened_list += remove_nested(item)\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            for sub_elem in elem:\n                new_list.append(sub_elem)\n        else:\n            new_list.append(elem)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while len(test_tup) > 1:\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for sub_tup in test_tup:\n        for item in sub_tup:\n            flat_tup.append(item)\n    return flat_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list of lists as input and returns the total number of lists in the input.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters:\n    - arr: A sorted array of integers.\n    - x: An integer to be searched in the array.\n    This function returns the index of the last occurrence of x in the array, or -1 if x is not found.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    while i < len(arr) and arr[i]!= x:\n        i += 1\n    if i == len(arr):\n        return -1\n    return i - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return right if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and a target element x as input and returns the last index of the target element.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # search for x in arr using binary search\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1  # move left pointer to mid-1\n        elif arr[mid] < x:\n            left = mid + 1  # move right pointer to mid+1\n        else:\n            right = mid - 1  # move left pointer to mid-1\n    # if x is not found, return -1\n    return right if left > right else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize the left pointer and the right pointer to 0\n    left = 0\n    right = len(arr)-1\n\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # Calculate the middle index of the array\n        mid = (left + right) // 2\n\n        # If the element at the middle index is equal to x, return the middle index\n        if arr[mid] == x:\n            return mid\n\n        # If the element at the left index is less than x, move the left pointer to the right index\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the element at the right index is greater than x, move the right pointer to the left index\n        else:\n            right = mid - 1\n\n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last index of a given element in a sorted array.\n\n    Args:\n    arr (list): The sorted array to search in.\n    x (int): The element to find the last index of.\n\n    Returns:\n    int: The last index of the given element in the array or -1 if the element is not found in the array.\n\n    Examples:\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> last(arr, 3)\n    3\n    >>> last(arr, 6)\n    -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            # Check if the element is at the rightmost index.\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1  # Element not found in the array."
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # check if the array is empty or if x is not in the array\n    if len(arr) == 0 or x not in arr:\n        return -1\n    \n    # perform binary search to find the last occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # if the mid element is equal to x, then check the next element\n        if arr[mid] == x:\n            # if the next element is also equal to x, then move the left pointer\n            if mid < len(arr) - 1 and arr[mid + 1] == x:\n                left = mid + 1\n            # if the next element is not equal to x, then the last occurrence of x is at the mid index\n            else:\n                return mid\n        # if the mid element is greater than x, then it cannot be the last occurrence\n        elif arr[mid] > x:\n            right = mid - 1\n        # if the mid element is less than x, then it cannot be the last occurrence\n        else:\n            left = mid + 1\n            \n    # if the binary search doesn't find a last occurrence of x, then return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*?b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba(?P<anything>.*?)b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group('anything')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        print(result.group())\n    else:\n        print('No match found')"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[a-zA-Z0-9]*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?P<start>a)(?P<anything>.+)(?P=start)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('start'), match.group('anything'), match.group('start')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for value in dict.values():\n        sum_ += value\n    return sum_"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_of_odd_numbers = 0\n    for i in range(1, n+1, 2):\n        sum_of_odd_numbers += i\n    return sum_of_odd_numbers"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    odd_sum = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            odd_sum += l\n        l += 1\n    \n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n    \n    # iterate over the range of natural numbers\n    for i in range(1, n+1, 2):\n        # add the odd numbers to the total\n        total += i\n        # increment the count\n        count += 1\n        \n    # return the total sum of all odd numbers in the range\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(2, n+1, 2)])"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, representing the lower and upper limits of the range.\n    It calculates the sum of all odd natural numbers within this range and returns the result.\n    \"\"\"\n    sum_odd = 0\n    for i in range(l, r+1, 2):\n        sum_odd += i\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower bound of the range: \"))\n    r = int(input(\"Enter the upper bound of the range: \"))\n    \n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n            \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    if l % 2 == 0:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_ = 0\n    for i in range(l, r+1, 2):\n        sum_ += i\n    return sum_\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:  \n        total += i  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # convert the number to binary\n    binary_num = bin(n)[2:]\n\n    # pad the binary number with zeros until it reaches d bits long\n    while len(binary_num) < d:\n        binary_num = '0' + binary_num\n\n    # shift the binary number to the left by d bits and append it to the beginning\n    rotated_binary_num = binary_num[-d:] + binary_num[:-d]\n\n    # convert the rotated binary number back to an integer and return it\n    return int(rotated_binary_num, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary\n    binary = bin(n)[2:]\n\n    # pad the binary number with 0's to d bits\n    if len(binary) < d:\n        binary = '0'*(d-len(binary)) + binary\n\n    # rotate the binary number by d bits\n    rotated_binary = binary[-d:] + binary[:-d]\n\n    # convert the rotated binary number back to decimal\n    rotated_decimal = int(rotated_binary, 2)\n\n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask  # make sure the number is 32 bits long\n    d = d % 32  # make sure the rotation is within the range of 0 to 31\n    result = (n << d) | (n >> (32 - d))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    \n    d = d % 32  # To avoid circular rotation\n    \n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF  # Bitwise left shift and right shift"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary and take the last d bits\n    binary = bin(n)[-d:]\n    # convert the binary to decimal and multiply by 2^d\n    decimal = int(binary, 2) * (2**d)\n    # add the decimal to the original number\n    result = n + decimal\n    # return the result\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask # ensure the number is positive\n    d = d & 0x1F # ensure d is within range\n    n = (n << d) | (n >> (32 - d)) # rotate the number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # left shift by d bits\n    new_n = n << d\n    # right shift by (32 - d) bits\n    new_n |= n >> (32 - d)\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    bin_str = format(n, '032b')\n    # Remove the first d bits from the binary string\n    rotated_bin_str = bin_str[-d:] + bin_str[:-d]\n    # Convert the rotated binary string to decimal\n    rotated_int = int(rotated_bin_str, 2)\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF  # Mask to get only the first 32 bits of the number\n    shift = 32 - d  # Number of bits to shift\n\n    # Extract the bits that need to be shifted from the right\n    right_bits = n & mask >> shift\n\n    # Extract the bits that need to be shifted from the left\n    left_bits = n & mask << d\n\n    # Concatenate the left and right bits and return the result\n    return left_bits | right_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n    \n    # Remove the bits to rotate from the least significant bit\n    least_significant_bit = n & (1 << bits_to_rotate)\n    \n    # Shift the number to the right by the same amount\n    rotated_number = n >> bits_to_rotate\n    \n    # Insert the bits to rotate into the most significant bit\n    rotated_number |= least_significant_bit\n    \n    return rotated_number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regex to remove all whitespace characters\n    text = re.sub(r'\\s+','', text)\n    # use strip to remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all spaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading/trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, max(x, y, z)+1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x):\n        if y == i:\n            count += 1\n        if z == i:\n            count += 1\n        if count == 2:\n            break\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(1000):\n        if x == y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,x+1):\n        if i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x, y, z), min(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(1, x + 1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # If array is already sorted in reverse order, return 0\n    if sorted(arr[::-1]) == arr:\n        return 0\n    \n    # Initialize variables for left rotation and right rotation\n    left_rot_count = 0\n    right_rot_count = 0\n    \n    # While array is not sorted\n    while True:\n        # If array is already sorted after left rotation, return left rotation count\n        if arr == sorted(arr[:n//2], reverse=True):\n            return left_rot_count\n        \n        # If array is already sorted after right rotation, return right rotation count\n        if arr == sorted(arr[n//2:], reverse=True):\n            return right_rot_count\n        \n        # If array is already sorted after both left and right rotations, return min(left_rot_count, right_rot_count)\n        if arr == sorted(arr[n//2:], reverse=True)[::-1]:\n            return min(left_rot_count, right_rot_count)\n        \n        # Left rotation to sort array\n        arr = arr[n//2:] + arr[:n//2]\n        left_rot_count += 1\n        \n        # Right rotation to sort array\n        arr = arr[::-1] + arr[::-1]\n        right_rot_count += 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    # Initialize the variables to store the minimum and maximum elements of the array\n    min_element = arr[0]\n    max_element = arr[0]\n    # Iterate over the array and update the min and max elements\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] > max_element:\n            max_element = arr[i]\n    # If the maximum element is less than the minimum element, then the array is already sorted\n    if max_element < min_element:\n        return 0\n    # Initialize variables to store the count of rotations and the starting index of the rotation\n    count = 0\n    start = 0\n    # Iterate over the array and count the rotations\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n        else:\n            start = i + 1\n            break\n    # Return the count of rotations and the starting index of the rotation\n    return count, start"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the midpoint of the array\n    mid = n // 2\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # If the array is not sorted, perform a binary search to find the rotation count\n    else:\n        # Initialize the lower and upper bounds of the search range\n        low = mid\n        high = n\n        # Initialize the count to 0\n        count = 0\n        # Perform a binary search to find the rotation count\n        while low <= high:\n            mid = (low + high) // 2\n            if mid < n // 2:\n                # If the array is partially sorted, count the number of elements to the right of the midpoint\n                count += mid\n            else:\n                # If the array is fully sorted, count the number of elements to the left of the midpoint\n                count += n - mid\n            # Check if the midpoint element is greater than the pivot element\n            if arr[mid] > arr[n - 1]:\n                # If yes, update the lower bound of the search range\n                low = mid + 1\n            else:\n                # If no, update the upper bound of the search range\n                high = mid - 1\n        # Return the count of rotations required to generate the sorted array\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return n - i - 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is already sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # If the array is already sorted, then there is no rotation required\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    while n > 1:\n        if arr[n-1] < arr[0]:\n            count += 1\n        arr.rotate(-1)\n        n -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the smallest element in the array\n    min_elem = min(arr)\n    # Find the index of the smallest element in the array\n    index = arr.index(min_elem)\n    # Move the last element to its correct position\n    arr[index] = arr[n-1]\n    # Move the last n-1 elements to their correct positions\n    for i in range(n-2, -1, -1):\n        arr[i+1] = arr[i]\n    # Count the number of rotations required\n    count = 0\n    # Check if the first element is greater than or equal to the last element\n    if arr[0] >= arr[n-1]:\n        count += 1\n    # Check if the last element is greater than or equal to the first element\n    if arr[n-1] >= arr[0]:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        if j == n:\n            continue\n        k = j\n        while k < n and arr[k] > arr[i]:\n            k += 1\n        if k == n:\n            continue\n        count += n - j + k\n        arr[i], arr[j] = arr[j], arr[i]\n        arr[i], arr[k] = arr[k], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    while n > 1:\n        if arr[n-1] > arr[0]:\n            arr.reverse()\n            n = len(arr)\n            count += 1\n        else:\n            arr = arr[1:]\n            n -= 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    sqrt_n = math.sqrt(n)\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    a = n\n    while a*a > n:\n        a -= 1\n    return a*a == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the given number is a perfect square or not\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = int(math.sqrt(n))\n    return root**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if the number is positive\n    if n <= 0:\n        return False\n\n    # Check if the number is a perfect square\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = int(n**0.5)\n    return root * root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0 and is_prime(i):\n            n //= i\n        else:\n            i += 1\n    return i\n\ndef is_perfect_square(n):\n    if n <= 1:\n        return False\n    if n % 4 == 1:\n        return False\n    sqrt_n = int(n**0.5)\n    for i in range(5, sqrt_n + 1, 6):\n        if n % i == 0:\n            return False\n    return is_prime(sqrt_n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    def is_square(num):\n        \"\"\"\n        Helper function to check whether the given number is a perfect square or not.\n        \"\"\"\n        return num == int(num**0.5)**2\n\n    # Check if the given number is already a perfect square\n    if is_square(n):\n        return True\n\n    # Check if the given number is divisible by 4 or 6\n    if n % 4 == 0 or n % 6 == 0:\n        return False\n\n    # Check if the given number is divisible by 2, 3 or 5\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n\n    # Check if the given number is divisible by any number between 7 and sqrt(n)\n    for i in range(7, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If none of the above conditions are true, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if the number is greater than 1\n    if n <= 1:\n        return False\n\n    # calculate the square root using the formula sqrt(n) = x (1 +/- x/2)\n    x = 1\n    while x < n:\n        x = (x + n/x) / 2\n\n    # check if the square root is an integer\n    if x == int(x):\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of integers as input and returns True if the product of all numbers in the list is even,\n    False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    if len(arr) < 2:\n        return False\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    for i in arr:\n        product *= i\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        sub_sum = 0\n        for j in range(len(lists[i])):\n            sub_sum += lists[i][j]\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_list = [lists[i][j] for j in range(len(lists[i]))]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = 0\n    max_list = []\n\n    # Iterate through each list in the input list\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        total = sum(lst)\n\n        # If the sum is greater than the current maximum sum, update the variables\n        if total > max_sum:\n            max_sum = total\n            max_list = lst\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a list to store the sums of each sublist\n    sums = []\n\n    # Loop through each sublist in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        # Add the sum to the sums list\n        sums.append(sublist_sum)\n\n    # Find the maximum sum in the sums list\n    max_sum = max(sums)\n\n    # Loop through each sublist in the list of lists and find the ones whose sum equals the maximum sum\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        # If the sum of the sublist equals the maximum sum, return the sublist\n        if sublist_sum == max_sum:\n            return sublist\n\n    # If no sublist has a sum equal to the maximum sum, return None\n    return None"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n    current_list = []\n    max_list = []\n\n    # Iterate through each list in the outer list\n    for lst in lists:\n        # Add each element in the list to the current sum\n        for num in lst:\n            current_sum += num\n        # If the current sum is greater than the maximum sum, update the maximum sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n        # Reset the current sum and the current list\n        current_sum = 0\n        current_list = []\n\n    # Return the list in the outer list that has the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables for the current max sum and the current max sum list\n    current_max = float('-inf')\n    current_max_list = []\n\n    # Iterate over each list in the input list\n    for lst in lists:\n        # Initialize variables for the sum of elements in the current list\n        lst_sum = 0\n\n        # Iterate over each element in the current list\n        for num in lst:\n            # Add the element to the sum\n            lst_sum += num\n\n        # If the sum of elements is greater than the current max sum, update the max sum and max sum list\n        if lst_sum > current_max:\n            current_max = lst_sum\n            current_max_list = lst\n\n    # Return the max sum list\n    return current_max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize max_sum and result as None\n    max_sum = None\n    result = None\n    \n    # iterate through each sublist in the list of lists\n    for sublist in lists:\n        # calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        \n        # check if the current sublist sum is greater than max_sum\n        if max_sum is None or sublist_sum > max_sum:\n            # update max_sum and result\n            max_sum = sublist_sum\n            result = sublist\n    \n    # return the result\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and the index of the maximum sum element\n    max_sum = float('-inf')\n    max_sum_index = -1\n    \n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize variables to keep track of the current sum and the current element index\n        current_sum = 0\n        current_element_index = 0\n        \n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current sum\n            current_sum += lists[i][j]\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum and index\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = i\n        \n        # If the current sum is the same as the maximum sum, check if the current element is greater than the element at the maximum sum index\n        if current_sum == max_sum:\n            # If the current element is greater than the element at the maximum sum index, update the maximum sum and index\n            if lists[i][current_element_index] > lists[max_sum_index][max_sum_index]:\n                max_sum = lists[i][current_element_index]\n                max_sum_index = i\n    \n    # Create a list of the elements of the maximum sum list\n    max_sum_list = lists[max_sum_index]\n    \n    # Return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables to store the current max sum and the list that max sum came from\n    max_sum = 0\n    max_list = []\n\n    # Loop through each sublist in the input list of lists\n    for sublist in lists:\n\n        # Compute the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the current max sum, update max sum and list\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    # Return the list that had the highest sum\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    start = 0\n    end = 0\n\n    # Loop through the string and find the maximum run of uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i + 1].isupper():\n                max_run = max(max_run, i - start + 1)\n                start = i\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    last_uppercase = False\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if not last_uppercase:\n                current_run += 1\n                if current_run > max_run:\n                    max_run = current_run\n            else:\n                current_run = 1\n                last_uppercase = True\n        else:\n            last_uppercase = False\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    start = 0\n    end = 0\n    max_run = 0\n    current_run = 0\n    \n    # loop through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # if it is, increment the current run\n            current_run += 1\n        else:\n            # if it isn't, reset the current run\n            current_run = 0\n        \n        # if the current run is greater than the max run, update the max run and start position\n        if current_run > max_run:\n            max_run = current_run\n            start = i - max_run + 1\n        \n        # if the current run is less than or equal to the max run, update the end position\n        elif current_run <= max_run:\n            end = i\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    # create a list of uppercase characters\n    uppercase_chars = [char for char in test_str if char.isupper()]\n\n    # find the maximum length of run of uppercase characters\n    max_run = 1\n    for i in range(len(uppercase_chars)):\n        if i == 0 or uppercase_chars[i]!= uppercase_chars[i-1]:\n            max_run += 1\n        else:\n            max_run = 1\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    max_length = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            max_run = max_run + 1\n            if max_run > max_length:\n                max_length = max_run\n        else:\n            max_run = 0\n        i = i + 1\n    return max_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_start = -1\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if run_start == -1:\n                run_start = i\n            else:\n                run_end = i\n                if run_end - run_start + 1 > max_run:\n                    max_run = run_end - run_start + 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    run_len = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > run_len:\n                run_len = count\n            count = 0\n    if count > run_len:\n        run_len = count\n    return run_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables for counting uppercase characters and maximum run\n    uppercase_count = 1\n    max_run = 1\n    \n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the previous character was not uppercase\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            # Increment the count and check if it is greater than the current maximum run\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n        # If the current character is not uppercase, reset the count\n        else:\n            # Reset the count to 1 and check if it is greater than the current maximum run\n            uppercase_count = 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            upper_count += 1\n            current_run += 1\n        else:\n            if current_run > upper_count:\n                upper_count = current_run\n            current_run = 0\n    if current_run > upper_count:\n        upper_count = current_run\n    return upper_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    start_index = 0\n    end_index = 0\n    max_run = 0\n    current_run = 0\n\n    # Loop through the string\n    for i in range(1, len(test_str)):\n\n        # Check if current character is uppercase\n        if test_str[i].isupper():\n\n            # If yes, update current_run\n            current_run += 1\n\n            # If current_run is greater than max_run, update max_run and start_index\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - max_run\n\n            # If current_run is equal to max_run, update end_index\n            if current_run == max_run:\n                end_index = i\n\n        # If current character is not uppercase, reset current_run\n        else:\n            current_run = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run, test_str[start_index:end_index+1]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate over the list of numbers and return the first odd number\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it will return None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup.count(K) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the first element of the tuple is equal to the K value\n    if test_tup[0] == K:\n        return True\n    # Check if the second element of the tuple is equal to the K value\n    elif test_tup[1] == K:\n        return True\n    # Check if the third element of the tuple is equal to the K value\n    elif test_tup[2] == K:\n        return True\n    # If the K value is not found in the tuple, return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)-K):\n            if all(test_tup[i+j] == test_tup[i] for j in range(K)):\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[K] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for tup in test_tup:\n        if tup[1] == K:\n            k_count += 1\n    if k_count == len(test_tup):\n        print(\"The tuples contain the k\")\n    else:\n        print(\"The tuples don't contain the k\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(num in test_tup for num in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length.')\n    # iterate through each element of the second tuple and check if it is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            raise ValueError('The element in the second tuple should be smaller than or equal to its corresponding element in the first tuple.')\n    # if all elements in the second tuple are smaller than their corresponding elements in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"{test_tup2[i]} is not smaller than or equal to {test_tup1[i]}\")\n            return False\n    print(\"All elements in the second tuple are smaller than or equal to the corresponding element in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]